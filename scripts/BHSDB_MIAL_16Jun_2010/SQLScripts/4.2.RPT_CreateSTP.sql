-- ##########################################################################
-- Release#:    R2.1
-- Release On:  23 Dec 2008
-- Filename:    4.2.RPT_CreateSTP.sql
-- Description: SQL Scripts of creating Reporting related StoredProcedures.
-- Description: SQL Scripts of creating StoredProcedures.
--    StoredProcedures to be created by this script:
--    01. [stp_RPT_TIMEDISTRIBUTION] - For USADEMO project 
--	  02  [stp_RPT_TIMEDISTRIBUTION1] - For Calgary project
--    03. [stp_MDS_TOPFAULT]
--    04. [stp_MDS_TOPEQUIPMENT]
--    05. [stp_RPT_ATR]
--    06. [stp_RPT_FLIGHTSUMMARY]
--    07. [stp_RPT_INDIVIDUALFLIGHTSUMMARY]
--    08. [stp_RPT_LOADBALANCING]
--    09. [stp_RPT_FLIGHTALLOCATION]
--    10. [stp_RPT_BSM]
--    11. [stp_RPT_BAGTRACEBYFLIGHT]
--    12. [stp_RPT_BAGTRACEBYBSM]
--    13. [stp_RPT_BAGTRACEBYGID]
--    14. [stp_RPT_BAGTRACE]
--    15. [stp_RPT_INDIVIDUALFLIGHTSUMMARYSECOND]
--    16. [stp_RPT_FUNCTIONALLOCATION]
--    17. [stp_RPT_GETDATETIMEFORMAT]
--	  18. [stp_RPT_BAGTRACEBYFLIGHT_LP]
--    19. [stp_RPT_FLIGHTRECONSOLIDATION]
--    20. [stp_RPT_MESTIMEDISTRIBUTION]
--    21. [stp_RPT_HBSTHROUGHPUT_CLEAREDBAG]
--    22. [stp_RPT_HBSTHROUGHPUT_DIVERTED2L3L5]
--    23. [stp_RPT_HBSTHROUGHPUT_MAXHOURLYBAGRATE]
--    24. [stp_RPT_HBSTHROUGHPUT_STRAYLOSTBAG]
--   
--
--
-- Histories:
--    R1.0 - Released on 05 Nov 2008.
--
--
-- Remarks:
--
--
-- ##########################################################################




PRINT 'INFO: STEP6 - Create BHS Solution Database Stored Procedures for Reporting'
PRINT 'INFO: .'
PRINT 'INFO: .'
PRINT 'INFO: .'
GO
USE [BHSDB]
GO


-- ****** Object:  StoredProcedure [dbo].[stp_RPT_TIMEDISTRIBUTION]    Script Date: 10/08/2007 13:18:36 ******
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER ON
--GO
--IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_TIMEDISTRIBUTION]') 
--	AND type in (N'P', N'PC'))
--BEGIN
--	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_TIMEDISTRIBUTION]...'
--	DROP PROCEDURE [dbo].[stp_RPT_TIMEDISTRIBUTION]
--END
--GO
--PRINT 'INFO: Creating StoredProcedure [stp_RPT_TIMEDISTRIBUTION...'
--GO
--CREATE PROCEDURE [dbo].[stp_RPT_TIMEDISTRIBUTION] 
--	@DTFrom [datetime],
--	@DTTo [datetime],
--    @IntervalMin [int]   
--AS
--BEGIN     
--    DECLARE @start_point datetime
--    DECLARE @end_point datetime
--    DECLARE @temp_from datetime
--    DECLARe @temp_to datetime
     
--    DECLARE @interval int
--    DECLARe @interval_minute int
--    DECLARE @tempcount int
--    DECLARe @totalcount int
--    DECLARE @temptable TABLE (id  int, start_time datetime, end_time  datetime, tot_num int)  
     
--    IF @IntervalMin < 10
--    BEGIN
--		SET @interval = 10
--    END
--    ELSE
--    BEGIN
--		SET @interval =  @IntervalMin
--    END 
     
--    SET @start_point = convert(datetime,RIGHT(STR(DATEPART(dd,@DTFrom)),2) +'/' + RIGHT(STR(DATEPART(mm,@DTFrom)),2) + '/' + RIGHT(STR(DATEPART(yyyy,@DTFrom)),4)+ ' '+RIGHT('00'+LTRIM(STR(DATEPART(hh,@DTFrom))),2)+':00:00.000' , 103)  
--    SET @end_point =  convert(datetime,RIGHT(STR(DATEPART(dd,@DTTo)),2) +'/' + RIGHT(STR(DATEPART(mm,@DTTo)),2) + '/' + RIGHT(STR(DATEPART(yyyy,@DTTo)),4)+ ' '+RIGHT('00'+LTRIM(STR(DATEPART(hh,@DTTo))),2)+':00:00.000' , 103)

--    IF datediff(d, @start_point, @end_point) > 365 
--    BEGIN
--        SET @end_point =  DATEADD(d,365,@start_point)
--    END
     
--    SET @interval_minute = datediff(mi,@start_point,@end_point)
--    SET @totalcount = convert (int ,@interval_minute/@interval)    
     
--    SET @tempcount = 0;
     
--    WHILE (@tempcount < @totalcount)
--    BEGIN
--		SET @temp_from = DATEADD(mi,@tempcount * @interval, @start_point)
--		SET @temp_to = DATEADD(mi,@interval, @temp_from)
--		INSERT INTO @temptable (id,start_time,end_time,tot_num) VALUES (@tempcount + 1, @temp_from,@temp_to,0)
--		SET @tempcount = @tempcount + 1
--    END 
     
--    DECLARE @ID int
--    DECLARE @No int
--    DECLARE @Count int 
--    DECLARE @TIME_STAMP datetime

--    DECLARE GID_Cursor CURSOR FOR 
--	SELECT time_stamp FROM GID_USED WHERE (TIME_STAMP >= @start_point AND TIME_STAMP < @end_point) ORDER BY TIME_STAMP
--    OPEN GID_Cursor

--    FETCH NEXT FROM GID_Cursor INTO @TIME_STAMP;
--    WHILE @@FETCH_STATUS = 0
--    BEGIN
--		SET @ID = 0
--		SET @Count = 0
--		SELECT TOP (1) @ID =id,  @Count=tot_num FROM @temptable WHERE (@TIME_STAMP >= start_time) AND (@TIME_STAMP <= end_time)
--		IF @ID <> 0
--		BEGIN
--			UPDATE @temptable SET tot_num = @Count + 1 WHERE id = @ID
--		END

-- 		FETCH NEXT FROM GID_Cursor INTO @TIME_STAMP;
--    END
--	CLOSE GID_Cursor;
--	DEALLOCATE GID_Cursor;

--    SELECT * FROM @temptable
--END
--GO


-- ****** Object:  StoredProcedure [dbo].[stp_RPT_TIMEDISTRIBUTION]    Script Date: 10/08/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_TIMEDISTRIBUTION]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_TIMEDISTRIBUTION]...'
	DROP PROCEDURE [dbo].[stp_RPT_TIMEDISTRIBUTION]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_TIMEDISTRIBUTION...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_TIMEDISTRIBUTION] 
	@DTFrom [datetime],
	@DTTo [datetime],
    @IntervalMin [int]   
AS
BEGIN     
		DECLARE @Counter int
		SET @Counter = 1
		DECLARE @TimeStart DATETIME
		DECLARE @TimeEnd DATETIME
	    DECLARE @interval int
		DECLARE @start_point datetime
		DECLARE @end_point datetime

		IF @IntervalMin < 10
		BEGIN
			SET @interval = 10
		END
		ELSE
		BEGIN
			SET @interval =  @IntervalMin
		END 
		
        SET @start_point = convert(datetime,RIGHT(STR(DATEPART(dd,@DTFrom)),2) +'/' + RIGHT(STR(DATEPART(mm,@DTFrom)),2) + '/' + RIGHT(STR(DATEPART(yyyy,@DTFrom)),4)+ ' '+RIGHT('00'+LTRIM(STR(DATEPART(hh,@DTFrom))),2)+':00:00.000' , 103)  
		SET @end_point =  convert(datetime,RIGHT(STR(DATEPART(dd,@DTTo)),2) +'/' + RIGHT(STR(DATEPART(mm,@DTTo)),2) + '/' + RIGHT(STR(DATEPART(yyyy,@DTTo)),4)+ ' '+RIGHT('00'+LTRIM(STR(DATEPART(hh,@DTTo))),2)+':00:00.000' , 103)

		IF datediff(d, @start_point, @end_point) > 365 
		BEGIN
			SET @end_point =  DATEADD(d,365,@start_point)
		END

		DECLARE @TotalCount INT
		SET @TotalCount = CONVERT (INT ,(DATEDIFF(mi, @start_point, @end_point)/@interval))

		DECLARE @temptable TABLE (start_time datetime,end_time datetime,Interval int,tot_num INT)  

		DECLARE @sum INT

		WHILE (@Counter <= @TotalCount)
		BEGIN
			SET @TimeEnd = DATEADD(mi,@Counter * @interval, @start_point)
			SET @TimeStart = DATEADD(mi,-1*@interval,@TimeEnd)
			SET @sum = (SELECT count(*)	FROM GID_USED WHERE (TIME_STAMP BETWEEN @TimeStart AND  @TimeEnd ) AND (BAG_TYPE = 'NB'))

			INSERT INTO @temptable (start_time,end_time,Interval,tot_num ) values (@TimeStart,@TimeEnd,(@Counter *@interval),@sum)

			SET @Counter  = (@Counter + 1)
		End

		SELECT * FROM @temptable
END
GO


----****** Object:  StoredProcedure [dbo].[stp_RPT_TIMEDISTRIBUTION1]    Script Date: 10/08/2007 13:18:36 ******
--SET ANSI_NULLS ON
--GO
--SET QUOTED_IDENTIFIER ON
--GO
--IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_TIMEDISTRIBUTION1]') 
--	AND type in (N'P', N'PC'))
--BEGIN
--	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_TIMEDISTRIBUTION1]...'
--	DROP PROCEDURE [dbo].[stp_RPT_TIMEDISTRIBUTION1]
--END
--GO
--PRINT 'INFO: Creating StoredProcedure [stp_RPT_TIMEDISTRIBUTION1]...'
--GO
--CREATE PROCEDURE [dbo].[stp_RPT_TIMEDISTRIBUTION1] 
--	@DTFrom [datetime],
--	@DTTo [datetime],
--    @IntervalMin [int],
--    @Location [varchar](10) 
--AS
--BEGIN     
--		DECLARE @Counter int
--		SET @Counter = 1
--		DECLARE @TimeStart DATETIME
--		DECLARE @TimeEnd DATETIME
--	    DECLARE @interval int
--		DECLARE @start_point datetime
--		DECLARE @end_point datetime

--		IF @IntervalMin < 10
--		BEGIN
--			SET @interval = 10
--		END
--		ELSE
--		BEGIN
--			SET @interval =  @IntervalMin
--		END 
		
--        SET @start_point = convert(datetime,RIGHT(STR(DATEPART(dd,@DTFrom)),2) +'/' + RIGHT(STR(DATEPART(mm,@DTFrom)),2) + '/' + RIGHT(STR(DATEPART(yyyy,@DTFrom)),4)+ ' '+RIGHT('00'+LTRIM(STR(DATEPART(hh,@DTFrom))),2)+':00:00.000' , 103)  
--		SET @end_point =  convert(datetime,RIGHT(STR(DATEPART(dd,@DTTo)),2) +'/' + RIGHT(STR(DATEPART(mm,@DTTo)),2) + '/' + RIGHT(STR(DATEPART(yyyy,@DTTo)),4)+ ' '+RIGHT('00'+LTRIM(STR(DATEPART(hh,@DTTo))),2)+':00:00.000' , 103)

--		IF datediff(d, @start_point, @end_point) > 365 
--		BEGIN
--			SET @end_point =  DATEADD(d,365,@start_point)
--		END

--		DECLARE @TotalCount INT
--		SET @TotalCount = CONVERT (INT ,(DATEDIFF(mi, @start_point, @end_point)/@interval))

--		DECLARE @temptable TABLE (start_time datetime,end_time datetime,Interval int,tot_num INT)  

--		DECLARE @sum INT
		
--		If @Location = 'MU5' 
--		Begin
--			WHILE (@Counter <= @TotalCount)
--			BEGIN
--				SET @TimeEnd = DATEADD(mi,@Counter * @interval, @start_point)
--				SET @TimeStart = DATEADD(mi,-1*@interval,@TimeEnd)
--				SET @sum = (SELECT count(*)	FROM ITEM_PROCEEDED WHERE (TIME_STAMP BETWEEN @TimeStart AND  @TimeEnd ) AND LOCATION In ('S5A-10D','S5A-11P','S5A-11D') AND PROCEED_LOCATION IN ('S5A-12','S5B-01')) 
--				INSERT INTO @temptable (start_time,end_time,Interval,tot_num ) values (@TimeStart,@TimeEnd,(@Counter *@interval),@sum)

--				SET @Counter  = (@Counter + 1)
--			End
--		End
		
--		If @Location = 'MU6' 
--		Begin
--			WHILE (@Counter <= @TotalCount)
--			BEGIN
--				SET @TimeEnd = DATEADD(mi,@Counter * @interval, @start_point)
--				SET @TimeStart = DATEADD(mi,-1*@interval,@TimeEnd)
--				SET @sum = (SELECT count(*)	FROM ITEM_PROCEEDED WHERE (TIME_STAMP BETWEEN @TimeStart AND  @TimeEnd ) AND LOCATION In ('S5A-10D','S5A-11P','S5A-11D') AND PROCEED_LOCATION IN ('S6A-01','S6B-01')) 
--				INSERT INTO @temptable (start_time,end_time,Interval,tot_num ) values (@TimeStart,@TimeEnd,(@Counter *@interval),@sum)

--				SET @Counter  = (@Counter + 1)
--			End
--		End
		
--		If @Location = 'MES' 
--		Begin
--			WHILE (@Counter <= @TotalCount)
--			BEGIN
--				SET @TimeEnd = DATEADD(mi,@Counter * @interval, @start_point)
--				SET @TimeStart = DATEADD(mi,-1*@interval,@TimeEnd)
--				SET @sum = (SELECT count(*)	FROM ITEM_PROCEEDED WHERE (TIME_STAMP BETWEEN @TimeStart AND  @TimeEnd ) AND LOCATION In ('S5A-10D','S5A-11P','S5A-11D') AND PROCEED_LOCATION IN ('ME-01')) 
--				INSERT INTO @temptable (start_time,end_time,Interval,tot_num ) values (@TimeStart,@TimeEnd,(@Counter *@interval),@sum)

--				SET @Counter  = (@Counter + 1)
--			End
--		End
		
--		If @Location = 'OS-03' or @Location = 'TB2-02'  or @Location = 'TB3-02' 
--		Begin
--			WHILE (@Counter <= @TotalCount)
--			BEGIN
--				SET @TimeEnd = DATEADD(mi,@Counter * @interval, @start_point)
--				SET @TimeStart = DATEADD(mi,-1*@interval,@TimeEnd)
--				SET @sum = (SELECT SUM(DIFFERENT) FROM MDS_BAG_COUNT WHERE (TIME_STAMP BETWEEN @TimeStart AND  @TimeEnd ) AND LOCATION = @Location) 
--				INSERT INTO @temptable (start_time,end_time,Interval,tot_num ) values (@TimeStart,@TimeEnd,(@Counter *@interval),@sum)

--				SET @Counter  = (@Counter + 1)
--			End
--		End

--		SELECT * FROM @temptable
--END
--GO


-- ****** Object:  StoredProcedure [dbo].[stp_MDS_TOPFAULT]    Script Date: 10/08/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MDS_TOPFAULT]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_MDS_TOPFAULT]...'
	DROP PROCEDURE [dbo].[stp_MDS_TOPFAULT]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_MDS_TOPFAULT]...'
GO
CREATE PROCEDURE [dbo].[stp_MDS_TOPFAULT] 
	@RANK [int],
	@DTFrom [datetime],
    @DTTo [datetime]   
AS
BEGIN
        SELECT TOP (@RANK) COUNT(*) AS OCCURRENCE, FAULT_DESCRIPTION
        FROM MDS_ALARMS, REPORT_FAULT
        WHERE  (ALM_ALMSTATUS = 'CFN') AND (ALM_UNCERTAIN = 0) AND (ALM_ALMAREA2 <> 'AA_UNAV') AND 
			   (ALM_ALMAREA2 <> 'AA_ESTP') AND (ALM_ALMAREA2 <> 'AA_ISOF') AND
			   (ALM_STARTTIME BETWEEN @DTFrom AND @DTTo) AND 
               (MDS_ALARMS.ALM_ALMAREA2=REPORT_FAULT.FAULT_NAME) AND
               (REPORT_FAULT.FAULT_TYPE='ALARM') AND (REPORT_FAULT.FAULT_USED='TRUE')
        GROUP BY FAULT_DESCRIPTION
        ORDER BY OCCURRENCE DESC
END
GO



-- ****** Object:  StoredProcedure [dbo].[stp_MDS_TOPEQUIPMENT]    Script Date: 10/08/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MDS_TOPEQUIPMENT]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_MDS_TOPEQUIPMENT]...'
	DROP PROCEDURE [dbo].[stp_MDS_TOPEQUIPMENT]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_MDS_TOPEQUIPMENT]...'
GO
CREATE PROCEDURE [dbo].[stp_MDS_TOPEQUIPMENT] 
	@RANK [int],
	@DTFrom [datetime],
	@DTTo [datetime]   
AS
BEGIN
		SELECT TOP (@RANK) COUNT(*) AS OCCURRENCE, ALM_ALMEXTFLD2
		FROM MDS_ALARMS
		WHERE  (ALM_ALMSTATUS = 'CFN') AND (ALM_UNCERTAIN = 0) 
			   AND (ALM_ALMAREA2 <> 'AA_UNAV') AND (ALM_ALMAREA2 <> 'AA_ESTP') AND (ALM_ALMAREA2 <> 'AA_ISOF')
			   AND (ALM_STARTTIME BETWEEN @DTFrom AND @DTTo)
		GROUP BY ALM_ALMEXTFLD2
		ORDER BY OCCURRENCE DESC
END
GO



















-- ****** Object:  StoredProcedure [dbo].[stp_RPT_ATR]    Script Date: 10/27/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_ATR]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_ATR]...'
	DROP PROCEDURE [dbo].[stp_RPT_ATR]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_ATR]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_ATR] 
		@DTFrom [datetime],
		@DTTo [datetime] 
AS
BEGIN

	DECLARE @SR INT --Single Read
	DECLARE @MR INT	--Multiple License Plate
	DECLARE @NR INT --No Read
	DECLARE @V INT --Valid License Plate

	-- STATUS_TYPE -> "01" - Single Read, "02" - Multiple License Plate, "03" - No Read 
	SET @SR=(SELECT COUNT(LICENSE_PLATE1) AS SINGLE_READ FROM dbo.ITEM_SCANNED 
		WHERE STATUS_TYPE='01' AND (TIME_STAMP BETWEEN @DTFrom AND @DTTo))
	SET @MR=(SELECT COUNT(LICENSE_PLATE1) AS MULTI_READ FROM dbo.ITEM_SCANNED 
		WHERE STATUS_TYPE='02' AND (TIME_STAMP BETWEEN @DTFrom AND @DTTo))
	SET @NR=(SELECT COUNT(LICENSE_PLATE1) AS NO_READ FROM dbo.ITEM_SCANNED 
		WHERE STATUS_TYPE='03' AND (TIME_STAMP BETWEEN @DTFrom AND @DTTo))

	SET @V=(SELECT COUNT(bag.LICENSE_PLATE) AS VALID FROM dbo.BAG_SORTING AS bag 
		INNER JOIN ITEM_SCANNED AS scan ON bag.LICENSE_PLATE=scan.LICENSE_PLATE1
		WHERE SCAN.STATUS_TYPE='01' AND (SCAN.TIME_STAMP BETWEEN @DTFrom AND @DTTo)) 
		

	--SELECT CAST(@SR AS VARCHAR(3))+','+CAST(@MR AS VARCHAR(3))+','+CAST(@NR AS VARCHAR(3))
	SELECT (@SR+@MR+@NR) AS BAG_SEEN, (@SR+@MR) AS READ_,@NR AS NO_READ,@V AS VALID,@MR AS CONFLICT,(@SR-@V) AS NO_MATCH
END
GO



-- ****** Object:  StoredProcedure [dbo].[stp_RPT_FLIGHTSUMMARY]    Script Date: 10/27/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_FLIGHTSUMMARY]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_FLIGHTSUMMARY]...'
	DROP PROCEDURE [dbo].[stp_RPT_FLIGHTSUMMARY]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_FLIGHTSUMMARY]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_FLIGHTSUMMARY] 
		@SDO [datetime]
AS
BEGIN


	DECLARE @TEMPTABLE TABLE (AIRLINE VARCHAR(3),FLIGHT VARCHAR(5),SDO DATETIME,LP VARCHAR(10),REASON VARCHAR(2))

	INSERT INTO @TEMPTABLE (AIRLINE,FLIGHT,SDO,LP,REASON)
		SELECT BAG.AIRLINE,BAG.FLIGHT_NUMBER,BAG.SDO,bag.License_plate,IRD.REASON
			FROM BAG_SORTING AS BAG INNER JOIN ITEM_SCANNED AS SCAN ON BAG.LICENSE_PLATE = SCAN.LICENSE_PLATE1 OR BAG.LICENSE_PLATE = SCAN.LICENSE_PLATE2
			INNER JOIN ITEM_REDIRECT AS IRD ON BAG.LICENSE_PLATE = IRD.LICENSE_PLATE AND SCAN.GID = IRD.GID
			WHERE (SCAN.TIME_STAMP BETWEEN DATEADD(d, - 2, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 2, (CONVERT(NVARCHAR(10), @SDO, 111))))
				AND (IRD.TIME_STAMP BETWEEN DATEADD(d, - 2, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 2, (CONVERT(NVARCHAR(10), @SDO, 111)))) 
				AND (BAG.SDO =(CONVERT(NVARCHAR(10), @SDO, 111)))
			GROUP BY BAG.AIRLINE,BAG.FLIGHT_NUMBER,BAG.SDO,bag.License_plate, IRD.REASON

	DECLARE @TEMPTABLE1 TABLE (AIRLINE VARCHAR(3),FLIGHT VARCHAR(5),SDO DATETIME,COUNT INT,ONTIME INT, LATE INT,TCOUNT INT,ACOUNT INT)

	DECLARE @A VARCHAR(3) --Airline
	DECLARE @F VARCHAR(5) --Flight
	DECLARE @S DATETIME	--SDO
	--DECLARE @COUNT INT 

	DECLARE AFS_Cursor CURSOR FOR 
			SELECT DISTINCT AIRLINE,FLIGHT,SDO FROM @TEMPTABLE
		OPEN AFS_Cursor

			FETCH NEXT FROM AFS_Cursor INTO @A,@F,@S;
			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @RCOUNT INT  -- Late Count
				DECLARE @CCOUNT INT  --Total Count In System
				DECLARE @ONTIME INT  --On Time Count
				DECLARE @TCOUNT INT  --Total Count In BSM Received
				DECLARE @ACOUNT INT  --Total absent bag count

				SET @RCOUNT=(SELECT COUNT(REASON) FROM @TEMPTABLE WHERE AIRLINE+FLIGHT = @A+@F AND SDO = @S AND REASON ='15')
				SET @CCOUNT=(SELECT count(distinct LP) FROM @TEMPTABLE) --WHERE AIRLINE+FLIGHT = @A+@F AND SDO = @S)			
				SET @ONTIME = (@CCOUNT - @RCOUNT)
				SET @TCOUNT = (SELECT COUNT(DISTINCT LICENSE_PLATE) FROM BAG_SORTING WHERE AIRLINE+ FLIGHT_NUMBER= @A+@F AND SDO = @S)
				SET @ACOUNT = (@TCOUNT - @CCOUNT)
				

				INSERT INTO @TEMPTABLE1 (AIRLINE ,FLIGHT ,SDO ,COUNT,ONTIME ,LATE,TCOUNT,ACOUNT) VALUES (@A,@F,@S,@CCOUNT,@ONTIME,@RCOUNT,@TCOUNT,@ACOUNT)
				FETCH NEXT FROM AFS_Cursor INTO @A,@F,@S;
			END
	CLOSE AFS_Cursor;
	DEALLOCATE AFS_Cursor;

	SELECT * FROM @TEMPTABLE1
END
GO



-- ****** Object:  StoredProcedure [dbo].[stp_RPT_INDIVIDUALFLIGHTSUMMARY]    Script Date: 10/27/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_INDIVIDUALFLIGHTSUMMARY]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_INDIVIDUALFLIGHTSUMMARY]...'
	DROP PROCEDURE [dbo].[stp_RPT_INDIVIDUALFLIGHTSUMMARY]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_INDIVIDUALFLIGHTSUMMARY]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_INDIVIDUALFLIGHTSUMMARY] 
		@Airline [varchar](8),
		@SDO [DATETIME]
AS
BEGIN
	DECLARE @TEMPTABLE TABLE (LP VARCHAR(10),AIRLINE VARCHAR(3),FLIGHT VARCHAR(5),SDO DATETIME,COUNT INT,REASON VARCHAR(2),
		CLOSE_OUT DATETIME,EDO DATETIME,ETO  VARCHAR(4), ADO DATETIME,ATO  VARCHAR(4), IDO DATETIME,ITO  VARCHAR(4),
		 ALLOC_CLOSE_OFFSET VARCHAR(5),ALLOC_CLOSE_RELATED VARCHAR(4))

	INSERT INTO @TEMPTABLE (LP,AIRLINE,FLIGHT,SDO,COUNT,REASON,CLOSE_OUT,EDO,ETO,ADO,ATO,IDO,ITO,ALLOC_CLOSE_OFFSET, ALLOC_CLOSE_RELATED)
		SELECT BAG.LICENSE_PLATE,BAG.AIRLINE,BAG.FLIGHT_NUMBER,BAG.SDO,COUNT(1) AS BAG_NO,IRD.REASON,
			 CASE WHEN ALLOC_CLOSE_RELATED = 'STD' THEN
				 DATEADD(MINUTE,CAST(SUBSTRING(FPA.ALLOC_CLOSE_OFFSET,1,1) + CAST((CAST(SUBSTRING(FPA.ALLOC_CLOSE_OFFSET,2,2) AS INT) * 60) 
										+  CAST(SUBSTRING(FPA.ALLOC_CLOSE_OFFSET,4,2) AS INT) AS VARCHAR(10))AS INT),
										CONVERT(DATETIME, CONVERT(NVARCHAR(30),FPA.SDO, 111)+' '+ SUBSTRING(FPA.STO,1,2)+':'+SUBSTRING(FPA.STO,3,2)+':00')) 
			 ELSE
				 CASE WHEN ALLOC_CLOSE_RELATED = 'ETD' THEN
					 DATEADD(MINUTE,CAST(SUBSTRING(FPA.ALLOC_CLOSE_OFFSET,1,1) + CAST((CAST(SUBSTRING(FPA.ALLOC_CLOSE_OFFSET,2,2) AS INT) * 60) 
											+  CAST(SUBSTRING(FPA.ALLOC_CLOSE_OFFSET,4,2) AS INT) AS VARCHAR(10))AS INT),
											CONVERT(DATETIME, CONVERT(NVARCHAR(30),FPA.EDO, 111)+' '+ SUBSTRING(FPA.ETO,1,2)+':'+SUBSTRING(FPA.ETO,3,2)+':00')) 
				 ELSE
					 CASE WHEN ALLOC_CLOSE_RELATED = 'ITD' THEN
						 DATEADD(MINUTE,CAST(SUBSTRING(FPA.ALLOC_CLOSE_OFFSET,1,1) + CAST((CAST(SUBSTRING(FPA.ALLOC_CLOSE_OFFSET,2,2) AS INT) * 60) 
												+  CAST(SUBSTRING(FPA.ALLOC_CLOSE_OFFSET,4,2) AS INT) AS VARCHAR(10))AS INT),
												CONVERT(DATETIME, CONVERT(NVARCHAR(30),FPA.IDO, 111)+' '+ SUBSTRING(FPA.ITO,1,2)+':'+SUBSTRING(FPA.ITO,3,2)+':00')) 
					 ELSE
						 DATEADD(MINUTE,CAST(SUBSTRING(FPA.ALLOC_CLOSE_OFFSET,1,1) + CAST((CAST(SUBSTRING(FPA.ALLOC_CLOSE_OFFSET,2,2) AS INT) * 60) 
												+  CAST(SUBSTRING(FPA.ALLOC_CLOSE_OFFSET,4,2) AS INT) AS VARCHAR(10))AS INT),
												CONVERT(DATETIME, CONVERT(NVARCHAR(30),FPA.ADO, 111)+' '+ SUBSTRING(FPA.ATO,1,2)+':'+SUBSTRING(FPA.ATO,3,2)+':00')) 
					 END
				 END
			 END AS CLOSE_OUT, 
			 FPA.EDO,FPA.ETO,FPA.ADO,FPA.ATO,FPA.IDO,FPA.ITO,FPA.ALLOC_CLOSE_OFFSET,FPA.ALLOC_CLOSE_RELATED
			FROM BAG_SORTING AS BAG INNER JOIN ITEM_SCANNED AS SCAN ON BAG.LICENSE_PLATE = SCAN.LICENSE_PLATE1 OR BAG.LICENSE_PLATE = SCAN.LICENSE_PLATE2
			INNER JOIN ITEM_REDIRECT AS IRD ON BAG.LICENSE_PLATE = IRD.LICENSE_PLATE AND SCAN.GID = IRD.GID
			INNER JOIN FLIGHT_PLAN_ALLOC AS FPA ON FPA.AIRLINE+FPA.FLIGHT_NUMBER = BAG.AIRLINE+BAG.FLIGHT_NUMBER AND FPA.SDO = BAG.SDO 
			WHERE (SCAN.TIME_STAMP BETWEEN DATEADD(d, - 2, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 2, (CONVERT(NVARCHAR(10), @SDO, 111))))  
				AND (IRD.TIME_STAMP BETWEEN DATEADD(d, - 2, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 2, (CONVERT(NVARCHAR(10), @SDO, 111)))) 
				AND (BAG.SDO = (CONVERT(NVARCHAR(10), @SDO, 111)))
				AND IRD.LOCATION1 IN (SELECT DESTINATION FROM dbo.DESTINATIONS) AND BAG.AIRLINE+BAG.FLIGHT_NUMBER = @Airline
			GROUP BY BAG.AIRLINE,BAG.FLIGHT_NUMBER,BAG.SDO, IRD.REASON,FPA.SDO,FPA.STO,
			 FPA.EDO,FPA.ETO,FPA.ADO,FPA.ATO,FPA.IDO,FPA.ITO,FPA.ALLOC_CLOSE_OFFSET,FPA.ALLOC_CLOSE_RELATED,BAG.LICENSE_PLATE


--SELECT * FROM @TEMPTABLE
-- ADDING BAG IN SYSTEM TO @TEMPTABLE1
	DECLARE @TEMPTABLE1 TABLE (AIRLINE VARCHAR(3),FLIGHT VARCHAR(5),SDO DATETIME,COUNT INT,ONTIME INT, LATE INT,CLOSE_OUT DATETIME,INSYSTEM INT,
								TCOUNT INT,ACOUNT INT)

	DECLARE @A VARCHAR(3)  --Airline
	DECLARE @F VARCHAR(5)  --Flight
	DECLARE @S DATETIME  --SDO
	--DECLARE @COUNT INT  

	DECLARE AFS_Cursor CURSOR FOR 
			SELECT DISTINCT AIRLINE,FLIGHT,SDO FROM @TEMPTABLE
		OPEN AFS_Cursor

			FETCH NEXT FROM AFS_Cursor INTO @A,@F,@S;
			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @RCOUNT INT  --Total of Late Count
				DECLARE @CCOUNT INT  --Total of Count
				DECLARE @ONTIME INT  --Total of On Time Count
				DECLARE @TCOUNT INT  --Total BSM Recieved
				DECLARE @ACOUNT INT  --Total Bags Absent
				DECLARE @CLOSE_OUT DATETIME
				SET @RCOUNT=(SELECT COUNT(REASON) FROM @TEMPTABLE WHERE AIRLINE+FLIGHT = @A+@F AND SDO = @S AND REASON ='15')
				SET @CCOUNT=(SELECT COUNT(DISTINCT LP) FROM @TEMPTABLE WHERE AIRLINE+FLIGHT = @A+@F AND SDO = @S)			
				SET @ONTIME = (@CCOUNT - @RCOUNT)
				SET @TCOUNT = (SELECT COUNT(LICENSE_PLATE) FROM BAG_SORTING WHERE AIRLINE+FLIGHT_NUMBER =@A+@F AND SDO = @S)
				set @ACOUNT =(@TCOUNT - @CCOUNT)
				SET @CLOSE_OUT = (SELECT MAX(CLOSE_OUT) FROM @TEMPTABLE WHERE AIRLINE+FLIGHT = @A+@F AND SDO = @S)		

				--Insert data into @tempable1
				INSERT INTO @TEMPTABLE1 (AIRLINE ,FLIGHT ,SDO ,COUNT,ONTIME ,LATE,CLOSE_OUT,TCOUNT,ACOUNT) VALUES (@A,@F,@S,@CCOUNT,@ONTIME,@RCOUNT,@CLOSE_OUT,@TCOUNT,@ACOUNT)
				
				FETCH NEXT FROM AFS_Cursor INTO @A,@F,@S;
			END
	CLOSE AFS_Cursor;
	DEALLOCATE AFS_Cursor;


	--Calculate the Total Bags In The System 
	DECLARE @BAGSINSYS INT
	SET @BAGSINSYS = (((
		SELECT COUNT(DISTINCT(SCAN.LICENSE_PLATE1)) FROM ITEM_SCANNED AS SCAN INNER JOIN BAG_SORTING AS BAG ON (SCAN.LICENSE_PLATE1 = BAG.LICENSE_PLATE OR SCAN.LICENSE_PLATE2 = BAG.LICENSE_PLATE)
		WHERE (
		SCAN.TIME_STAMP BETWEEN DATEADD(d, - 2, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 2, (CONVERT(NVARCHAR(10), @SDO, 111)))) AND (BAG.AIRLINE+BAG.FLIGHT_NUMBER) = @Airline))
		-	(SELECT ONTIME FROM @TEMPTABLE1 WHERE (AIRLINE+FLIGHT) = @Airline))
			--Update the table @TEMPTABLE1
			UPDATE @TEMPTABLE1 SET INSYSTEM = @BAGSINSYS WHERE (AIRLINE+FLIGHT) = @Airline	

	SELECT * FROM @TEMPTABLE1 WHERE (AIRLINE+FLIGHT) = @Airline
END
GO




-- ****** Object:  StoredProcedure [dbo].[stp_RPT_LOADBALANCING]    Script Date: 11/04/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_LOADBALANCING]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_LOADBALANCING]...'
	DROP PROCEDURE [dbo].[stp_RPT_LOADBALANCING]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_LOADBALANCING]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_LOADBALANCING] 
		@UnitType [varchar](8)
AS
BEGIN
	DECLARE @temptable TABLE (Interval INT)
	DECLARE @COUNTER INT
	DECLARE @LOOP INT
	
	SET @LOOP = 0
	IF @UnitType = 'Hour'
	BEGIN
		SET @COUNTER = 24
	END
	ELSE IF  @UnitType = 'Min'
	BEGIN
		SET @COUNTER = 60
	END
	
	WHILE @LOOP < @COUNTER
	BEGIN
		INSERT INTO @temptable (Interval) VALUES (@LOOP + 1)
		SET @LOOP = (@LOOP + 1)
	END
	SELECT * FROM @temptable
END
GO


-- ****** Object:  StoredProcedure [dbo].[stp_RPT_FLIGHTALLOCATION]    Script Date: 11/06/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_FLIGHTALLOCATION]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_FLIGHTALLOCATION]...'
	DROP PROCEDURE [dbo].[stp_RPT_FLIGHTALLOCATION]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_FLIGHTALLOCATION]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_FLIGHTALLOCATION] 
-- CHANGED BY KENT
-- REASON: REPORT SPEC REQUIRES DATE FROM AND DATE TO AS PARAMETERS
	@DTFrom [datetime],
	@DTTo [datetime]
AS
BEGIN
	--ADDED FINAL_DEST AND HANDLER
	
	DECLARE @TEMPTABLE TABLE (DESTINATION VARCHAR(3), HANDLER VARCHAR(1), AIRLINE VARCHAR(3),FLIGHT VARCHAR(5),SDO DATETIME,STO VARCHAR(5),WEEKDAY CHAR(1),
							TRAVEL_CLASS  VARCHAR(1),ALLOC_OPEN_RELATED VARCHAR(4),ALLOC_CLOSE_RELATED VARCHAR(4),
							OPEN_SDO DATETIME,CLOSE_SDO DATETIME,OPEN_EDO DATETIME,CLOSE_EDO DATETIME,
							OPEN_ADO DATETIME,CLOSE_ADO DATETIME,OPEN_IDO DATETIME,CLOSE_IDO DATETIME,
							DISCHARGE VARCHAR(10),OPEN_OUT DATETIME, CLOSE_OUT DATETIME)


	INSERT INTO @TEMPTABLE (DESTINATION, HANDLER, AIRLINE,FLIGHT,SDO,STO,WEEKDAY,TRAVEL_CLASS,ALLOC_OPEN_RELATED,ALLOC_CLOSE_RELATED,
							OPEN_SDO,CLOSE_SDO,OPEN_EDO,CLOSE_EDO,OPEN_ADO,CLOSE_ADO,OPEN_IDO,CLOSE_IDO,OPEN_OUT,CLOSE_OUT,DISCHARGE)
		SELECT     FINAL_DEST, HANDLER,FLIGHT_PLAN_ALLOC.AIRLINE, FLIGHT_PLAN_ALLOC.FLIGHT_NUMBER,FLIGHT_PLAN_ALLOC.SDO, SUBSTRING(FLIGHT_PLAN_ALLOC.STO, 1, 2) + ':' + SUBSTRING(FLIGHT_PLAN_ALLOC.STO, 3, 2) AS STO, FLIGHT_PLAN_ALLOC.WEEKDAY, 
				   TRAVEL_CLASS,ALLOC_OPEN_RELATED,ALLOC_CLOSE_RELATED,
				   CONVERT(NVARCHAR(20), DATEADD(MINUTE, CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 1, 1) 
									  + CAST(CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 2, 2) AS INT) * 60 + CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 4, 2) AS INT) 
									  AS VARCHAR(10)) AS INT), CONVERT(DATETIME, CONVERT(NVARCHAR(30), FLIGHT_PLAN_ALLOC.SDO, 111) + ' ' + SUBSTRING(FLIGHT_PLAN_ALLOC.STO, 1, 2) + ':' + SUBSTRING(FLIGHT_PLAN_ALLOC.STO, 
									  3, 2) + ':00')), 120) AS OPEN_SDO,
				   CONVERT(NVARCHAR(20), DATEADD(MINUTE, CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 1) 
									  + CAST(CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 2, 2) AS INT) * 60 + CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 4, 2) AS INT) 
									  AS VARCHAR(10)) AS INT), CONVERT(DATETIME, CONVERT(NVARCHAR(30), FLIGHT_PLAN_ALLOC.SDO, 111) + ' ' + SUBSTRING(FLIGHT_PLAN_ALLOC.STO, 1, 2) + ':' + SUBSTRING(FLIGHT_PLAN_ALLOC.STO, 
									  3, 2) + ':00')), 120) AS CLOSE_SDO,
				   CONVERT(NVARCHAR(20), DATEADD(MINUTE, CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 1, 1) 
									  + CAST(CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 2, 2) AS INT) * 60 + CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 4, 2) AS INT) 
									  AS VARCHAR(10)) AS INT), CONVERT(DATETIME, CONVERT(NVARCHAR(30), FLIGHT_PLAN_ALLOC.EDO, 111) + ' ' + SUBSTRING(FLIGHT_PLAN_ALLOC.ETO, 1, 2) + ':' + SUBSTRING(FLIGHT_PLAN_ALLOC.ETO, 
									  3, 2) + ':00')), 120) AS OPEN_EDO,
				   CONVERT(NVARCHAR(20), DATEADD(MINUTE, CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 1) 
									  + CAST(CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 2, 2) AS INT) * 60 + CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 4, 2) AS INT) 
									  AS VARCHAR(10)) AS INT), CONVERT(DATETIME, CONVERT(NVARCHAR(30), FLIGHT_PLAN_ALLOC.EDO, 111) + ' ' + SUBSTRING(FLIGHT_PLAN_ALLOC.ETO, 1, 2) + ':' + SUBSTRING(FLIGHT_PLAN_ALLOC.ETO, 
									  3, 2) + ':00')), 120) AS CLOSE_EDO,
				   CONVERT(NVARCHAR(20), DATEADD(MINUTE, CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 1, 1) 
									  + CAST(CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 2, 2) AS INT) * 60 + CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 4, 2) AS INT) 
									  AS VARCHAR(10)) AS INT), CONVERT(DATETIME, CONVERT(NVARCHAR(30), FLIGHT_PLAN_ALLOC.ADO, 111) + ' ' + SUBSTRING(FLIGHT_PLAN_ALLOC.ATO, 1, 2) + ':' + SUBSTRING(FLIGHT_PLAN_ALLOC.ATO, 
									  3, 2) + ':00')), 120) AS OPEN_ADO,
				   CONVERT(NVARCHAR(20), DATEADD(MINUTE, CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 1) 
									  + CAST(CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 2, 2) AS INT) * 60 + CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 4, 2) AS INT) 
									  AS VARCHAR(10)) AS INT), CONVERT(DATETIME, CONVERT(NVARCHAR(30), FLIGHT_PLAN_ALLOC.ADO, 111) + ' ' + SUBSTRING(FLIGHT_PLAN_ALLOC.ATO, 1, 2) + ':' + SUBSTRING(FLIGHT_PLAN_ALLOC.ATO, 
									  3, 2) + ':00')), 120) AS CLOSE_ADO,
				   CONVERT(NVARCHAR(20), DATEADD(MINUTE, CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 1, 1) 
									  + CAST(CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 2, 2) AS INT) * 60 + CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 4, 2) AS INT) 
									  AS VARCHAR(10)) AS INT), CONVERT(DATETIME, CONVERT(NVARCHAR(30), FLIGHT_PLAN_ALLOC.IDO, 111) + ' ' + SUBSTRING(FLIGHT_PLAN_ALLOC.ITO, 1, 2) + ':' + SUBSTRING(FLIGHT_PLAN_ALLOC.ITO, 
									  3, 2) + ':00')), 120) AS OPEN_IDO,
				   CONVERT(NVARCHAR(20), DATEADD(MINUTE, CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 1) 
									  + CAST(CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 2, 2) AS INT) * 60 + CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 4, 2) AS INT) 
									  AS VARCHAR(10)) AS INT), CONVERT(DATETIME, CONVERT(NVARCHAR(30), FLIGHT_PLAN_ALLOC.IDO, 111) + ' ' + SUBSTRING(FLIGHT_PLAN_ALLOC.ITO, 1, 2) + ':' + SUBSTRING(FLIGHT_PLAN_ALLOC.ITO, 
									  3, 2) + ':00')), 120) AS CLOSE_IDO, 
					CASE WHEN ALLOC_OPEN_RELATED = 'STD' THEN
					   CONVERT(NVARCHAR(20), DATEADD(MINUTE, CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 1, 1) 
										  + CAST(CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 2, 2) AS INT) * 60 + CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 4, 2) AS INT) 
										  AS VARCHAR(10)) AS INT), CONVERT(DATETIME, CONVERT(NVARCHAR(30), FLIGHT_PLAN_ALLOC.SDO, 111) + ' ' + SUBSTRING(FLIGHT_PLAN_ALLOC.STO, 1, 2) + ':' + SUBSTRING(FLIGHT_PLAN_ALLOC.STO, 
										  3, 2) + ':00')), 120)
					ELSE
						CASE WHEN ALLOC_OPEN_RELATED = 'ATD' THEN
						   CONVERT(NVARCHAR(20), DATEADD(MINUTE, CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 1, 1) 
											  + CAST(CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 2, 2) AS INT) * 60 + CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 4, 2) AS INT) 
											  AS VARCHAR(10)) AS INT), CONVERT(DATETIME, CONVERT(NVARCHAR(30), FLIGHT_PLAN_ALLOC.ADO, 111) + ' ' + SUBSTRING(FLIGHT_PLAN_ALLOC.ATO, 1, 2) + ':' + SUBSTRING(FLIGHT_PLAN_ALLOC.ATO, 
											  3, 2) + ':00')), 120)
						ELSE
							CASE WHEN ALLOC_OPEN_RELATED = 'ITD' THEN
							   CONVERT(NVARCHAR(20), DATEADD(MINUTE, CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 1, 1) 
												  + CAST(CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 2, 2) AS INT) * 60 + CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 4, 2) AS INT) 
												  AS VARCHAR(10)) AS INT), CONVERT(DATETIME, CONVERT(NVARCHAR(30), FLIGHT_PLAN_ALLOC.IDO, 111) + ' ' + SUBSTRING(FLIGHT_PLAN_ALLOC.ITO, 1, 2) + ':' + SUBSTRING(FLIGHT_PLAN_ALLOC.ITO, 
												  3, 2) + ':00')), 120)
							ELSE
							   CONVERT(NVARCHAR(20), DATEADD(MINUTE, CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 1, 1) 
												  + CAST(CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 2, 2) AS INT) * 60 + CAST(SUBSTRING(ALLOC_OPEN_OFFSET, 4, 2) AS INT) 
												  AS VARCHAR(10)) AS INT), CONVERT(DATETIME, CONVERT(NVARCHAR(30), FLIGHT_PLAN_ALLOC.EDO, 111) + ' ' + SUBSTRING(FLIGHT_PLAN_ALLOC.ETO, 1, 2) + ':' + SUBSTRING(FLIGHT_PLAN_ALLOC.ETO, 
												  3, 2) + ':00')), 120) 
							END
						END
					END AS OPEN_OUT,
					CASE WHEN ALLOC_CLOSE_RELATED = 'STD' THEN
					   CONVERT(NVARCHAR(20), DATEADD(MINUTE, CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 1) 
										  + CAST(CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 2, 2) AS INT) * 60 + CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 4, 2) AS INT) 
										  AS VARCHAR(10)) AS INT), CONVERT(DATETIME, CONVERT(NVARCHAR(30), FLIGHT_PLAN_ALLOC.SDO, 111) + ' ' + SUBSTRING(FLIGHT_PLAN_ALLOC.STO, 1, 2) + ':' + SUBSTRING(FLIGHT_PLAN_ALLOC.STO, 
										  3, 2) + ':00')), 120) 
					ELSE
						CASE WHEN ALLOC_CLOSE_RELATED = 'ATD' THEN
						   CONVERT(NVARCHAR(20), DATEADD(MINUTE, CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 1) 
											  + CAST(CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 2, 2) AS INT) * 60 + CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 4, 2) AS INT) 
											  AS VARCHAR(10)) AS INT), CONVERT(DATETIME, CONVERT(NVARCHAR(30), FLIGHT_PLAN_ALLOC.ADO, 111) + ' ' + SUBSTRING(FLIGHT_PLAN_ALLOC.ATO, 1, 2) + ':' + SUBSTRING(FLIGHT_PLAN_ALLOC.ATO, 
											  3, 2) + ':00')), 120) 
						ELSE
							CASE WHEN ALLOC_CLOSE_RELATED = 'ITD' THEN
							   CONVERT(NVARCHAR(20), DATEADD(MINUTE, CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 1) 
												  + CAST(CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 2, 2) AS INT) * 60 + CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 4, 2) AS INT) 
												  AS VARCHAR(10)) AS INT), CONVERT(DATETIME, CONVERT(NVARCHAR(30), FLIGHT_PLAN_ALLOC.IDO, 111) + ' ' + SUBSTRING(FLIGHT_PLAN_ALLOC.ITO, 1, 2) + ':' + SUBSTRING(FLIGHT_PLAN_ALLOC.ITO, 
												  3, 2) + ':00')), 120)
							ELSE
							   CONVERT(NVARCHAR(20), DATEADD(MINUTE, CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 1) 
												  + CAST(CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 2, 2) AS INT) * 60 + CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 4, 2) AS INT) 
												  AS VARCHAR(10)) AS INT), CONVERT(DATETIME, CONVERT(NVARCHAR(30), FLIGHT_PLAN_ALLOC.EDO, 111) + ' ' + SUBSTRING(FLIGHT_PLAN_ALLOC.ETO, 1, 2) + ':' + SUBSTRING(FLIGHT_PLAN_ALLOC.ETO, 
												  3, 2) + ':00')), 120) 
							END
						END
					END AS CLOSE_OUT ,RESOURCE
		FROM         FLIGHT_PLAN_ALLOC, FLIGHT_PLAN_SORTING
		WHERE FLIGHT_PLAN_ALLOC.AIRLINE = FLIGHT_PLAN_SORTING.AIRLINE and
		FLIGHT_PLAN_ALLOC.FLIGHT_NUMBER = FLIGHT_PLAN_SORTING.FLIGHT_NUMBER and
		FLIGHT_PLAN_ALLOC.SDO = FLIGHT_PLAN_SORTING.SDO 
		ORDER BY FLIGHT_PLAN_ALLOC.AIRLINE,FLIGHT_NUMBER,SDO,STO,FLIGHT_PLAN_ALLOC.WEEKDAY,TRAVEL_CLASS,OPEN_OUT,CLOSE_OUT,RESOURCE,
		ALLOC_OPEN_OFFSET,ALLOC_OPEN_RELATED,ALLOC_CLOSE_OFFSET,ALLOC_CLOSE_RELATED

	SELECT * FROM @TEMPTABLE WHERE OPEN_OUT between @DTFrom and @DTto 
		ORDER BY AIRLINE,FLIGHT,SDO,STO,WEEKDAY,TRAVEL_CLASS,OPEN_OUT,CLOSE_OUT,DISCHARGE
END
GO



-- ****** Object:  StoredProcedure [dbo].[stp_RPT_BSM]    Script Date: 11/07/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_BSM]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_BSM]...'
	DROP PROCEDURE [dbo].[stp_RPT_BSM]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_BSM]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_BSM] 
		@Airline VARCHAR(8),		
		@SDO [datetime]
AS
BEGIN
		--Insert all BSM into @temptable
		DECLARE @temptable TABLE (LICENSE_PLATE VARCHAR(10),GID VARCHAR(10), PASSENGER_NAME VARCHAR(60), AIRLINE VARCHAR(3), FLIGHT VArchar(5),
			SCAN_TIME_STAMP DATETIME, SCANNER_ID VARCHAR(4),BAG_TIME_STAMP DATETIME,REASON VARCHAR(2))

		INSERT INTO @temptable (LICENSE_PLATE,PASSENGER_NAME,AIRLINE,FLIGHT,BAG_TIME_STAMP)
			SELECT     LICENSE_PLATE, CASE WHEN NO_PASSENGER_SAME_SURNAME = 0 THEN '' ELSE LTRIM(CAST(NO_PASSENGER_SAME_SURNAME AS VARCHAR(2))) END + SURNAME + ' ' + GIVEN_NAME + ' ' + OTHERS_NAME AS NAME, AIRLINE , FLIGHT_NUMBER AS FLIGHT, 
					   TIME_STAMP AS BAG_TIME_STAMP
			FROM         BAG_SORTING 
			WHERE     ((AIRLINE + FLIGHT_NUMBER) IN (@Airline)) AND 
				(SDO = CONVERT(NVARCHAR(10), @SDO, 111))  
			GROUP BY LICENSE_PLATE, CASE WHEN NO_PASSENGER_SAME_SURNAME = 0 THEN '' ELSE LTRIM(CAST(NO_PASSENGER_SAME_SURNAME AS VARCHAR(2))) END + SURNAME + ' ' + GIVEN_NAME + ' ' + OTHERS_NAME, AIRLINE, FLIGHT_NUMBER, TIME_STAMP 


		--Update all the BSM into @temptable like scan time_stamp, scan_id and redirect reason
		DECLARE @LP VARCHAR(10)
		DECLARE LP_Cursor CURSOR FOR 
			SELECT LICENSE_PLATE  FROM @temptable
			OPEN LP_Cursor

				FETCH NEXT FROM LP_Cursor INTO @LP;
				WHILE @@FETCH_STATUS = 0
				BEGIN
					DECLARE @GID VARCHAR(10)
					DECLARE @SCAN_TIME DATETIME
					DECLARE @SCAN_ID VARCHAR(4)
					

					SET @SCAN_TIME = (SELECT MAX(TIME_STAMP) FROM ITEM_SCANNED WHERE LICENSE_PLATE1 = @LP OR LICENSE_PLATE2 = @LP AND GID = @GID AND
						(TIME_STAMP BETWEEN DATEADD(d, - 2, CONVERT(NVARCHAR(10), @SDO, 111)) AND DATEADD(d, 2, CONVERT(NVARCHAR(10), @SDO, 111))))

					SET @GID = (SELECT     DISTINCT SCAN.GID
								FROM       ITEM_SCANNED AS SCAN INNER JOIN
													  ITEM_REDIRECT AS IRD ON IRD.GID = SCAN.GID AND IRD.LICENSE_PLATE = SCAN.LICENSE_PLATE1 OR IRD.LICENSE_PLATE = SCAN.LICENSE_PLATE2
								WHERE     IRD.LICENSE_PLATE = @LP AND SCAN.TIME_STAMP=@SCAN_TIME AND
										  (SCAN.TIME_STAMP BETWEEN DATEADD(d, - 2, CONVERT(NVARCHAR(10), @SDO, 111)) AND DATEADD(d, 2, CONVERT(NVARCHAR(10), @SDO, 111))) AND 
										  (IRD.TIME_STAMP BETWEEN DATEADD(d, - 2, CONVERT(NVARCHAR(10), @SDO, 111)) AND DATEADD(d, 2, CONVERT(NVARCHAR(10), @SDO, 111))))

					SET @SCAN_ID = (SELECT DISTINCT SCANNER_ID FROM ITEM_SCANNED WHERE LICENSE_PLATE1 = @LP OR LICENSE_PLATE2 = @LP AND GID = @GID AND
						(TIME_STAMP BETWEEN DATEADD(d, - 2, CONVERT(NVARCHAR(10), @SDO, 111)) AND DATEADD(d, 2, CONVERT(NVARCHAR(10), @SDO, 111)))
						AND TIME_STAMP=@SCAN_TIME)

 					UPDATE @temptable SET SCAN_TIME_STAMP = @SCAN_TIME, SCANNER_ID=@SCAN_ID,GID=@GID
						WHERE LICENSE_PLATE = @LP

					UPDATE @temptable SET REASON = (SELECT TOP 1 REASON FROM ITEM_REDIRECT WHERE LICENSE_PLATE = @LP AND GID = @GID AND
						(TIME_STAMP BETWEEN DATEADD(d, - 2, CONVERT(NVARCHAR(10), @SDO, 111)) AND DATEADD(d, 2, CONVERT(NVARCHAR(10), @SDO, 111))) ORDER BY TIME_STAMP DESC)
						WHERE LICENSE_PLATE = @LP --AND REASON = '15'

 					FETCH NEXT FROM LP_Cursor INTO @LP;
				END
		CLOSE LP_Cursor;
		DEALLOCATE LP_Cursor;

		SELECT * FROM @temptable
END
GO


-- ****** Object:  StoredProcedure [dbo].[stp_RPT_BAGTRACEBYFLIGHT]    Script Date: 11/07/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_BAGTRACEBYFLIGHT]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_BAGTRACEBYFLIGHT]...'
	DROP PROCEDURE [dbo].[stp_RPT_BAGTRACEBYFLIGHT]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_BAGTRACEBYFLIGHT]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_BAGTRACEBYFLIGHT] 
		@Airline VARCHAR(8),		
		@SDO [datetime]
AS
BEGIN
		SELECT LICENSE_PLATE, TIME_STAMP AS TIME1, 'BSM recieved - Passenger Name = ' + 
		CASE WHEN NO_PASSENGER_SAME_SURNAME = 0 THEN '' ELSE LTRIM(CAST(NO_PASSENGER_SAME_SURNAME AS VARCHAR(2))) END 
			+ SURNAME + ' ' + GIVEN_NAME + ' ' + OTHERS_NAME +
			CASE WHEN TRAVEL_CLASS IS NULL THEN '.' ELSE ', Travel Class = ' + TRAVEL_CLASS + '.' END as DESCRIPTION 
			FROM BAG_SORTING WHERE AIRLINE+FLIGHT_NUMBER = @Airline AND SDO = (CONVERT(NVARCHAR(10), @SDO, 111))
		UNION					
		SELECT SCAN.LICENSE_PLATE1 AS LICENSE_PLATE, GID.TIME_STAMP AS TIME1, 
			'GID '+ GID.GID + ' generated at ' + GID.LOCATION + ' as ' + CASE WHEN BAG_TYPE ='NB' THEN ' Normal Bag.' ELSE ' Stray Bag.' END as DESCRIPTION  
			FROM  ITEM_SCANNED AS SCAN INNER JOIN GID_USED AS GID ON SCAN.GID = GID.GID INNER JOIN BAG_SORTING AS BAG ON BAG.LICENSE_PLATE = SCAN.LICENSE_PLATE1 
			WHERE (GID.TIME_STAMP BETWEEN DATEADD(d, - 2, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 2, (CONVERT(NVARCHAR(10), @SDO, 111)))) 
			AND (SCAN.TIME_STAMP BETWEEN DATEADD(d, - 2, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 2, (CONVERT(NVARCHAR(10), @SDO, 111)))) 
			AND BAG.AIRLINE+BAG.FLIGHT_NUMBER = @Airline AND BAG.SDO = (CONVERT(NVARCHAR(10), @SDO, 111))
		UNION
		SELECT SCAN.LICENSE_PLATE2 AS LICENSE_PLATE, GID.TIME_STAMP AS TIME1, 
			'GID '+ GID.GID + ' generated at ' + GID.LOCATION + ' as ' + CASE WHEN BAG_TYPE ='NB' THEN ' Normal Bag.' ELSE ' Stray Bag.' END as DESCRIPTION  
			FROM  ITEM_SCANNED AS SCAN INNER JOIN GID_USED AS GID ON SCAN.GID = GID.GID INNER JOIN BAG_SORTING AS BAG ON BAG.LICENSE_PLATE = SCAN.LICENSE_PLATE2
			WHERE (GID.TIME_STAMP BETWEEN DATEADD(d, - 2, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 2, (CONVERT(NVARCHAR(10), @SDO, 111)))) 
			AND (SCAN.TIME_STAMP BETWEEN DATEADD(d, - 2, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 2, (CONVERT(NVARCHAR(10), @SDO, 111)))) 			
			AND BAG.AIRLINE+BAG.FLIGHT_NUMBER = @Airline AND BAG.SDO = (CONVERT(NVARCHAR(10), @SDO, 111))
		UNION
		SELECT SCR.LICENSE_PLATE, SCR.TIME_STAMP AS TIME1, 'HBS screening result: Level '
			+ SCR.SCREEN_LEVEL + '-' + SCR.RESULT_TYPE + '.' AS DESCRIPTION FROM ITEM_SCREENED AS SCR INNER JOIN BAG_SORTING AS BAG ON BAG.LICENSE_PLATE = SCR.LICENSE_PLATE
			WHERE (SCR.TIME_STAMP BETWEEN DATEADD(d, - 2, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 2, (CONVERT(NVARCHAR(10), @SDO, 111)))) 
			AND BAG.AIRLINE+BAG.FLIGHT_NUMBER = @Airline AND BAG.SDO = (CONVERT(NVARCHAR(10), @SDO, 111))
		UNION
		SELECT SCAN.LICENSE_PLATE1 AS LICENSE_PLATE , SCAN.TIME_STAMP AS TIME1, 
			'Bag scanned at ' + SCAN.SCANNER_ID + ' with status of "' + TYPES.DESCRIPTION + CASE WHEN SCAN.STATUS_TYPE = '02' THEN ' (' + SCAN.LICENSE_PLATE1 + ',' +  SCAN.LICENSE_PLATE2 + ')"' ELSE '"' END + '.' as DESCRIPTION FROM ITEM_SCANNED AS SCAN INNER JOIN 
			ITEM_SCAN_STATUS_TYPES AS TYPES ON SCAN.STATUS_TYPE = TYPES.TYPE INNER JOIN BAG_SORTING AS BAG ON BAG.LICENSE_PLATE = SCAN.LICENSE_PLATE1
			WHERE (SCAN.TIME_STAMP BETWEEN DATEADD(d, - 2, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 2, (CONVERT(NVARCHAR(10), @SDO, 111)))) 
			AND BAG.AIRLINE+BAG.FLIGHT_NUMBER = @Airline AND BAG.SDO = (CONVERT(NVARCHAR(10), @SDO, 111))
		UNION
		SELECT SCAN.LICENSE_PLATE2 AS LICENSE_PLATE , SCAN.TIME_STAMP AS TIME1,
			'Bag scanned at ' + SCAN.SCANNER_ID + ' with status of "' + TYPES.DESCRIPTION + CASE WHEN SCAN.STATUS_TYPE = '02' THEN ' (' + SCAN.LICENSE_PLATE1 + ',' +  SCAN.LICENSE_PLATE2 + ')"' ELSE '"' END	+ '.' as DESCRIPTION FROM ITEM_SCANNED AS SCAN INNER JOIN 
			ITEM_SCAN_STATUS_TYPES AS TYPES ON SCAN.STATUS_TYPE = TYPES.TYPE INNER JOIN BAG_SORTING AS BAG ON BAG.LICENSE_PLATE = SCAN.LICENSE_PLATE2
			WHERE SCAN.STATUS_TYPE='02'AND (SCAN.TIME_STAMP BETWEEN DATEADD(d, - 1, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 1, (CONVERT(NVARCHAR(10), @SDO, 111)))) 
			AND BAG.AIRLINE+BAG.FLIGHT_NUMBER = @Airline AND BAG.SDO = (CONVERT(NVARCHAR(10), @SDO, 111))
		UNION
		SELECT IRD.LICENSE_PLATE AS LICENSE_PLATE, IRD.TIME_STAMP AS TIME1, 
			'Redirected to ' + 
			CASE WHEN RTRIM(IRD.LOCATION2) ='' and RTRIM(IRD.LOCATION3)= ''THEN IRD.LOCATION1 
		ELSE
			CASE WHEN  RTRIM(IRD.LOCATION3) =''  THEN IRD.LOCATION1 + ', ' + IRD.LOCATION2 
			ELSE IRD.LOCATION1 + ', ' + IRD.LOCATION2 + ', ' + IRD.LOCATION3 	END
		END 	
		 + ' which is ' + SR.DESCRIPTION + '.' as DESCRIPTION FROM ITEM_REDIRECT AS IRD INNER JOIN SORTATION_REASON AS SR ON 
			IRD.REASON = SR.REASON INNER JOIN BAG_SORTING AS BAG ON BAG.LICENSE_PLATE = IRD.LICENSE_PLATE
			WHERE (IRD.TIME_STAMP BETWEEN DATEADD(d, - 1, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 1, (CONVERT(NVARCHAR(10), @SDO, 111)))) 
			AND BAG.AIRLINE+BAG.FLIGHT_NUMBER = @Airline AND BAG.SDO = (CONVERT(NVARCHAR(10), @SDO, 111))

		UNION
		SELECT IPR.LICENSE_PLATE, IPR.TIME_STAMP AS TIME1, 'Proceeded from '+ 
			IPR.LOCATION + ' to ' +  IPR.PROCEED_LOCATION + '. Reason: ' + IPRT.DESCRIPTION + '.' as DESCRIPTION FROM ITEM_PROCEEDED AS IPR INNER JOIN ITEM_PROCEED_TYPES AS IPRT ON IPR.PROCEED_TYPE = IPRT.TYPE 
			INNER JOIN BAG_SORTING AS BAG ON BAG.LICENSE_PLATE = IPR.LICENSE_PLATE
			WHERE (IPR.TIME_STAMP BETWEEN DATEADD(d, - 1, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 1, (CONVERT(NVARCHAR(10), @SDO, 111)))) 
			AND BAG.AIRLINE+BAG.FLIGHT_NUMBER = @Airline AND BAG.SDO = (CONVERT(NVARCHAR(10), @SDO, 111))
		UNION
		SELECT ILT.LICENSE_PLATE, ILT.TIME_STAMP AS TIME1, 'Lost tracking on ' + 
			ILT.LOCATION + ' with GID ' + ILT.GID + '.' as DESCRIPTION FROM ITEM_LOST AS ILT INNER JOIN BAG_SORTING AS BAG ON BAG.LICENSE_PLATE = ILT.LICENSE_PLATE
			WHERE (ILT.TIME_STAMP BETWEEN DATEADD(d, - 1, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 1, (CONVERT(NVARCHAR(10), @SDO, 111)))) 
			AND BAG.AIRLINE+BAG.FLIGHT_NUMBER = @Airline AND BAG.SDO = (CONVERT(NVARCHAR(10), @SDO, 111))
		UNION
		SELECT IER.LICENSE_PLATE, IER.TIME_STAMP AS TIME1, 'Encoded at ' + 
			IER.LOCATION + ' by LICENSE PLATE # ' + IER.LICENSE_PLATE + ', GID(' + IER.GID + ').' as DESCRIPTION FROM ITEM_ENCODING_REQUEST AS IER 
			INNER JOIN BAG_SORTING AS BAG ON BAG.LICENSE_PLATE = IER.LICENSE_PLATE
			WHERE IER.LICENSE_PLATE <> '0000000000' 
			AND (IER.TIME_STAMP BETWEEN DATEADD(d, - 1, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 1, (CONVERT(NVARCHAR(10), @SDO, 111)))) 
			AND BAG.AIRLINE+BAG.FLIGHT_NUMBER = @Airline AND BAG.SDO = (CONVERT(NVARCHAR(10), @SDO, 111))
		UNION
		SELECT IRM.LICENSE_PLATE, IRM.TIME_STAMP AS TIME1, 'Removed at ' + 
			IRM.LOCATION + '.' as DESCRIPTION FROM ITEM_REMOVED AS IRM INNER JOIN BAG_SORTING AS BAG ON BAG.LICENSE_PLATE = IRM.LICENSE_PLATE
			WHERE (IRM.TIME_STAMP BETWEEN DATEADD(d, - 1, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 1, (CONVERT(NVARCHAR(10), @SDO, 111)))) 
			AND BAG.AIRLINE+BAG.FLIGHT_NUMBER = @Airline AND BAG.SDO = (CONVERT(NVARCHAR(10), @SDO, 111))
		UNION
		SELECT IER.LICENSE_PLATE AS LICENSE_PLATE, GID.TIME_STAMP AS TIME1, 
			'GID '+ GID.GID + ' generated at ' + GID.LOCATION + ' as ' + CASE WHEN BAG_TYPE ='NB' THEN ' Normal Bag.' ELSE ' Stray Bag.' END as DESCRIPTION  
			FROM  ITEM_ENCODING_REQUEST AS IER INNER JOIN GID_USED AS GID ON IER.GID = GID.GID INNER JOIN BAG_SORTING AS BAG ON BAG.LICENSE_PLATE = IER.LICENSE_PLATE
			WHERE (GID.TIME_STAMP BETWEEN DATEADD(d, - 2, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 2, (CONVERT(NVARCHAR(10), @SDO, 111)))) 
			AND BAG.AIRLINE+BAG.FLIGHT_NUMBER = @Airline AND BAG.SDO = (CONVERT(NVARCHAR(10), @SDO, 111))
			AND GID.GID NOT IN (SELECT GID.GID FROM  ITEM_SCANNED AS SCAN INNER JOIN GID_USED AS GID ON SCAN.GID = GID.GID INNER JOIN BAG_SORTING AS BAG ON 
			BAG.LICENSE_PLATE = SCAN.LICENSE_PLATE1 WHERE (GID.TIME_STAMP BETWEEN DATEADD(d, - 2, (CONVERT(NVARCHAR(10), @SDO, 111))) AND 
			DATEADD(d, 2, (CONVERT(NVARCHAR(10), @SDO, 111)))) AND BAG.AIRLINE+BAG.FLIGHT_NUMBER = @Airline AND BAG.SDO = (CONVERT(NVARCHAR(10), @SDO, 111)))
			AND (IER.TIME_STAMP BETWEEN DATEADD(d, - 2, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 2, (CONVERT(NVARCHAR(10), @SDO, 111)))) 	
		UNION
		SELECT ITEM_ENCODING_REQUEST.LICENSE_PLATE, ITEM_ENCODING_REQUEST.TIME_STAMP AS TIME1, 
			CASE ITEM_ENCODING_REQUEST.ENCODING_TYPE 
			WHEN '01' THEN
				'Encoded at ' + LOCATION + ' by LICENSE PLATE # ' + ITEM_ENCODING_REQUEST.LICENSE_PLATE + ', GID(' + GID + ').' 
			WHEN '02' THEN
				'Encoded at ' + LOCATION + ' by Flight Number # ' + ITEM_ENCODING_REQUEST.AIRLINE + ITEM_ENCODING_REQUEST.FLIGHT_NUMBER + ', GID(' + GID + ').' 
			WHEN '03' THEN
				'Encoded at ' + LOCATION + ' by Destination # ' + ITEM_ENCODING_REQUEST.DESTINATION + ', GID(' + GID + ').' 
			WHEN '04' THEN
				'Encoded at ' + LOCATION + ' by Problem Bag (License Plate: # ' + ITEM_ENCODING_REQUEST.LICENSE_PLATE + '), GID(' + GID + ').' 
			WHEN '05' THEN
				'Encoded at ' + LOCATION + ' by Item Removed (License Plate: # ' + ITEM_ENCODING_REQUEST.LICENSE_PLATE + '), GID(' + GID + ').'	
			END as DESCRIPTION 
			FROM ITEM_ENCODING_REQUEST INNER JOIN BAG_SORTING AS BAG ON ITEM_ENCODING_REQUEST.LICENSE_PLATE = BAG.LICENSE_PLATE WHERE 				
				(ITEM_ENCODING_REQUEST.TIME_STAMP BETWEEN DATEADD(d, - 1, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 1, (CONVERT(NVARCHAR(10), @SDO, 111)))) 
			AND BAG.AIRLINE+BAG.FLIGHT_NUMBER = @Airline AND BAG.SDO = (CONVERT(NVARCHAR(10), @SDO, 111))
		ORDER BY TIME1
END
GO



-- ****** Object:  StoredProcedure [dbo].[stp_RPT_BAGTRACEBYBSM]    Script Date: 11/07/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_BAGTRACEBYBSM]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_BAGTRACEBYBSM]...'
	DROP PROCEDURE [dbo].[stp_RPT_BAGTRACEBYBSM]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_BAGTRACEBYBSM]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_BAGTRACEBYBSM] 
		@DTFrom [datetime],
		@DTTo [datetime],
		@BSM VARCHAR(10)
AS
BEGIN
	SELECT LICENSE_PLATE, TIME_STAMP AS TIME1, 'BSM recieved - Passenger Name = ' + 
	CASE WHEN NO_PASSENGER_SAME_SURNAME = 0 THEN '' ELSE LTRIM(CAST(NO_PASSENGER_SAME_SURNAME AS VARCHAR(2))) END  
	+ SURNAME + ' ' + GIVEN_NAME + ' ' + OTHERS_NAME +
		CASE WHEN TRAVEL_CLASS IS NULL THEN '.' ELSE ', Travel Class = ' + TRAVEL_CLASS + '.' END as DESCRIPTION 
		FROM BAG_SORTING WHERE (TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND LICENSE_PLATE = @BSM
	UNION
	SELECT BAG.LICENSE_PLATE, FPS.TIME_STAMP AS TIME1, 
		'Flight Information recieved - ' + FPS.AIRLINE + FPS.FLIGHT_NUMBER +  ' with SDO = ' + CONVERT(NVARCHAR(30),FPS.SDO, 111)
		+ ' , STO = ' +  SUBSTRING(FPS.STO,1,2)+':'+SUBSTRING(FPS.STO,3,2)
		+ CASE WHEN EDO IS NULL THEN '' ELSE ', EDO = ' + CONVERT(NVARCHAR(30),FPS.EDO, 111) END 
		+ CASE WHEN ETO IS NULL THEN '' ELSE ', ETO = ' + SUBSTRING(FPS.ETO,1,2)+':'+SUBSTRING(FPS.ETO,3,2) END 
		+ CASE WHEN ADO IS NULL THEN '' ELSE ', ADO = ' + CONVERT(NVARCHAR(30),FPS.ADO, 111) END 
		+ CASE WHEN ATO IS NULL THEN '' ELSE ', ATO = ' + SUBSTRING(FPS.ATO,1,2)+':'+SUBSTRING(FPS.ATO,3,2) END 
		+ CASE WHEN IDO IS NULL THEN '' ELSE ', IDO = ' + CONVERT(NVARCHAR(30),FPS.IDO, 111) END 
		+ CASE WHEN ITO IS NULL THEN '' ELSE ', ITO = ' + SUBSTRING(FPS.ITO,1,2)+':'+SUBSTRING(FPS.ITO,3,2) END 
		+ CASE WHEN MASTER_AIRLINE IS NULL THEN '' ELSE 
		' MASTER AIRLINE = ' + MASTER_AIRLINE END + CASE WHEN MASTER_FLIGHT_NUMBER IS NULL THEN '' ELSE 
		' MASTER FLIGHT NUMBER = ' + MASTER_FLIGHT_NUMBER END + CASE WHEN FINAL_DEST IS NULL THEN '' ELSE ', Final Destination = ' + FINAL_DEST + '.' END as DESCRIPTION
		FROM BAG_SORTING AS BAG INNER JOIN FLIGHT_PLAN_SORTING AS FPS ON BAG.AIRLINE = FPS.AIRLINE AND BAG.FLIGHT_NUMBER = FPS.FLIGHT_NUMBER AND
		BAG.SDO = FPS.SDO WHERE (BAG.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND BAG.LICENSE_PLATE = @BSM
	UNION
	SELECT SCAN.LICENSE_PLATE1 AS LICENSE_PLATE, GID.TIME_STAMP AS TIME1, 
		'GID '+ GID.GID + ' generated at ' + GID.LOCATION + ' as ' + CASE WHEN BAG_TYPE ='NB' THEN ' Normal Bag.' ELSE ' Stray Bag.' END as DESCRIPTION  
		FROM  ITEM_SCANNED AS SCAN INNER JOIN GID_USED AS GID ON SCAN.GID = GID.GID
		WHERE (GID.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND (SCAN.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND SCAN.LICENSE_PLATE1 = @BSM
	UNION
	SELECT SCAN.LICENSE_PLATE2 AS LICENSE_PLATE, GID.TIME_STAMP AS TIME1, 
		'GID '+ GID.GID + ' generated at ' + GID.LOCATION + ' as ' + CASE WHEN BAG_TYPE ='NB' THEN ' Normal Bag.' ELSE ' Stray Bag.' END as DESCRIPTION  
		FROM  ITEM_SCANNED AS SCAN INNER JOIN GID_USED AS GID ON SCAN.GID = GID.GID
		WHERE (GID.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND (SCAN.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND SCAN.LICENSE_PLATE2 = @BSM	
	UNION
	SELECT LICENSE_PLATE, TIME_STAMP AS TIME1, 'HBS screening result: Level '
		+ SCREEN_LEVEL + '-' + RESULT_TYPE + '.' AS DESCRIPTION FROM ITEM_SCREENED WHERE (TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND LICENSE_PLATE = @BSM
	UNION
	SELECT SCAN.LICENSE_PLATE1 AS LICENSE_PLATE , SCAN.TIME_STAMP AS TIME1, 
		'Bag scanned at ' + SCAN.SCANNER_ID + ' with status of "' + TYPES.DESCRIPTION	+ CASE WHEN SCAN.STATUS_TYPE = '02' THEN ' (' + SCAN.LICENSE_PLATE1 + ',' +  SCAN.LICENSE_PLATE2 + ')"' ELSE '"' END + '.' as DESCRIPTION FROM ITEM_SCANNED AS SCAN INNER JOIN 
		ITEM_SCAN_STATUS_TYPES AS TYPES ON SCAN.STATUS_TYPE = TYPES.TYPE WHERE (SCAN.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND SCAN.LICENSE_PLATE1 = @BSM
	UNION
	SELECT SCAN.LICENSE_PLATE2 AS LICENSE_PLATE , SCAN.TIME_STAMP AS TIME1,
		'Bag scanned at ' + SCAN.SCANNER_ID + ' with status of "' + TYPES.DESCRIPTION 	+ CASE WHEN SCAN.STATUS_TYPE = '02' THEN ' (' + SCAN.LICENSE_PLATE1 + ',' +  SCAN.LICENSE_PLATE2 + ')"' ELSE '"' END + '.' as DESCRIPTION FROM ITEM_SCANNED AS SCAN INNER JOIN 
		ITEM_SCAN_STATUS_TYPES AS TYPES ON SCAN.STATUS_TYPE = TYPES.TYPE WHERE SCAN.STATUS_TYPE='02' AND (SCAN.TIME_STAMP BETWEEN @DTFrom AND @DTTo)
		AND LICENSE_PLATE2 = @BSM
	UNION
	SELECT IRD.LICENSE_PLATE AS LICENSE_PLATE, IRD.TIME_STAMP AS TIME1, 
		'Redirected to '  + 
		CASE WHEN IRD.LOCATION2 IS NULL and IRD.LOCATION3 IS NULL THEN IRD.LOCATION1 
		ELSE
			CASE WHEN  IRD.LOCATION3 IS NULL THEN IRD.LOCATION1 + ', ' + IRD.LOCATION2 
			ELSE IRD.LOCATION1 + ', ' + IRD.LOCATION2 + ', ' + IRD.LOCATION3 	END
		END 					
		+ ' which is ' + SR.DESCRIPTION + ' with GID ' + IRD.GID + '.'
		AS DESCRIPTION FROM ITEM_REDIRECT AS IRD INNER JOIN SORTATION_REASON AS SR ON 
		IRD.REASON = SR.REASON WHERE (IRD.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND IRD.LICENSE_PLATE = @BSM
	UNION
	SELECT IPR.LICENSE_PLATE, IPR.TIME_STAMP AS TIME1, 'Proceeded from '+ 
		IPR.LOCATION + ' to ' +  IPR.PROCEED_LOCATION + '. Reason: '  + IPRT.DESCRIPTION + '.' as DESCRIPTION FROM ITEM_PROCEEDED AS IPR INNER JOIN ITEM_PROCEED_TYPES AS IPRT ON IPR.PROCEED_TYPE = IPRT.TYPE
		WHERE (TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND LICENSE_PLATE = @BSM
	UNION
	SELECT LICENSE_PLATE, TIME_STAMP AS TIME1, 'Lost tracking on ' + 
		LOCATION + ' with GID ' + GID + '.' as DESCRIPTION FROM ITEM_LOST WHERE (TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND LICENSE_PLATE = @BSM
	UNION
	SELECT LICENSE_PLATE, TIME_STAMP AS TIME1, 'Encoded at ' + 
		LOCATION + ' by LICENSE PLATE # ' + LICENSE_PLATE + ', GID(' + GID + ').' as DESCRIPTION FROM ITEM_ENCODING_REQUEST WHERE LICENSE_PLATE <> '0000000000' AND (TIME_STAMP BETWEEN @DTFrom AND @DTTo)
		AND LICENSE_PLATE = @BSM
	UNION
	SELECT LICENSE_PLATE, TIME_STAMP AS TIME1, 'Removed at ' + 
		LOCATION + '.' as DESCRIPTION FROM ITEM_REMOVED WHERE (TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND LICENSE_PLATE = @BSM
	UNION
	SELECT IER.LICENSE_PLATE, GID.TIME_STAMP AS TIME1, 
		'GID '+ GID.GID + ' generated at ' + GID.LOCATION + ' as ' + CASE WHEN BAG_TYPE ='NB' THEN ' Normal Bag.' ELSE ' Stray Bag.' END as DESCRIPTION  
		FROM  ITEM_ENCODING_REQUEST AS IER INNER JOIN GID_USED AS GID ON IER.GID = GID.GID
		WHERE (GID.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND IER.LICENSE_PLATE = @BSM AND GID.GID NOT IN (
		SELECT GID.GID FROM  ITEM_SCANNED AS SCAN INNER JOIN GID_USED AS GID ON SCAN.GID = GID.GID
		WHERE (GID.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND (SCAN.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND SCAN.LICENSE_PLATE1 = @BSM)
	ORDER BY TIME1
END
GO


-- ****** Object:  StoredProcedure[dbo].[stp_RPT_BAGTRACEBYGID]    Script Date: 11/07/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_BAGTRACEBYGID]') 
 AND type in (N'P', N'PC'))
BEGIN
 PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_BAGTRACEBYGID]...'
 DROP PROCEDURE [dbo].[stp_RPT_BAGTRACEBYGID]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_BAGTRACEBYGID]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_BAGTRACEBYGID] 
  @DTFrom [datetime],
  @DTTo [datetime],
  @GID VARCHAR(10)
AS
BEGIN
 SELECT GID, '0000000000' AS LICENSE_PLATE, TIME_STAMP AS TIME1, 
  'GID generated at ' + LOCATION + ' as ' + CASE WHEN BAG_TYPE ='NB' THEN ' Normal Bag.' ELSE ' Stray Bag.' END as DESCRIPTION
  FROM GID_USED WHERE (TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND GID = @GID
 UNION
 SELECT GID, LICENSE_PLATE, TIME_STAMP AS TIME1, 'HBS screening result: Level '
  + SCREEN_LEVEL + '-' + RESULT_TYPE + '.' AS DESCRIPTION FROM ITEM_SCREENED WHERE (TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND GID = @GID
 UNION
 SELECT SCAN.GID, SCAN.LICENSE_PLATE1 AS LICENSE_PLATE , SCAN.TIME_STAMP AS TIME1, 
  'Bag scanned at ' + SCAN.SCANNER_ID + ' with status of "' + TYPES.DESCRIPTION + CASE WHEN SCAN.STATUS_TYPE = '02' THEN ' (' + SCAN.LICENSE_PLATE1 + ',' +  SCAN.LICENSE_PLATE2 + ')"' ELSE '"' END + '.' as DESCRIPTION FROM ITEM_SCANNED AS SCAN INNER JOIN 
  ITEM_SCAN_STATUS_TYPES AS TYPES ON SCAN.STATUS_TYPE = TYPES.TYPE WHERE (SCAN.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND SCAN.GID = @GID
 UNION
 SELECT IRD.GID, IRD.LICENSE_PLATE AS LICENSE_PLATE, IRD.TIME_STAMP AS TIME1, 
  'Redirected to ' + 
  CASE WHEN IRD.LOCATION2 IS NULL and IRD.LOCATION3 IS NULL THEN IRD.LOCATION1 
  ELSE
   CASE WHEN  IRD.LOCATION3 IS NULL THEN IRD.LOCATION1 + ', ' + IRD.LOCATION2 
   ELSE IRD.LOCATION1 + ', ' + IRD.LOCATION2 + ', ' + IRD.LOCATION3  END
  END  
  + ' which is ' + SR.DESCRIPTION + '.' as DESCRIPTION FROM ITEM_REDIRECT AS IRD INNER JOIN SORTATION_REASON AS SR ON 
  IRD.REASON = SR.REASON WHERE (IRD.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND IRD.GID = @GID
 UNION
 SELECT IPR.GID, IPR.LICENSE_PLATE, IPR.TIME_STAMP AS TIME1, 'Proceeded from '+ 
  IPR.LOCATION + ' to ' +  IPR.PROCEED_LOCATION + '. Reason: '  + IPRT.DESCRIPTION + '.' as DESCRIPTION FROM ITEM_PROCEEDED AS IPR INNER JOIN ITEM_PROCEED_TYPES AS IPRT ON IPR.PROCEED_TYPE = IPRT.TYPE
  WHERE (TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND IPR.GID = @GID
 UNION
 SELECT GID, LICENSE_PLATE, TIME_STAMP AS TIME1, 'Lost tracking on ' + 
  LOCATION +  '.' as DESCRIPTION FROM ITEM_LOST WHERE (TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND GID = @GID
 UNION
 SELECT GID, LICENSE_PLATE, TIME_STAMP AS TIME1, 'Encoded at ' + 
  LOCATION + ' by LICENSE PLATE # ' + LICENSE_PLATE + ', GID(' + GID + ').' as DESCRIPTION FROM ITEM_ENCODING_REQUEST WHERE LICENSE_PLATE <> '0000000000' AND (TIME_STAMP BETWEEN @DTFrom AND @DTTo)
  AND GID = @GID
 UNION
 SELECT GID, LICENSE_PLATE, TIME_STAMP AS TIME1, 'Removed at ' + 
  LOCATION + '.' as DESCRIPTION FROM ITEM_REMOVED WHERE (TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND GID = @GID
 UNION
 SELECT GID, LICENSE_PLATE,TIME_STAMP AS TIME1, 'Bag now in ' + 
  LOCATION + ' at ' + PLC_TIMESTAMP + '.' as DESCRIPTION FROM ITEM_TRACKING WHERE (TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND GID = @GID 
 ORDER BY TIME1
END
GO


-- ****** Object:  StoredProcedure [dbo].[stp_RPT_BAGTRACE]    Script Date: 11/07/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_BAGTRACE]') 
 AND type in (N'P', N'PC'))
BEGIN
 PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_BAGTRACE]...'
 DROP PROCEDURE [dbo].[stp_RPT_BAGTRACE]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_BAGTRACE]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_BAGTRACE] 
  @DTFrom [datetime],
  @DTTo [datetime]
AS
BEGIN
 SELECT GID, '' AS LICENSE_PLATE, TIME_STAMP AS TIME1, 
  'GID generated at ' + LOCATION + ' as ' + CASE WHEN BAG_TYPE ='NB' THEN ' Normal Bag.' ELSE ' Stray Bag.' END as DESCRIPTION
  FROM GID_USED WHERE (TIME_STAMP BETWEEN @DTFrom AND @DTTo) 
 UNION
 SELECT GID, LICENSE_PLATE, TIME_STAMP AS TIME1, 'HBS screening result: Level '
  + SCREEN_LEVEL + '-' + RESULT_TYPE + '.' AS DESCRIPTION FROM ITEM_SCREENED WHERE (TIME_STAMP BETWEEN @DTFrom AND @DTTo) 
 UNION
 SELECT SCAN.GID, SCAN.LICENSE_PLATE1 AS LICENSE_PLATE , SCAN.TIME_STAMP AS TIME1, 
  'Bag scanned at ' + SCAN.SCANNER_ID + ' with status of "' + TYPES.DESCRIPTION + CASE WHEN SCAN.STATUS_TYPE = '02' THEN ' (' + SCAN.LICENSE_PLATE1 + ',' +  SCAN.LICENSE_PLATE2 + ')"' ELSE '"' END + '.' as DESCRIPTION FROM ITEM_SCANNED AS SCAN INNER JOIN 
  ITEM_SCAN_STATUS_TYPES AS TYPES ON SCAN.STATUS_TYPE = TYPES.TYPE WHERE (SCAN.TIME_STAMP BETWEEN @DTFrom AND @DTTo) 
 UNION
 SELECT IRD.GID, IRD.LICENSE_PLATE AS LICENSE_PLATE, IRD.TIME_STAMP AS TIME1, 
  'Redirected to ' + 
  CASE WHEN IRD.LOCATION2 IS NULL and IRD.LOCATION3 IS NULL THEN IRD.LOCATION1 
  ELSE
   CASE WHEN  IRD.LOCATION3 IS NULL THEN IRD.LOCATION1 + ', ' + IRD.LOCATION2 
   ELSE IRD.LOCATION1 + ', ' + IRD.LOCATION2 + ', ' + IRD.LOCATION3  END
  END  
  + ' which is ' + SR.DESCRIPTION + '.' as DESCRIPTION FROM ITEM_REDIRECT AS IRD INNER JOIN SORTATION_REASON AS SR ON 
  IRD.REASON = SR.REASON WHERE (IRD.TIME_STAMP BETWEEN @DTFrom AND @DTTo) 
 UNION
 SELECT IPR.GID, IPR.LICENSE_PLATE, IPR.TIME_STAMP AS TIME1, 'Proceeded from '+ 
  IPR.LOCATION + ' to ' +  IPR.PROCEED_LOCATION + '. Reason: '  + IPRT.DESCRIPTION + '.' as DESCRIPTION FROM ITEM_PROCEEDED AS IPR INNER JOIN ITEM_PROCEED_TYPES AS IPRT ON IPR.PROCEED_TYPE = IPRT.TYPE
  WHERE (TIME_STAMP BETWEEN @DTFrom AND @DTTo) 
 UNION
 SELECT GID, LICENSE_PLATE, TIME_STAMP AS TIME1, 'Lost tracking on ' + 
  LOCATION +  '.' as DESCRIPTION FROM ITEM_LOST WHERE (TIME_STAMP BETWEEN @DTFrom AND @DTTo) 
 UNION
 SELECT GID, LICENSE_PLATE, TIME_STAMP AS TIME1, 'Encoded at ' + 
  LOCATION + ' by LICENSE PLATE # ' + LICENSE_PLATE + ', GID(' + GID + ').' as DESCRIPTION FROM ITEM_ENCODING_REQUEST WHERE LICENSE_PLATE <> '0000000000' AND (TIME_STAMP BETWEEN @DTFrom AND @DTTo)
  
 UNION
 SELECT GID, LICENSE_PLATE, TIME_STAMP AS TIME1, 'Removed at ' + 
  LOCATION + '.' as DESCRIPTION FROM ITEM_REMOVED WHERE (TIME_STAMP BETWEEN @DTFrom AND @DTTo) 
 UNION
 SELECT GID, LICENSE_PLATE,TIME_STAMP AS TIME1, 'Bag now in ' + 
  LOCATION + ' at ' + PLC_TIMESTAMP + '.' as DESCRIPTION FROM ITEM_TRACKING WHERE (TIME_STAMP BETWEEN @DTFrom AND @DTTo)  
 ORDER BY TIME1,GID
END
GO



-- ****** Object:  StoredProcedure [dbo].[stp_RPT_INDIVIDUALFLIGHTSUMMARYSECOND]    Script Date: 10/27/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_INDIVIDUALFLIGHTSUMMARYSECOND]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_INDIVIDUALFLIGHTSUMMARYSECOND]...'
	DROP PROCEDURE [dbo].[stp_RPT_INDIVIDUALFLIGHTSUMMARYSECOND]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_INDIVIDUALFLIGHTSUMMARYSECOND]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_INDIVIDUALFLIGHTSUMMARYSECOND] 
		@Airline [varchar](8),
		@SDO [DATETIME]
AS
BEGIN

	DECLARE @temptable TABLE (LICENSE_PLATE VARCHAR(10),PASSENGER_NAME VARCHAR(60),BAG_TIME_STAMP DATETIME,SCAN_TIME_STAMP DATETIME,
			PROCEEDED_TIME_STAMP DATETIME)  
	INSERT INTO @temptable (LICENSE_PLATE,PASSENGER_NAME ,BAG_TIME_STAMP,SCAN_TIME_STAMP,PROCEEDED_TIME_STAMP) 
		SELECT DISTINCT BAG.LICENSE_PLATE,
		CASE WHEN BAG.NO_PASSENGER_SAME_SURNAME = 0 THEN '' ELSE LTRIM(CAST(BAG.NO_PASSENGER_SAME_SURNAME AS VARCHAR(2))) END  
		+ BAG.SURNAME + ' ' + BAG.GIVEN_NAME + ' ' + BAG.OTHERS_NAME,BAG.TIME_STAMP AS BAG_TIME_STAMP,MIN(SCAN.TIME_STAMP) AS SCAN_TIME_STAMP,
		MIN(IPR.TIME_STAMP) AS PROCEEDED_TIME_STAMP FROM BAG_SORTING as BAG
		INNER JOIN dbo.ITEM_PROCEEDED AS IPR ON BAG.LICENSE_PLATE = IPR.LICENSE_PLATE INNER JOIN
		dbo.ITEM_SCANNED AS SCAN ON SCAN.LICENSE_PLATE1=BAG.LICENSE_PLATE OR SCAN.LICENSE_PLATE2=BAG.LICENSE_PLATE
		AND IPR.GID = SCAN.GID
		WHERE (BAG.SDO = (CONVERT(NVARCHAR(10), @SDO, 111))) AND (BAG.AIRLINE + BAG.FLIGHT_NUMBER IN (@Airline)) 
		AND (SCAN.GID = IPR.GID) AND (SCAN.TIME_STAMP <= IPR.TIME_STAMP)  AND (DATEDIFF(s, SCAN.TIME_STAMP,IPR.TIME_STAMP) < 20)
		AND (SCAN.TIME_STAMP BETWEEN DATEADD(d, - 2, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 2, (CONVERT(NVARCHAR(10), @SDO, 111)))) 
		AND (IPR.TIME_STAMP BETWEEN DATEADD(d, - 2, (CONVERT(NVARCHAR(10), @SDO, 111))) AND DATEADD(d, 2, (CONVERT(NVARCHAR(10), @SDO, 111))))
		GROUP BY  BAG.LICENSE_PLATE,CASE WHEN BAG.NO_PASSENGER_SAME_SURNAME = 0 THEN '' ELSE LTRIM(CAST(BAG.NO_PASSENGER_SAME_SURNAME AS VARCHAR(2))) END 
		+ BAG.SURNAME + ' ' + BAG.GIVEN_NAME + ' ' + BAG.OTHERS_NAME,BAG.TIME_STAMP,SCAN.TIME_STAMP ,IPR.TIME_STAMP


		DECLARE @LP VARCHAR(10)
		DECLARE @PN VARCHAR(60)
		DECLARE @BAGTIME DATETIME
		DECLARE @SCANTIME DATETIME
		DECLARE @PROCEEDEDTIME DATETIME
		DECLARE @temptable1 TABLE (LICENSE_PLATE VARCHAR(10),PASSENGER_NAME VARCHAR(60),BAG_TIME_STAMP DATETIME,SCAN_TIME_STAMP DATETIME,
			PROCEEDED_TIME_STAMP DATETIME)  

		DECLARE LP_Cursor CURSOR FOR 
			SELECT DISTINCT LICENSE_PLATE,PASSENGER_NAME  FROM @temptable
			OPEN LP_Cursor

				FETCH NEXT FROM LP_Cursor INTO @LP,@PN;
				WHILE @@FETCH_STATUS = 0
				BEGIN
					
					SET @BAGTIME = (SELECT MAX(BAG_TIME_STAMP) FROM @temptable WHERE LICENSE_PLATE=@LP AND PASSENGER_NAME = @PN)
					SET @SCANTIME = (SELECT MAX(SCAN_TIME_STAMP) FROM @temptable WHERE LICENSE_PLATE=@LP AND PASSENGER_NAME = @PN)
					SET @PROCEEDEDTIME = (SELECT MAX(PROCEEDED_TIME_STAMP) FROM @temptable WHERE LICENSE_PLATE=@LP AND PASSENGER_NAME = @PN)
					INSERT INTO @temptable1 (LICENSE_PLATE,PASSENGER_NAME ,BAG_TIME_STAMP,SCAN_TIME_STAMP,PROCEEDED_TIME_STAMP)
						VALUES
						(@LP,@PN,@BAGTIME,@SCANTIME,@PROCEEDEDTIME)
 					FETCH NEXT FROM LP_Cursor INTO @LP,@PN;
				END
		CLOSE LP_Cursor;
		DEALLOCATE LP_Cursor;

	SELECT * FROM @temptable1
END
GO

-- ****** Object:  StoredProcedure [dbo].[stp_RPT_FUNCTIONALLOCATION]    Script Date: 10/27/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_FUNCTIONALLOCATION]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_FUNCTIONALLOCATION]...'
	DROP PROCEDURE [dbo].[stp_RPT_FUNCTIONALLOCATION]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_FUNCTIONALLOCATION]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_FUNCTIONALLOCATION] 
AS
BEGIN
	DECLARE @temptable TABLE (TYPES VARCHAR(10),DESCRIPTION VARCHAR(60), LOCATION VARCHAR(20),OPENTIME DATETIME,
			CLOSETIME DATETIME)
	INSERT INTO @temptable (TYPES,DESCRIPTION,LOCATION,OPENTIME,CLOSETIME)
		SELECT FUNCTION_ALLOC_GANTT.FUNCTION_TYPE, FUNCTION_TYPES.DESCRIPTION, FUNCTION_ALLOC_GANTT.RESOURCE, 
			FUNCTION_ALLOC_GANTT.ALLOC_OPEN_DATETIME, FUNCTION_ALLOC_GANTT.ALLOC_CLOSE_DATETIME
			FROM FUNCTION_ALLOC_GANTT INNER JOIN
			FUNCTION_TYPES ON FUNCTION_ALLOC_GANTT.FUNCTION_TYPE = FUNCTION_TYPES.TYPE
			WHERE (FUNCTION_TYPES.IS_ENABLED = 1) AND FUNCTION_ALLOC_GANTT.ALLOC_OPEN_DATETIME <= GETDATE() AND FUNCTION_ALLOC_GANTT.ALLOC_CLOSE_DATETIME >= GETDATE()
			ORDER BY FUNCTION_ALLOC_GANTT.FUNCTION_TYPE, FUNCTION_ALLOC_GANTT.RESOURCE


	INSERT INTO @temptable (TYPES,DESCRIPTION,LOCATION)
		SELECT FUNCTION_ALLOC_LIST.FUNCTION_TYPE, FUNCTION_TYPES.DESCRIPTION, FUNCTION_ALLOC_LIST.RESOURCE
			FROM FUNCTION_ALLOC_LIST INNER JOIN
			FUNCTION_TYPES ON FUNCTION_ALLOC_LIST.FUNCTION_TYPE = FUNCTION_TYPES.TYPE
			WHERE (FUNCTION_ALLOC_LIST.IS_ENABLED = 1)
			ORDER BY FUNCTION_ALLOC_LIST.FUNCTION_TYPE, FUNCTION_ALLOC_LIST.RESOURCE

	SELECT TYPES,DESCRIPTION,LOCATION,OPENTIME,CLOSETIME FROM @temptable
		ORDER BY TYPES,DESCRIPTION,LOCATION,OPENTIME,CLOSETIME
END
GO



-- ****** Object:  StoredProcedure [dbo].[stp_RPT_GETDATETIMEFORMAT]    Script Date: 10/27/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_GETDATETIMEFORMAT]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_GETDATETIMEFORMAT]...'
	DROP PROCEDURE [dbo].[stp_RPT_GETDATETIMEFORMAT]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_GETDATETIMEFORMAT]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_GETDATETIMEFORMAT] 
AS
BEGIN
	DECLARE @DFormat VARCHAR(15); --Date format
	DECLARE @TFormat VARCHAR(15); --Time format
	
	SELECT  @DFormat = [SYS_VALUE] FROM [SYS_CONFIG] WHERE [SYS_KEY] = 'DEFAULT_DATE_FORMAT';
	SELECT  @TFormat = [SYS_VALUE] FROM [SYS_CONFIG] WHERE [SYS_KEY] = 'DEFAULT_TIME_FORMAT';
	
	SELECT @DFormat AS [DATEFORMAT], @TFormat AS [TIMEFORMAT];
END
GO



-- ****** Object:  StoredProcedure [dbo].[stp_RPT_BAGTRACEBYFLIGHT_LP]   Script Date: 10/27/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_BAGTRACEBYFLIGHT_LP]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_BAGTRACEBYFLIGHT_LP]...'
	DROP PROCEDURE [dbo].[stp_RPT_BAGTRACEBYFLIGHT_LP]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_BAGTRACEBYFLIGHT_LP]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_BAGTRACEBYFLIGHT_LP] 
		@DTFrom [datetime],
		@DTTo [datetime],
		@BSM VARCHAR(10),
		@Flight_No varchar(10)
AS
BEGIN
	SELECT LICENSE_PLATE, TIME_STAMP AS TIME1, 'BSM recieved - Passenger Name = ' + 
	CASE WHEN NO_PASSENGER_SAME_SURNAME = 0 THEN '' ELSE LTRIM(CAST(NO_PASSENGER_SAME_SURNAME AS VARCHAR(2))) END  
	+ SURNAME + ' ' + GIVEN_NAME + ' ' + OTHERS_NAME +
		CASE WHEN TRAVEL_CLASS IS NULL THEN '.' ELSE ', Travel Class = ' + TRAVEL_CLASS + '.' END as DESCRIPTION 
		FROM BAG_SORTING WHERE (TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND LICENSE_PLATE = @BSM AND AIRLINE + FLIGHT_NUMBER = @Flight_No
	UNION
	SELECT BAG.LICENSE_PLATE, FPS.TIME_STAMP AS TIME1, 
		'Flight Information recieved - ' + FPS.AIRLINE + FPS.FLIGHT_NUMBER +  ' with SDO = ' + CONVERT(NVARCHAR(30),FPS.SDO, 111)
		+ ' , STO = ' +  SUBSTRING(FPS.STO,1,2)+':'+SUBSTRING(FPS.STO,3,2)
		+ CASE WHEN EDO IS NULL THEN '' ELSE ', EDO = ' + CONVERT(NVARCHAR(30),FPS.EDO, 111) END 
		+ CASE WHEN ETO IS NULL THEN '' ELSE ', ETO = ' + SUBSTRING(FPS.ETO,1,2)+':'+SUBSTRING(FPS.ETO,3,2) END 
		+ CASE WHEN ADO IS NULL THEN '' ELSE ', ADO = ' + CONVERT(NVARCHAR(30),FPS.ADO, 111) END 
		+ CASE WHEN ATO IS NULL THEN '' ELSE ', ATO = ' + SUBSTRING(FPS.ATO,1,2)+':'+SUBSTRING(FPS.ATO,3,2) END 
		+ CASE WHEN IDO IS NULL THEN '' ELSE ', IDO = ' + CONVERT(NVARCHAR(30),FPS.IDO, 111) END 
		+ CASE WHEN ITO IS NULL THEN '' ELSE ', ITO = ' + SUBSTRING(FPS.ITO,1,2)+':'+SUBSTRING(FPS.ITO,3,2) END 
		+ CASE WHEN MASTER_AIRLINE IS NULL THEN '' ELSE 
		' MASTER AIRLINE = ' + MASTER_AIRLINE END + CASE WHEN MASTER_FLIGHT_NUMBER IS NULL THEN '' ELSE 
		' MASTER FLIGHT NUMBER = ' + MASTER_FLIGHT_NUMBER END + CASE WHEN FINAL_DEST IS NULL THEN '' ELSE ', Final Destination = ' + FINAL_DEST + '.' END as DESCRIPTION
		FROM BAG_SORTING AS BAG INNER JOIN FLIGHT_PLAN_SORTING AS FPS ON BAG.AIRLINE = FPS.AIRLINE AND BAG.FLIGHT_NUMBER = FPS.FLIGHT_NUMBER AND
		BAG.SDO = FPS.SDO WHERE (BAG.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND BAG.LICENSE_PLATE = @BSM AND BAG.AIRLINE + BAG.FLIGHT_NUMBER = @Flight_No
	UNION
	SELECT SCAN.LICENSE_PLATE1 AS LICENSE_PLATE, GID.TIME_STAMP AS TIME1, 
		'GID '+ GID.GID + ' generated at ' + GID.LOCATION + ' as ' + CASE WHEN BAG_TYPE ='NB' THEN ' Normal Bag.' ELSE ' Stray Bag.' END as DESCRIPTION  
		FROM  ITEM_SCANNED AS SCAN INNER JOIN GID_USED AS GID ON SCAN.GID = GID.GID INNER JOIN BAG_SORTING AS BAG ON SCAN.LICENSE_PLATE1 = BAG.LICENSE_PLATE 
		WHERE (GID.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND (SCAN.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND SCAN.LICENSE_PLATE1 = @BSM  AND AIRLINE + FLIGHT_NUMBER = @Flight_No
	UNION
	SELECT SCAN.LICENSE_PLATE2 AS LICENSE_PLATE, GID.TIME_STAMP AS TIME1, 
		'GID '+ GID.GID + ' generated at ' + GID.LOCATION + ' as ' + CASE WHEN BAG_TYPE ='NB' THEN ' Normal Bag.' ELSE ' Stray Bag.' END as DESCRIPTION  
		FROM  ITEM_SCANNED AS SCAN INNER JOIN GID_USED AS GID ON SCAN.GID = GID.GID INNER JOIN BAG_SORTING AS BAG ON SCAN.LICENSE_PLATE1 = BAG.LICENSE_PLATE 
		WHERE (GID.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND (SCAN.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND SCAN.LICENSE_PLATE2 = @BSM	 AND AIRLINE + FLIGHT_NUMBER = @Flight_No
	UNION
	SELECT ITEM_SCREENED.LICENSE_PLATE, ITEM_SCREENED.TIME_STAMP AS TIME1, 'HBS screening result: Level '
		+ SCREEN_LEVEL + '-' + RESULT_TYPE + '.' AS DESCRIPTION FROM ITEM_SCREENED INNER JOIN BAG_SORTING AS BAG ON ITEM_SCREENED.LICENSE_PLATE = BAG.LICENSE_PLATE 
		WHERE (ITEM_SCREENED.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND ITEM_SCREENED.LICENSE_PLATE = @BSM AND AIRLINE + FLIGHT_NUMBER = @Flight_No
	UNION
	SELECT SCAN.LICENSE_PLATE1 AS LICENSE_PLATE , SCAN.TIME_STAMP AS TIME1, 
		'Bag scanned at ' + SCAN.SCANNER_ID + ' with status of "' + TYPES.DESCRIPTION	+ CASE WHEN SCAN.STATUS_TYPE = '02' THEN ' (' + SCAN.LICENSE_PLATE1 + ',' +  SCAN.LICENSE_PLATE2 + ')"' ELSE '"' END + '.' as DESCRIPTION FROM ITEM_SCANNED AS SCAN INNER JOIN 
		ITEM_SCAN_STATUS_TYPES AS TYPES ON SCAN.STATUS_TYPE = TYPES.TYPE INNER JOIN BAG_SORTING AS BAG ON SCAN.LICENSE_PLATE1 = BAG.LICENSE_PLATE  
		WHERE (SCAN.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND SCAN.LICENSE_PLATE1 = @BSM AND AIRLINE + FLIGHT_NUMBER = @Flight_No
	UNION
	SELECT SCAN.LICENSE_PLATE2 AS LICENSE_PLATE , SCAN.TIME_STAMP AS TIME1,
		'Bag scanned at ' + SCAN.SCANNER_ID + ' with status of "' + TYPES.DESCRIPTION 	+ CASE WHEN SCAN.STATUS_TYPE = '02' THEN ' (' + SCAN.LICENSE_PLATE1 + ',' +  SCAN.LICENSE_PLATE2 + ')"' ELSE '"' END + '.' as DESCRIPTION FROM ITEM_SCANNED AS SCAN INNER JOIN 
		ITEM_SCAN_STATUS_TYPES AS TYPES ON SCAN.STATUS_TYPE = TYPES.TYPE INNER JOIN BAG_SORTING AS BAG ON SCAN.LICENSE_PLATE1 = BAG.LICENSE_PLATE WHERE SCAN.STATUS_TYPE='02' AND (SCAN.TIME_STAMP BETWEEN @DTFrom AND @DTTo)
		AND LICENSE_PLATE2 = @BSM AND AIRLINE + FLIGHT_NUMBER = @Flight_No
	UNION

	SELECT IRD.LICENSE_PLATE AS LICENSE_PLATE, IRD.TIME_STAMP AS TIME1, 
			'Redirected to ' + 
			CASE WHEN RTRIM(IRD.LOCATION2) ='' and RTRIM(IRD.LOCATION3)= ''THEN IRD.LOCATION1 
		ELSE
			CASE WHEN  RTRIM(IRD.LOCATION3) =''  THEN IRD.LOCATION1 + ', ' + IRD.LOCATION2 
			ELSE IRD.LOCATION1 + ', ' + IRD.LOCATION2 + ', ' + IRD.LOCATION3 	END
		END 	
		 + ' which is ' + SR.DESCRIPTION + '.' as DESCRIPTION FROM ITEM_REDIRECT AS IRD INNER JOIN SORTATION_REASON AS SR ON 
			IRD.REASON = SR.REASON INNER JOIN BAG_SORTING AS BAG ON BAG.LICENSE_PLATE = IRD.LICENSE_PLATE
			WHERE (IRD.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND IRD.LICENSE_PLATE = @BSM AND AIRLINE + FLIGHT_NUMBER = @Flight_No
	UNION
	SELECT IPR.LICENSE_PLATE, IPR.TIME_STAMP AS TIME1, 'Proceeded from '+ 
		IPR.LOCATION + ' to ' +  IPR.PROCEED_LOCATION + '. Reason: '  + IPRT.DESCRIPTION + '.' as DESCRIPTION FROM ITEM_PROCEEDED AS IPR INNER JOIN ITEM_PROCEED_TYPES AS IPRT ON IPR.PROCEED_TYPE = IPRT.TYPE
		INNER JOIN BAG_SORTING AS BAG ON IPR.LICENSE_PLATE = BAG.LICENSE_PLATE 
		WHERE (IPR.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND IPR.LICENSE_PLATE = @BSM AND AIRLINE + FLIGHT_NUMBER = @Flight_No
	UNION
	SELECT ITEM_LOST.LICENSE_PLATE, ITEM_LOST.TIME_STAMP AS TIME1, 'Lost tracking on ' + 
		LOCATION + ' with GID ' + GID + '.' as DESCRIPTION FROM ITEM_LOST INNER JOIN BAG_SORTING AS BAG ON ITEM_LOST.LICENSE_PLATE = BAG.LICENSE_PLATE  WHERE (ITEM_LOST.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND ITEM_LOST.LICENSE_PLATE = @BSM AND AIRLINE + FLIGHT_NUMBER = @Flight_No
	UNION
	SELECT ITEM_ENCODING_REQUEST.LICENSE_PLATE, ITEM_ENCODING_REQUEST.TIME_STAMP AS TIME1, 
		CASE ITEM_ENCODING_REQUEST.ENCODING_TYPE 
		WHEN '01' THEN
			'Encoded at ' + LOCATION + ' by LICENSE PLATE # ' + ITEM_ENCODING_REQUEST.LICENSE_PLATE + ', GID(' + GID + ').' 
		WHEN '02' THEN
			'Encoded at ' + LOCATION + ' by Flight Number # ' + ITEM_ENCODING_REQUEST.AIRLINE + ITEM_ENCODING_REQUEST.FLIGHT_NUMBER + ', GID(' + GID + ').' 
		WHEN '03' THEN
			'Encoded at ' + LOCATION + ' by Destination # ' + ITEM_ENCODING_REQUEST.DESTINATION + ', GID(' + GID + ').' 
		WHEN '04' THEN
			'Encoded at ' + LOCATION + ' by Problem Bag (License Plate: # ' + ITEM_ENCODING_REQUEST.LICENSE_PLATE + '), GID(' + GID + ').' 
		WHEN '05' THEN
			'Encoded at ' + LOCATION + ' by Item Removed (License Plate: # ' + ITEM_ENCODING_REQUEST.LICENSE_PLATE + '), GID(' + GID + ').'	
		END as DESCRIPTION 
		FROM ITEM_ENCODING_REQUEST INNER JOIN BAG_SORTING AS BAG ON ITEM_ENCODING_REQUEST.LICENSE_PLATE = BAG.LICENSE_PLATE WHERE (ITEM_ENCODING_REQUEST.TIME_STAMP BETWEEN @DTFrom AND @DTTo)
			AND ITEM_ENCODING_REQUEST.LICENSE_PLATE = @BSM AND ITEM_ENCODING_REQUEST.AIRLINE + ITEM_ENCODING_REQUEST.FLIGHT_NUMBER = @Flight_No
	UNION
	SELECT ITEM_REMOVED.LICENSE_PLATE, ITEM_REMOVED.TIME_STAMP AS TIME1, 'Removed at ' + 
		LOCATION + '.' as DESCRIPTION FROM ITEM_REMOVED INNER JOIN BAG_SORTING AS BAG ON ITEM_REMOVED.LICENSE_PLATE = BAG.LICENSE_PLATE  WHERE (ITEM_REMOVED.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND ITEM_REMOVED.LICENSE_PLATE = @BSM AND AIRLINE + FLIGHT_NUMBER = @Flight_No
	UNION
	SELECT IER.LICENSE_PLATE, GID.TIME_STAMP AS TIME1, 
		'GID '+ GID.GID + ' generated at ' + GID.LOCATION + ' as ' + CASE WHEN BAG_TYPE ='NB' THEN ' Normal Bag.' ELSE ' Stray Bag.' END as DESCRIPTION  
		FROM  ITEM_ENCODING_REQUEST AS IER INNER JOIN GID_USED AS GID ON IER.GID = GID.GID
		WHERE (GID.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND IER.LICENSE_PLATE = @BSM AND GID.GID NOT IN (
		SELECT GID.GID FROM  ITEM_SCANNED AS SCAN INNER JOIN GID_USED AS GID ON SCAN.GID = GID.GID
		WHERE (GID.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND (SCAN.TIME_STAMP BETWEEN @DTFrom AND @DTTo) AND SCAN.LICENSE_PLATE1 = @BSM) AND  AIRLINE + FLIGHT_NUMBER = @Flight_No
	ORDER BY TIME1
END
GO



/****** Object:  StoredProcedure [dbo].[stp_RPT_FLIGHTRECONSOLIDATION]    Script Date: 07/31/2009 14:46:22 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_FLIGHTRECONSOLIDATION]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_FLIGHTRECONSOLIDATION]...'
	DROP PROCEDURE [dbo].[stp_RPT_FLIGHTRECONSOLIDATION]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_FLIGHTRECONSOLIDATION]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_FLIGHTRECONSOLIDATION] 
	-- Add the parameters for the stored procedure here
	@SDO datetime,
	@Flight nvarchar(10)
AS
BEGIN	
	DECLARE @TEMP_TABLE TABLE (LICENSE_PLATE NVARCHAR(10), LP_STATUS NVARCHAR(25), LOCATION NVARCHAR(10), TIME_OCCUR DATETIME)
	DECLARE @TBL_DECISIONPOINT TABLE (EQUIPID NVARCHAR(15))	
	DECLARE @LP NVARCHAR(10)
	DECLARE @STAT NVARCHAR(20)
	DECLARE @COUNT_LP INT
	DECLARE @LAST_LOC NVARCHAR(10)
	DECLARE @TIME_OCCUR DATETIME
	DECLARE @PROC_TYPE NVARCHAR(5)
	DECLARE @IS_FINAL INT
	DECLARE @LP_SORTED NVARCHAR(10)
	DECLARE @STAT_SORTED NVARCHAR(20)
	
	DECLARE NS_CURSOR CURSOR FOR	
		SELECT DISTINCT LICENSE_PLATE FROM BAG_SORTING WHERE LICENSE_PLATE IS NOT NULL AND AIRLINE + FLIGHT_NUMBER = @Flight AND (CONVERT(DATE, SDO) = @SDO)
			OPEN NS_CURSOR

			FETCH NEXT FROM NS_CURSOR INTO @LP;
			WHILE @@FETCH_STATUS = 0
			BEGIN
				--TO GET NUMBER OF SAME LICENSE_PLATE; TIME_STAMP; LAST LOCATION KNOWN
				SELECT @COUNT_LP = COUNT_LP, @LAST_LOC = LAST_LOC, @TIME_OCCUR = TIME_OCCUR FROM dbo.GET_RPT_LPDETAILS(@LP)
				
				INSERT INTO @TEMP_TABLE VALUES(@LP, CASE WHEN @COUNT_LP < 1 THEN 'NEVER SEEN' ELSE 'SEEN IN THE ROUNTER'  END, @LAST_LOC, @TIME_OCCUR)

				FETCH NEXT FROM NS_CURSOR INTO @LP;		
			END
			
	CLOSE NS_CURSOR;
	DEALLOCATE NS_CURSOR;
					
	DECLARE SORTED_CURSOR CURSOR FOR
		SELECT LICENSE_PLATE FROM @TEMP_TABLE WHERE LP_STATUS <> 'NEVER SEEN'
			OPEN SORTED_CURSOR
		
			FETCH NEXT FROM SORTED_CURSOR INTO @LP_SORTED
			WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @PROC_TYPE = (SELECT TOP 1 PROCEED_TYPE FROM ITEM_PROCEEDED WHERE LICENSE_PLATE = @LP_SORTED ORDER BY TIME_STAMP DESC)
				IF @PROC_TYPE = '00'
					BEGIN
						SET @LAST_LOC = (SELECT TOP 1 LAST_LOCATION FROM BAG_INFO WHERE LICENSE_PLATE1 = @LP_SORTED ORDER BY TIME_STAMP DESC)
						--SET @IS_FINAL = (SELECT COUNT(EQUIPID) FROM @TBL_DECISIONPOINT WHERE EQUIPID = @LAST_LOC)
						DECLARE @SORTED_LOC VARCHAR(20)
						SET @SORTED_LOC = (SELECT TOP 1  EQUIPID FROM GET_RPT_DECISION_POINT() WHERE LOCATION = @LAST_LOC)
						SET @IS_FINAL = (SELECT COUNT(EQUIPID) FROM GET_RPT_DECISION_POINT() WHERE LOCATION = @LAST_LOC)
							IF @IS_FINAL > 0
								BEGIN
									UPDATE @TEMP_TABLE SET LP_STATUS = 'SORTED',LOCATION = @SORTED_LOC  WHERE LICENSE_PLATE = @LP_SORTED;	
								END
					END
				FETCH NEXT FROM SORTED_CURSOR INTO @LP_SORTED;		
			END
	
	CLOSE SORTED_CURSOR;
	DEALLOCATE SORTED_CURSOR;

	SELECT * FROM @TEMP_TABLE;
END
GO

-- ****** Object:  StoredProcedure [dbo].[stp_RPT_MESTIMEDISTRIBUTION]    Script Date: 10/27/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_MESTIMEDISTRIBUTION]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_MESTIMEDISTRIBUTION]...'
	DROP PROCEDURE [dbo].[stp_RPT_MESTIMEDISTRIBUTION]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_MESTIMEDISTRIBUTION]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_MESTIMEDISTRIBUTION] 
	@DTFrom [datetime],
	@DTTo [datetime],
    @IntervalMin [int]   
AS
BEGIN     
		DECLARE @Counter int
		SET @Counter = 1
		DECLARE @TimeStart DATETIME
		DECLARE @TimeEnd DATETIME
	    DECLARE @interval int
		DECLARE @start_point datetime
		DECLARE @end_point datetime

		IF @IntervalMin < 10
		BEGIN
			SET @interval = 10
		END
		ELSE
		BEGIN
			SET @interval =  @IntervalMin
		END 
		
        SET @start_point = convert(datetime,RIGHT(STR(DATEPART(dd,@DTFrom)),2) +'/' + RIGHT(STR(DATEPART(mm,@DTFrom)),2) + '/' + RIGHT(STR(DATEPART(yyyy,@DTFrom)),4)+ ' '+RIGHT('00'+LTRIM(STR(DATEPART(hh,@DTFrom))),2)+':00:00.000' , 103)  
		SET @end_point =  convert(datetime,RIGHT(STR(DATEPART(dd,@DTTo)),2) +'/' + RIGHT(STR(DATEPART(mm,@DTTo)),2) + '/' + RIGHT(STR(DATEPART(yyyy,@DTTo)),4)+ ' '+RIGHT('00'+LTRIM(STR(DATEPART(hh,@DTTo))),2)+':00:00.000' , 103)

		IF datediff(d, @start_point, @end_point) > 365 
		BEGIN
			SET @end_point =  DATEADD(d,365,@start_point)
		END

		DECLARE @TotalCount INT
		SET @TotalCount = CONVERT (INT ,(DATEDIFF(mi, @start_point, @end_point)/@interval))

		DECLARE @temptable TABLE (start_time datetime,end_time datetime,Interval int,tot_num INT)  

		DECLARE @sum INT

		WHILE (@Counter <= @TotalCount)
		BEGIN
			SET @TimeEnd = DATEADD(mi,@Counter * @interval, @start_point)
			SET @TimeStart = DATEADD(mi,-1*@interval,@TimeEnd)
			SET @sum = (SELECT count(*)	FROM  ITEM_ENCODING_REQUEST WHERE (TIME_STAMP BETWEEN @TimeStart AND  @TimeEnd ))

			INSERT INTO @temptable (start_time,end_time,Interval,tot_num ) values (@TimeStart,@TimeEnd,(@Counter *@interval),@sum)

			SET @Counter  = (@Counter + 1)
		End

		SELECT * FROM @temptable
END
GO

/****** Object:  StoredProcedure [dbo].[stp_RPT_HBSTHROUGHPUT_CLEAREDBAG]    Script Date: 08/04/2009 23:00:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_HBSTHROUGHPUT_CLEAREDBAG]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_HBSTHROUGHPUT_CLEAREDBAG]...'
	DROP PROCEDURE [dbo].[stp_RPT_HBSTHROUGHPUT_CLEAREDBAG]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_HBSTHROUGHPUT_CLEAREDBAG]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_HBSTHROUGHPUT_CLEAREDBAG] 
	@DTFrom [datetime],
	@DTTo [datetime]
AS
BEGIN

	DECLARE @TEMPTABLE TABLE (SCREEN_LEVEL CHAR(1),TOTAL INT,GTOTAL int)

	INSERT INTO @TEMPTABLE (SCREEN_LEVEL,TOTAL)
	SELECT   iscr.SCREEN_LEVEL AS SCREEN_LEVEL, COUNT(iscr.RESULT_TYPE) AS TOTAL
	FROM     ITEM_SCREENED AS iscr INNER JOIN
             ITEM_SCREEN_RESULT_TYPES AS isrt ON iscr.RESULT_TYPE = isrt.TYPE
	WHERE    iscr.RESULT_TYPE = 'A' AND (iscr.TIME_STAMP BETWEEN @DTFrom AND @DTTo)
	GROUP BY iscr.SCREEN_LEVEL


	DECLARE @Level VARCHAR(10)

	DECLARE AFS_Cursor CURSOR FOR 
	SELECT DISTINCT SCREEN_LEVEL FROM @TEMPTABLE
	OPEN AFS_Cursor

	FETCH NEXT FROM AFS_Cursor INTO @Level;
	WHILE @@FETCH_STATUS = 0
	BEGIN
			DECLARE @count int
			SET @count = (SELECT DISTINCT COUNT(GID) FROM ITEM_SCREENED WHERE SCREEN_LEVEL = @Level AND (ITEM_SCREENED .TIME_STAMP BETWEEN @DTFrom AND @DTTo ))		
			
			UPDATE @TEMPTABLE  SET GTOTAL= @count WHERE SCREEN_LEVEL = @Level 
			
			FETCH NEXT FROM AFS_Cursor INTO @Level;
	END
	CLOSE AFS_Cursor;
	DEALLOCATE AFS_Cursor;		
		
	SELECT * FROM @TEMPTABLE 

END
GO

/****** Object:  StoredProcedure [dbo].[stp_RPT_HBSTHROUGHPUT_DIVERTED2L3L5]    Script Date: 08/04/2009 23:00:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_HBSTHROUGHPUT_DIVERTED2L3L5]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_HBSTHROUGHPUT_DIVERTED2L3L5]...'
	DROP PROCEDURE [dbo].[stp_RPT_HBSTHROUGHPUT_DIVERTED2L3L5]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_HBSTHROUGHPUT_DIVERTED2L3L5]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_HBSTHROUGHPUT_DIVERTED2L3L5] 
	@DTFrom [datetime],
	@DTTo [datetime]
AS
BEGIN

	DECLARE @TEMPTABLE TABLE ( SUBSYSTEM VARCHAR(10), DESCRIPTION VARCHAR(50),TOTAL VARCHAR(6), GTOTAL INT)

	INSERT INTO @TEMPTABLE (SUBSYSTEM, DESCRIPTION ,TOTAL)
		SELECT     A.SUBSYSTEM, A.DESCRIPTION, SUM(B.DIFFERENT) AS TOTAL
		FROM       MDS_BAG_COUNTERS AS A INNER JOIN
				   MDS_BAG_COUNT AS B ON B.COUNTER_ID = A.COUNTER_ID
		WHERE      (A.COUNTER_ID LIKE 'DVT2L3%') AND (B.TIME_STAMP BETWEEN @DTFrom AND @DTTo)
		GROUP BY   A.SUBSYSTEM, A.DESCRIPTION
		
	INSERT INTO @TEMPTABLE (SUBSYSTEM, DESCRIPTION ,TOTAL)
		SELECT     A.SUBSYSTEM, A.DESCRIPTION, SUM(B.DIFFERENT) AS TOTAL
		FROM       MDS_BAG_COUNTERS AS A INNER JOIN
				   MDS_BAG_COUNT AS B ON B.COUNTER_ID = A.COUNTER_ID
		WHERE      (A.COUNTER_ID LIKE 'DVT2L5%') AND (B.TIME_STAMP BETWEEN @DTFrom AND @DTTo)
		GROUP BY   A.SUBSYSTEM, A.DESCRIPTION

	
	DECLARE @Subs VARCHAR(10)
	DECLARE AFS_Cursor CURSOR FOR 
			SELECT DISTINCT SUBSYSTEM FROM @TEMPTABLE
	OPEN AFS_Cursor

			FETCH NEXT FROM AFS_Cursor INTO @Subs;
			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @count int
				SET		@count = (SELECT DISTINCT SUM(B.DIFFERENT) AS GTOTAL 
				FROM	MDS_BAG_COUNTERS AS A INNER JOIN
						MDS_BAG_COUNT AS B ON B.COUNTER_ID = A.COUNTER_ID  WHERE SUBSYSTEM = @Subs AND (B.TIME_STAMP BETWEEN @DTFrom AND @DTTo)	)		
				UPDATE  @TEMPTABLE  SET GTOTAL= @count WHERE SUBSYSTEM = @Subs

				FETCH NEXT FROM AFS_Cursor INTO @Subs;
			END
	CLOSE AFS_Cursor;
	DEALLOCATE AFS_Cursor;
	
	SELECT * FROM @TEMPTABLE
	
END
GO

-- ****** Object:  StoredProcedure [dbo].[stp_RPT_HBSTHROUGHPUT_MAXHOURLYBAGRATE]    Script Date: 08/04/2009 13:18:36 ******
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_HBSTHROUGHPUT_MAXHOURLYBAGRATE]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_HBSTHROUGHPUT_MAXHOURLYBAGRATE]...'
	DROP PROCEDURE [dbo].[stp_RPT_HBSTHROUGHPUT_MAXHOURLYBAGRATE]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_HBSTHROUGHPUT_MAXHOURLYBAGRATE]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_HBSTHROUGHPUT_MAXHOURLYBAGRATE] 
	@DTFrom [datetime],
	@DTTo [datetime]
AS
BEGIN     
		DECLARE @IntervalMin int
		DECLARE @Counter int
		SET @Counter = 1
		DECLARE @TimeStart DATETIME
		DECLARE @TimeEnd DATETIME
	    DECLARE @interval int
		DECLARE @start_point datetime
		DECLARE @end_point datetime
		SET @intervalMin = 2

		SET @interval =  @IntervalMin

        SET @start_point = CONVERT(DATETIME,RIGHT(STR(DATEPART(dd,@DTFrom)),2) +'/' + RIGHT(STR(DATEPART(mm,@DTFrom)),2) + '/' + RIGHT(STR(DATEPART(yyyy,@DTFrom)),4)+ ' '+RIGHT('00'+LTRIM(STR(DATEPART(hh,@DTFrom))),2)+':00:00.000' , 103)  
		SET @end_point =  CONVERT(DATETIME,RIGHT(STR(DATEPART(dd,@DTTo)),2) +'/' + RIGHT(STR(DATEPART(mm,@DTTo)),2) + '/' + RIGHT(STR(DATEPART(yyyy,@DTTo)),4)+ ' '+RIGHT('00'+LTRIM(STR(DATEPART(hh,@DTTo))),2)+':00:00.000' , 103)

		IF DATEDIFF(d, @start_point, @end_point) > 365 
		BEGIN
			SET @end_point =  DATEADD(d,365,@start_point)
		END

		DECLARE @TotalCount INT
		SET @TotalCount = CONVERT (INT ,(DATEDIFF(mi, @start_point, @end_point)/@interval))

		DECLARE @temptable TABLE (start_time DATETIME,end_time DATETIME,Interval INT,tot_num INT)  
		DECLARE @sum INT

		WHILE (@Counter <= @TotalCount)
		BEGIN
			SET @TimeEnd = DATEADD(mi,@Counter * @interval, @start_point)
			SET @TimeStart = DATEADD(mi,-1*@interval,@TimeEnd)
			SET @sum = (SELECT count(*)	FROM GID_USED WHERE (TIME_STAMP BETWEEN @TimeStart AND  @TimeEnd ) AND (BAG_TYPE = 'NB'))

			INSERT INTO @temptable (start_time,end_time,Interval,tot_num ) VALUES (@TimeStart,@TimeEnd,(@Counter *@interval),@sum)

			SET @Counter  = (@Counter + 1)
		END

		SELECT (MAX(tot_num) /2)*60 AS TOTAL FROM @temptable
END
GO

/****** Object:  StoredProcedure [dbo].[stp_RPT_HBSTHROUGHPUT_STRAYLOSTBAG]    Script Date: 08/04/2009 23:00:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_RPT_HBSTHROUGHPUT_STRAYLOSTBAG]') 
	AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Deleting existing StoredProcedure [stp_RPT_HBSTHROUGHPUT_STRAYLOSTBAG]...'
	DROP PROCEDURE [dbo].[stp_RPT_HBSTHROUGHPUT_STRAYLOSTBAG]
END
GO
PRINT 'INFO: Creating StoredProcedure [stp_RPT_HBSTHROUGHPUT_STRAYLOSTBAG]...'
GO
CREATE PROCEDURE [dbo].[stp_RPT_HBSTHROUGHPUT_STRAYLOSTBAG] 
	@DTFrom [datetime],
	@DTTo [datetime]
AS
BEGIN

	DECLARE @TEMPTABLE TABLE ( TYP VARCHAR(3),SUBSYSTEM VARCHAR(10), LOCATION VARCHAR(20),TOTAL VARCHAR(4), GTOTAL INT)

	INSERT INTO @TEMPTABLE (TYP,SUBSYSTEM, LOCATION ,TOTAL)
		SELECT 'UK', SUBSYSTEM,LOCATION ,COUNT(GID) AS TOTAL
		FROM GID_USED  
		WHERE LOCATION IN (SELECT LOCATION from TRACKING_ZONE_GROUPING WHERE GROUP_NAME LIKE 'SS%') AND BAG_TYPE = 'SB' AND (GID_USED.TIME_STAMP BETWEEN @DTFrom AND @DTTo)
		GROUP BY SUBSYSTEM,LOCATION 
		
	INSERT INTO @TEMPTABLE (TYP,SUBSYSTEM,LOCATION ,TOTAL)	
		SELECT 'LT',SUBSYSTEM, LOCATION ,COUNT(GID) AS TOTAL
		FROM ITEM_LOST  
		WHERE LOCATION IN (SELECT LOCATION from TRACKING_ZONE_GROUPING WHERE GROUP_NAME LIKE 'SS%') AND (ITEM_LOST.TIME_STAMP BETWEEN @DTFrom AND @DTTo)
		GROUP BY SUBSYSTEM,LOCATION 

	
	DECLARE @Subs VARCHAR(10)
	DECLARE @Loc VARCHAR(20)

	DECLARE AFS_Cursor CURSOR FOR 
			SELECT DISTINCT SUBSYSTEM FROM @TEMPTABLE
	OPEN AFS_Cursor

			FETCH NEXT FROM AFS_Cursor INTO @Subs;
			WHILE @@FETCH_STATUS = 0
			BEGIN
				DECLARE @count int
				SET @count = (SELECT DISTINCT COUNT(GID) FROM GID_USED WHERE SUBSYSTEM = @Subs AND BAG_TYPE = 'NB'	AND (GID_USED.TIME_STAMP BETWEEN @DTFrom AND @DTTo))		
				
				UPDATE @TEMPTABLE SET GTOTAL = @count WHERE SUBSYSTEM=@Subs 

				FETCH NEXT FROM AFS_Cursor INTO @Subs;
			END
	CLOSE AFS_Cursor;
	DEALLOCATE AFS_Cursor;
	
	SELECT * FROM @TEMPTABLE
	
END
GO

PRINT 'INFO: .'
PRINT 'INFO: .'
PRINT 'INFO: .'
PRINT 'INFO: End of STEP 4.2'
GO
