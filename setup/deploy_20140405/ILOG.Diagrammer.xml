<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ILOG.Diagrammer</name>
    </assembly>
    <members>
        <member name="T:ILOG.Diagrammer.SVG.PointsParser">
            <summary>
            Utility class to parse list of points.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.PointsParser.GetPoints">
            <summary>
            Returns the parsed points.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.HatchFill">
            <summary>
            Defines a fill with a hatch style, a foreground color, and a background color.
            </summary>
            <example>
            <para lang='cs,vbnet'>
            The following example creates a rectangle filled with a hatch fill.
            </para>
            <code lang='cs'>     
            Rect CreateRectangleWithHatchFill()
            {
                Rect rectangle = new Rect(0, 0, 100, 100);
                HatchFill myFill = new HatchFill();
                myFill.BackColor = Color.LightBlue;
                myFill.ForeColor = Color.Red;
                myFill.HatchStyle = HatchStyle.BackwardDiagonal;
                rectangle.Fill = myFill;
                return rectangle;
            } 
            </code>
            <code lang='vbnet'>
            Function CreateRectangleWithHatchFill() As Rect 
                Dim rectangle As Rect = New Rect(0, 0, 100, 100) 
                Dim myFill As HatchFill = New HatchFill 
                myFill.BackColor = Color.LightBlue 
                myFill.ForeColor = Color.Red 
                myFill.HatchStyle = HatchStyle.BackwardDiagonal 
                rectangle.Fill = myFill 
                Return rectangle 
            End Function 
            </code>
            <para lang='cs,vbnet'>This example will produce the following image:</para>
            <br/><img src='images/HatchFill.png'/>
            </example>
        </member>
        <member name="T:ILOG.Diagrammer.Fill">
            <summary>
            The <see langword="abstract"/> base class for fill classes.
            </summary>
            <remarks>The <see cref="T:ILOG.Diagrammer.Fill"/> class is used to describe the way closed figures are filled.
            The <strong>Fill</strong> class defines the <see cref="P:ILOG.Diagrammer.Fill.Opacity"/> property to control the fill
            opacity.
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Shape.Fill">Shape.Fill</seealso>
            <seealso cref="P:ILOG.Diagrammer.Graphic.TextBase.Fill">TextBase.Fill</seealso>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Control.Background">Controle.Background</seealso>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Control.Foreground">Controle.Foreground</seealso>
            <seealso cref="P:ILOG.Diagrammer.TextAppearance.Background">TextAppearance.Background</seealso>
            <seealso cref="P:ILOG.Diagrammer.TextAppearance.Foreground">TextAppearance.Foreground</seealso>
        </member>
        <member name="T:ILOG.Diagrammer.StyleBase">
            <summary>
            Represents the <see langword="abstract"/> base class for style-related 
            classes such as <see cref="T:ILOG.Diagrammer.Fill"/>, <see cref="T:ILOG.Diagrammer.Stroke"/> or <see cref="T:ILOG.Diagrammer.Filter"/>.
            </summary>
            <remarks>A <see cref="T:ILOG.Diagrammer.StyleBase"/> object is mutable by default. To make it non-mutable,
            call the <see cref="M:ILOG.Diagrammer.StyleBase.Freeze"/> method. Any modification of the object after it has been frozen
            will raise an exception. A non-mutable object is less memory consuming than a mutable object.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.StyleBase.OnChanged(ILOG.Diagrammer.StyleChangeEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.StyleBase.Changed"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.StyleChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.StyleBase.OnChanging(ILOG.Diagrammer.StyleChangeEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.StyleBase.Changing"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.StyleChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.StyleBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.StyleBase"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.StyleBase.Clone">
            <summary>
            Creates a copy of the object.
            </summary>
            <returns>A copy of this object.</returns>
            <remarks>If the object is not mutable, the copy will be mutable.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.StyleBase.CheckMutable">
            <summary>
            Checks if the object is mutable otherwise throws an exception.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.StyleBase.Freeze">
            <summary>
            Freezes the style objects. The objects becomes not mutable.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.StyleBase.Mutable"/>
        </member>
        <member name="M:ILOG.Diagrammer.StyleBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.StyleBase"/> from serialization information.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.StyleBase.Changed">
            <summary>
            Occurs when the style has changed.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.StyleBase.Changing">
            <summary>
            Occurs when the style is changing.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.StyleBase.Mutable">
            <summary>
            Indicates whether it is possible to change the properties of the style.
            </summary>
            <value><see langword="true"/> if the object is mutable; Otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
            <remarks>Call the <see cref="M:ILOG.Diagrammer.StyleBase.Freeze"/> method to make the object not mutable.
            Once the object is not mutable you are not allowed to change its characteristics.
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.StyleBase.Freeze"/>
        </member>
        <member name="P:ILOG.Diagrammer.StyleBase.IsShared">
            <summary>
            Indicates whether this style is used by several objects.
            </summary>
            <value><see langword="true"/> if the style is used by several objects, otherwise <see langword="false"/>.</value>
        </member>
        <member name="M:ILOG.Diagrammer.Fill.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Fill"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Fill.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Fill"/> class with the specified parameters.
            </summary>
            <param name="opacity">A <see cref="T:System.Single"/> in the range [0..1]. <strong>0</strong> means transparent, and 
            <strong>1</strong> means opaque.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Fill.GetBrush(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Creates a <see cref="T:System.Drawing.Brush"/> from this <see cref="T:ILOG.Diagrammer.Fill"/> object for the specified rectangle.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure in which the brush will be used.</param>
            <returns>A new <see cref="T:System.Drawing.Brush"/> object.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Fill.GetBrush(ILOG.Diagrammer.Rectangle2D,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Creates a <see cref="T:System.Drawing.Brush"/> from this fill object for the specified rectangle and path.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure in which the brush will be used.</param>
            <param name="path">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> object in which the brush will be used. This
            parameter can be <see langword="null"/>.</param>
            <returns>A new <see cref="T:System.Drawing.Brush"/> object.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Fill.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Fill.Equals(System.Object)">
            <summary>
            This member overrides <see cref="M:System.Object.Equals(System.Object)">Object.Equals</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Fill.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Fill"/> from serialization information.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Fill.Opacity">
            <summary>
            Gets or sets the opacity of the fill.
            </summary>
            <value>A value in the [0..1] range that defines the opacity of the
            fill. The default value is 1 meaning that the fill is fully opaque.</value>
        </member>
        <member name="M:ILOG.Diagrammer.HatchFill.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.HatchFill"/> class.
            </summary>
            <remarks>This constructors creates a fill with a white foreground, a black background, and
            <see cref="F:System.Drawing.Drawing2D.HatchStyle.Percent50"/> as hatch style.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.HatchFill.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.HatchFill"/> class using the specified parameters.
            </summary>
            <param name="hatchStyle">One of the <see cref="T:System.Drawing.Drawing2D.HatchStyle"/> values.</param>
            <param name="foreColor">The foreground of the brush.</param>
            <param name="backColor">The background of the brush.</param>
        </member>
        <member name="M:ILOG.Diagrammer.HatchFill.#ctor(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.HatchFill"/> class using the specified parameters.
            </summary>
            <param name="hatchStyle">One of the <see cref="T:System.Drawing.Drawing2D.HatchStyle"/> values.</param>
            <param name="foreColor">The foreground of the fill.</param>
            <param name="backColor">The background of the fill.</param>
            <param name="opacity">A <see cref="T:System.Single"/> in the range [0..1]. <strong>0</strong> means transparent, and 
            <strong>1</strong> means opaque.</param>
        </member>
        <member name="M:ILOG.Diagrammer.HatchFill.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.HatchFill.Equals(System.Object)">
            <summary>
            This member overrides <see cref="M:System.Object.Equals(System.Object)">Object.Equals</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.HatchFill.GetBrush(ILOG.Diagrammer.Rectangle2D,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Fill.GetBrush(ILOG.Diagrammer.Rectangle2D,System.Drawing.Drawing2D.GraphicsPath)">Fill.GetBrush</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.HatchFill.ToString">
            <summary>
            This member overrides <see cref="M:System.Object.ToString">Object.ToString</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.HatchFill.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.HatchFill"/> from serialization information.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.HatchFill.BackColor">
            <summary>
            Gets or sets the background color of the fill.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> structure.</value>
            <seealso cref="P:ILOG.Diagrammer.HatchFill.ForeColor"/>
        </member>
        <member name="P:ILOG.Diagrammer.HatchFill.ForeColor">
            <summary>
            Gets or sets the foreground color of the fill.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> structure.</value>
            <seealso cref="P:ILOG.Diagrammer.HatchFill.BackColor"/>
        </member>
        <member name="P:ILOG.Diagrammer.HatchFill.HatchStyle">
            <summary>
            Gets or sets the hatch style of the fill.
            </summary>
            <value>One of the <see cref="T:System.Drawing.Drawing2D.HatchStyle"/> values.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.StrokeDialog">
            <summary>
            Represents a common dialog box that allows to edit <see cref="T:ILOG.Diagrammer.Stroke"/> object.
            </summary>
            <remarks>Use the <see cref="P:ILOG.Diagrammer.Windows.Forms.StrokeDialog.Stroke"/> property to get and set the edited <see cref="T:ILOG.Diagrammer.Stroke"/>.
            <p/>
            <img src="images/Windows/Forms/StrokeDialog.png"/>
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample shows how to edit a <see cref="T:ILOG.Diagrammer.Stroke"/> using
            the <see cref="T:ILOG.Diagrammer.Windows.Forms.StrokeDialog"/>.</para>
            <code lang="cs">
            Stroke stroke = new Stroke(Color.Red);
            StrokeDialog dialog = new StrokeDialog();
            dialog.Stroke = stroke;
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                stroke = dialog.Stroke;
            }
            </code>
            <code lang="vbnet">
            Dim stroke As Stroke = New Stroke(Color.Red)
            Dim dialog As StrokeDialog = New StrokeDialog
            dialog.Stroke = stroke
            If (dialog.ShowDialog = DialogResult.OK) Then
                stroke = dialog.Stroke
            End If
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.FillDialog"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.FormatLinkDialog"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.FilterDialog"/>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.StrokeDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StrokeDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StrokeDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StrokeDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.StrokeDialog"/> class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StrokeDialog.AllowNullStroke">
            <summary>
            Indicates whether to show the "no stroke" button.
            </summary>
            <value><see langword="true"/> to show the remove button; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StrokeDialog.ShowAdvancedPage">
            <summary>
            Indicates whether to show the advanced tab page.
            </summary>
            <value><see langword="true"/> to show the advanced tab page; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StrokeDialog.Stroke">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.Stroke"/> edited by this dialog.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Stroke"/> object.</value>
            <remarks>When setting or getting the property, the value is cloned.</remarks>
            <example>
            <para lang="cs,vbnet">The following sample shows how to edit a <see cref="T:ILOG.Diagrammer.Stroke"/> using
            the <see cref="T:ILOG.Diagrammer.Windows.Forms.StrokeDialog"/>.</para>
            <code lang="cs">
            Stroke stroke = new Stroke(Color.Red);
            StrokeDialog dialog = new StrokeDialog();
            dialog.Stroke = stroke;
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                stroke = dialog.Stroke;
            }
            </code>
            <code lang="vbnet">
            Dim stroke As Stroke = New Stroke(Color.Red)
            Dim dialog As StrokeDialog = New StrokeDialog
            dialog.Stroke = stroke
            If (dialog.ShowDialog = DialogResult.OK) Then
                stroke = dialog.Stroke
            End If
            </code>
            </example>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactTextureChooser.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactTextureChooser.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactTextureChooser.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactTextureChooser.AddTexture(System.Drawing.Image,System.String)">
            <summary>
            Adds the specified texture to the list of available textures using the specified diplay name.
            </summary>
            <param name="img">The texture to add.</param>
            <param name="name">The texture display name.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactTextureChooser.TextureItem"/> instance representing the texture.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactTextureChooser.OnFillChanged(System.EventArgs)">
            <summary>
            Invoked when the settings of the edited <see cref="T:ILOG.Diagrammer.TextureFill"/> are changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains data about the event.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactTextureChooser.updateControl">
            <summary>
            Updates UIControl after a change.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactTextureChooser.DrawListItems(System.Object,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Draws the texture items.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactTextureChooser.OnListSelectionChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when a texture has been selected.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactTextureChooser.OnWrapModeChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the WrapMode has changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactTextureChooser.OnAlphaChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the opacity value has changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactTextureChooser.OnCoordinateChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the CoordinateSpace has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactTextureChooser.Fill">
            <summary>
            The <see cref="T:ILOG.Diagrammer.TextureFill"/> instance to edit.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.TextureFill"/> instance to edit.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactTextureChooser.FillChanged">
            <summary>
            Occurs when the settings of the edited <see cref="T:ILOG.Diagrammer.TextureFill"/> are changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactTextureChooser.TextureItem">
            <summary>
            A class that displays a texture in a List.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactColorChooser.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactColorChooser.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactColorChooser.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactColorChooser.NewColor">
            <summary>
            Gets or sets the new color.
            </summary>
            <remarks>The new color is defined as the color currently being edited.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactColorChooser.CurrentColor">
            <summary>
            Gets or sets the current color.
            </summary>
            <remarks>The current color is defined as the color to edit.</remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.PatternChooser">
            <summary>
            A control that edits <see cref="T:ILOG.Diagrammer.HatchFill"/> instances.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.PatternChooser._fill">
            <summary>
            The edited fill.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.PatternChooser._colordlg">
            <summary>
            The dialog for colors selection.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.PatternChooser.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PatternChooser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.PatternChooser"/> PatternChooser class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PatternChooser.OnPatternChanged(System.EventArgs)">
            <summary>
            Invoked when a property of the edited pattern is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains data about the event.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PatternChooser.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PatternChooser.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PatternChooser.UpdateControl">
            <summary>
            Updates UI Controls.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PatternChooser.FillLists">
            <summary>
            Fills the UI lists with each available HatchStyle
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PatternChooser.UpdatePatternItems">
            <summary>
            Updates PatternItem with the current ForeColor and BackColor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PatternChooser.UpdateColors">
            <summary>
            Updates Color controls with the fill ForeColor and BackColor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PatternChooser.UpdatePreview">
            <summary>
            Updates the preview window.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PatternChooser.UpdateOpacity">
            <summary>
            Updates the opacity control value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PatternChooser.UpdateFill(System.Drawing.Drawing2D.HatchStyle,System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            Updates the edited <see cref="T:ILOG.Diagrammer.HatchFill"/> according to the specified property.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PatternChooser.DrawListItems(System.Object,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Draws a PatternItem in the list.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PatternChooser.DrawPreview(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws the Preview window.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.PatternChooser.PatternChanged">
            <summary>
            Occurs when a property of the edited pattern is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.PatternChooser.Fill">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.HatchFill"/> to edit.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.PatternChooser.PatternItem">
            <summary>
            A class that represents a HatchStyle instance in a List.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.TextBase">
            <summary>
            Represents the <see langword="abstract"/> base class for the <see cref="T:ILOG.Diagrammer.Graphic.Text"/>
            and <see cref="T:ILOG.Diagrammer.Graphic.TextOnPath"/> objects.
            </summary>
            <remarks>The <see cref="T:ILOG.Diagrammer.Graphic.TextBase"/> represents the base class for the <see cref="T:ILOG.Diagrammer.Graphic.Text"/>
            and <see cref="T:ILOG.Diagrammer.Graphic.TextOnPath"/> objects.</remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphicObject">
            <summary>
            The <see langword="abstract"/> base class for all graphic objects.
            </summary>
            <remarks>
            <p>The <see cref="T:ILOG.Diagrammer.GraphicObject"/> class is the base class for all graphic objects.
            Graphic objects are hierarchical and can be combined to create complex drawings.
            The <see cref="T:ILOG.Diagrammer.GraphicContainer"/> class is the base class for graphic containers, that is,
            graphic objects that contain other graphic objects. A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> can be
            displayed in a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView">ILOG.Diagrammer.Windows.Forms.DiagramView</see>
            for Windows applications, or
            <strong>ILOG.Diagrammer.Web.UI.DiagramView</strong> for ASP.NET applications.</p>
            <p>To get or set the bounds of the <strong>GraphicObject</strong>, use the <see cref="P:ILOG.Diagrammer.GraphicObject.Bounds"/> property, or
            the <see cref="P:ILOG.Diagrammer.GraphicObject.Location"/> and <see cref="P:ILOG.Diagrammer.GraphicObject.Size"/> properties.</p>
            <p>The <strong>GraphicObject</strong> class defines several properties that can be used
            to change the appearance of a graphic object. The <see cref="P:ILOG.Diagrammer.GraphicObject.Visibility"/> property controls
            the visibility of the graphic object. The <see cref="P:ILOG.Diagrammer.GraphicObject.Filter"/> property allows to add a filter effect.
            The <see cref="P:ILOG.Diagrammer.GraphicObject.Clip"/> property clips the drawing of the graphic object. The <see cref="P:ILOG.Diagrammer.GraphicObject.Opacity"/>
            property controls the graphic object opacity. The <see cref="P:ILOG.Diagrammer.GraphicObject.Transform"/> property allows to set
            a local affine transformtion on the graphic object.</p>
            <p>A <strong>GraphicObject</strong> may have a preferred size, given by the <see cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSize(ILOG.Diagrammer.Size2D)"/> method.
            To make a graphic object automatically resized to its preferred size, use the <see cref="P:ILOG.Diagrammer.GraphicObject.AutoSize"/> property.</p>
            <p>A <strong>GraphicObject</strong> is painted by calling its <see cref="M:ILOG.Diagrammer.GraphicObject.Paint(ILOG.Diagrammer.DrawingContext)"/> method. The <see cref="M:ILOG.Diagrammer.GraphicObject.Paint(ILOG.Diagrammer.DrawingContext)"/>
            method takes into account the appearance properties defined on the <strong>GraphicObject</strong> class
            such as <see cref="P:ILOG.Diagrammer.GraphicObject.Transform"/>, <see cref="P:ILOG.Diagrammer.GraphicObject.Clip"/>, <see cref="P:ILOG.Diagrammer.GraphicObject.Opacity"/>, <see cref="P:ILOG.Diagrammer.GraphicObject.Filter"/>, and then it
            calls the <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)"/> method. To customize the
            drawing of a graphic object, overrides the <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)"/> method to benefit from the
            graphic object rendering feature.</p>
            <p>A graphic object can receive input events. The <strong>GraphicObject</strong> class defines
            several events that can be used to add interactions to graphic objects. For details, 
            see the <see cref="E:ILOG.Diagrammer.GraphicObject.MouseDown"/>, <see cref="E:ILOG.Diagrammer.GraphicObject.MouseUp"/>, <see cref="E:ILOG.Diagrammer.GraphicObject.MouseMove"/>, 
            <see cref="E:ILOG.Diagrammer.GraphicObject.KeyDown"/>, or <see cref="E:ILOG.Diagrammer.GraphicObject.KeyUp"/> events.</p>
            <p>A graphic object holds a collection of <see cref="T:ILOG.Diagrammer.Anchor"/> object. An <see cref="T:ILOG.Diagrammer.Anchor"/>
            represents a connection point on the graphic object, on which a <see cref="T:ILOG.Diagrammer.ILink"/> can be connected.
            </p>
            <p>When modifying several properties of a <strong>GraphicObject</strong>, call the
            <see cref="M:ILOG.Diagrammer.GraphicObject.BeginUpdate"/> and <see cref="M:ILOG.Diagrammer.GraphicObject.EndUpdate"/> methods to reduce the number of
            notifications.</p>
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.GraphicContainer"/>
            <seealso cref="T:ILOG.Diagrammer.Filter">ILOG.Diagrammer.Filter</seealso>
            <seealso cref="T:ILOG.Diagrammer.Anchor"/>
            <seealso cref="T:ILOG.Diagrammer.ILink"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView">ILOG.Diagrammer.Windows.Forms.DiagramView</seealso>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.FlagNotEnabled">
            <summary>
            Flag indicating whether the object is enabled.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.FlagNotMovable">
            <summary>
            Flag indicating whether the object is movable.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.FlagNotReshapable">
            <summary>
            Flag indicating whether the object is resizable.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.FlagNotSelectable">
            <summary>
            Flag indicating whether the object is resizable.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.FlagNotRotable">
            <summary>
            Flag indicating whether the object is transformable.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.FlagAutoSize">
            <summary>
            Flag indicating whether the object is transformable.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.FlagHasText">
            <summary>
            Flag indicating whether the object has a Text != null.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.FlagHasClip">
            <summary>
            Flag indicating whether the object has a Clip != null.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.FlagDisposing">
            <summary>
            Flag indicating whether the object is being disposed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.FlagNotEditableText">
            <summary>
            Flag indicating whether the object text can be edited.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.FlagNotConnectable">
            <summary>
            Flag indicating whether the object can be connected.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.FlagNotHitTestable">
            <summary>
            Flag indicating whether the object can be hit-tested.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.FlagNotUseDefaultAnchors">
            <summary>
            Flag indicating whether the default anchors of the object
            can be used when connecting a link.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.FlagInitializing">
            <summary>
            Flag indicating whether the object is initializing.
            can be used when connecting a link.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.FlagNotReparentable">
            <summary>
            Flag indicating whether the object is reparentable.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.FlagNotCopiable">
            <summary>
            Flag indicating whether the object is copiable.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.FlagDisposed">
            <summary>
            Flag indicating whether the object is  disposed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject._updating">
            <summary>
            Update count
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject._updatingChange">
            <summary>
            Update Change
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.defaultFont">
            <summary>
            Default font of graphic objects
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject._flags">
            <summary>
            Contains flag indicators.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject._parent">
            <summary>
            The manager that contains this object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject._filter">
            <summary>
            Defines the image filter for the graphic object
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject._transform">
            <summary>
            Defines the local affine transform of this object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject._visibility">
            <summary>
            Visibility of this object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject._opacity">
            <summary>
            Opacity for this graphic object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject._properties">
            <summary>
            A hash table to store properties.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject._logicalParentProperty">
            <summary>
            Property keys...
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.FireEvent(System.Object,System.EventArgs)">
            <summary>
            Fires an event based on key in the Events list.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.FireObjectMouseEvent(System.Object,ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            Fires an event based on mouse in the Events list.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.FireObjectKeyEvent(System.Object,ILOG.Diagrammer.ObjectKeyEventArgs)">
            <summary>
            Fires an event based on key in the Events list.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.FireObjectKeyPressEvent(System.Object,ILOG.Diagrammer.ObjectKeyPressEventArgs)">
            <summary>
            Fires an event based on keypress in the Events list.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.FireObjectEvent(System.Object,ILOG.Diagrammer.ObjectEventArgs)">
            <summary>
            Fires an event based on mouse in the Events list.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.GraphicObject"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.Dispose">
            <summary>
            Releases the resources used by the object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.Finalize">
            <summary>
            This member overrides <see cref="M:System.Object.Finalize">Object.Finalize</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:ILOG.Diagrammer.GraphicObject"/>
            and optionally releases the managed resources. 
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; 
            <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.SetFlag(System.UInt32,System.Boolean)">
            <summary>
            Sets or unsets the value of a flag.
            </summary>
            <param name="flag">The flag value.</param>
            <param name="value">The value of the flag</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetFlag(System.UInt32)">
            <summary>
            Gets the value of a flag.
            </summary>
            <param name="flag">The flag.</param>
            <returns>The value of a flag.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnAutoSizeChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.AutoSize"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnResizeModeChanged(ILOG.Diagrammer.ResizeMode,ILOG.Diagrammer.ResizeMode)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.ResizeMode"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnToolTipChanged(System.String,System.String)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.ToolTip"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnCursorChanged(System.Windows.Forms.Cursor,System.Windows.Forms.Cursor)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.Cursor"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnCanMoveChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.CanMove"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnCanRotateChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.CanRotate"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnCanResizeChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.CanResize"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnCanEditTextChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.CanEditText"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnCanReparentChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.CanReparent"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnCanCopyChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.CanCopy"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnCanHitTestChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.CanHitTest"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnCanSelectChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.CanSelect"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnCanConnectChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.CanConnect"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnEnabledChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.Enabled"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnTextChanged(System.String,System.String)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.Text"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnTextAppearanceChanged(ILOG.Diagrammer.TextAppearance,ILOG.Diagrammer.TextAppearance)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.TextAppearance"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.TextAppearanceIsChanging(System.Object,ILOG.Diagrammer.StyleChangeEventArgs)">
            <summary>
            Invoked when the TextAppearance changes in some way.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.TextAppearanceHasChanged(System.Object,ILOG.Diagrammer.StyleChangeEventArgs)">
            <summary>
            Invoked when the TextAppearance changes in some way.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnTextAppearanceChanged(ILOG.Diagrammer.StyleChangeType)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.TextAppearance"/> property has changed.
            </summary>
            <param name="changeType">One of the <see cref="T:ILOG.Diagrammer.StyleChangeType"/> values.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnFilterChanged(ILOG.Diagrammer.Filter,ILOG.Diagrammer.Filter)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.Filter"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnFilterChanged(ILOG.Diagrammer.StyleChangeType)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.Filter"/> property is changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnClipChanged(ILOG.Diagrammer.ClipPath,ILOG.Diagrammer.ClipPath)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.Clip"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnClipChanged">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.Clip"/> property content is changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnTransformChanged(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Transform)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.Transform"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnOpacityChanged(System.Single,System.Single)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.Opacity"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnVisibilityChanged(ILOG.Diagrammer.Visibility,ILOG.Diagrammer.Visibility)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.Visibility"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.SetParent(ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Sets the new parent for this graphic object.
            </summary>
            <param name="parent">A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> reference.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.Move(ILOG.Diagrammer.Point2D)">
            <summary>
            Moves the top left corner of the graphic object transformed bounds to the specified point.
            </summary>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> structure, expressed in parent coordinate space.</param>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.Resize(System.Single,System.Single)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.Translate(System.Single,System.Single)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.Move(ILOG.Diagrammer.Point2D,System.Drawing.ContentAlignment)">
            <summary>		
            Moves the graphic object transformed bounds to the specified point.
            </summary>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> structure, expressed in parent coordinate space.</param>
            <param name="alignment">One of the <see cref="T:System.Drawing.ContentAlignment"/> values.</param>
            <remarks>The <paramref name="alignment"/> parameter controls the point of the graphic object
            transformed bounds that will be moved to <paramref name="point"/>.</remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.Move(System.Single,System.Single,System.Drawing.ContentAlignment)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.Resize(System.Single,System.Single)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.Translate(System.Single,System.Single)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.Move(System.Single,System.Single,System.Drawing.ContentAlignment)">
            <summary>		
            Moves the graphic object transformed bounds to the specified coordinates.
            </summary>
            <param name="x">The x coordinate, expressed in parent coordinate space.</param>
            <param name="y">The y coordinate, expressed in parent coordinate space.</param>        
            <param name="alignment">One of the <see cref="T:System.Drawing.ContentAlignment"/> values.</param>
            <remarks>The <paramref name="alignment"/> parameter controls the point of the
            graphic object transformed bounds that will be moved to the new coordinates 
            <paramref name="x"/> and <paramref name="y"/>.</remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.Move(ILOG.Diagrammer.Point2D,System.Drawing.ContentAlignment)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.Resize(System.Single,System.Single)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.Translate(System.Single,System.Single)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.Translate(System.Single,System.Single)">
            <summary>
            Translates the object in its parent coordinate space.
            </summary>
            <param name="x">The x-offset.</param>
            <param name="y">The y-offset.</param>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.Resize(System.Single,System.Single)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.Move(ILOG.Diagrammer.Point2D)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.Resize(System.Single,System.Single)">
            <summary>
            Resizes the object in its parent coordinate space.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.Translate(System.Single,System.Single)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.Move(ILOG.Diagrammer.Point2D)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetGeometryBounds">
            <summary>
            Returns the bounding area of this graphic object without taking into
            account the local transformation or the filter or the styling.
            </summary>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure that represents the graphic object
            geometry bounds.</returns>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Sets the bounding area of this graphic object without taking into
            account the local transformation or the filter or the styling.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure that represents the graphic object
            geometry bounds.</param>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.GetGeometryBounds"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)">
            <summary>
            Is called to compute the transformed bounds of this object in its parent coordinate space.
            </summary>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
            <remarks>The default implementation applies the local transformation to the
            <see cref="P:ILOG.Diagrammer.GraphicObject.GeometryBounds"/> property and returns the result.</remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Changes the transformed bounds of this object when displayed using the specified transformation.
            </summary>
            <param name="t">A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</param>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</param>
            <remarks>This method changes the transformed bounds of this object
            by calling <see cref="M:ILOG.Diagrammer.GraphicObject.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)"/> when it's possible. If this is 
            not possible, the <see cref="P:ILOG.Diagrammer.GraphicObject.Transform"/> property is changed to match
            the new transformed bounds.</remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetStyledBounds(ILOG.Diagrammer.Transform)">
            <summary>
            Gets the styled bounds of the object when it's displayed with the specified transformation.
            </summary>
            <param name="t">A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
            <remarks>This method takes into account the style but not the filter.</remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.GetRenderBounds(ILOG.Diagrammer.Transform)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetRenderBounds(ILOG.Diagrammer.Transform)">
            <summary>
            Gets the bounds of the object when it's displayed with the specified transformation.
            </summary>
            <param name="t">A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
            <remarks>This method takes into account the style, the filter, and the local transformation.</remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.GetStyledBounds(ILOG.Diagrammer.Transform)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetEditTextBounds">
            <summary>
            Gets the bounds that can be used when editing the text of this graphic object.
            </summary>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
            <remarks>The default implementation returns <see cref="P:ILOG.Diagrammer.GraphicObject.GeometryBounds"/>.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetDisplayBounds">
            <summary>
            Is called to compute the exact area where the drawing of the object will be performed, without
            using the style.
            </summary>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
            <remarks>This method doesn't take into account the style, the filter, or the local transformation.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetRelativeBounds(ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Gets the bounds of this object expressed in the specified container coordinate system.
            </summary>
            <param name="container">A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> instance.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetGeometryToContainerTransform(ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Gets the transformation to convert geometry coordinates into the specified container children coordinate system.
            </summary>
            <param name="container">A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> instance.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</returns>
            <remarks>This method uses the local transformation of this graphic object.</remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.GetGeometryToViewTransform(ILOG.Diagrammer.IDiagramView)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetGeometryToViewTransform(ILOG.Diagrammer.IDiagramView)">
            <summary>
            Gets the transformation to convert geometry coordinates into the specified view coordinate system.
            </summary>
            <param name="view">A <see cref="T:ILOG.Diagrammer.IDiagramView"/> instance.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</returns>
            <remarks>This method uses the local transformation of this graphic object.</remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.GetGeometryToContainerTransform(ILOG.Diagrammer.GraphicContainer)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.Intersects(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Tests whether any portion of the path of the graphic
            object intersects with the specified region.
            </summary>
            <param name="region">A <see cref="T:System.Drawing.Region"/> instance, expressed in the parent coordinate space.</param>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
            <returns><see langword="true"/> if the graphic object intersects with <paramref name="region"/>;
            Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to test if the specified region intersects the object.
            </summary>
            <param name="region">A <see cref="T:System.Drawing.Region"/> instance, expressed in the parent coordinate space.</param>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
            <returns><see langword="true"/> if the point is in the object.</returns>
            <remarks>The <paramref name="region"/> parameter is in the object coordinate space,
            without taking into account the local transformation.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.Intersects(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Transform)">
            <summary>
            Tests whether any portion of the bounding box of the graphic
            object intersects with the specified rectangle when it's drawn using the specified transformation.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure, expressed in the parent coordinate space.</param>
            <param name="t">A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</param>
            <returns><see langword="true"/> if the graphic object intersects with <paramref name="rect"/>;
            Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.Contains(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Transform)">
            <summary>
            Tests if the specified point is contained in the bounding area
            of this graphic object when it's drawn using the specified transformation.
            </summary>
            <param name="point">The point to test.</param>
            <param name="t">A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</param>
            <returns><see langword="true"/> if the point is 
            contained in the graphic object bounds, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.HitTest(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Tests if the specified point is inside the object.
            </summary>
            <param name="point">The point to test.</param>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
            <returns><see langword="true"/> if the point is in the object; Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to test if the specified point is inside the object.
            </summary>
            <param name="point">The point to test.</param>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
            <returns><see langword="true"/> if the point is in the object; Otherwise, <see langword="false"/>.</returns>
            <remarks>The <paramref name="point"/> parameter is in the object coordinate space,
            without taking into account the local transformation.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.HitTestText(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to test if the specified point is inside the text of the object.
            </summary>
            <param name="point">The point to test.</param>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
            <returns><see langword="true"/> if the point is in the text of the object; Otherwise, <see langword="false"/>.</returns>
            <remarks>The <paramref name="point"/> parameter is in the object coordinate space,
            without taking into account the local transformation.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.IntersectsText(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to test if the specified region intersects the object text.
            </summary>
            <param name="region">A <see cref="T:System.Drawing.Region"/> instance, expressed in the parent coordinate space.</param>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
            <returns><see langword="true"/> if the region intersects the object text;
            Otherwise, <see langword="false"/>.</returns>
            <remarks>The <paramref name="region"/> parameter is in the object coordinate space,
            without taking into account the local transformation.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetAutoSize(ILOG.Diagrammer.Size2D)">
            <summary>
            Returns the preferred size of the object with the specified proposed size.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.ResizeToPreferredSize">
            <summary>
            Is called to resize the object to its preferred size when the object has no size constraint.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.FitToSize">
            <summary>
            Resize the graphic object to its preferred size.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSize(ILOG.Diagrammer.Size2D)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetPreferredSize(ILOG.Diagrammer.Size2D)">
            <summary>
            Gets the preferred size for this graphic object taking into account the local transformation.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Size2D"/> structure.</value>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">
            <summary>
            Gets the preferred size of the graphic object without using the local transformation.
            </summary>
            <returns>A <see cref="T:ILOG.Diagrammer.Size2D"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnGotMouseCapture(ILOG.Diagrammer.ObjectEventArgs)">
            <summary>
            Invoked when the object has got the mouse capture.
            </summary>
            <remarks>This method is invoked during the bubbling routing phase. There's no corresponding
            tunneling event.</remarks>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnGotKeyCapture(ILOG.Diagrammer.ObjectEventArgs)">
            <summary>
            Invoked when the object has got the key capture.
            </summary>
            <remarks>This method is invoked during the bubbling routing phase. There's no corresponding
            tunneling event.</remarks>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnLostMouseCapture(ILOG.Diagrammer.ObjectEventArgs)">
            <summary>
            Invoked when the object has lost the mouse capture.
            </summary>
            <remarks>This method is invoked during the bubbling routing phase. There's no corresponding
            tunneling event.</remarks>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnLostKeyCapture(ILOG.Diagrammer.ObjectEventArgs)">
            <summary>
            Invoked when the object has lost the key capture.
            </summary>
            <remarks>This method is invoked during the bubbling routing phase. There's no corresponding
            tunneling event.</remarks>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnMouseClick(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            Invoked when a <see cref="E:ILOG.Diagrammer.GraphicObject.MouseClick"/> is performed on this object.
            </summary>
            <remarks>This method is invoked during the bubbling routing phase. The corresponding
            method invoked in the tunneling routing phase is <see cref="M:ILOG.Diagrammer.GraphicObject.OnPreviewMouseClick(ILOG.Diagrammer.ObjectMouseEventArgs)"/>.</remarks>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectMouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnPreviewMouseClick(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            Invoked when a <see cref="E:ILOG.Diagrammer.GraphicObject.MouseClick"/> is performed on this object.
            </summary>
            <remarks>This method is invoked during the tunneling routing phase. The corresponding
            method invoked in the bubbling routing phase is <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseClick(ILOG.Diagrammer.ObjectMouseEventArgs)"/>.</remarks>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectMouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnMouseDown(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            Invoked when a mouse button is pressed while the pointer is over this object.
            </summary>
            <remarks>This method is invoked during the bubbling routing phase. The corresponding
            method invoked in the tunneling routing phase is <see cref="M:ILOG.Diagrammer.GraphicObject.OnPreviewMouseDown(ILOG.Diagrammer.ObjectMouseEventArgs)"/>.</remarks>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectMouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnPreviewMouseDown(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            Invoked when a mouse button is pressed while the pointer is over this object.
            </summary>
            <remarks>This method is invoked during the tunneling routing phase. The corresponding
            method invoked in the bubbling routing phase is <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseDown(ILOG.Diagrammer.ObjectMouseEventArgs)"/>.</remarks>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectMouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnMouseUp(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            Invoked when a mouse button is released while the pointer is over this object.
            </summary>
            <remarks>This method is invoked during the bubbling routing phase. The corresponding
            method invoked in the tunneling routing phase is <see cref="M:ILOG.Diagrammer.GraphicObject.OnPreviewMouseUp(ILOG.Diagrammer.ObjectMouseEventArgs)"/>.</remarks>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectMouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnPreviewMouseUp(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            Invoked when a mouse button is released while the pointer is over this object.
            </summary>
            <remarks>This method is invoked during the tunneling routing phase. The corresponding
            method invoked in the bubbling routing phase is <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseUp(ILOG.Diagrammer.ObjectMouseEventArgs)"/>.</remarks>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectMouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnMouseMove(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            Invoked when the mouse is moved over this object.
            </summary>
            <remarks>This method is invoked during the bubbling routing phase. The corresponding
            method invoked in the tunneling routing phase is <see cref="M:ILOG.Diagrammer.GraphicObject.OnPreviewMouseMove(ILOG.Diagrammer.ObjectMouseEventArgs)"/>.</remarks>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectMouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnPreviewMouseMove(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            Invoked when the mouse is moved over this object.
            </summary>
            <remarks>This method is invoked during the tunneling routing phase. The corresponding
            method invoked in the bubbling routing phase is <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseMove(ILOG.Diagrammer.ObjectMouseEventArgs)"/>.</remarks>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectMouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnMouseEnter(ILOG.Diagrammer.ObjectEventArgs)">
            <summary>
            Invoked when the mouse enters the boundaries of this object.
            </summary>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnMouseLeave(ILOG.Diagrammer.ObjectEventArgs)">
            <summary>
            Invoked when the mouse leaves the boundaries of this object.
            </summary>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnKeyDown(ILOG.Diagrammer.ObjectKeyEventArgs)">
            <summary>
            Invoked when a key is pressed while this object has the keyboard capture.
            </summary>
            <remarks>This method is invoked during the bubbling routing phase. The corresponding
            method invoked in the tunneling routing phase is <see cref="M:ILOG.Diagrammer.GraphicObject.OnPreviewKeyDown(ILOG.Diagrammer.ObjectKeyEventArgs)"/>.</remarks>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectKeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnPreviewKeyDown(ILOG.Diagrammer.ObjectKeyEventArgs)">
            <summary>
            Invoked when a key is pressed while this object has the keyboard capture.
            </summary>
            <remarks>This method is invoked during the tunneling routing phase. The corresponding
            method invoked in the bubbling routing phase is <see cref="M:ILOG.Diagrammer.GraphicObject.OnKeyDown(ILOG.Diagrammer.ObjectKeyEventArgs)"/>.</remarks>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectKeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnKeyUp(ILOG.Diagrammer.ObjectKeyEventArgs)">
            <summary>
            Invoked when a key is released while this object has the keyboard capture.
            </summary>
            <remarks>This method is invoked during the bubbling routing phase. The corresponding
            method invoked in the tunneling routing phase is <see cref="M:ILOG.Diagrammer.GraphicObject.OnPreviewKeyUp(ILOG.Diagrammer.ObjectKeyEventArgs)"/>.</remarks>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectKeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnPreviewKeyUp(ILOG.Diagrammer.ObjectKeyEventArgs)">
            <summary>
            Invoked when a key is released while this object has the keyboard capture.
            </summary>
            <remarks>This method is invoked during the tunneling routing phase. The corresponding
            method invoked in the bubbling routing phase is <see cref="M:ILOG.Diagrammer.GraphicObject.OnKeyUp(ILOG.Diagrammer.ObjectKeyEventArgs)"/>.</remarks>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectKeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnKeyPress(ILOG.Diagrammer.ObjectKeyPressEventArgs)">
            <summary>
            Invoked when a key is pressed while this object has the keyboard capture.
            </summary>
            <remarks>This method is invoked during the bubbling routing phase. The corresponding
            method invoked in the tunneling routing phase is <see cref="M:ILOG.Diagrammer.GraphicObject.OnPreviewKeyPress(ILOG.Diagrammer.ObjectKeyPressEventArgs)"/>.</remarks>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectKeyPressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnPreviewKeyPress(ILOG.Diagrammer.ObjectKeyPressEventArgs)">
            <summary>
            Invoked when a key is pressed while this object has the keyboard capture.
            </summary>
            <remarks>This method is invoked during the tunneling routing phase. The corresponding
            method invoked in the bubbling routing phase is <see cref="M:ILOG.Diagrammer.GraphicObject.OnKeyPress(ILOG.Diagrammer.ObjectKeyPressEventArgs)"/>.</remarks>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ObjectKeyPressEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetToolTipData(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Transform)">
            <summary>
            Gets the string displayed by this graphic object when the mouse hovers it at the specified point.
            </summary>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> structure, defined in the parent coordinate space.</param>
            <param name="t">A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</param>
            <returns>A <see cref="T:System.String"/> displayed when the mouse hovers the graphic object at the specified point.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Paints the core of the graphic object.
            </summary>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.PaintText(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Paints the text of the graphic object.
            </summary>
            <param name="context">The graphic context to draw on.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.Paint(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Paints the graphic object.
            </summary>
            <remarks>Calls <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)"/> and <see cref="M:ILOG.Diagrammer.GraphicObject.PaintText(ILOG.Diagrammer.DrawingContext)"/>
            after adding the local transformation of the object in the
            <strong>Graphics</strong>. In case this graphic object has a filter,
            then the method will also apply the image filtering.</remarks>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> that contains drawing information.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.PaintWithTransparency(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Draws the graphic object when an opacity is defined on it.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.PaintWithFilter(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Draws the graphic object when a filter is defined on it.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.BeginUpdate">
            <summary>
            Starts an update cycle for this graphic object.
            </summary>
            <remarks><p>During an update cycle, the object will not throw its <see cref="E:ILOG.Diagrammer.GraphicObject.Changed"/> event
            anymore. This can be useful is you want to make several modifications on the
            object while keeping a single notification.</p>
            <p>Update cycles can be nested.</p></remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.EndUpdate"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.EndUpdate">
            <summary>
            Ends an update cycle for this graphic object.
            </summary>
            <remarks><p>During an update cycle, the object will not throw its <see cref="E:ILOG.Diagrammer.GraphicObject.Changed"/> event
            anymore. This can be useful is you want to make several modifications on the
            object while keeping a single notification.</p>
            <p>Update cycles can be nested.</p></remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.BeginUpdate"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnIsUpdatingChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.GraphicObject.IsUpdatingChanged"/> event.
            </summary>
            <param name="args">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.RemoveFromParent">
            <summary>
            Removes this object from its logical parent.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.SaveAsXml(System.IO.Stream)">
            <summary>
            Serializes the current object as XML into the specified stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/>.</param>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.FromXmlStream(System.IO.Stream)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.FromXmlStream(System.IO.Stream)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.GraphicObject"/> from the specified stream.
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> reference.</param>
            <returns>The <see cref="T:ILOG.Diagrammer.GraphicObject"/> created by this method.</returns>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.SaveAsXml(System.IO.Stream)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.FromUri(System.Uri)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.GraphicObject"/> from the specified uri.
            </summary>
            <param name="uri">A <see cref="T:System.Uri"/> reference.</param>
            <returns>The <see cref="T:ILOG.Diagrammer.GraphicObject"/> created by this method.</returns>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.FromXmlStream(System.IO.Stream)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.SaveAsXml(System.IO.Stream)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.Clone">
            <summary>
            Returns a copy of this object.
            </summary>
            <returns>A copy of this object.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.IsDescendantOf(ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Checks if this graphic object is contained in the hierachy of the specified container.
            </summary>
            <param name="container">The <see cref="T:ILOG.Diagrammer.GraphicContainer"/> to test.</param>
            <returns><see langword="true"/> if this graphic object is contained in the hierachy of the <paramref name="container"/>;
            Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetPathFromRoot">
            <summary>
            Computes the path from the top level <see cref="T:ILOG.Diagrammer.GraphicContainer"/> to this graphic object.
            </summary>
            <returns>An array of <see cref="T:ILOG.Diagrammer.GraphicContainer"/>. The first object in the array is the
            top level container. The last object is the direct parent of this graphic object.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetPathToRoot">
            <summary>
            Computes the path from this graphic object to the top level <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
            <returns>An array of <see cref="T:ILOG.Diagrammer.GraphicContainer"/>. The first object in the array is the
            direct parent of this graphic object. The last object is the top level container.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetPathFromAncestor(ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Computes the path from the specified parent to this graphic object.
            </summary>
            <returns>An array of <see cref="T:ILOG.Diagrammer.GraphicContainer"/>. The first object in the array is the
            <param name="parent"/> container. The last object is the direct parent of this graphic object.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetPathToAncestor(ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Computes the path from this graphic object to the specified parent.
            </summary>
            <returns>An array of <see cref="T:ILOG.Diagrammer.GraphicContainer"/>. The first object in the array is the
            direct parent of this graphic object. The last object is the <param name="parent"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.Invalidate">
            <summary>
            Invalidates the region occupied by this graphic object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnShouldReceiveParentChangeNotificationsChanged">
            <summary>
            Must be called when the <see cref="P:ILOG.Diagrammer.GraphicObject.ShouldReceiveParentChangeNotifications"/> property changes.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnGraphicChanged(ILOG.Diagrammer.GraphicChange)">
            <summary>
            Is called when the graphic object has changed.
            </summary>
            <param name="type">One of the <see cref="T:ILOG.Diagrammer.GraphicChange"/> values.</param>
            <remarks>This method should be called after any modification on the graphic object. Depending on the
            modification, the <paramref name="type"/> parameter should be set to the appropriate value.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnGraphicChanging(ILOG.Diagrammer.GraphicChange)">
            <summary>
            Is called when the graphic object is changing.
            </summary>
            <param name="type">One of the <see cref="T:ILOG.Diagrammer.GraphicChange"/> values.</param>
            <remarks>This method should be called before any modification on the graphic object. Depending on the
            modification, the <paramref name="type"/> parameter should be set to the appropriate value.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnGraphicChanging(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            Is called when the graphic object is changing.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.GraphicChangeEventArgs"/> that contains the event data.</param>
            <remarks>This method should be called before any modification on the graphic object. Depending on the
            modification, the <paramref name="type"/> parameter should be set to the appropriate value.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnGraphicChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            Is called when the graphic object has changed.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.GraphicChangeEventArgs"/> that contains the event data.</param>
            <remarks>This method should be called after any modification on the graphic object. Depending on the
            modification, the <paramref name="type"/> parameter should be set to the appropriate value.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnParentChanging(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.GraphicObject.ParentChanging"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.GraphicChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnParentChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.GraphicObject.ParentChanged"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.GraphicChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.GraphicObject.Changed"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.GraphicChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnChanging(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.GraphicObject.Changed"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.GraphicChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnBoundsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.GraphicObject.BoundsChanged"/> event.
            </summary>
            <param name="args">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnBoundsChanging(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.GraphicObject.BoundsChanging"/> event.
            </summary>
            <param name="args">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetAnchors(ILOG.Diagrammer.ILink,System.Boolean)">
            <summary>
            Gets the collection of <see cref="T:ILOG.Diagrammer.Anchor"/> objects attached to this graphic object that can be connected to the 
            specified link.
            </summary>
            <param name="link">A <see cref="T:ILOG.Diagrammer.ILink"/> reference. This parameter may be <see langword="null"/>.</param>
            <param name="start"><see langword="true"/> if the connection is made on the link start; otherwise, <see langword="false"/>.</param>
            <returns>A collection of <see cref="T:ILOG.Diagrammer.Anchor"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.ShouldSerializeAnchors">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.GraphicObject.Anchors"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetDefaultAnchors">
            <summary>
            Returns a collection of default anchors for this graphic object.
            The default anchors are used during interactions to determine
            the possible connection points for links.
            </summary>
            <returns>
            A collection of <see cref="T:ILOG.Diagrammer.Anchor"/> containing the default
            anchors for this graphic object.
            </returns>
            <remarks>
            The default implementation for this class returns a collection containing
            4 <see cref="T:ILOG.Diagrammer.BoundsAnchor"/> instances, one for each of the positions
            <see cref="F:ILOG.Diagrammer.AnchorPosition.Left"/>,
            <see cref="F:ILOG.Diagrammer.AnchorPosition.Top"/>,
            <see cref="F:ILOG.Diagrammer.AnchorPosition.Right"/> and
            <see cref="F:ILOG.Diagrammer.AnchorPosition.Bottom"/>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetLinks(ILOG.Diagrammer.LinkType)">
            <summary>
            Gets the links connected to this graphic object.
            </summary>
            <param name="type">One of the <see cref="T:ILOG.Diagrammer.LinkType"/> values.</param>
            <returns>A collection of <see cref="T:ILOG.Diagrammer.ILink"/> objects.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.GetNodes(ILOG.Diagrammer.LinkType)">
            <summary>
            Gets the nodes connected to this graphic object.
            </summary>
            <param name="type">One of the <see cref="T:ILOG.Diagrammer.LinkType"/> values.</param>
            <returns>A collection of <see cref="T:ILOG.Diagrammer.GraphicObject"/> objects.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnLinkConnected(System.Collections.ObjectModel.ReadOnlyCollection{ILOG.Diagrammer.ILink})">
            <summary>
            Is called when links are connected to this object.
            </summary>
            <param name="links">The links that is now connected to this object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnLinkDisconnected(System.Collections.ObjectModel.ReadOnlyCollection{ILOG.Diagrammer.ILink})">
            <summary>
            Is called when links are disconnected to this object.
            </summary>
            <param name="links">The links that have been diconnected from this object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.OnUseDefaultAnchorsChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.GraphicObject.UseDefaultAnchors"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Events">
            <summary>
            Gets a list of event handler delegates for the graphic object.
            </summary>
            <value>
            The list of event handler delegates. 
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.IsDisposing">
            <summary>
            Indicates whether the object is being disposed.
            </summary>
            <value><see langword="true"/> if the object is being disposed; Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.IsDisposed">
            <summary>
            Indicates whether the object is disposed.
            </summary>
            <value><see langword="true"/> if the object is disposed; Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.Disposed">
            <summary>
            Occurs when the graphic object is disposed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Properties">
            <summary>
            Gets a dictionary used to store properties on this object.
            </summary>
            <value>A <see cref="T:System.Collections.IDictionary"/> object used to store properties on this graphic object.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.DefaultFont">
            <summary>
            Gets the default font used by graphic objects.
            </summary>
            <value>A <see cref="T:System.Drawing.Font"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.DesignMode">
            <summary>
            Indicates whether the graphic object is in design mode;
            </summary>
            <value><see langword="true"/> if the object is in design mode; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.AutoSize">
            <summary>
            Gets or sets a value indicating whether the object should take its preferred size, if any.
            </summary>
            <value><see langword="true"/> if the object should take its preferred size; Otherwise, <see langword="false"/>.
            The default value is <see langword="false"/>.</value>
            <remarks>To determine whether a graphic object has a preferred size, the <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth"/> and
            <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight"/> properties are called. The preferred size is given by calling the
            <see cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSize(ILOG.Diagrammer.Size2D)"/> method.</remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth"/>
            <seealso cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight"/>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSize(ILOG.Diagrammer.Size2D)"/>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.AutoSizeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.AutoSize"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.ResizeMode">
            <summary>
            Gets or sets the resize mode for the graphic object.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.ResizeMode"/> values. The default value is <see cref="F:ILOG.Diagrammer.ResizeMode.Resize"/>.</value>
            <remarks>This property is used when the <see cref="P:ILOG.Diagrammer.GraphicObject.Bounds"/> of the object are changed. If the value is
            <see cref="F:ILOG.Diagrammer.ResizeMode.Zoom">ResizeMode.Zoom</see>, the object local transformation will be changed when the
            <see cref="P:ILOG.Diagrammer.GraphicObject.Bounds"/> gets modified. If the value is <see cref="F:ILOG.Diagrammer.ResizeMode.Resize">ResizeMode.Resize</see>, 
            the object will be resized.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.ResizeModeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.ResizeMode"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.ToolTip">
            <summary>
            Gets or sets the tooltip for the graphic object.
            </summary>
            <value>A <see cref="T:System.String"/> that represents the tooltip for the graphic object.</value>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.GetToolTipData(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Transform)"/>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.ToolTipChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.ToolTip"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Cursor">
            <summary>
            Gets or sets the mouse cursor of the object.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Cursor"/> that is displayed when the mouse is hover the object.</value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.CursorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.Cursor"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.CanMove">
            <summary>
            Indicates whether the object can be moved during an interaction.
            </summary>
            <value><see langword="true"/> if the object can be moved; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.CanMoveChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.CanMove"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.CanRotate">
            <summary>
            Indicates whether the object can be rotated during an interaction.
            </summary>
            <value><see langword="true"/> if the object can be rotated; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.CanRotateChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.CanRotate"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.CanResize">
            <summary>
            Indicates whether the object can be reshaped during an interaction.
            </summary>
            <value><see langword="true"/> if the object can be reshaped; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.CanResizeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.CanResize"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.CanEditText">
            <summary>
            Indicates whether the object text can be edited during an interaction.
            </summary>
            <value><see langword="true"/> if the object text can be edited; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.CanEditTextChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.CanEditText"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.CanReparent">
            <summary>
            Indicates whether the object can be reparented during an interaction.
            </summary>
            <value><see langword="true"/> if the object can be reparented; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.CanReparentChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.CanReparent"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.CanCopy">
            <summary>
            Indicates whether the object can be copied during an interaction.
            </summary>
            <value><see langword="true"/> if the object can be copied; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.CanCopyChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.CanCopy"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.CanHitTest">
            <summary>
            Indicates whether the object can be hit tested.
            </summary>
            <value><see langword="true"/> if the object can be hit tested; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.CanHitTestChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.CanHitTest"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.CanSelect">
            <summary>
            Indicates whether the object can be selected during an interaction.
            </summary>
            <value><see langword="true"/> if the object can be selected; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.CanSelectChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.CanSelect"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.CanConnect">
            <summary>
            Indicating whether the object can use its default anchors.
            </summary>
            <value><see langword="true"/> if the object can use its default anchors; Otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.CanConnectChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.CanConnect"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Enabled">
            <summary>
            Indicates whether the object can be receive input events during an interaction.
            </summary>
            <value><see langword="true"/> if the object can be hit tested; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.EnabledChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.Enabled"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Text">
            <summary>
            Gets or sets the text displayed by this graphic object.
            </summary>
            <value>A <see cref="T:System.String"/> reference.</value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.TextChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.Text"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.TextAppearance">
            <summary>
            Gets or sets the text appearance properties.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.TextAppearance"/> instance.</value>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.PaintText(ILOG.Diagrammer.DrawingContext)"/>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.TextAppearanceChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.TextAppearance"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Filter">
            <summary>
            Gets and sets the <see cref="T:ILOG.Diagrammer.Filter"/> applied on the object when 
            drawing.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Filter"/> object that is applied to the graphic object.
            </value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.FilterChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.Filter"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Clip">
            <summary>
            Gets or sets the clip for the graphic object.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.ClipPath"/> instance. The default value is <see langword="null"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.ClipChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.Clip"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Transform">
            <summary>
            Gets or sets the affine transformed applied to the graphic
            object when rendered.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Transform"/> that represents the
            local transform of the object.</value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.TransformChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.Transform"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Opacity">
            <summary>
            Gets or sets the opacity of the graphic object.
            </summary>
            <value>A <see cref="T:System.Single"/> value in the [0..1] range. Use <strong>1</strong>
            for fully opaque, and <strong>0</strong> for fully transparent. The default value
            is <strong>1</strong>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.OpacityChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.Opacity"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Visibility">
            <summary>
            Gets or sets the visibility of the object.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Visibility"/> values. The default value is
            <see cref="F:ILOG.Diagrammer.Visibility.Visible"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.VisibilityChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.Visibility"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.IsVisible">
            <summary>
            Indicates whether this object is visible.
            </summary>
            <value><see langword="true"/> if the <see cref="P:ILOG.Diagrammer.GraphicObject.Visibility"/> property
            is <see cref="F:ILOG.Diagrammer.Visibility.Visible"/>; Otherwise, <see langword="false"/>.</value>
            <seealso cref="P:ILOG.Diagrammer.GraphicObject.IsCollapsed"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.IsCollapsed">
            <summary>
            Indicates whether this object is collapsed.
            </summary>
            <value><see langword="true"/> if the <see cref="P:ILOG.Diagrammer.GraphicObject.Visibility"/> property
            is <see cref="F:ILOG.Diagrammer.Visibility.Collapsed"/>; Otherwise, <see langword="false"/>.</value>
            <seealso cref="P:ILOG.Diagrammer.GraphicObject.IsVisible"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.IsTransformed">
            <summary>
            Indicates whether this object has a <see cref="T:ILOG.Diagrammer.Transform"/> that is not
            the identity transform.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight">
            <summary>
            Indicates whether this object has a preferred height.
            </summary>
            <value><see langword="true"/> if the object has a preferred height; Otherwise, <see langword="false"/>.</value>
            <seealso cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth">
            <summary>
            Indicates whether this object has a preferred width.
            </summary>
            <value><see langword="true"/> if the object has a preferred width; Otherwise, <see langword="false"/>.</value>
            <seealso cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.IsFiltered">
            <summary>
            Indicates whether this object has a valid <see cref="T:ILOG.Diagrammer.Filter"/>.
            </summary>
            <value><see langword="true"/> if the object has a valid filter; Otherwise, <see langword="false"/>.</value>    
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.IsDrawingText">
            <summary>
            Indicates whether this object is drawing its <see cref="P:ILOG.Diagrammer.GraphicObject.Text"/> property.
            </summary>
            <value><see langword="true"/> if the object is drawing its text; Otherwise, <see langword="false"/>.</value>    
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Parent">
            <summary>
            Gets the container that contains this object.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> reference, or <see langword="null"/>
            if the object is not contained in any container.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.LogicalParent">
            <summary>
            Gets the logical container that contains this object.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> reference, or <see langword="null"/>
            if the object is not contained in any container.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Location">
            <summary>
            Gets or sets the upper left corner of the object bounding box.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Size2D"/> structure, expressed in parent coordinate space.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Size">
            <summary>
            Gets or sets the object size.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Size2D"/> structure, expressed in parent coordinate space.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.X">
            <summary>
            Gets or sets the object x coordinate.
            </summary>
            <value>A <see cref="T:System.Single"/> value expressed in parent coordinate space.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Y">
            <summary>
            Gets or sets the object y coordinate.
            </summary>
            <value>A <see cref="T:System.Single"/> value expressed in parent coordinate space.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Width">
            <summary>
            Gets or sets the object width.
            </summary>
            <value>A <see cref="T:System.Single"/> value expressed in parent coordinate space.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Left">
            <summary>
            Gets the object x coordinate.
            </summary>
            <value>A <see cref="T:System.Single"/> value expressed in parent coordinate space.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Top">
            <summary>
            Gets the object y coordinate.
            </summary>
            <value>A <see cref="T:System.Single"/> value expressed in parent coordinate space.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Right">
            <summary>
            Gets the object right coordinate.
            </summary>
            <value>A <see cref="T:System.Single"/> value expressed in parent coordinate space.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Bottom">
            <summary>
            Gets the object bottom coordinate.
            </summary>
            <value>A <see cref="T:System.Single"/> value expressed in parent coordinate space.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Height">
            <summary>
            Gets or sets the object height.
            </summary>
            <value>A <see cref="T:System.Single"/> value expressed in parent coordinate space.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.GeometryBounds">
            <summary>
            Gets or sets the bounding area of this graphic object without taking into
            account the local transformation or the filter or the styling.
            </summary>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure that represents the graphic object
            geometry bounds.</returns>
            <seealso cref="P:ILOG.Diagrammer.GraphicObject.Bounds"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Bounds">
            <summary>
            Gets or sets the transformed bounds of this object.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</value>
            <seealso cref="P:ILOG.Diagrammer.GraphicObject.GeometryBounds"/>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.GotMouseCapture">
            <summary>
            Occurs when the object has got the mouse capture.
            </summary>
            <remarks>This event is routed using the bubbling routing strategy. There's no
            corresponding tunneling event.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.GotKeyCapture">
            <summary>
            Occurs when the object has got the key capture.
            </summary>
            <remarks>This event is routed using the bubbling routing strategy. There's no
            corresponding tunneling event.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.LostMouseCapture">
            <summary>
            Occurs when the object has lost the mouse capture.
            </summary>
            <remarks>This event is routed using the bubbling routing strategy. There's no
            corresponding tunneling event.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.LostKeyCapture">
            <summary>
            Occurs when the object has lost the key capture.
            </summary>
            <remarks>This event is routed using the bubbling routing strategy. There's no
            corresponding tunneling event.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.MouseClick">
            <summary>
            Occurs when a click is performed on this object.
            </summary>
            <remarks>This event is routed using the bubbling routing strategy. The 
            corresponding tunneling event is <see cref="E:ILOG.Diagrammer.GraphicObject.PreviewMouseClick"/>.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.PreviewMouseClick">
            <summary>
            Occurs when a click is performed on this object.
            </summary>
            <remarks>This event is routed using the tunneling routing strategy. The 
            corresponding bubbling event is <see cref="E:ILOG.Diagrammer.GraphicObject.MouseClick"/>.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.MouseDown">
            <summary>
            Occurs when a mouse button is pressed while the pointer is over this object.
            </summary>
            <remarks>This event is routed using the bubbling routing strategy. The 
            corresponding tunneling event is <see cref="E:ILOG.Diagrammer.GraphicObject.PreviewMouseDown"/>.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.PreviewMouseDown">
            <summary>
            Occurs when a mouse button is pressed while the pointer is over this object.
            </summary>
            <remarks>This event is routed using the tunneling routing strategy. The 
            corresponding bubbling event is <see cref="E:ILOG.Diagrammer.GraphicObject.MouseDown"/>.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.MouseUp">
            <summary>
            Occurs when a mouse button is released while the pointer is over this object.
            </summary>
            <remarks>This event is routed using the bubbling routing strategy. The 
            corresponding tunneling event is <see cref="E:ILOG.Diagrammer.GraphicObject.PreviewMouseUp"/>.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.PreviewMouseUp">
            <summary>
            Occurs when a mouse button is released while the pointer is over this object.
            </summary>
            <remarks>This event is routed using the tunneling routing strategy. The 
            corresponding bubbling event is <see cref="E:ILOG.Diagrammer.GraphicObject.MouseUp"/>.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.MouseMove">
            <summary>
            Occurs when the mouse is moved over this object.
            </summary>
            <remarks>This event is routed using the bubbling routing strategy. The 
            corresponding tunneling event is <see cref="E:ILOG.Diagrammer.GraphicObject.PreviewMouseMove"/>.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.PreviewMouseMove">
            <summary>
            Occurs when the mouse is moved over this object.
            </summary>
            <remarks>This event is routed using the tunneling routing strategy. The 
            corresponding bubbling event is <see cref="E:ILOG.Diagrammer.GraphicObject.MouseMove"/>.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.MouseEnter">
            <summary>
            Occurs when the mouse enters the boundaries of this object.
            </summary>
            <remarks>This event is routed using the direct routing strategy. There is 
            no tunneling nor bubbling phase for this event.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.MouseLeave">
            <summary>
            Occurs when the mouse leaves the boundaries of this object.
            </summary>
            <remarks>This event is routed using the direct routing strategy. There is 
            no tunneling nor bubbling phase for this event.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.KeyDown">
            <summary>
            Occurs when a key is pressed while this object has the keyboard capture.
            </summary>
            <remarks>This event is routed using the bubbling routing strategy. The 
            corresponding tunneling event is <see cref="E:ILOG.Diagrammer.GraphicObject.PreviewKeyDown"/>.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.PreviewKeyDown">
            <summary>
            Occurs when a key is pressed while this object has the keyboard capture.
            </summary>
            <remarks>This event is routed using the tunneling routing strategy. The 
            corresponding bubbling  event is <see cref="E:ILOG.Diagrammer.GraphicObject.KeyDown"/>.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.KeyUp">
            <summary>
            Occurs when a key is released while this object has the keyboard capture.
            </summary>
            <remarks>This event is routed using the bubbling routing strategy. The 
            corresponding tunneling event is <see cref="E:ILOG.Diagrammer.GraphicObject.PreviewKeyUp"/>.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.PreviewKeyUp">
            <summary>
            Occurs when a key is released while this object has the keyboard capture.
            </summary>
            <remarks>This event is routed using the tunneling routing strategy. The 
            corresponding bubbling event is <see cref="E:ILOG.Diagrammer.GraphicObject.KeyUp"/>.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.KeyPress">
            <summary>
            Occurs when a key is pressed while this object has the keyboard capture.
            </summary>
            <remarks>This event is routed using the bubbling routing strategy. The 
            corresponding tunneling event is <see cref="E:ILOG.Diagrammer.GraphicObject.PreviewKeyPress"/>.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.PreviewKeyPress">
            <summary>
            Occurs when a key is pressed while this object has the keyboard capture.
            </summary>
            <remarks>This event is routed using the tunneling routing strategy. The 
            corresponding bubbling event is <see cref="E:ILOG.Diagrammer.GraphicObject.KeyPress"/>.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.SupportsCoreTransparency">
            <summary>
            Indicates whether the object handles transparency in the <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)"/>
            method.
            </summary>
            <value><see langword="true"/> if the object handles transparency in the <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)"/>
            method; Otherwise, <see langword="false"/>. The default implementation returns
            <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.IsUpdating">
            <summary>
            Indicates whether the graphic object is in an update cycle.
            </summary>
            <value><see langword="true"/> if the graphic object is in an update cycle; Otherwise, <see langword="false"/>.</value>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.BeginUpdate"/>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.EndUpdate"/>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.IsUpdatingChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.IsUpdating"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.ShouldReceiveParentChangeNotifications">
            <summary>
            Gets a value indicating whether the object needs to receive parent change notifications.
            </summary>
            <value><see langword="true"/> to receive parent change notifications; Otherwise,
            <see langword="false"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.ParentChanging">
            <summary>
            Occurs when the parent of the graphic object is changing.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.ParentChanged">
            <summary>
            Occurs when the parent of the graphic object has changed.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.Changed">
            <summary>
            Occurs when the graphic object has changed.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.Changing">
            <summary>
            Occurs when the graphic object is changing.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.BoundsChanged">
            <summary>
            Occurs when the graphic object bounds have changed.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.BoundsChanging">
            <summary>
            Occurs when the graphic object bounds are changing.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Anchors">
            <summary>
            The collection of <see cref="T:ILOG.Diagrammer.Anchor"/> objects attached to this graphic
            object.
            </summary>
            <value>A collection of <see cref="T:ILOG.Diagrammer.Anchor"/> objects.</value>
            <remarks>An <see cref="T:ILOG.Diagrammer.Anchor"/> represents a connection point on a graphic object to which links can be
            connected.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.LinksConnected">
            <summary>
            Occurs when links have been connected to this object.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.LinksDisconnected">
            <summary>
            Occurs when links have been disconnected from this object.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.UseDefaultAnchors">
            <summary>
            Indicates whether the default anchors returned by <see cref="M:ILOG.Diagrammer.GraphicObject.GetDefaultAnchors"/>
            can be used when connecting a link to this graphic object.
            </summary>
            <value><see langword="true"/> if the default anchors can be used; Otherwise,
            <see langword="false"/>.</value>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.GetDefaultAnchors"/>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicObject.UseDefaultAnchorsChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicObject.UseDefaultAnchors"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Site">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite"/> of the graphic object.
            </summary>
            <value>The <see cref="T:System.ComponentModel.ISite"/> associated with the graphic object, if any.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.Name">
            <summary>
            Gets or sets the name of the graphic object.
            </summary>
            <value>A <see cref="T:System.String"/> value.</value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphicObject.ToolTipData">
            <summary>
            A structure that stores data for the tooltip displayed by a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
            <remarks>This structure is used by the <see cref="M:ILOG.Diagrammer.GraphicObject.GetToolTipData(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Transform)">GraphicObject.GetToolTipData</see> method.</remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicObject.ToolTipData.Empty">
            <summary>
            Represents an instance of the <see cref="T:ILOG.Diagrammer.GraphicObject.ToolTipData"/> with its members uninitialized. 
            </summary>         
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObject.ToolTipData.#ctor(System.Drawing.Region,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.GraphicObject.ToolTipData"/> structure.
            </summary>
            <param name="region">The region in which the tooltip is active.</param>
            <param name="tooltip">The text for the tooltip.</param>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.ToolTipData.IsEmpty">
            <summary>
            Indicates whether this instance is the <see cref="F:ILOG.Diagrammer.GraphicObject.ToolTipData.Empty"/> instance.
            </summary>
            <value><see langword="true"/> if this instance of the <see cref="F:ILOG.Diagrammer.GraphicObject.ToolTipData.Empty"/> instance; otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.ToolTipData.Region">
            <summary>
            Gets the <see cref="P:ILOG.Diagrammer.GraphicObject.ToolTipData.Region"/> in which the tooltip is active.
            </summary>
            <value>A <see cref="P:ILOG.Diagrammer.GraphicObject.ToolTipData.Region"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObject.ToolTipData.ToolTip">
            <summary>
            Gets the tooltip text.
            </summary>
            <value>The tooltip text.</value>
        </member>
        <member name="T:ILOG.Diagrammer.IFillProvider">
            <summary>
            Interface implemented by objects
            that can provide a <see cref="P:ILOG.Diagrammer.IFillProvider.Fill"/> property.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.IFillProvider.Fill">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.Fill"/> of this object.
            </summary>
            <value>A <see cref="P:ILOG.Diagrammer.IFillProvider.Fill"/> instance.</value>
        </member>
        <member name="T:ILOG.Diagrammer.IStrokeProvider">
            <summary>
            Interface implemented by objects
            that can provide a <see cref="P:ILOG.Diagrammer.IStrokeProvider.Stroke"/> property.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.IStrokeProvider.Stroke">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.Stroke"/> of this object.
            </summary>
            <value>A <see cref="P:ILOG.Diagrammer.IStrokeProvider.Stroke"/> instance.</value>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.TextBase._fill">
            <summary>
            The fill of the text.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.TextBase._stroke">
            <summary>
            The stroke of the text.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.TextBase._font">
            <summary>
            The font
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.TextBase._styledBoundsCache">
            <summary>
            A cache for the styled bounds of this shape at different transformers
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.TextBase._horizontalAlignment">
            <summary>
            The alignment horizontally
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.TextBase"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.Dispose(System.Boolean)">GraphicObject.Dispose(bool)</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.OnKeepAspectRatioChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.TextBase.KeepAspectRatio"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.OnTextChanged(System.String,System.String)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnTextChanged(System.String,System.String)">GraphicObject.OnTextChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.OnStrokeChanged(ILOG.Diagrammer.StyleChangeType)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.TextBase.Stroke"/> has changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.OnStrokeChanged(ILOG.Diagrammer.Stroke,ILOG.Diagrammer.Stroke)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.TextBase.Stroke"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.StrokeHasChanged(System.Object,ILOG.Diagrammer.StyleChangeEventArgs)">
            <summary>
            Invoked when the Stroke changes in some way.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.StrokeIsChanging(System.Object,ILOG.Diagrammer.StyleChangeEventArgs)">
            <summary>
            Invoked when the Stroke changes in some way.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.OnFillChanged(ILOG.Diagrammer.Fill,ILOG.Diagrammer.Fill)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.TextBase.Fill"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.OnFillChanged">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.TextBase.Fill"/> has changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.FillHasChanged(System.Object,ILOG.Diagrammer.StyleChangeEventArgs)">
            <summary>
            Invoked when the Fill changes in some way.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.OnHorizontalAlignmentChanged(ILOG.Diagrammer.HorizontalTextAlignment,ILOG.Diagrammer.HorizontalTextAlignment)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.TextBase.HorizontalAlignment"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.OnVerticalAlignmentChanged(ILOG.Diagrammer.VerticalTextAlignment,ILOG.Diagrammer.VerticalTextAlignment)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.TextBase.VerticalAlignment"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.OnFontChanged(System.Drawing.Font,System.Drawing.Font)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.TextBase.Font"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.InvalidateStyledBounds">
            <summary>
            Invalidates the cache for the styled bounds.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.ComputeStyledBounds(ILOG.Diagrammer.Transform)">
            <summary>
            Is called to compute the styled bounds of the text when it is displayed using the specified transformation.
            </summary>        
            <param name="t">A <see cref="P:ILOG.Diagrammer.Graphic.TextBase.Transform"/> structure.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
            <remarks>This method is called by the <see cref="M:ILOG.Diagrammer.Graphic.TextBase.GetStyledBounds(ILOG.Diagrammer.Transform)"/> method. It should not be called directly.
            Instead, call the <see cref="M:ILOG.Diagrammer.Graphic.TextBase.GetStyledBounds(ILOG.Diagrammer.Transform)"/>, which uses a cache to speed up calls.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.GetStyledBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetStyledBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetStyledBounds</see>
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.GetEditTextBounds">
            <summary>
            This member overides <see cref="M:ILOG.Diagrammer.GraphicObject.GetEditTextBounds">GraphicObject.GetEditTextBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.PaintText(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.PaintText(ILOG.Diagrammer.DrawingContext)">GraphicObject.PaintText</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.HitTestText(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestText(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestText</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.OnTransformChanged(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnTransformChanged(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Transform)">GraphicObject.OnTransformChanged</see>.
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.OnTextAppearanceChanged(ILOG.Diagrammer.StyleChangeType)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnTextAppearanceChanged(ILOG.Diagrammer.StyleChangeType)">GraphicObject.OnTextAppearanceChanged</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">
            <summary>
            Gets the preferred size of the graphic object without using the local transformation.
            </summary>
            <returns>A <see cref="T:ILOG.Diagrammer.Size2D"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextBase.GetPreferredSize(ILOG.Diagrammer.Size2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSize(ILOG.Diagrammer.Size2D)">GraphicObject.GetPreferredSize</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextBase.Transform">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.Transform">GraphicObject.Transform</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextBase.KeepAspectRatio">
            <summary>
            Gets or sets a value indicating whether resizing the text should keep it aspect ratio unchanged.
            </summary>
            <value><see langword="true"/> to keep aspect ratio; Otherwise, <see langword="false."/>.</value>     
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.TextBase.KeepAspectRatioChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.TextBase.KeepAspectRatio"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextBase.Text">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.Text">GraphicObject.Text</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextBase.Stroke">
            <summary>
            Gets or sets the stroke used to draw the outline of the text.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Stroke"/> object used to draw the outline of the text. If 
            the value is <see langword="null"/>, then no outline is drawn.
            </value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.TextBase.Fill"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.TextBase.StrokeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.TextBase.Stroke"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextBase.Fill">
            <summary>
            Gets or sets the fill style of the text.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Fill"/> object that represents the 
            way the text is filled.
            The value of this property can be <see langword="null"/>,
            in this case the object is not filled.
            </value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.TextBase.Stroke"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.TextBase.FillChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.TextBase.Fill"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextBase.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text object.
            </summary>
            <value> One of the <see cref="T:ILOG.Diagrammer.HorizontalTextAlignment"/> the default
            value is <see cref="F:ILOG.Diagrammer.HorizontalTextAlignment.Left"/>.
            </value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.TextBase.VerticalAlignment"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.TextBase.HorizontalAlignmentChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.TextBase.HorizontalAlignment"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextBase.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text object.
            </summary>
            <value> One of the <see cref="T:ILOG.Diagrammer.VerticalTextAlignment"/> values, the default
            value is <see cref="F:ILOG.Diagrammer.VerticalTextAlignment.Baseline"/>.
            </value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.TextBase.HorizontalAlignment"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.TextBase.VerticalAlignmentChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.TextBase.VerticalAlignment"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextBase.Font">
            <summary>
            Gets or sets the font used to display the text.
            </summary>
            <value>A <see cref="T:System.Drawing.Font"/> object used to display the text.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.TextBase.FontChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.TextBase.Font"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextBase.TextAppearance">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.TextAppearance">GraphicObject.TextAppearance</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Text">
             <summary>
             Defines a graphic object that displays a text.
             </summary>
             <remarks>
             This graphic object displays the text defined by the <see cref="P:ILOG.Diagrammer.GraphicObject.Text"/>
             property. The text is displayed at a position defined by the <see cref="P:ILOG.Diagrammer.Graphic.Text.TextLocation"/>,
             <see cref="P:ILOG.Diagrammer.Graphic.TextBase.VerticalAlignment"/> and 
             <see cref="P:ILOG.Diagrammer.Graphic.TextBase.HorizontalAlignment"/> properties.
             </remarks>
             <example>
             <para lang="cs,vbnet">
             The following example shows how to create a Text object filled with a linear gradient.</para>
             <code lang="cs">
             Text CreateText()
             {
                LinearGradientFill gradient
                    = new LinearGradientFill(new Point2D(0, 0),
                                             new Point2D(0, 1),
                                             Color.Yellow,
                                             Color.Red);
                
                Text text = new Text();
                text.Text = "Diagram for .NET";
                text.TextLocation = new Point2D(70f, 100f);
                text.Fill = gradient;
                text.Stroke = new Stroke(Color.Olive);
                text.Font = new Font("Garamond", 35F, FontStyle.Bold);
                text.HorizontalAlignment = HorizontalTextAlignment.Left;
                text.VerticalAlignment = VerticalTextAlignment.Center;
            
                return text;
             }
             </code>
             <code lang="vbnet">
             Function CreateText() As Text 
                Dim gradient As LinearGradientFill = _
                     New LinearGradientFill(New Point2D(0, 0), _
                                            New Point2D(0, 1), _
                                            Color.Yellow, Color.Red) 
                Dim text As Text = New Text 
                text.Text = "Diagram for .NET" 
                text.TextLocation = New Point2D(70F, 100F) 
                text.Fill = gradient 
                text.Stroke = New Stroke(Color.Olive) 
                text.Font = New Font("Garamond", 35F, FontStyle.Bold) 
                text.HorizontalAlignment = HorizontalTextAlignment.Left 
                text.VerticalAlignment = VerticalTextAlignment.Center 
                Return text 
             End Function
             </code>
             </example>
             <seealso cref="T:ILOG.Diagrammer.Graphic.TextOnPath"/>
        </member>
        <member name="T:ILOG.Diagrammer.IQueryGraphicsPath">
            <summary>
            Interface implemented by graphic objects (<see cref="T:ILOG.Diagrammer.GraphicObject"/>)
            that can provide a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> that corresponds to their shape.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.IQueryGraphicsPath.GetGraphicsPath(ILOG.Diagrammer.Transform)">
            <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> that represents the shape of the object.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.IQueryOutlinePath">
            <summary>
            Interface implemented by graphic objects (<see cref="T:ILOG.Diagrammer.GraphicObject"/>)
            that can provide a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> that corresponds to the outline of their shape.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.IQueryOutlinePath.GetOutlinePath(ILOG.Diagrammer.Transform)">
            <summary>
            Returns a <see cref="T:System.Drawing.Region"/> that represents the outline of the object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Text"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.#ctor(ILOG.Diagrammer.Point2D,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Text"/> class with the specified text.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.#ctor(ILOG.Diagrammer.Point2D,System.String,ILOG.Diagrammer.HorizontalTextAlignment)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Text"/> class with the specified location, 
            text and alignment.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.OnTextLocationChanged(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Text.TextLocation"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.GetGeometryBounds">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetGeometryBounds">GraphicObject.GetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.GetBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.ComputeStyledBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Text.ComputeStyledBounds(ILOG.Diagrammer.Transform)">Text.ComputeStyledBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.GetGraphicsPath">
            <summary>
            Gets a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> that represents the shape of the object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.ILOG#Diagrammer#IQueryGraphicsPath#GetGraphicsPath(ILOG.Diagrammer.Transform)">
            <summary>
            Gets a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> that represents the shape of the object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.PaintCore(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)">GraphicObject.PaintCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">GraphicObject.IntersectsCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.OnTextChanged(System.String,System.String)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnTextChanged(System.String,System.String)">GraphicObject.OnTextChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.OnHorizontalAlignmentChanged(ILOG.Diagrammer.HorizontalTextAlignment,ILOG.Diagrammer.HorizontalTextAlignment)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.TextBase.OnHorizontalAlignmentChanged(ILOG.Diagrammer.HorizontalTextAlignment,ILOG.Diagrammer.HorizontalTextAlignment)">TextBase.OnHorizontalAlignmentChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.OnVerticalAlignmentChanged(ILOG.Diagrammer.VerticalTextAlignment,ILOG.Diagrammer.VerticalTextAlignment)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.TextBase.OnVerticalAlignmentChanged(ILOG.Diagrammer.VerticalTextAlignment,ILOG.Diagrammer.VerticalTextAlignment)">TextBase.OnVerticalAlignmentChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.OnFontChanged(System.Drawing.Font,System.Drawing.Font)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.TextBase.OnFontChanged(System.Drawing.Font,System.Drawing.Font)">TextBase.OnFontChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Text.GetDefaultAnchors">
            <summary>
            If this <see cref="T:ILOG.Diagrammer.Graphic.PolyPoints"/> is not closed,
            this method returns an empty collection of <see cref="T:ILOG.Diagrammer.Anchor"/>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Text.TextLocation">
            <summary>
            Gets or sets the location of the text.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> object that represents the location of the text.
            </value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Text.TextLocationChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Text.TextLocation"/> property contents has changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.TextSelectionGraphic">
            <summary>
            Represent the selection object for the <see cref="T:ILOG.Diagrammer.Graphic.Text"/> graphic object.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.ReshapeSelectionGraphic">
            <summary>
            Implements a selection graphic object that can be used to reshape a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.DefaultSelectionGraphic">
            <summary>
            An implementation of the <see cref="T:ILOG.Diagrammer.SelectionGraphic"/> class that adds handles to manipulate
            the selected object.
            </summary>
            <remarks>
            <para>A selection handle is a rectangular area of the selection graphic object that can be moved using the mouse.
            The selection handles can be accessed through the <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandlePoints"/> method. The default
            implementation of this method returns three handles to manage object rotation: The first handle allows to 
            specify the rotation center, the second handle allows to rotate the object around the first handle, and the last one
            allows to move or reparent the object. To add new
            handles, create a subclass of <strong>DefaultSelectionGraphic</strong> and override the
            <strong>GetHandlePoints</strong> methods.</para>
            <para>
            The graphical representation of selection handles depends on the <see cref="T:ILOG.Diagrammer.SelectionHandleType"/> enumeration. See the
            <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleType(System.Int32)"/> method for details.
            </para>
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.SelectionGraphic">
            <summary>
            The <see langword="abstract"/> base class for selection graphic objects.
            </summary>
            <remarks><p>The <see cref="T:ILOG.Diagrammer.SelectionGraphic"/> class is the base class for graphic objects representing
            the selection of another graphic object in a particular diagram host.</p>
            <p>Use the <see cref="P:ILOG.Diagrammer.SelectionGraphic.SelectedObject"/> property to access the selected graphic object.
            Use the <see cref="P:ILOG.Diagrammer.SelectionGraphic.View"/> property to access the diagram view on which this object will be displayed.</p>
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.DefaultSelectionGraphic"/>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionGraphic._renderBounds">
            <summary>
            The cached bounds of the selection graphic
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionGraphic._selectionLayer">
            <summary>
            The layer of the selection object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionGraphic._object">
            <summary>
            The selected object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.SelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.Dispose(System.Boolean)">
            <summary>
            This method overrides <see cref="M:ILOG.Diagrammer.GraphicObject.Dispose(System.Boolean)">GraphicObject.Dispose</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.IsTypeSupported(System.Type)">
            <summary>
            Is called to know if the specified type can be used with this selection object.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> reference</param>
            <returns><see langword="true"/> if the specified type can be used with this selection object; 
            Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.IsGhostTypeSupported(System.Type)">
            <summary>
            Is called to know if the specified type can be used as a ghost graphic for this
            selection object.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> reference</param>
            <returns><see langword="true"/> if the specified type can be used as a ghost graphic for
            this selection object; Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.GetSelectedObjectToViewTransform">
            <summary>
            Gets the transformation that transforms coordinates expressed in the selected object space into view coordinates.
            </summary>
            <returns>A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.GetViewToSelectedObjectTransform">
            <summary>
            Gets the transformation that transforms view coordinates into selected object coordinates space.
            </summary>
            <returns>A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.TransformSelectedObjectToViewPoints(System.Collections.Generic.IList{ILOG.Diagrammer.Point2D})">
            <summary>
            Transforms points expressed in selected object coordinate space into view coordinates space.
            </summary>
            <param name="pts">An array of <see cref="T:ILOG.Diagrammer.Point2D"/> objects.</param>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.TransformSelectedObjectToViewPoint(ILOG.Diagrammer.Point2D)">
            <summary>
            Transforms a point expressed in selected object coordinate space into view coordinates space.
            </summary>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> object.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Point2D"/> object.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.TransformViewToSelectedObjectPoints(System.Collections.Generic.IList{ILOG.Diagrammer.Point2D})">
            <summary>
            Transforms points expressed in view coordinates into selected object coordinate space.
            </summary>
            <param name="pts">An array of <see cref="T:ILOG.Diagrammer.Point2D"/> objects.</param>
            <returns>The modified <paramref name="pts"/> array.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.TransformViewToSelectedObjectPoint(ILOG.Diagrammer.Point2D)">
            <summary>
            Transforms a point expressed in view coordinates into selected object coordinate space.
            </summary>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> object.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Point2D"/> object.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.GetStyledBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetStyledBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetStyledBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">GraphicObject.IntersectsCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.ObjectReselected(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Is called when the object is re-selected.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that was clicked.</param>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.OnSelectedObjectChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            Is called when the selected object has changed.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.GraphicChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.OnGraphicChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnGraphicChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">GraphicObject.OnGraphicChanged</see>.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.SelectionGraphic._selectionTypes">
            <summary>
            Mapping between graphic object types and selection graphic types.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.RegisterSelectionGraphicType(System.Type,System.Type)">
            <summary>
            Register the type of graphic object to be used for a particular graphic object.
            </summary>
            <param name="type">The graphic object type.</param>
            <param name="selectionType">The selection graphic type.</param>
            <seealso cref="T:ILOG.Diagrammer.SelectionGraphicAttribute"/>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.GetSelectionObjectType(System.Type)">
            <summary>
            Returns the type of selection graphic for a specified 
            type of graphic object using the <see cref="T:ILOG.Diagrammer.SelectionGraphicAttribute"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.GetCachedSelectionObjectType(System.Type)">
            <summary>
            Returns the type of selection graphic for a specified type of graphic object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphic.CreateDefaultSelectionGraphic(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Creates the default selection graphic for a selected graphic object.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionGraphic.View">
            <summary>
            Gets the diagram view on which this object is displayed.
            </summary>
            <value>An <see cref="T:ILOG.Diagrammer.IDiagramView"/> reference.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionGraphic.SelectedObject">
            <summary>
            Gets the selected graphic object.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionGraphic.IsPrimarySelection">
            <summary>
            Indicates whether this object represents the primary selection.
            </summary>
            <value><see langword="true"/> if this object represents the primary selection;
            Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="F:ILOG.Diagrammer.DefaultSelectionGraphic.FirstHandleIndex">
            <summary>
            The index of the first handle for this class.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.DefaultSelectionGraphic.MoveRotationCenterHandleIndex">
            <summary>
            The index of the handle that allows to move the rotation center.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.DefaultSelectionGraphic.RotateHandleIndex">
            <summary>
            The index of the handle that allows to rotate the object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.DefaultSelectionGraphic.MoveHandleIndex">
            <summary>
            The index of the handle that allows to move or reparent the object.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.DefaultSelectionGraphic.LastHandleIndex">
            <summary>
            The index of the handle that allows to move or reparent the object.
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.DefaultSelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.Dispose(System.Boolean)">
            <summary>
            This method overrides <see cref="M:ILOG.Diagrammer.GraphicObject.Dispose(System.Boolean)">GraphicObject.Dispose</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetSelectedObjectToViewTransform">
            <summary>
            This method overrides <see cref="M:ILOG.Diagrammer.SelectionGraphic.GetSelectedObjectToViewTransform">SelectionGraphic.GetSelectedObjectToViewTransform</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.CanMoveHandle(System.Int32)">
            <summary>
            Is called to know if the specified selection handle can be moved using the mouse pointer.
            </summary>
            <param name="index">The zero-based index of the handle.</param>
            <returns><see langword="true"/> if the specified selection handle can be moved using the mouse pointer; Otherwise,
            <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetSelectedObjectDefinitionBounds">
            <summary>
            Is called to get the bounds of the selected object.
            </summary>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetGeometryBounds">
            <summary>
            This property overrides <see cref="P:ILOG.Diagrammer.GraphicObject.GeometryBounds">GraphicObject.GeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetStyledBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This property overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetStyledBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetStyledBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnGraphicChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This method overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnGraphicChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">GraphicObject.OnGraphicChanged</see>.
            </summary>s
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This method overrides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.PaintGhost(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to draw the ghost graphic used during an interaction
            when the view in which this object is displayed is not in selection instant editing mode.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetPenForBorder(System.Boolean)">
            <summary>
            Creates and returns the pen used to draw the selection graphic object's border.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.DrawBorder(ILOG.Diagrammer.DrawingContext,ILOG.Diagrammer.Point2D[])">
            <summary>
            Is called to draw the selection graphic object's border.
            </summary>
            <param name="context">The drawing context.</param>
            <param name="pts">An array of <see cref="T:ILOG.Diagrammer.Point2D"/>.</param>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.DrawHandles(ILOG.Diagrammer.DrawingContext,System.Collections.Generic.List{ILOG.Diagrammer.Point2D})">
            <summary>
            Is called to draw the selection graphic handles.
            </summary>
            <param name="context">The drawing context.</param>
            <param name="points">An array of <see cref="T:ILOG.Diagrammer.Point2D"/>.</param>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.PaintCore(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)">GraphicObject.PaintCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.DrawHandle(ILOG.Diagrammer.DrawingContext,System.Int32,ILOG.Diagrammer.Point2D,System.Single,System.Drawing.Pen,System.Drawing.Brush)">
            <summary>
            Is called to draw the specified selection handle.
            </summary>
            <param name="context">The drawing context.</param>
            <param name="index">The zero-based index of the handle.</param>
            <param name="point">The handle location.</param>
            <param name="angle">The angle of between the selected object and the x-axis.</param>
            <param name="pen">A <see cref="T:System.Drawing.Pen"/> used to draw the handle stroke.</param>
            <param name="brush">A <see cref="T:System.Drawing.Brush"/> used to fill the handle.</param>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleType(System.Int32)">
            <summary>
            Gets the selection handle type for the specified handle.
            </summary>
            <param name="index">The zero-based index of the handle.</param>
            <returns>One of the <see cref="T:ILOG.Diagrammer.SelectionHandleType"/> values.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">
            <summary>
            Gets the description for the specified handle.
            </summary>
            <param name="index">The zero-based index of the handle.</param>
            <param name="type">One of the <see cref="T:ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType"/> values.</param>
            <returns>A <see cref="T:System.String"/> that represents the description of the specified handle.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.SnapHandleAngle(System.Int32,System.Single)">
            <summary>
            Is called to snap the specfied angle.
            </summary>
            <param name="index">The zero-based index of the handle.</param>
            <param name="angle">The angle expressed in degrees.</param>
            <returns>The snapped angle expressed in degrees.</returns>
            <remarks>The default behavior returns angles that are multiple of <strong>10</strong>.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.SnapHandlePoint(System.Int32,ILOG.Diagrammer.Point2D)">
            <summary>
            Is called to snap the specfied handle point.
            </summary>
            <param name="index">The zero-based index of the handle.</param>
            <param name="point">The <see cref="T:ILOG.Diagrammer.Point2D"/> to snap.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.IsHandleVisible(System.Int32)">
            <summary>
            Indicates whether the specified handle is visible.
            </summary>
            <param name="index">The zero-based index of the handle.</param>
            <returns><see langword="true"/> if the specified handle is visible; Otherwise,
            <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandlePoints">
            <summary>
            Gets the location of the handles of this selection object.
            </summary>
            <returns>An array of <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the location 
            of the selection handles of this selection object.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.HandleContains(System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,System.Single)">
            <summary>
            Indicates whether the specified handle contains a point.
            </summary>
            <param name="index">The zero-based index of the handle.</param>
            <param name="handle">The handle location.</param>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</param>
            <param name="angle">The angle in degrees of the selected object.</param>
            <returns>
            <see langword="true"/> if the specified handle contains <paramref name="point"/>;
            Otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.HitTestHandle(ILOG.Diagrammer.Point2D)">
            <summary>
            Returns the index of the handle located at the specified point.
            </summary>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</param>
            <returns>The zero-based index of the handle located at <paramref name="point"/>, or 
            <strong>-1</strong> if there is no handle at this location.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.RaiseRotationChanging">
            <summary>
            Is called before changing the edited object rotation angle.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.RaiseRotationChanged">
            <summary>
            Is called after changing the edited object rotation angle.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.RaiseLocationChanging">
            <summary>
            Is called before changing the edited object location.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.RaiseLocationChanged">
            <summary>
            Is called after changing the edited object location.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.RaiseComponentChanging(System.String)">
            <summary>
            Call this method to notify the component model that the specified property of the edited object is going to change.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.RaiseComponentChanged(System.String)">
            <summary>
            Call this method to notify the component model that the specified property of the edited object has changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnMouseDown(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseDown(ILOG.Diagrammer.ObjectMouseEventArgs)">GraphicObject.OnMouseDown</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnMouseMove(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseMove(ILOG.Diagrammer.ObjectMouseEventArgs)">GraphicObject.OnMouseMove</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnMouseUp(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseUp(ILOG.Diagrammer.ObjectMouseEventArgs)">GraphicObject.OnMouseUp</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnKeyPress(ILOG.Diagrammer.ObjectKeyPressEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnKeyPress(ILOG.Diagrammer.ObjectKeyPressEventArgs)">GraphicObject.OnKeyPress</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnKeyDown(ILOG.Diagrammer.ObjectKeyEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnKeyDown(ILOG.Diagrammer.ObjectKeyEventArgs)">GraphicObject.OnKeyDown</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnKeyUp(ILOG.Diagrammer.ObjectKeyEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnKeyUp(ILOG.Diagrammer.ObjectKeyEventArgs)">GraphicObject.OnKeyUp</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnMouseLeave(ILOG.Diagrammer.ObjectEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseLeave(ILOG.Diagrammer.ObjectEventArgs)">GraphicObject.OnMouseLeave</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.StartInteraction">
            <summary>
            Is called to start the interaction.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.ValidateInteraction">
            <summary>
            Is called to validate the interaction.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.CancelInteraction">
            <summary>
            Is called to cancel the interaction.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnInteractionStarted">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.DefaultSelectionGraphic.InteractionStarted"/> event.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnInteractionValidated">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.DefaultSelectionGraphic.InteractionValidated"/> event.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnInteractionCanceled">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.DefaultSelectionGraphic.InteractionCanceled"/> event.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.DoMove(ILOG.Diagrammer.Point2D)">
            <summary>
            Is called when the selection object border is being dragged.
            </summary>
            <param name="location">A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the new location for the selected object
            expressed in view coordinates.</param>
            <remarks>The default behavior moves the selected object.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.DoCopy(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.GraphicContainer,ILOG.Diagrammer.Point2D)">
            <summary>
            Is called to copy the selected object into the specified container.
            </summary>
            <param name="clone">The copy of the selected object.</param>
            <param name="point">The location at which the copy will be added into the specified container.</param>
            <param name="target">The target container.</param>
            <returns>A copy of <see cref="P:ILOG.Diagrammer.SelectionGraphic.SelectedObject"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.DoReparent(ILOG.Diagrammer.GraphicContainer,ILOG.Diagrammer.Point2D)">
            <summary>
            Is called to reparent the selected object.
            </summary>
            <param name="target">The new parent container for the selected object.</param>
            <param name="point">The new location for the selected object expressed in view coordinates.</param>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.DoRotate(ILOG.Diagrammer.Point2D,System.Single)">
            <summary>
            Is called to rotate the selected object during an interaction.
            </summary>
            <param name="center">A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the rotation center.</param>
            <param name="angle">The rotation angle, expressed in degrees.</param>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.MoveHandle(System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            Is called when the specified handle is moved.
            </summary>
            <param name="index">The zero-based index of the handle being moved.</param>
            <param name="startPoint">A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the starting point of the handle move.</param>
            <param name="lastPoint">A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the last point of the handle move.</param>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the new point of the handle move.</param>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.CreateGhostGraphic">
            <summary>
            Is called to create the ghost graphic that will be used to render selection interactions
            when the view in which this object is displayed is not in selection instant editing mode.
            </summary>
            <remarks>
            <para>when the view in which this graphic object is displayed is not in selection instant editing mode, the
            modifications made on the <see cref="P:ILOG.Diagrammer.SelectionGraphic.SelectedObject"/> through this selection object are not
            instantaneous. Instead, a ghost graphic is created on which modifications will be performed. At the end of
            the interaction, the modifications made on the ghost graphic will be set on the <strong>SelectedObject</strong> by
            calling the <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.ValidateGhostGraphic(ILOG.Diagrammer.GraphicObject)"/> method.
            </para>
            <para>The default implemetation of this method creates of clone of the <strong>SelectedObject</strong> with
            a transparency of 50%.
            </para>
            </remarks>
            <returns>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference.</returns>
            <seealso cref="P:ILOG.Diagrammer.SelectionStyle.InstantEditing"/>
            <seealso cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.ValidateGhostGraphic(ILOG.Diagrammer.GraphicObject)"/>
            <seealso cref="P:ILOG.Diagrammer.DefaultSelectionGraphic.EditedObject"/>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.ValidateGhostGraphic(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Is called to validate the modifications made on the ghost graphic
            when the view in which this object is displayed is not in selection instant editing mode.
            </summary>
            <param name="ghost">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> used as a ghost for the interaction.</param>
            <remarks>The default implementation of this method sets the local transformation of the
            ghost graphic to the <see cref="P:ILOG.Diagrammer.SelectionGraphic.SelectedObject"/>.</remarks>
            <seealso cref="P:ILOG.Diagrammer.SelectionStyle.InstantEditing"/>
            <seealso cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.CreateGhostGraphic"/>
            <seealso cref="P:ILOG.Diagrammer.DefaultSelectionGraphic.EditedObject"/>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetToolTipData(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetToolTipData(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Transform)">GraphicObject.GetToolTipData</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleCursor(System.Int32)">
            <summary>
            Is called to get the cursor used when the specified handle is hovered.
            </summary>
            <param name="index">The zero-based index of the handle being hovered.</param>
            <returns>A <see cref="T:System.Windows.Forms.Cursor"/> reference.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleMovingCursor(System.Int32)">
            <summary>
            Is called to get the cursor used when the specified handle is moved.
            </summary>
            <param name="index">The zero-based index of the handle being moved.</param>
            <returns>A <see cref="T:System.Windows.Forms.Cursor"/> reference. The default behavior returns
            the <see cref="P:System.Windows.Forms.Cursors.Cross"/> cursor.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetMoveObjectCursor(System.Boolean,System.Boolean)">
            <summary>
            Is called to get the cursor used when the object is going to be moved.
            </summary>
            <returns>A <see cref="T:System.Windows.Forms.Cursor"/> reference.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetMovingObjectCursor(System.Boolean,System.Boolean)">
            <summary>
            Is called to get the cursor used when the object is being moved.
            </summary>
            <returns>A <see cref="T:System.Windows.Forms.Cursor"/> reference.</returns>
        </member>
        <member name="E:ILOG.Diagrammer.DefaultSelectionGraphic.InteractionStarted">
            <summary>
            Occurs when an interaction starts.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.DefaultSelectionGraphic.InteractionValidated">
            <summary>
            Occurs when an interaction has been validated.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.DefaultSelectionGraphic.InteractionCanceled">
            <summary>
            Occurs when an interaction has been canceled.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.SelectionStyle">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.SelectionStyle"/> used to retrieve style information.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.SelectionStyle"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.EditedObject">
            <summary>
            Gets the graphic object being edited.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference to the object being edited.</value>
            <remarks>This property is used to access the edited object during an interaction on the
            selection object. When <see cref="P:ILOG.Diagrammer.DefaultSelectionGraphic.InstantEditing"/> is <see langword="true"/>, this property returns
            <see cref="P:ILOG.Diagrammer.SelectionGraphic.SelectedObject"/>; Otherwise, it returns the ghost object used to show the interaction.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.ForeColor">
            <summary>
            Gets or sets the color used to paint the border of the selection graphic.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/>. The default value inherits from
            the <see cref="P:ILOG.Diagrammer.SelectionStyle.ForeColor">SelectionStyle.ForeColor</see> property.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.DashStyle">
            <summary>
            Gets or sets the dash style used to draw the border of the selection graphic.
            </summary>
            <value>One of the <see cref="T:System.Drawing.Drawing2D.DashStyle"/> values. The default value inherits from
            the <see cref="P:ILOG.Diagrammer.SelectionStyle.DashStyle">SelectionStyle.DashStyle</see> property.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.HandleForeColor">
            <summary>
            Gets or sets the color used to paint the border of the selection handles.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/>. The default value inherits from
            the <see cref="P:ILOG.Diagrammer.SelectionStyle.HandleForeColor">SelectionStyle.HandleForeColor</see> property.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.HandleBackColor">
            <summary>
            Gets or sets the color used to fill the selection handles.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/>. The default value inherits from
            the <see cref="P:ILOG.Diagrammer.SelectionStyle.HandleBackColor">SelectionStyle.HandleBackColor</see> property.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.PrimarySelectionHandleForeColor">
            <summary>
            Gets or sets the color used to paint the border of the selection handles when the selected object is the 
            primary selection.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/>. The default value inherits from
            the <see cref="P:ILOG.Diagrammer.SelectionStyle.PrimarySelectionHandleForeColor">SelectionStyle.PrimarySelectionHandleForeColor</see> property.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.PrimarySelectionHandleBackColor">
            <summary>
            Gets or sets the color used to fill the selection handles when the selected object is the 
            primary selection.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/>. The default value inherits from
            the <see cref="P:ILOG.Diagrammer.SelectionStyle.PrimarySelectionHandleBackColor">SelectionStyle.PrimarySelectionHandleBackColor</see> property.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.InstantEditing">
            <summary>
            Gets a value indicating whether interactions are instantaneous.
            </summary>
            <value><see langword="true"/> if the interactions are instantaneous; Otherwise,
            <see langword="false"/>. The default value inherits from the <see cref="P:ILOG.Diagrammer.SelectionStyle.InstantEditing"/>
            property.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.HandleSize">
            <summary>
            Gets the size of the selection handles.
            </summary>
            <value>A <see cref="T:System.Single"/> value. The default value inherits from the
            <see cref="P:ILOG.Diagrammer.SelectionStyle.HandleSize">SelectionStyle.HandleSize</see> property.</value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.NoSnapModifier">
            <summary>
            Gets the modifier key that prevents the grid snapping while moving the selection.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Keys"/> value. The default value inherits from the
            <see cref="P:ILOG.Diagrammer.SelectionStyle.NoSnapModifier">SelectionStyle.NoSnapModifier</see> property.</value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.CopyModifier">
            <summary>
            Gets the modifier key that enables the copy of the selected object.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Keys"/> value. The default value inherits from the
            <see cref="P:ILOG.Diagrammer.SelectionStyle.CopyModifier">SelectionStyle.CopyModifier</see> property.</value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.NoReparentModifier">
            <summary>
            Gets the modifier key that prevents to change the parent container of the selected object.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Keys"/> value. The default value inherits from the
            <see cref="P:ILOG.Diagrammer.SelectionStyle.NoReparentModifier">SelectionStyle.NoReparentModifier</see> property.</value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.ChildSelectionModifier">
            <summary>
            Gets the modifier key that allows to select container children.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Keys"/> value. The default value inherits from the
            <see cref="P:ILOG.Diagrammer.SelectionStyle.ChildSelectionModifier">SelectionStyle.ChildSelectionModifier</see> property.</value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.ShowBorder">
            <summary>
            Gets a value indicating whether to draw the selection graphic border.
            </summary>
            <value><see langword="true"/> to draw the selection graphic border; Otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.ShowMoveHandle">
            <summary>
            Gets a value indicating whether to draw the selection move handle.
            </summary>
            <value><see langword="true"/> to draw the selection graphic border; Otherwise,
            <see langword="false"/>. The default value is <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.ShowHandles">
            <summary>
            Gets a value indicating whether to draw the selection handles.
            </summary>
            <value><see langword="true"/> to draw the selection graphic border; Otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.CanRotateSelectedObject">
            <summary>
            Gets a value indicating whether the selected object can be rotated using the mouse pointer.
            </summary>
            <value><see langword="true"/> if the selected object can be rotated using the mouse pointer; Otherwise,
            <see langword="false"/>. The default value inherits from the
            <see cref="P:ILOG.Diagrammer.SelectionStyle.CanRotate">SelectionStyle.CanRotate</see> property.</value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.CanMoveSelectedObject">
            <summary>
            Gets a value indicating whether the selected object can be moved using the mouse pointer.
            </summary>
            <value><see langword="true"/> if the selected object can be moved using the mouse pointer; Otherwise,
            <see langword="false"/>. The default value inherits from the
            <see cref="P:ILOG.Diagrammer.SelectionStyle.CanMove">SelectionStyle.CanMove</see> property.</value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.CanCopySelectedObject">
            <summary>
            Gets a value indicating whether the selected object can be copied using the mouse pointer.
            </summary>
            <value><see langword="true"/> if the selected object can be copied using the mouse pointer; Otherwise,
            <see langword="false"/>. The default value inherits from the
            <see cref="P:ILOG.Diagrammer.SelectionStyle.CanCopy">SelectionStyle.CanCopy</see> property.</value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.CanScroll">
            <summary>
            Indicates whether moving the mouse outside the diagram view during an interaction scrolls it.
            </summary>
            <value><see langword="true"/> if scrolling is allowed; <see langword="false"/> otherwise.</value>
            <remarks>The default behavior inherits from the <see cref="P:ILOG.Diagrammer.SelectionStyle.AutoScroll"/> value.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.CanReparentSelectedObject">
            <summary>
            Gets a value indicating whether the selected object can be reparented using the mouse pointer.
            </summary>
            <value><see langword="true"/> if the selected object can be reparented using the mouse pointer; Otherwise,
            <see langword="false"/>. The default value inherits from the
            <see cref="P:ILOG.Diagrammer.SelectionStyle.CanReparent">SelectionStyle.CanReparent</see> property.</value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.SnapToGrid">
            <summary>
            Indicates whether the selection graphic should use the grid view to snap points during an interaction.
            </summary>
            <value><see langword="true"/> if the selection graphic should use the grid view to snap points during an interaction; Otherwise,
            <see langword="false"/>. The default value inherits from the
            <see cref="P:ILOG.Diagrammer.SelectionStyle.SnapToGrid">SelectionStyle.SnapToGrid</see> property.</value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.GeometryBoundsPoints">
            <summary>
            Gets an array of four points representing the bounds of the selected object
            in the local coordinate space.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.IsMoving">
            <summary>
            Gets or sets a value that indicates whether the selection graphic is being used to move the selected object.
            </summary>
            <value><see langword="true"/> if the selected object is being moved, otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.DefaultSelectionGraphic.InteractiveHandle">
            <summary>
            Gets or sets the selection handle being moved.
            </summary>
            <value>The zero-based index of the selection handle being moved, or <strong>-1</strong> if
            no handle is being moved.</value>
        </member>
        <member name="T:ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType">
            <summary>
            Specifies the type of description for a selection handle.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType.ToolTip">
            <summary>
            The description will be used in a tooltip.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType.StatusBar">
            <summary>
            The description will be used in a status bar.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType.Transaction">
            <summary>
            The description will be used for the title of an undo/redo transaction.
            </summary>            
        </member>
        <member name="F:ILOG.Diagrammer.ReshapeSelectionGraphic.FirstHandleIndex">
            <summary>
            The index of the first handle for this class.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.ReshapeSelectionGraphic.ResizeTopLeftHandleIndex">
            <summary>
            The index of the handle that allows to move the top left corner of the object.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.ReshapeSelectionGraphic.ResizeTopRightHandleIndex">
            <summary>
            The index of the handle that allows to move the top right corner of the object.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.ReshapeSelectionGraphic.ResizeBottomRightHandleIndex">
            <summary>
            The index of the handle that allows to move the bottom right corner of the object.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.ReshapeSelectionGraphic.ResizeBottomLeftHandleIndex">
            <summary>
            The index of the handle that allows to move the bottom left corner of the object.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.ReshapeSelectionGraphic.ResizeTopCenterHandleIndex">
            <summary>
            The index of the handle that allows to move the top side of the object.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.ReshapeSelectionGraphic.ResizeMiddleRightHandleIndex">
            <summary>
            The index of the handle that allows to move the right side of the object.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.ReshapeSelectionGraphic.ResizeBottomCenterHandleIndex">
            <summary>
            The index of the handle that allows to move the bottom side of the object.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.ReshapeSelectionGraphic.ResizeMiddleLeftHandleIndex">
            <summary>
            The index of the handle that allows to move the left side of the object.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.ReshapeSelectionGraphic.LastHandleIndex">
            <summary>
            The index of the last handle for this class.
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.ReshapeSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.ReshapeSelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="M:ILOG.Diagrammer.ReshapeSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">DefaultSelectionGraphic.GetHandleDescription</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ReshapeSelectionGraphic.GetHandlePoints">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandlePoints">DefaultSelectionGraphic.GetHandlePoints</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ReshapeSelectionGraphic.IsHandleVisible(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.IsHandleVisible(System.Int32)">DefaultSelectionGraphic.IsHandleVisible</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ReshapeSelectionGraphic.GetHandleType(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleType(System.Int32)">DefaultSelectionGraphic.GetHandleType</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ReshapeSelectionGraphic.RaiseGeometryChanging">
            <summary>
            Is called before changing the edited object geometry.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ReshapeSelectionGraphic.RaiseGeometryChanged">
            <summary>
            Is called after changing the edited object geometry.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ReshapeSelectionGraphic.OnInteractionStarted">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnInteractionStarted">DefaultSelectionGraphic.OnInteractionStarted</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ReshapeSelectionGraphic.OnInteractionValidated">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnInteractionValidated">DefaultSelectionGraphic.OnInteractionValidated</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ReshapeSelectionGraphic.GetMinimumSize">
            <summary>
            Returns the minimum size that can be set to the selected object.
            </summary>
            <returns>The default implementation returns <strong>Size2D.Empty</strong>, which means that there's no minimum size.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.ReshapeSelectionGraphic.GetMaximumSize">
            <summary>
            Returns the maximum size that can be set to the selected object.
            </summary>
            <returns>The default implementation returns <strong>Size2D.Empty</strong>, which means that there's no maximum size.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.ReshapeSelectionGraphic.MoveHandle(System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.MoveHandle(System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">DefaultSelectionGraphic.MoveHandle</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ReshapeSelectionGraphic.GetHandleCursor(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleCursor(System.Int32)">DefaultSelectionGraphic.GetHandleCursor</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ReshapeSelectionGraphic.GetHandleMovingCursor(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleMovingCursor(System.Int32)">DefaultSelectionGraphic.GetHandleMovingCursor</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ReshapeSelectionGraphic.ValidateGhostGraphic(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.ValidateGhostGraphic(ILOG.Diagrammer.GraphicObject)">DefaultSelectionGraphic.ValidateGhostGraphic</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ReshapeSelectionGraphic.DoResize(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Is called to resize the edited object during an interaction.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> struct that represents the new
            size and location of the edited object.</param>
        </member>
        <member name="P:ILOG.Diagrammer.ReshapeSelectionGraphic.CanResizeSelectedObject">
            <summary>
            Gets a value indicating whether the selected object can be reshaped using the mouse pointer.
            </summary>
            <value><see langword="true"/> if the selected object can be reshaped using the mouse pointer; Otherwise,
            <see langword="false"/>. The default value inherits from the
            <see cref="P:ILOG.Diagrammer.SelectionStyle.CanResize">SelectionStyle.CanResize</see> property.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ReshapeSelectionGraphic.KeepAspectRatio">
            <summary>
            Gets a value indicating whether resizing the selected object should keep it aspect ratio
            unchanged.
            </summary>
            <value><see langword="true"/> to keep aspect ratio; Otherwise, <see langword="false."/>. The default implementation
            returns <see langword="true"/> if the <strong>Keys.Shift</strong> key is pressed.</value>     
        </member>
        <member name="P:ILOG.Diagrammer.ReshapeSelectionGraphic.KeepCenterFixed">
            <summary>
            Gets a value indicating whether resizing the selected object should keep it center
            unchanged.
            </summary>
            <value><see langword="true"/> to keep selected object center unchanged; Otherwise, <see langword="false."/>. The default implementation
            returns <see langword="true"/> if the <strong>Keys.Control</strong> key is pressed.</value>     
        </member>
        <member name="P:ILOG.Diagrammer.ReshapeSelectionGraphic.ShowMiddleHandles">
            <summary>
            Gets or sets a value indicating whether to show the four handles located in the middle of the 
            selected object bounding box vertices.
            </summary>
            <value><see langword="true"/> to show the middle handles; Otherwise, <see langword="false."/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ReshapeSelectionGraphic.ShowCornerHandles">
            <summary>
            Indicates whether to show the four handles located in the middle of the 
            selected object bounding box vertices.
            </summary>
            <value><see langword="true"/> to show the handles; Otherwise, <see langword="false."/>. The default value is
            <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ReshapeSelectionGraphic.SelectedObjectResizeMode">
            <summary>
            Is called to get the resize mode that will be applied when the object is resized.
            </summary>
            <returns>One of the <see cref="T:ILOG.Diagrammer.ResizeMode"/> values.</returns>
            <remarks>The default implementation returns the resize mode of the selected object.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.ReshapeSelectionGraphic.CanChangeSelectedObjectHeight">
            <summary>
            Indicates whether the selection graphic allows the height of the selected object to be changed
            by showing the corresponding selection handles.
            </summary>
            <returns><see langword="true"/> if the selection handles to change the selected object height are visible;
            Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ILOG.Diagrammer.ReshapeSelectionGraphic.CanChangeSelectedObjectWidth">
            <summary>
            Indicates whether the selection graphic allows the width of the selected object to be changed
            by showing the corresponding selection handles.
            </summary>
            <returns><see langword="true"/> if the selection handles to change the selected object width are visible;
            Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.TextSelectionGraphic"/> class.
            </summary>
            <param name="obj">The selected object</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextSelectionGraphic.IsTypeSupported(System.Type)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.SelectionGraphic.IsTypeSupported(System.Type)">SelectionGraphic.IsTypeSupported</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextSelectionGraphic.SelectedObjectResizeMode">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.ReshapeSelectionGraphic.SelectedObjectResizeMode">ReshapeSelectionGraphic.SelectedObjectResizeMode</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextSelectionGraphic.KeepAspectRatio">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.ReshapeSelectionGraphic.KeepAspectRatio">ReshapeSelectionGraphic.KeepAspectRatio</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextSelectionGraphic.ShowMiddleHandles">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.ReshapeSelectionGraphic.ShowMiddleHandles">ReshapeSelectionGraphic.ShowMiddleHandles</see>
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.StackPanel">
            <summary>
            Arranges child objects into a single line that can be oriented horizontally or vertically.
            </summary>
            <remarks>
            The <see cref="T:ILOG.Diagrammer.Graphic.StackPanel"/> is a panel that layouts the child 
            objects into a single vertical or horizontal line. 
            Use the <see cref="P:ILOG.Diagrammer.Graphic.StackPanel.Orientation"/> property to control 
            the direction in which child objects will
            be arranged.
            </remarks>
            <example>
            <para lang="cs,vbnet">
            The following example creates a vertical stack panel containing 4 rectangles:
            </para>
            <code lang="cs">
            private static StackPanel CreateStackPanelWithRectangles()
            {
                StackPanel stackPanel = new StackPanel();
                stackPanel.Rectangle = new Rectangle2D(0, 0, 100, 100);
                stackPanel.AutoSize = true;
                stackPanel.Border = new Stroke(Color.Black);
                stackPanel.CornerRadius = new CornerRadius(6f);
                stackPanel.Orientation = Orientation.Vertical;
              
                Rect header = new Rect();
                header.Text = "Header";
                header.AutoSize = true;
                header.Fill = new LinearGradientFill(new Point2D(0, 0),
                                                     new Point2D(0, 1),
                                                     Color.Silver, Color.White);
              
                Rect rect1 = new Rect();
                rect1.Text = "Text 1";
                rect1.Fill = null;
                rect1.AutoSize = true;
              
              
                Rect rect2 = new Rect();
                rect2.Fill = null;
                rect2.AutoSize = true;
                rect2.Text = "Text 2";
              
                Rect rect3 = new Rect();
                rect3.Fill = null;
                rect3.AutoSize = true;
                rect3.Text = "Text 3";
                stackPanel.Objects.AddRange(
                     new GraphicObject[] {header, rect1, rect2, rect3 });
              
                return stackPanel;
            }
            </code>
            <code lang="vbnet">
            Private Shared Function CreateStackPanelWithRectangles() As StackPanel 
                Dim stackPanel As StackPanel = New StackPanel 
                stackPanel.Rectangle = New Rectangle2D(0, 0, 100, 100) 
                stackPanel.AutoSize = True 
                stackPanel.Border = New Stroke(Color.Black) 
                stackPanel.CornerRadius = New CornerRadius(6F) 
                stackPanel.Orientation = Orientation.Vertical 
            
                Dim header As Rect = New Rect 
                header.Text = "Header" 
                header.AutoSize = True 
                header.Fill = New LinearGradientFill(_
                    New Point2D(0, 0), _
                    New Point2D(0, 1), _
                    Color.Silver, _
                    Color.White) 
            
                Dim rect1 As Rect = New Rect 
                rect1.Text = "Text 1" 
                rect1.Fill = Nothing 
                rect1.AutoSize = True 
            
                Dim rect2 As Rect = New Rect 
                rect2.Fill = Nothing 
                rect2.AutoSize = True 
                rect2.Text = "Text 2" 
            
                Dim rect3 As Rect = New Rect 
                rect3.Fill = Nothing 
                rect3.AutoSize = True 
                rect3.Text = "Text 3" 
            
                stackPanel.Objects.AddRange(_
                     New GraphicObject() {header, rect1, rect2, rect3}) 
                Return stackPanel 
            End Function
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Graphic.GridPanel"/>
            <seealso cref="T:ILOG.Diagrammer.Graphic.Canvas"/>
            <seealso cref="T:ILOG.Diagrammer.Graphic.DockPanel"/>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Panel">
            <summary>
            Provides the base <see langword="abstract"/> class for all panel objects. Panels are used to layout child objects.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ObjectsControl">
            <summary>
            Provides the base <see langword="abstract"/> class for all control objects that contains multiple children.
            </summary>
            <remarks>The <see cref="P:ILOG.Diagrammer.Graphic.ObjectsControl.Objects"/> property can be used to add or removed children.</remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Control">
            <summary>
            Provides the <see langword="abstract"/> base class for all control objects.
            </summary>
            <remarks>
            <p>A <see cref="T:ILOG.Diagrammer.Graphic.Control"/> is a rectangular graphic container. The control geometry is defined by
            the <see cref="P:ILOG.Diagrammer.Graphic.Control.Rectangle"/> property. The control size can be constrained by setting the <see cref="P:ILOG.Diagrammer.Graphic.Control.MinimumSize"/>
            and <see cref="P:ILOG.Diagrammer.Graphic.Control.MaximumSize"/> properties.</p>
            <p>The control appearance can be modified by setting the <strong>Control</strong>, <see cref="P:ILOG.Diagrammer.Graphic.Control.Background"/>
            and <see cref="P:ILOG.Diagrammer.Graphic.Control.VisualStyles"/> properties.</p>
            <p>The coordinates system of a control places the upper left corner of the control as the origin (0, 0) for 
            its children.</p>
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphicContainer">
            <summary>
            The <see langword="abstract"/> base class for graphic objects that contains children.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.IManageChildren">
            <summary>
            Gives access to logical children management in a <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.IManageChildren.AddChildren(ILOG.Diagrammer.GraphicObject[])">
            <summary>
            Adds the specified children to the container.
            </summary>
            <param name="children">An array of <see cref="T:ILOG.Diagrammer.GraphicObject"/>.</param>
        </member>
        <member name="M:ILOG.Diagrammer.IManageChildren.InsertChildren(System.Int32,ILOG.Diagrammer.GraphicObject[])">
            <summary>
            Inserts the specified children to the container at the specified index.
            </summary>
            <param name="index">The zero-based index where to add the children.</param>
            <param name="children">An array of <see cref="T:ILOG.Diagrammer.GraphicObject"/>.</param>
        </member>
        <member name="M:ILOG.Diagrammer.IManageChildren.RemoveChildren(ILOG.Diagrammer.GraphicObject[])">
            <summary>
            Removes the specified children from the container.
            </summary>
            <param name="children">An array of <see cref="T:ILOG.Diagrammer.GraphicObject"/>.</param>        
        </member>
        <member name="M:ILOG.Diagrammer.IManageChildren.GetChildZOrder(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Gets the z-order of the specified child in the container.
            </summary>
            <param name="child">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <returns>A zero-based integer that represents the z-order of the specified graphic object.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.IManageChildren.SetChildZOrder(ILOG.Diagrammer.GraphicObject,System.Int32)">
            <summary>
            Sets the z-order of the specified child in the container.
            </summary>
            <param name="child">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <param name="zorder">A zero-based integer that represents the z-order of the specified graphic object.</param>
        </member>
        <member name="P:ILOG.Diagrammer.IManageChildren.SupportsChildManagement">
            <summary>
            Indicates whether the container supports child insertion or removal of its children.
            </summary>
            <value><see langword="true"/> to support child insertion or removal, otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.IManageChildren.LogicalChildren">
            <summary>
            Gets the collection of logical children of the container.
            </summary>
            <remarks>Logical children are added using the <see cref="M:ILOG.Diagrammer.IManageChildren.AddChildren(ILOG.Diagrammer.GraphicObject[])"/> and <see cref="M:ILOG.Diagrammer.IManageChildren.InsertChildren(System.Int32,ILOG.Diagrammer.GraphicObject[])"/> methods,
            and can be removed using the <see cref="M:ILOG.Diagrammer.IManageChildren.RemoveChildren(ILOG.Diagrammer.GraphicObject[])"/> method. Non-logical children cannot be removed
            from the container.</remarks>
            <value>A collection of <see cref="T:ILOG.Diagrammer.GraphicObject"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.IManageChildren.Children">
            <summary>
            Gets the collection of children of the container.
            </summary>
            <value>A collection of <see cref="T:ILOG.Diagrammer.GraphicObject"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.IManageChildren.LogicalChildTransform">
            <summary>
            Gets the transformation applied to logical children
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</value>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.GraphicContainer"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.BeginInit">
            <summary>
            Begins the initialization of a <see cref="T:ILOG.Diagrammer.GraphicContainer"/> that is used on a form or used 
            by another component. The initialization occurs at runtime.
            </summary>
            <remarks>The Visual Studio .NET design environment uses this method 
            to start the initialization of a component that is used on a form 
            or used by another component. The <see cref="M:ILOG.Diagrammer.GraphicContainer.EndInit"/> method ends the 
            initialization. The use of <strong>BeginInit</strong> and <strong>EndInit</strong> methods prevents the 
            control from being used before it is fully initialized.</remarks>	
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.EndInit">
            <summary>
            Ends the initialization of a <see cref="T:ILOG.Diagrammer.GraphicContainer"/> that is used on a form or 
            used by another component. The initialization occurs at runtime.
            </summary>
            <remarks>
            The Visual Studio .NET design environment uses this method to end 
            the initialization of a component that is used on a form or used by 
            another component. The <see cref="M:ILOG.Diagrammer.GraphicContainer.BeginInit"/> method starts the initialization. 
            The use of <strong>BeginInit</strong> and <strong>EndInit</strong> methods prevents the control 
            from being used before it is fully initialized.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnAllowDropChanged(System.Boolean,System.Boolean)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.GraphicContainer.AllowDrop"/> property is changed.
            </summary>
            <param name="oldValue">The previous value of the <see cref="P:ILOG.Diagrammer.GraphicContainer.AllowDrop"/> property.</param>
            <param name="newValue">The new value of the <see cref="P:ILOG.Diagrammer.GraphicContainer.AllowDrop"/> property.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnAllowReparentChanged(System.Boolean,System.Boolean)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.GraphicContainer.AllowReparent"/> property is changed.
            </summary>
            <param name="oldValue">The previous value of the <see cref="P:ILOG.Diagrammer.GraphicContainer.AllowReparent"/> property.</param>
            <param name="newValue">The new value of the <see cref="P:ILOG.Diagrammer.GraphicContainer.AllowReparent"/> property.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnQueryCollapsedAnchor(ILOG.Diagrammer.Anchor,ILOG.Diagrammer.Anchor@)">
            <summary>
            Called to query the <see cref="T:ILOG.Diagrammer.Anchor"/> to use when a descendant of this container
            is collapsed.
            </summary>
            <param name="originalAnchor">The original anchor associated with the descendant that is collapsed.</param>
            <param name="containerAnchor">The anchor that will be used instead of the original anchor must be returned in this parameter.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnChildTransformChanged(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Transform)">
            <summary>
            Must be called when the child transform has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.GetTransformToView(ILOG.Diagrammer.IDiagramView)">
            <summary>
            Gets the transformation to convert children coordinates into the specified view coordinate system.
            </summary>
            <param name="view">A <see cref="T:ILOG.Diagrammer.IDiagramView"/> instance.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.GetTransformToContainer(ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Gets the transformation to convert children coordinates into the specified container children coordinate system.
            </summary>
            <param name="container">A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> instance.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.AddChildren(ILOG.Diagrammer.GraphicObject[])">
            <summary>
            Adds the specified children to this container.
            </summary>
            <param name="children">An array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> objects.</param>
            <remarks><p>The default implementation throws a <see cref="T:System.NotImplementedException"/> exception.</p>
            <p>This method is internally called by some interactors or designers.</p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.InsertChildren(System.Int32,ILOG.Diagrammer.GraphicObject[])">
            <summary>
            Inserts the specified children to this container.
            </summary>
            <param name="index">The zero-based index where to insert children.</param>
            <param name="children">An array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> objects.</param>
            <remarks><p>The default implementation throws a <see cref="T:System.NotImplementedException"/> exception.</p>
            <p>This method is internally called by some interactors or designers.</p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.RemoveChildren(ILOG.Diagrammer.GraphicObject[])">
            <summary>
            Removes the specified children to this container.
            </summary>
            <param name="children">An array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> objects.</param>
            <remarks><p>The default implementation throws a <see cref="T:System.NotImplementedException"/> exception.</p>
            <p>This method is internally called by some interactors or designers.</p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.IsLogicalParent(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Indicates whether this container is the logical parent of the specified <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference.</param>
            <returns><see langword="true"/> if this container if the logical parent of <paramref name="obj"/>; Otherwise, 
            <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.GetChildZOrder(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Gets the z-order of the specified <see cref="T:ILOG.Diagrammer.GraphicObject"/> in this container.
            </summary>
            <param name="child">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> object.</param>
            <remarks><p>The default implementation return <strong>0</strong>.</p>
            <p>This method is internally called by some interactors or designers.</p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.SetChildZOrder(ILOG.Diagrammer.GraphicObject,System.Int32)">
            <summary>
            Sets the z-order of the specified <see cref="T:ILOG.Diagrammer.GraphicObject"/> in this container.
            </summary>
            <param name="child">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> object.</param>
            <param name="zorder">The new z-order for the specified object. A z-order of zero means that
            the object will be the first to be drawn.</param>
            <remarks><p>The default implementation throws a <see cref="T:System.NotImplementedException"/> exception.</p>
            <p>This method is internally called by some interactors or designers.</p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.IsALogicalChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Indicates whether the specified child is a logical child.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is a logical children of this container,
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.CanConnectChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.ILink,System.Boolean)">
            <summary>
            Indicates whether a link can be connected to the specified child.
            </summary>
            <param name="link">A <see cref="T:ILOG.Diagrammer.ILink"/> reference.</param>
            <param name="obj">The child object.</param>
            <param name="start"><see langword="true"/> if the connection is on the link start; Otherwise, <see langword="false"/>.</param>
            <returns><see langword="true"/> if the link connection is allowed; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.CanSelectChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Indicates whether the specified child can be selected.
            </summary>
            <param name="obj">The child object.</param>
            <returns><see langword="true"/> if the child can be selected; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.CanMoveChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Indicates whether the specified child can be moved.
            </summary>
            <param name="obj">The child object.</param>
            <returns><see langword="true"/> if the child can be moved; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.CanReparentChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Indicates whether the specified child can be reparented.
            </summary>
            <param name="obj">The child object.</param>
            <returns><see langword="true"/> if the child can be reparented; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.CanDropChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Indicates whether the specified child can dropped into this container.
            </summary>
            <param name="obj">The child object.</param>
            <returns><see langword="true"/> if the child can dropped into this container; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.CanDropChild(System.Type)">
            <summary>
            Indicates whether an instance of the specified type can dropped into this container.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> reference.</param>
            <returns><see langword="true"/> if an instance of the specified type can dropped into this container; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.CanCopyChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Indicates whether the specified child can be copied.
            </summary>
            <param name="obj">The child object.</param>
            <returns><see langword="true"/> if the child can be copied; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">
            <summary>
            Indicates whether the specified child can be resized.
            </summary>
            <param name="orientation">One of the <see cref="T:ILOG.Diagrammer.Orientation"/> values.</param>
            <param name="obj">The child object.</param>
            <returns><see langword="true"/> if the child can be resized; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.CanRotateChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Indicates whether the specified child can be rotated.
            </summary>
            <param name="obj">The child object.</param>
            <returns><see langword="true"/> if the child can be rotated; Otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.ShouldDispatchSelectionEvents(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Is called by the <see cref="T:ILOG.Diagrammer.Windows.Forms.SelectInteractor">SelectInteractor</see> to
            know if the container will dispatch events to the specified child.
            </summary>
            <param name="child">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference.</param>
            <returns><see langword="true"/> if the container will dispatch events to <paramref name="child"/>; Otherwise,
            <see langword="false"/>.</returns>
            <remarks>
            <p>This method is used to enhance the behavior or selected objects when a <see cref="T:ILOG.Diagrammer.Windows.Forms.SelectInteractor">SelectInteractor</see>
            has been set on a diagram view. By overriding this method, you will be able to mix the behavior defined on 
            graphic objects with the behavior of the selection interactor.</p>
            <p>The default behavior looks for a static method called <strong>ShouldDispatchEvents</strong> on the
            <see cref="T:ILOG.Diagrammer.SelectionGraphic"/> class associated with this graphic object. The method must return a <see cref="T:System.Boolean"/> value,
            and has two <see cref="T:ILOG.Diagrammer.GraphicObject"/> instances as parameters: The first parameter is the real target of the event,
            and the second one is this graphic container.</p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.ShouldStartMultipleChildrenSelection(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Is called by the <see cref="T:ILOG.Diagrammer.Windows.Forms.SelectInteractor">SelectInteractor</see> to
            know if the selection of multiple children (by dragging a rectangle) should be started.
            </summary>
            <param name="child">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> over which the mouse pointer is currently placed.</param>
            <returns><see langword="true"/> if the the selection of multiple children should be started; Otherwise,
            <see langword="false"/>.</returns>
            <remarks>
            <p>This method is used to enhance the behavior or selected objects when a <see cref="T:ILOG.Diagrammer.Windows.Forms.SelectInteractor">SelectInteractor</see>
            has been set on a diagram view. By overriding this method, you will be able to control whether a multi-selection is started, or whether the whole
            container will be selected and possibly moved.</p>
            <p>This method is called only if the <see cref="P:ILOG.Diagrammer.GraphicContainer.SupportsMultipleChildSelection"/> property is <see langword="true"/>.</p>
            <p>The default behavior returns <see langword="true"/>.</p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnChildrenAdding(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            Is called before children are added to this container.
            </summary>
            <param name="children">A collection of <see cref="T:ILOG.Diagrammer.GraphicObject"/> elements.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnChildrenAdded(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            Is called when children have been added to this container.
            </summary>
            <param name="children">An array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> elements.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnChildrenRemoving(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            Is called before children are removed from this container.
            </summary>
            <param name="children">An array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> elements.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnChildrenRemoved(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            Is called when children have been removed from this container.
            </summary>
            <param name="children">An array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> elements.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnChildZOrderChanging(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Is called when a child element is changing its z-order.
            </summary>
            <param name="child">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> elements whose z-order is changing.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnChildZOrderChanged(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Is called when a child element have changed its z-order.
            </summary>
            <param name="child">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> elements whose z-order has been changed.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnChildrenHierarchyChanged(ILOG.Diagrammer.ChildrenHierarchyChangeEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.GraphicContainer.ChildrenHierarchyChanged"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.ChildrenHierarchyChangeEventArgs"/> that contains the event data.</param>
            <remarks>The method raises the <see cref="E:ILOG.Diagrammer.GraphicContainer.ChildrenHierarchyChanged"/> event, and calls itself recursively
            using the parent of this container as invoker.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnParentChanging(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnParentChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">GraphicObject.OnParentChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnParentChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnParentChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">GraphicObject.OnParentChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnChildChanging(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.GraphicContainer.ChildChanging"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.GraphicChangeEventArgs"/> that contains the event data.</param>
            <remarks>The method raises the <see cref="E:ILOG.Diagrammer.GraphicContainer.ChildChanging"/> event, and calls itself recursively
            using the parent of this container as invoker.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnChildChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.GraphicContainer.ChildChanged"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.GraphicChangeEventArgs"/> that contains the event data.</param>
            <remarks>The method raises the <see cref="E:ILOG.Diagrammer.GraphicContainer.ChildChanged"/> event, and calls itself recursively
            using the parent of this container as invoker.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnGraphicChanging(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnGraphicChanging(ILOG.Diagrammer.GraphicChangeEventArgs)">GraphicObject.OnGraphicChanging</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnGraphicChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnGraphicChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">GraphicObject.OnGraphicChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.GetIntersectObjects(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Gets an array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> that contains child objects intersecting with the specified region
            when the container is drawn using the specified drawing context.
            </summary>
            <param name="region">A <see cref="T:System.Drawing.Region"/> instance, expressed in the parent coordinate space.</param>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
            <returns>An array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> intersecting with <paramref name="region"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.HitTestContent(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to do hit testing on the children of this container.
            </summary>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</param>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference to the object located at the specified point, or
            <see langword="null"/> if there's no object at this location.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.HitTestChildren(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to do hit testing on the children of this container.
            </summary>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</param>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference to the object located at the specified point, or
            <see langword="null"/> if there's no object at this location.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">GraphicObject.IntersectsCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.IntersectsContent(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to do hit testing on the children of this container.
            </summary>
            <param name="region">A <see cref="T:System.Drawing.Region"/> instance.</param>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference to the object located at the specified point, or
            <see langword="null"/> if there's no object at this location.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.IntersectsChildren(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to do hit testing on the children of this container.
            </summary>
            <param name="region">A <see cref="T:System.Drawing.Region"/> instance.</param>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference to the object located at the specified point, or
            <see langword="null"/> if there's no object at this location.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.Invalidate">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.Invalidate">GraphicObject.Invalidate</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.InvalidateChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Is called when a child element has been invalidated.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that has been invalidated.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnChildInvalidated(ILOG.Diagrammer.GraphicObjectInvalidatedEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.GraphicContainer.ChildInvalidated"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.GraphicObjectInvalidatedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.InvalidateCheckLayout">
            <summary>
            This method is invoked by children containers to reschedule their layout
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnPainting">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.GraphicContainer.Painting"/> event.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnPainted">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.GraphicContainer.Painted"/> event.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.PaintCore(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)">GraphicObject.PaintCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.PaintContent(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to paint the container contents.
            </summary>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.PaintChildren(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to paint the container contents.
            </summary>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.FindChild(System.String)">
            <summary>
            Finds a child by its name in this container only.
            </summary>
            <remarks>
            The child is looked for only in the children of this container.
            </remarks>
            <param name="name">The name of the object that is looked for.</param>
            <returns>The first graphic object in this container whose name is equal to 
            <paramref name="name"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.FindChild(System.String,System.Boolean)">
            <summary>
            Finds a child by its name in this container.
            </summary>
            <remarks>
            If the <paramref name="recursively"/> parameter is <see langword="true"/>,
            the child is looked for recursively in sub-containers of this container.
            Otherwise, the child is looked for only in the children of this container.
            </remarks>
            <param name="name">The name of the child that is looked for.</param>
            <param name="recursively">Specifies if the search must be done recursively
            in the sub-containers of this container.</param>
            <returns>The first graphic object in this container (or in one of its
            descendants) whose name is equal to <paramref name="name"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.FindLogicalChild(System.String)">
            <summary>
            Finds a logical child by its name in this container only.
            </summary>
            <remarks>
            The child is looked for only in the logical children of this container.
            </remarks>
            <param name="name">The name of the object that is looked for.</param>
            <returns>The first graphic object in this container whose name is equal to 
            <paramref name="name"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.FindLogicalChild(System.String,System.Boolean)">
            <summary>
            Finds a logical child by its name in this container.
            </summary>
            <remarks>
            If the <paramref name="recursively"/> parameter is <see langword="true"/>,
            the child is looked for recursively in sub-containers of this container.
            Otherwise, the child is looked for only in the logical children of this container.
            </remarks>
            <param name="name">The name of the child that is looked for.</param>
            <param name="recursively">Specifies if the search must be done recursively
            in the sub-containers of this container.</param>
            <returns>The first graphic object in this container (or in one of its
            descendants) whose name is equal to <paramref name="name"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.IsAncestorOf(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Checks if the container is an ancestor of the specified graphic object.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> to test.</param>
            <returns><see langword="true"/> if the container is an ancestor of the specified graphic object;
            Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnGraphLayoutChanged(ILOG.Diagrammer.GraphLayout.GraphLayout,ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.GraphicContainer.GraphLayout"/> property is changed.
            </summary>
            <param name="oldValue">The previous value of the <see cref="P:ILOG.Diagrammer.GraphicContainer.GraphLayout"/> property.</param>
            <param name="newValue">The new value of the <see cref="P:ILOG.Diagrammer.GraphicContainer.GraphLayout"/> property.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnLinkLayoutChanged(ILOG.Diagrammer.GraphLayout.GraphLayout,ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.GraphicContainer.LinkLayout"/> property is changed.
            </summary>
            <param name="oldValue">The previous value of the <see cref="P:ILOG.Diagrammer.GraphicContainer.LinkLayout"/> property.</param>
            <param name="newValue">The new value of the <see cref="P:ILOG.Diagrammer.GraphicContainer.LinkLayout"/> property.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnLayoutRecursivelyChanged(System.Boolean,System.Boolean)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.GraphicContainer.LayoutRecursively"/> property is changed.
            </summary>
            <param name="oldValue">The previous value of the <see cref="P:ILOG.Diagrammer.GraphicContainer.LayoutRecursively"/> property.</param>
            <param name="newValue">The new value of the <see cref="P:ILOG.Diagrammer.GraphicContainer.LayoutRecursively"/> property.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnGraphLayoutActiveChanged(System.Boolean,System.Boolean)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.GraphicContainer.GraphLayoutActive"/> property is changed.
            </summary>
            <param name="oldValue">The previous value of the <see cref="P:ILOG.Diagrammer.GraphicContainer.GraphLayoutActive"/> property.</param>
            <param name="newValue">The new value of the <see cref="P:ILOG.Diagrammer.GraphicContainer.GraphLayoutActive"/> property.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.OnLinkLayoutActiveChanged(System.Boolean,System.Boolean)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.GraphicContainer.LinkLayoutActive"/> property is changed.
            </summary>
            <param name="oldValue">The previous value of the <see cref="P:ILOG.Diagrammer.GraphicContainer.LinkLayoutActive"/> property.</param>
            <param name="newValue">The new value of the <see cref="P:ILOG.Diagrammer.GraphicContainer.LinkLayoutActive"/> property.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.PerformGraphLayout">
            <summary>
            Performs the graph layout algorithms defined by the <see cref="P:ILOG.Diagrammer.GraphicContainer.GraphLayout"/>
            and/or <see cref="P:ILOG.Diagrammer.GraphicContainer.LinkLayout"/> properties on the contents of this <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
            <remarks>
            <para>
            If the <see cref="P:ILOG.Diagrammer.GraphicContainer.LayoutRecursively"/> property is <see langword="true"/>,
            the <see cref="M:ILOG.Diagrammer.GraphicContainer.PerformGraphLayout"/> method
            performs the <see cref="P:ILOG.Diagrammer.GraphicContainer.GraphLayout"/> and/or <see cref="P:ILOG.Diagrammer.GraphicContainer.LinkLayout"/> algorithms recursively
            on the sub-containers contained in this <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            Otherwise, the layout is performed only on the contents of this <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </para>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphicContainer.GraphLayoutActive"/>
            <seealso cref="P:ILOG.Diagrammer.GraphicContainer.LinkLayoutActive"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.IsTopLayout(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Tests if the specified layout is the top-level layout
            performed in this container (as opposed to a subgraph layout
            created by the recursive layout).
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.RefreshSubLayouts">
            <summary>
            Clears the layouts allocated by the layout provider for the subgraphs of this
            container. This method must be called every time a sub-layout is subject to change,
            that is:
            - when the toplevel layout itself changes (i.e., the GraphLayout.LinkLayout properties),
            - when a property of a toplevle layout changes,
            - when the Graph/LinkLayoutActive properties change
            - when a subgraph is added (because the sublayout must be attached immediately
              if we are in auto-layout, so that the layout is done is something changes in
              the subgraph.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.RefreshSubLayouts(ILOG.Diagrammer.GraphicContainer.LayoutProvider,ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Recursive helper method for the previous method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.LayoutPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property of a layout changes.
            The main purpose is to call InvalidateSubLayouts.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.UpdateAutoLayout">
            <summary>
            Sets the properties of the RecursiveMultipleLayout so that auto-layout
            does what we want. The auto-layout behavior of GraphLayout and LinkLayout can
            be controlled independently through their AutoLayout property.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.CanPerformGraphLayout">
            <summary>
            Called by the designer to enable or disable the Perform Graph Layout command.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.SupportsGraphLayout">
            <summary>
            Indicates whether graph layout algorithms can be performed on the contents
            of this <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
            <value><see langword="true"/> if this container supports graph layout;
            Otherwise, <see langword="false"/>.</value>
            <remarks>
            The default implementation returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicContainer.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.Dispose(System.Boolean)">GraphicObject.Dispose</see>.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicContainer.AllowDropChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicContainer.AllowDrop"/> property has changed.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicContainer.AllowReparentChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicContainer.AllowReparent"/> property has changed.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicContainer.ChildInvalidated">
            <summary>
            Occurs when a descendant of the container has been invalidated and needs to be repainted.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicContainer.ChildrenHierarchyChanged">
            <summary>
            Occurs when the contents of the container has changed.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicContainer.ChildChanged">
            <summary>
            Occurs when a child of the container has changed.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicContainer.ChildChanging">
            <summary>
            Occurs when a child of the container is changing.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicContainer.QueryCollapsedAnchor">
            <summary>
            Occurs to query the anchor to use when a descendant of the container is collapsed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.IsInitializing">
            <summary>
            Indicates whether the object is being initialized.
            </summary>
            <value><see langword="true"/> if the control is being initialized; 
            <see langword="false"/> otherwise.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.AllowDrop">
            <summary>
            Indicates whether this container can be a drop target during reparent interactions.
            </summary>
            <value><see langword="true"/> if this container can be a drop target; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.AllowReparent">
            <summary>
            Indicates whether this container can be a drop source during reparent interactions.
            </summary>
            <value><see langword="true"/> if this container can be a drop source; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.LinkCrossings">
            <summary>
            Gets or sets the parameters that control link crossing detection in this container.
            </summary>
            <value>A <see cref="P:ILOG.Diagrammer.GraphicContainer.LinkCrossings"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.SupportsLinkReparenting">
            <summary>
            Indicates whether the container supports link reparenting.
            </summary>
            <value><see langword="true"/> if the container supports link reparenting; otherwise,
            <see langword="false"/>.</value>
            <remarks>This method is called during interactions to indicate if this container can be used as a parent
            for reparented links. The default implementation returns <see langword="false"/>.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.ChildTransform">
            <summary>
            Gets the transformation to convert object coordinates to the children coordinate system.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</value>
            <remarks>The default implementation returns the identity.</remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphicObject.Transform">GraphicObject.Transform</seealso>.
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.SupportsChildAutoSizing">
            <summary>
            Indicates whether the container handles the size of autosized objects.
            </summary>
            <value><see langword="true"/> if the container handles the size of autosized objects; otherwise,
            <see langword="false"/>.</value>
            <remarks>The default implementation returns <see langword="false"/>.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.SupportsChildManagement">
            <summary>
            Indicates whether the <see cref="M:ILOG.Diagrammer.GraphicContainer.AddChildren(ILOG.Diagrammer.GraphicObject[])"/> and <see cref="M:ILOG.Diagrammer.GraphicContainer.RemoveChildren(ILOG.Diagrammer.GraphicObject[])"/> methods
            are implemented.
            </summary>
            <value><see langword="true"/> if the <see cref="M:ILOG.Diagrammer.GraphicContainer.AddChildren(ILOG.Diagrammer.GraphicObject[])"/> and <see cref="M:ILOG.Diagrammer.GraphicContainer.RemoveChildren(ILOG.Diagrammer.GraphicObject[])"/> methods
            are implemented; otherwise, <see langword="false"/>.</value>
            <remarks>The default implementation returns <see langword="false"/>.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.SupportsChildReparenting">
            <summary>
            Indicates whether logical children can be reparented during an interaction.
            </summary>
            <value><see langword="true"/> if logical children can be reparented; otherwise,
            <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.SupportsChildSelection">
            <summary>
            Indicates whether logical children can be selected.
            </summary>
            <value><see langword="true"/> if logical children can be selected; otherwise, <see langword="false"/>.</value>
            <remarks>The default implementation returns <see langword="true"/>.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.SupportsMultipleChildSelection">
            <summary>
            Indicates whether logical children can be selected during interactions by dragging a rectangle. 
            </summary>
            <value><see langword="true"/> if logical children can be selected during interactions by dragging a rectangle; otherwise, <see langword="false"/>.</value>
            <remarks>The default implementation returns <see langword="false"/>.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.LogicalChildren">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> that iterates on the container logical children.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.Children">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> that iterates on the container children.
            </summary>
            <value>An <see cref="T:System.Collections.IEnumerable"/> instance.</value>
            <remarks>The default behavior returns an empty collection.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.LogicalChildTransform">
            <summary>
            Gets the transformation to convert from local coordinates to logical children coordinates.
            </summary>
            <returns>A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</returns>
            <seealso cref="P:ILOG.Diagrammer.GraphicContainer.ChildTransform"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.ShouldReceiveParentChangeNotifications">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.ShouldReceiveParentChangeNotifications">GraphicObject.ShouldReceiveParentChangeNotifications</see>.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicContainer.Painting">
            <summary>
            Occurs when the container is about to be painted.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicContainer.Painted">
            <summary>
            Occurs when the container is about to be painted.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.GraphLayout">
            <summary>
            Gets or sets the graph layout to perform on this container.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayout"/> instance.</value>
            <seealso cref="P:ILOG.Diagrammer.GraphicContainer.LinkLayout"/>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicContainer.GraphLayoutChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicContainer.GraphLayout"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.LinkLayout">
            <summary>
            Gets or sets the link layout to perform on this container.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayout"/> instance.</value>
            <seealso cref="P:ILOG.Diagrammer.GraphicContainer.GraphLayout"/>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicContainer.LinkLayoutChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicContainer.LinkLayout"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.LayoutRecursively">
            <summary>
            Determines whether the graph layout algorithms (specified in the <see cref="P:ILOG.Diagrammer.GraphicContainer.GraphLayout"/> and <see cref="P:ILOG.Diagrammer.GraphicContainer.LinkLayout"/> properties) 
            are performed recursively on all the sub-containers contained in this <see cref="T:ILOG.Diagrammer.GraphicContainer"/>,
            or only on the contents of this <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
            <value><see langword="true"/> if the graph layout algorithms are performed recursively;
            Otherwise, <see langword="false"/>. The default value is <see langword="true"/>.</value>
            <remarks>
            <para>
            If the <see cref="P:ILOG.Diagrammer.GraphicContainer.LayoutRecursively"/> property is <see langword="true"/>,
            the <see cref="M:ILOG.Diagrammer.GraphicContainer.PerformGraphLayout"/> method
            performs the layout algorithms specified in the <see cref="P:ILOG.Diagrammer.GraphicContainer.GraphLayout"/> and/or <see cref="P:ILOG.Diagrammer.GraphicContainer.LinkLayout"/> properties recursively
            on the sub-containers contained in this <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </para>
            <para>
            If the <see cref="P:ILOG.Diagrammer.GraphicContainer.LayoutRecursively"/> property is <see langword="false"/>,
            the layout is performed
            only on the contents of this <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </para>
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicContainer.LayoutRecursivelyChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicContainer.LayoutRecursively"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.GraphLayoutActive">
            <summary>
            Determines whether the graph layout algorithm defined by the <see cref="P:ILOG.Diagrammer.GraphicContainer.GraphLayout"/> property
            is active, that is, if it will be performed when the <see cref="M:ILOG.Diagrammer.GraphicContainer.PerformGraphLayout"/> method is called.
            </summary>
            <value><see langword="true"/> if the <see cref="P:ILOG.Diagrammer.GraphicContainer.GraphLayout"/> is active;
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
            <remarks>
            This method is useful when you want to temporarily disable a graph layout algorithm,
            for instance, when you want to perform only a link layout by not a graph layout.
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicContainer.GraphLayoutActiveChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicContainer.GraphLayoutActive"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.LinkLayoutActive">
            <summary>
            Determines whether the graph layout algorithm defined by the <see cref="P:ILOG.Diagrammer.GraphicContainer.LinkLayout"/> property
            is active, that is, if it will be performed when the <see cref="M:ILOG.Diagrammer.GraphicContainer.PerformGraphLayout"/> method is called.
            </summary>
            <value><see langword="true"/> if the <see cref="P:ILOG.Diagrammer.GraphicContainer.LinkLayout"/> is active;
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
            <remarks>
            This method is useful when you want to temporarily disable a graph layout algorithm,
            for instance, when you want to perform only a graph layout by not a link layout.
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicContainer.LinkLayoutActiveChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicContainer.LinkLayoutActive"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.RML">
            <summary>
            Gets the RecursiveMultipleLayout that we use as a starting point
            to perform all layouts.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicContainer.LayoutRunning">
            <summary>
            This flags says if we are currently performing the layout using
            the <see cref="M:ILOG.Diagrammer.GraphicContainer.PerformGraphLayout"/> method.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphicContainer.LayoutProvider">
            <summary>
            The layout provider that determines the layout to perform for each container
            or sub-container.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider">
            <summary>
            A default implementation of the interface
            <see cref="T:ILOG.Diagrammer.GraphLayout.ILayoutProvider"/>.
            </summary>
            <remarks> 
            <p>
            This class is mainly useful when laying out nested graphs, that is,
            graphs containing nodes that are other graphs. It provides the
            following services: 
            <UL>
            <LI>Allows you to set a layout instance for a given graph model (see
            the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.SetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>).</LI>
            
            <LI>When no layout instance is specified for a given graph model
            using the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.SetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>,
            the <strong>protected</strong> method 
            (<see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.CreateGraphLayout(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>)
            is called. The default implementation of this method "clones" the
            layout instance of the closest parent graph for which a layout has
            been set. You can override this method to change this behavior. 
            <p>
            Warning: to avoid repeatedly "cloning" the layout instance, the
            method
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.GetGraphLayout(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            stores the "cloned" layout instance as the preferred layout of the
            given graph model. This means that any change to the parameters of
            the layout that has been "cloned," after the call of 
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.GetGraphLayout(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>, does
            not affect the "cloned" layout instance. This allows you to set
            parameters independently on each layout instance.  However, if you
            need to replicate the same parameter settings on the layout instance
            that has been previously "cloned," you can, for instance, delete the
            preferred layout  (<strong>SetPreferredLayout(model, null)</strong>).
            This way the  layout instance of the parent graph will be "cloned"
            again with its new parameter settings.
            </p>
            </LI> 
            </UL> 
            </p>
            <p>
            Note that you must call the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.DetachLayouts(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Boolean)"/>
            when you no  longer need the layout provider instance; otherwise,
            some objects may not  be garbage collected. 
            </p>
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.ILayoutProvider"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.#ctor(ILOG.Diagrammer.GraphLayout.ILayoutProvider)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutProvider"/>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.ILayoutProvider">
             <summary>
             An interface used to specify the layout instance to be used for
             laying out a given graph.
             </summary>
             <remarks> 
             <p>
             This interface is mainly useful when laying out nested graphs, that
             is, graphs containing nodes that are other graphs. 
             </p>
             <p>
             Note that in many cases, it is simpler either to use the subclass 
             <see cref="T:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider"/> as is, or to subclass it, instead
             of directly implementing this interface.  
             </p>
             </remarks>
             <example>
             <para lang="cs,vbnet">The following code is an example of the
             implementation of the method <see cref="M:ILOG.Diagrammer.GraphLayout.ILayoutProvider.GetGraphLayout(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
             In this example, the criteria used for choosing the layout instance is
             the value of a property stored in advance in the graph model.
             Of course, many other criteria can be used.</para>
             <code lang="cs">
             public GraphLayout GetGraphLayout(IGraphModel graphModel)
             {
               String name = (graphModel.GetProperty("layout type") as String);
               // if none, return null (no layout needed for this graph)
               if (name == null)
                 return null;
             
               GraphLayout layout = null;
             
               if (name.Equals("tree"))
                 layout = new TreeLayout();
               else if (name.Equals("flow"))
                 layout = new HierarchicalLayout();
               else
                 throw new Exception("unsupported layout choice: " + name);
            
               layout.Attach(graphModel);
             
               return layout;
             }
             </code>
             <code lang="vbnet">
             Public Function GetGraphLayout(ByVal graphModel As IGraphModel) As GraphLayout
               Dim name As String =  TryCast(graphModel.GetProperty("layout type"), String)   
               If name Is Nothing Then
                 Return Nothing
               End If
               Dim layout As GraphLayout = Nothing
               If name.Equals("tree") Then
                 layout = New TreeLayout
               Else
                 If name.Equals("flow") Then
                   layout = New HierarchicalLayout
                 Else
                   Throw New Exception("unsupported layout choice: " + name)
                 End If
               End If
               layout.Attach(graphModel)
               Return layout
             End Function
             </code>
             </example>
             
             <seealso cref="T:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.#ctor(ILOG.Diagrammer.GraphLayout.ILayoutProvider)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ILayoutProvider.GetGraphLayout(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Returns the layout instance to be used for laying out
            a graph model.
            </summary>
            <remarks>
            The layout instance that is returned must be attached to
            <paramref name="graphModel"/> via the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            <p>
            Note that this method must return a different layout instance for
            each subgraph. The same layout instance should not be returned for
            two different subgraphs of the same graph. Also, the layout instance
            returned for a subgraph should not be the same as the one returned
            for the topmost graph. 
            </p>
            <p>
            This method is called during the recursive layout of a nested graph
            using the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
            with traverse flag set to <see langword="true"/>, and
            when the <see cref="T:ILOG.Diagrammer.GraphLayout.RecursiveLayout"/> is performed.
            If the method returns <see langword="null"/>, this means that no
            layout is needed for <paramref name="graphModel"/>. 
            </p>
            </remarks>
            <param name="graphModel"> The graph model (eventually the graph
            model that encapsulates the topmost grapher).
            </param>
            <returns>The layout instance to be used for
            <paramref name="graphModel"/>, or <see langword="null"/> if no
            layout is need for <paramref name="graphModel"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.#ctor">
            <summary>
            Creates a new <strong>DefaultLayoutProvider</strong>.
            </summary>
            <remarks>
            Use the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.SetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            to specify preferred layouts.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.GetInstanceId">
            <summary>
            Returns a unique integer value for each layout provider instance
            inside the same C# program.
            </summary>
            <remarks>
            This utility method can be used to obtain names for properties that
            are unique for each layout provider instance.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.SetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Sets the layout instances to be used for laying out 
            <paramref name="graphModel"/>.
            </summary>
            <remarks>
            The method simply calls 
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.SetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout,System.Boolean)"/>,
            passing its arguments and the value <see langword="true"/> for the 
            <strong>detachPrevious</strong> argument. 
            <p>
            </p>
            </remarks>
            <param name="graphModel"> The graph model (the graph model that
            encapsulates the topmost graphic container, or a subgraph).
            </param>
            <param name="layout"> The layout instance to be used for laying out
            <paramref name="graphModel"/>, or <see langword="null"/>.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.SetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.SetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout,System.Boolean)">
            <summary>
            Sets the layout instances to be used for laying out 
            <paramref name="graphModel"/>.
            </summary>
            <remarks>
            The method simply calls 
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.SetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout,System.Boolean,System.Boolean)"/>,
            passing its arguments and the value <see langword="false"/> for the 
            <strong>traverse</strong> argument. 
            <p>
            </p>
            </remarks>
            <param name="graphModel"> The graph model (the graph model that
            encapsulates the topmost graphic container, or a subgraph).
            </param>
            <param name="layout"> The layout instance to be used for laying out
            <paramref name="graphModel"/>, or <see langword="null"/>.
            </param>
            <param name="detachPrevious"> If <see langword="true"/>, the layout
            instance previously specified as the preferred layout of
            <paramref name="graphModel"/> (if any) is detached.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.SetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.SetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout,System.Boolean,System.Boolean)">
            <summary>
            Sets the layout instances to be used for laying out 
            <paramref name="graphModel"/>.
            </summary>
            <remarks> 
            <p>
            If the argument <paramref name="traverse"/> is
            <see langword="false"/>,  <paramref name="layout"/> is stored as the
            preferred layout of <paramref name="graphModel"/>. If the argument
            <paramref name="traverse"/> is <see langword="true"/>, 
            <paramref name="layout"/> is stored as the preferred layout of
            <paramref name="graphModel"/> and, recursively, a clone of
            <paramref name="layout"/> is stored as preferred layout of all the
            models encapsulating the subgraphs of <paramref name="graphModel"/>.
            The clones are obtained by calling the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.Copy(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>.
            
            </p>
            <p>
            You can call this method with a <see langword="null"/> value for the
            argument  <paramref name="layout"/> to reset previous settings.  By
            default, there is no preferred layout and the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.GetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            returns <see langword="null"/>.  
            </p>
            <p>
            If it is not already attached, the method attaches the layout
            instance to the  graph model using the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
             The layout instance is stored in the provider until it is detached
            using the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Detach"/>. If a
            different layout instance was previously specified and the argument 
            <paramref name="detachPrevious"/> is <see langword="true"/>, the
            graph model is  detached from it using the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Detach"/>. 
            </p>
            <p>
            If no layout instance is specified for a subgraph, then the layout
            instance specified for the nearest parent graph will be used  (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.GetGraphLayout(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>). 
            </p>
            <p>
            The same layout instance should not be used for different subgraphs
            in the same nested graph, and should not be used inside a different
            default layout provider. Also, the method should not be called for
            graph models that are adapter created internally by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            on a layout instance which is not <paramref name="layout"/>.  
            </p>
            <p>
            </p>
            </remarks>
            <param name="graphModel"> The graph model (the graph model that
            encapsulates the topmost graphic container, or a subgraph).
            </param>
            <param name="layout"> The layout instance to be used for laying out
            <paramref name="graphModel"/>, or <see langword="null"/>.
            </param>
            <param name="detachPrevious"> If <see langword="true"/>, the layout
            instance previously specified as the preferred layout of
            <paramref name="graphModel"/> (if any) is detached.
            </param>
            <param name="traverse"> If <see langword="true"/>,
            <paramref name="layout"/> is stored as the preferred layout of
            <paramref name="graphModel"/>, and clones of
            <paramref name="layout"/> are recursively stored on the submodels of
            <paramref name="graphModel"/>. Otherwise, the method does not go
            recursively into the submodels.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.SetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.GetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Returns the layout instance that has been specified using the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.SetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            for laying out <paramref name="graphModel"/>, or
            <see langword="null"/> if none has been specified or a
            <see langword="null"/> layout has been specified (that is, no layout
            should be applied to this  graph model).
            </summary>
            <remarks>
            The layout instance is already attached. If you detach the layout
            instance, it is automatically removed from the provider. 
            <p>
            </p>
            </remarks>
            <param name="graphModel"> The graph model (the graph model that
            encapsulates the topmost graphic container, or a subgraph).
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.StorePreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Stores the layout for the graph model.
            </summary>
            <remarks>
            This method is overridden in some subclasses. You should not use
            this method. 
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.DetachLayouts(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Boolean)">
            <summary>
            Detaches the layout instances from <paramref name="graphModel"/> and
            cleans the preferred layout settings.
            </summary>
            <remarks>  
            <p>
            This method allows you to easily detach all the layout instances
            used for a nested graph. The layout instances are obtained using the
            method 
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.GetGraphLayout(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.  If
            the argument <paramref name="traverse"/> is <see langword="true"/>,
            the method  is applied recursively on the subgraphs of
            <paramref name="graphModel"/>. 
            </p>
            <p>
            Note that you must call this method when you no longer need the
            layout provider instance; otherwise, some objects may not be garbage
            collected. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="graphModel"> The graph model (the graph model that
            encapsulates the topmost graphic container, or a subgraph).
            </param>
            <param name="traverse"> If <see langword="true"/>, the method
            applies to <paramref name="graphModel"/> and recursively to all
            subgraph models. Otherwise, it applies only to
            <paramref name="graphModel"/> itself.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Detach"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.Dispose"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.GetGraphLayout(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Returns the layout instance to be used to lay out
            <paramref name="graphModel"/>.
            </summary>
            <remarks> 
            <p>
            The default implementation first searches for a preferred layout
            specified using
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.SetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>.
            If none is found, the method returns the layout instance returned by
            the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.CreateGraphLayout(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="graphModel"> The graph model (the graph model that
            encapsulates the topmost graphic container, or a subgraph).
            </param>
            <returns>The layout instance to be used for
            <paramref name="graphModel"/>, or <see langword="null"/> if no
            layout is need for <paramref name="graphModel"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.CreateGraphLayout(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Returns a layout instance to be used to lay out a graph model for
            which no layout has been specified using the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.SetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>.
            </summary>
            <remarks> 
            <p>
            The method clones (using the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.Copy(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>)
            the layout instance of the nearest parent graph model for which a
            non-<see langword="null"/> preferred layout has been specified.  If
            no non-<see langword="null"/> preferred layout has been specified
            for any of its parents, including the topmost (root) graph model,
            the method returns <see langword="null"/>. 
            </p>
            <p>
            The layout instance that is returned does not need to be attached to
             the specified graph model. The attachment (using the method 
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            is done in the method 
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.GetGraphLayout(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="graphModel"> The graph model (the graph model that
            encapsulates the topmost graphic container, or a subgraph).
            </param>
            <returns>The layout instance to be used for
            <paramref name="graphModel"/>, or <see langword="null"/> if no
            layout is need for <paramref name="graphModel"/>.
            </returns>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.GetGraphLayout(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.SetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.Copy(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Returns a copy of a layout instance.
            </summary>
            <remarks>
            The method is called by
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.CreateGraphLayout(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            to obtain a clone of the preferred layout of the closest parent
            graph. The method calls
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Copy"/> to copy
            the layout instance. The method returns <see langword="null"/> if
            the argument <paramref name="layout"/>  is <see langword="null"/>. 
            <p>
            </p>
            </remarks>
            <param name="layout"> The preferred layout of the closest parent
            graph that has a specified preferred layout, or
            <see langword="null"/>.
            </param>
            <returns>A copy of the layout instance, or <see langword="null"/>.
            </returns>
        </member>
        <member name="T:ILOG.Diagrammer.GraphicContainer.SubgraphCorrection">
            <summary>
            This class resizes the subgraphs (for now, Canvas objects) when a
            layout has been performed on them.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.ISubgraphCorrection">
            <summary>
            An interface used to define corrections of a subgraph after the
            layout of the subgraph was performed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ISubgraphCorrection.Correct(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Allows you to correct the subgraph after the nodes and links of the 
            subgraph were laid out.
            </summary>
            <remarks>
            This is called by the Recursive Layout (see
            <see cref="T:ILOG.Diagrammer.GraphLayout.RecursiveLayout"/>) immediately after the layout of the
            subgraph has finished. Usually, a correction of the position of the
            subgraph can be done; therefore the former bounding box of the
            subgraph is passed. 
            <p>
            </p>
            </remarks>
            <param name="subgraph"> The subgraph that has been laid out.
            </param>
            <param name="layout"> The layout that has been performed on the
            subgraph.
            </param>
            <param name="boundingBox"> The former bounding box of the subgraph
            at the point in time before the layout.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SubgraphCorrectionInterface"/>
        </member>
        <member name="T:ILOG.Diagrammer.GraphicContainer.AutoLayoutHandler">
            <summary>
            An auto-layout handler that does nothing: the auto-layout is
            always performed by the RecursiveMultipleLayout. The graph/link layout
            itself must not perform any auto-layout.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.IAutoLayoutHandler">
            <summary>
            An interface used to automatically perform a layout again following a
            structural or geometric change of the graph.
            </summary>
            <remarks>
            The interface can be installed at a layout instance. It is used inside
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformAutoLayout"/>
            to start the automatic layout.
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample shows an example of a simple
            implementation of the <strong>PerformAutoLayout</strong> method.</para>
            <code lang="cs">
            public void PerformAutoLayout(Object layout, ArrayList objects) {
              if (layout is GraphLayout)
                ((GraphLayout)layout).PerformLayout(true);
            }
            </code>
            <code lang="vbnet">
            Public Sub PerformAutoLayout(ByVal layout As Object, ByVal objects As ArrayList)
              If TypeOf layout Is GraphLayout Then
                CType(layout, GraphLayout).PerformLayout(True)
              End If
            End Sub
            </code>
            </example>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AutoLayoutHandler"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformAutoLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IAutoLayoutHandler.PerformAutoLayout(System.Object,System.Collections.ArrayList)">
            <summary>
            Performs an automatic layout that was caused by a structural or
            geometric change of some graphic objects.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name='layout'> The graph layout to be performed.
            </param>
            <param name='objects'> The vector of graphic objects that caused the
            need for layout. These objects were added, removed, or have moved.
            If <see langword='null'/> is passed, the need for layout has no
            specific reason (for example, when all nodes and links have moved).
            </param>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.IRectangularShape">
            <summary>
            Interface implemented by graphic objects with a rectangular shape.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.IRectangularShape.Rectangle">
            <summary>
            Gets or sets the rectangle that defines the shape of the graphic object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Control._rectangle">
            <summary>
            The definition rectangle
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Control._minimumSize">
            <summary>
            The minimum size
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Control._maximumSize">
            <summary>
            The maximum size
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Control._background">
            <summary>
            The control background
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Control._foreground">
            <summary>
            The control foreground
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Control._visualStyles">
            <summary>
            Indicates whether to use visual styles.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Control._validLayout">
            <summary>
            Indicates whether the layout is valid.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Control._inLayout">
            <summary>
            true when re-layouting.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Control._suspendLayout">
            <summary>
            Indicates that layout is suspended.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Control._DefaultBackground">
            <summary>
            Default Background
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Control._DefaultForeground">
            <summary>
            Default Foreground
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Control"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.Dispose(System.Boolean)">GraphicObject.Dispose</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.BeginInit">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.BeginInit">GraphicContainer.BeginInit</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.EndInit">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.EndInit">GraphicContainer.EndInit</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.SuspendLayout">
            <summary>
            Temporarily suspends the layout logic for the control. 
            </summary>
            <remarks>Call the <see cref="M:ILOG.Diagrammer.Graphic.Control.SuspendLayout"/> method to suspend the layout logic, and <see cref="M:ILOG.Diagrammer.Graphic.Control.ResumeLayout"/> to restore it.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.ResumeLayout">
            <summary>
            Resumes the usual layout logic for the control.
            </summary>
            <remarks>Call the <see cref="M:ILOG.Diagrammer.Graphic.Control.SuspendLayout"/> method to suspend the layout logic, and <see cref="M:ILOG.Diagrammer.Graphic.Control.ResumeLayout"/> to restore it.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.ResumeLayout(System.Boolean)">
            <summary>
            Resumes the usual layout logic for the control.
            </summary>
            <param name="performLayout"><see langword="true"/> to force a relayout; otherwise, <see langword="false"/>.</param>
            <remarks>Call the <see cref="M:ILOG.Diagrammer.Graphic.Control.SuspendLayout"/> method to suspend the layout logic, and <see cref="M:ILOG.Diagrammer.Graphic.Control.ResumeLayout"/> to restore it.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.InvalidateLayout">
            <summary>
            Invalidates the current layout logic.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.InvalidateLayout(System.Boolean)">
            <summary>
            Invalidates the current layout logic and forces a redraw. 
            </summary>
            <param name="redraw"><see langword="true"/> to force a redraw; Otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.PerformLayout">
            <summary>
            Forces the control to apply layout logic to all its child objects. 
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.OnLayout(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Graphic.Control.Layout"/> event.
            </summary>
            <param name="args">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.DoLayout(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Is called to perform the layout of child objects.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure in which child objects will be arranged.</param>
            <remarks>The implementation of this method should call the <see cref="M:ILOG.Diagrammer.Graphic.Panel.SetChildBounds(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Rectangle2D)"/> method to place
            the child objects inside <paramref name="rect"/>.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.OnChildBoundsChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            Is called when the specified child has its geometry changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.OnChildChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">GraphicContainer.OnChildChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.OnRectangleChanged(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Control.Rectangle"/> property is modified.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.OnVisualStylesChanged(ILOG.Diagrammer.Graphic.VisualStyles,ILOG.Diagrammer.Graphic.VisualStyles)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Control.VisualStyles"/> property is modified.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.OnParentVisualStylesChanged(ILOG.Diagrammer.Graphic.VisualStyles,ILOG.Diagrammer.Graphic.VisualStyles)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Control.VisualStyles"/> property of the parent is modified.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.UpdateRectangle">
            <summary>
            Updates the Rectangle according to max/min sizes
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.OnMinimumSizeChanged(ILOG.Diagrammer.Size2D,ILOG.Diagrammer.Size2D)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Control.MinimumSize"/> property is modified.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.OnMaximumSizeChanged(ILOG.Diagrammer.Size2D,ILOG.Diagrammer.Size2D)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Control.MaximumSize"/> property is modified.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.OnBackgroundChanged(ILOG.Diagrammer.Fill,ILOG.Diagrammer.Fill)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Control.Background"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.OnBackgroundChanged">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Control.Background"/> is changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.OnForegroundChanged(ILOG.Diagrammer.Fill,ILOG.Diagrammer.Fill)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Control.Foreground"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.OnForegroundChanged">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Control.Foreground"/> is changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">GraphicObject.GetPreferredSizeCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.GetGeometryBounds">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetGeometryBounds">GraphicObject.GetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.OnChildrenAdded(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildrenAdded(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">GraphicContainer.OnChildrenAdded</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.OnChildrenRemoved(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildrenRemoved(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">GraphicContainer.OnChildrenRemoved</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">GraphicObject.IntersectsCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.GetBackgroundVisualStyleRenderer">
            <summary>
            Is called to get the <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleRenderer"/> that will be used to draw
            the control background when using visual styles.
            </summary>
            <returns>A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleRenderer"/> instance.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.PaintBackground(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to paint the container background.
            </summary>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.PaintCore(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)">GraphicObject.PaintCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Control.GetDefaultAnchors">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetDefaultAnchors">GraphicObject.GetDefaultAnchors</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Control.IsLayoutSuspended">
            <summary>
            Indicates whether the layout logic has been suspended.
            </summary>
            <value><see langword="true"/> if the layout logic has been suspended; Otherwise, <see langword="false"/>.</value>
            <remarks>Call the <see cref="M:ILOG.Diagrammer.Graphic.Control.SuspendLayout"/> method to suspend the layout logic, and <see cref="M:ILOG.Diagrammer.Graphic.Control.ResumeLayout"/> to restore it.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Control.IsInLayout">
            <summary>
            Indicates whether the control is layouting its children.
            </summary>
            <value><see langword="true"/> if the control is layouting its children; Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Control.Layout">
            <summary>
            Occurs when the control's layout is performed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Control.ClientRectangle">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.Rectangle2D"/> where child controls are displayed.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Control.MinimumSize"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Control.MaximumSize"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Control.Rectangle"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Control.Rectangle">
            <summary>
            Gets or sets the rectangle that defines the control.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Control.MinimumSize"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Control.MaximumSize"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Control.RectangleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Control.Rectangle"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Control.VisualStyles">
            <summary>
            Gets or sets a value indicating whether the control should use the visual styles.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Graphic.VisualStyles"/> values. The default value is <see cref="T:ILOG.Diagrammer.Graphic.VisualStyles">VisualStyles.Inherit</see>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Control.VisualStylesChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Control.VisualStyles"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Control.MinimumSize">
            <summary>
            Gets of sets the minimum size for the control.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Size2D"/> structure.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Control.Rectangle"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Control.MaximumSize"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Control.MinimumSizeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Control.MinimumSize"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Control.MaximumSize">
            <summary>
            Gets of sets the maximum size for the control.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Size2D"/> structure.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Control.Rectangle"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Control.MinimumSize"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Control.MaximumSizeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Control.MaximumSize"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Control.Background">
            <summary>
            Gets or sets the background of the control.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Fill"/> reference.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Control.BackgroundChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Control.Background"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Control.Foreground">
            <summary>
            Gets or sets the foreground of the control.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Fill"/> reference.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Control.ForegroundChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Control.Foreground"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Control.ChildTransform">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.ChildTransform">GraphicContainer.ChildTransform</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Control.SupportsChildAutoSizing">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.SupportsChildAutoSizing">GraphicContainer.SupportsChildAutoSizing</see>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ObjectsControl._objects">
            <summary>
            The children.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ObjectsControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.ObjectsControl"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ObjectsControl.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.Dispose(System.Boolean)">GraphicObject.Dispose</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ObjectsControl.HitTestChildren(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.HitTestContent(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicContainer.HitTestContent</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ObjectsControl.IntersectsChildren(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.HitTestContent(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicContainer.HitTestContent</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ObjectsControl.PaintChildren(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.PaintContent(ILOG.Diagrammer.DrawingContext)">GraphicContainer.PaintContent</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ObjectsControl.PaintChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to paint the specified child object.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> to paint.</param>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ObjectsControl.GetChildZOrder(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.GetChildZOrder(ILOG.Diagrammer.GraphicObject)">GraphicContainer.GetChildZOrder</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ObjectsControl.AddChildren(ILOG.Diagrammer.GraphicObject[])">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.AddChildren(ILOG.Diagrammer.GraphicObject[])">GraphicContainer.AddChildren</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ObjectsControl.InsertChildren(System.Int32,ILOG.Diagrammer.GraphicObject[])">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.InsertChildren(System.Int32,ILOG.Diagrammer.GraphicObject[])">GraphicContainer.InsertChildren</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ObjectsControl.RemoveChildren(ILOG.Diagrammer.GraphicObject[])">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.RemoveChildren(ILOG.Diagrammer.GraphicObject[])">GraphicContainer.RemoveChildren</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ObjectsControl.SetChildZOrder(ILOG.Diagrammer.GraphicObject,System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.SetChildZOrder(ILOG.Diagrammer.GraphicObject,System.Int32)">GraphicContainer.SetChildZOrder</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ObjectsControl.Children">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.Children">GraphicContainer.Children</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ObjectsControl.Objects">
            <summary>
            Gets the collection of the control's children
            </summary>
            <value>A collection of <see cref="T:ILOG.Diagrammer.GraphicObject"/> instances.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ObjectsControl.SupportsChildManagement">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.SupportsChildManagement">GraphicContainer.SupportsChildManagement</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ObjectsControl.SupportsChildReparenting">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.SupportsChildReparenting">GraphicContainer.SupportsChildReparenting</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ObjectsControl.SupportsLinkReparenting">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.SupportsLinkReparenting">GraphicContainer.SupportsLinkReparenting</see>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Panel._borderMargins">
            <summary>
            The margins for the border
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Panel._cornerRadius">
            <summary>
            The corner radii.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Panel._path">
            <summary>
            The border path
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Panel._border">
            <summary>
            The stroke for the border
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Panel._itemsMargins">
            <summary>
            Margins for all elements.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Panel"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.Dispose(System.Boolean)">GraphicObject.Dispose</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.OnItemsMarginsChanged(ILOG.Diagrammer.Margins,ILOG.Diagrammer.Margins)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Panel.ItemsMargins"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.OnCornerRadiusChanged(ILOG.Diagrammer.CornerRadius,ILOG.Diagrammer.CornerRadius)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Panel.CornerRadius"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.OnBorderChanged(ILOG.Diagrammer.Stroke,ILOG.Diagrammer.Stroke)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Panel.Border"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.OnBorderChanged(ILOG.Diagrammer.StyleChangeType)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Panel.Border"/> is changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.OnBorderMarginsChanged(ILOG.Diagrammer.Margins,ILOG.Diagrammer.Margins)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Panel.BorderMargins"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.GetGeometryBounds">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetGeometryBounds">GraphicObject.GetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.GetStyledBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetStyledBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetStyledBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">GraphicObject.IntersectsCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.GetChildBounds(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Gets the bounds of the specified child object taking into account the object margins.
            </summary>
            <param name="obj">A child object.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure that corresponds to the bounds of the specified
            object inflated by its margins.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.SetChildBounds(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Sets the bounds of the specified child object taking into account the object margins.
            </summary>
            <param name="obj">A child object.</param>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure that corresponds to the new bounds of the specified
            object inflated by its margins.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">GraphicObject.GetPreferredSizeCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.OnGraphicChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnGraphicChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">GraphicObject.OnGraphicChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.GetMargins(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Gets the margins of the specified child object.
            </summary>
            <param name="obj">A child object.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Margins"/> structure.</returns>
            <seealso cref="M:ILOG.Diagrammer.Graphic.Panel.SetMargins(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Margins)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.SetMargins(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Margins)">
            <summary>
            Sets the margins for the specified child object.
            </summary>
            <param name="obj">A child object.</param>
            <param name="margins">A <see cref="T:ILOG.Diagrammer.Margins"/> structure.</param>
            <seealso cref="M:ILOG.Diagrammer.Graphic.Panel.GetMargins(ILOG.Diagrammer.GraphicObject)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.OnMarginsChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Margins,ILOG.Diagrammer.Margins)">
            <summary>
            Is called when the margins of the specified child object has changed.
            </summary>
            <param name="obj">A child object.</param>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.GetHorizontalAlignment(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Gets the horizontal alignment of the specified child object.
            </summary>
            <param name="obj">A child object.</param>
            <returns>One of the <see cref="T:ILOG.Diagrammer.Graphic.HorizontalAlignment"/> values. The default value for this property is <see cref="F:ILOG.Diagrammer.Graphic.HorizontalAlignment.Stretch"/>.</returns>
            <seealso cref="M:ILOG.Diagrammer.Graphic.Panel.SetHorizontalAlignment(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.HorizontalAlignment)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.SetHorizontalAlignment(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.HorizontalAlignment)">
            <summary>
            Sets the horizontal alignment for the specified child object.
            </summary>
            <param name="obj">A child object.</param>
            <param name="alignment">One of the <see cref="T:ILOG.Diagrammer.Graphic.HorizontalAlignment"/> values.</param>
            <seealso cref="M:ILOG.Diagrammer.Graphic.Panel.GetHorizontalAlignment(ILOG.Diagrammer.GraphicObject)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.OnHorizontalAlignmentChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.HorizontalAlignment,ILOG.Diagrammer.Graphic.HorizontalAlignment)">
            <summary>
            Is called when the horizontal alignment of the specified child object has changed.
            </summary>
            <param name="obj">A child object.</param>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.GetVerticalAlignment(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Gets the vertical alignment of the specified child object.
            </summary>
            <param name="obj">A child object.</param>
            <returns>One of the <see cref="T:ILOG.Diagrammer.Graphic.VerticalAlignment"/> values. The default value for this property is <see cref="F:ILOG.Diagrammer.Graphic.VerticalAlignment.Stretch"/>.</returns>
            <seealso cref="M:ILOG.Diagrammer.Graphic.Panel.SetVerticalAlignment(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.VerticalAlignment)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.SetVerticalAlignment(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.VerticalAlignment)">
            <summary>
            Sets the vertical alignment for the specified child object.
            </summary>
            <param name="obj">A child object.</param>
            <param name="alignment">One of the <see cref="T:ILOG.Diagrammer.Graphic.VerticalAlignment"/> values.</param>
            <seealso cref="M:ILOG.Diagrammer.Graphic.Panel.GetVerticalAlignment(ILOG.Diagrammer.GraphicObject)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.OnVerticalAlignmentChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.VerticalAlignment,ILOG.Diagrammer.Graphic.VerticalAlignment)">
            <summary>
            Is called when the vertical alignment of the specified child object has changed.
            </summary>
            <param name="obj">A child object.</param>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.PaintBorder(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to paint the container border.
            </summary>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.PaintCore(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)">GraphicObject.PaintCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Panel.CanExtend(System.Object)">
            <summary>
            Returns <see langword="true"/> if the panel can offer an extender property to the specified target component. 
            </summary>
            <param name="extendee">The target object to add an extender property to.</param>
            <returns> <see langword="true"/> if the panel can offer one or more extender properties; otherwise,  <see langword="false"/>. </returns>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Panel.ItemsMargins">
            <summary>
            Gets or sets the margins between children elements.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Margins"/> structure. By default, there are no margins.</value>
            <remarks>This property allows to set the margins for all the panel children. To change the margins of a
            particular child, use the <see cref="M:ILOG.Diagrammer.Graphic.Panel.SetMargins(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Margins)"/> method. Note that the final margins for a particular child is
            the sum of the <see cref="P:ILOG.Diagrammer.Graphic.Panel.ItemsMargins"/> property with the margins set on the child by calling
            <see cref="M:ILOG.Diagrammer.Graphic.Panel.SetMargins(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Margins)"/>.</remarks>
            <seealso cref="M:ILOG.Diagrammer.Graphic.Panel.SetMargins(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Margins)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.Panel.GetMargins(ILOG.Diagrammer.GraphicObject)"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Panel.ItemsMarginsChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Panel.ItemsMargins"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Panel.CornerRadius">
            <summary>
            Gets or sets the radii of the panel corners.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.CornerRadius"/> structure. By default, there's no corner radius.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Panel.Border"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Panel.CornerRadiusChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Panel.CornerRadius"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Panel.Border">
            <summary>
            Gets or sets the stroke for the panel border.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Stroke"/> instance.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Panel.CornerRadius"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Panel.BorderChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Panel.Border"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Panel.BorderMargins">
            <summary>
            Gets or sets the margins for the panel border.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Margins"/> that represents the margins for the panel border. By default, there are no
            margins.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Panel.Border"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Panel.BorderMarginsChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Panel.BorderMargins"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Panel.Background">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Graphic.Control.Background">Control.Background</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Panel.SupportsMultipleChildSelection">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.SupportsMultipleChildSelection">GraphicContainer.SupportsMultipleChildSelection</see>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.StackPanel._orientation">
            <summary>
            The orientation of the panel.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.StackPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.StackPanel"/> class.
            </summary>
            <remarks>The default orientation is <see cref="F:ILOG.Diagrammer.Orientation.Vertical"/>.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.StackPanel.OnFlowLayoutChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.StackPanel.FlowLayout"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.StackPanel.OnOrientationChanged(ILOG.Diagrammer.Orientation,ILOG.Diagrammer.Orientation)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.StackPanel.Orientation"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.StackPanel.DoLayout(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Control.DoLayout(ILOG.Diagrammer.Rectangle2D)">Control.DoLayout</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.StackPanel.OnHorizontalAlignmentChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.HorizontalAlignment,ILOG.Diagrammer.Graphic.HorizontalAlignment)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Panel.OnHorizontalAlignmentChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.HorizontalAlignment,ILOG.Diagrammer.Graphic.HorizontalAlignment)">Panel.OnHorizontalAlignmentChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.StackPanel.OnVerticalAlignmentChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.VerticalAlignment,ILOG.Diagrammer.Graphic.VerticalAlignment)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Panel.OnVerticalAlignmentChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.VerticalAlignment,ILOG.Diagrammer.Graphic.VerticalAlignment)">Panel.OnVerticalAlignmentChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.StackPanel.OnMarginsChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Margins,ILOG.Diagrammer.Margins)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Panel.OnMarginsChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Margins,ILOG.Diagrammer.Margins)">Panel.OnMarginsChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.StackPanel.OnChildZOrderChanged(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildZOrderChanged(ILOG.Diagrammer.GraphicObject)">GraphicContainer.OnChildZOrderChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.StackPanel.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">GraphicObject.GetPreferredSizeCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.StackPanel.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">GraphicContainer.CanResizeChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.StackPanel.CanMoveChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanMoveChild(ILOG.Diagrammer.GraphicObject)">GraphicContainer.CanMoveChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.StackPanel.CanRotateChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanRotateChild(ILOG.Diagrammer.GraphicObject)">GraphicContainer.CanRotateChild</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.StackPanel.FlowLayout">
            <summary>
            Indicates whether the panel uses a flow layout algorithm to layout its children.
            </summary>
            <value><see langword="true"/> if the panel uses a flow algorithm to layout its children; Otherwise,
            <see langword="false"/>.</value>
            <remarks>When this property is set to <see langword="true"/>, the panel can layout its children on
            multiple rows or columns depending on the panel orientation.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.StackPanel.FlowLayoutChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.StackPanel.FlowLayout"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.StackPanel.Orientation">
            <summary>
            Gets or sets the orientation in which child objects are arranged.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Orientation"/> values. The default value is <see cref="F:ILOG.Diagrammer.Orientation.Vertical"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.StackPanel.OrientationChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.StackPanel.Orientation"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.StackPanel.HasPreferredWidth">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth">GraphicObject.HasPreferredWidth</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.StackPanel.HasPreferredHeight">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight">GraphicObject.HasPreferredHeight</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.StackPanel.SupportsLinkReparenting">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.SupportsLinkReparenting">GraphicContainer.SupportsLinkReparenting</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.VisualStyles">
            <summary>
            Specifies a value indicating whether the control should use the visual styles to draw itself.
            </summary>
            <remarks>
            Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.Graphic.Control.VisualStyles"/> 
            property of a <see cref="T:ILOG.Diagrammer.Graphic.Control"/> object.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.VisualStyles.No">
            <summary>
            The control will not use visual styles.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.VisualStyles.Yes">
            <summary>
            The control will use visual styles.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.VisualStyles.Inherit">
            <summary>
            The control will inherit the visual style from its parent control.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ControlSelectionGraphic">
            <summary>
            The selection class dedicated to objects implementing the <see cref="T:ILOG.Diagrammer.Graphic.IRectangularShape"/> interface.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ControlSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.ControlSelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ControlSelectionGraphic.IsTypeSupported(System.Type)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.SelectionGraphic.IsTypeSupported(System.Type)">SelectionGraphic.IsTypeSupported</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ControlSelectionGraphic.GetMinimumSize">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.ReshapeSelectionGraphic.GetMinimumSize">ReshapeSelectionGraphic.GetMinimumSize</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ControlSelectionGraphic.GetMaximumSize">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.ReshapeSelectionGraphic.GetMaximumSize">ReshapeSelectionGraphic.GetMaximumSize</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ControlSelectionGraphic.CanRotateSelectedObject">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.DefaultSelectionGraphic.CanRotateSelectedObject">DefaultSelectionGraphic.CanRotateSelectedObject</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Composite">
            <summary>
            The <see langword="abstract"/> base class for the <see cref="T:ILOG.Diagrammer.Graphic.Group"/>, <see cref="T:ILOG.Diagrammer.Graphic.GraphicSymbol"/>, and <see cref="T:ILOG.Diagrammer.Graphic.UserSymbol"/> classes.
            </summary>
            <remarks>The <see cref="T:ILOG.Diagrammer.Graphic.Composite"/> class is a composite objects that takes the geometry from its children. Use the <see cref="P:ILOG.Diagrammer.Graphic.Composite.Objects"/>
            property to add or remove children.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Composite._objects">
            <summary>
            The collection of objects
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Composite._childBoundsValid">
            <summary>
            A flag indicating whether _childBounds is valid
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Composite._geometryBoundsValid">
            <summary>
            A flag indicating whether _geometryBounds is valid
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Composite._geometryBounds">
            <summary>
            The composite geometryBounds
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Composite._childBoundsOrig">
            <summary>
            The reference of the geometryBounds for resizing children
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Composite._boundsOrig">
            <summary>
            The bounds of children when the composite had the _geometryBoundsOrid size.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Composite._resizing">
            <summary>
            A flag indicating whether the composite is resizing its children
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Composite._boundsCache">
            <summary>
            A cache for the bounds of this composite at different transformers
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Composite._styledBoundsCache">
            <summary>
            A cache for the styled bounds of this composite at different transformers
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Composite._renderBoundsCache">
            <summary>
            A cache for the render bounds of this composite at different transformers
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Composite._childBounds">
            <summary>
            Cache for non-transformed child bounds.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Composite._isCollapsed">
            <summary>
            Cache for the collapsed state
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Composite"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.Dispose(System.Boolean)">GraphicObject.Dispose</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.ShouldSerializeObjects">
            <summary>
            Indicates whether to serialize the <see cref="P:ILOG.Diagrammer.Graphic.Composite.Objects"/> property or not.
            </summary>
            <returns><see langword="true"/> if the <see cref="P:ILOG.Diagrammer.Graphic.Composite.Objects"/> property should be
            serialized; Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">GraphicContainer.CanResizeChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.GetToolboxItemBitmap">
            <summary>
            Used by introspection !
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.EndInit">
            <summary>
            Ends the initialization of a <see cref="T:ILOG.Diagrammer.GraphicContainer"/> that is used on a form or 
            used by another component. The initialization occurs at runtime.
            </summary>
            <remarks>
            The Visual Studio .NET design environment uses this method to end 
            the initialization of a component that is used on a form or used by 
            another component. The <see cref="M:ILOG.Diagrammer.GraphicContainer.BeginInit"/> method starts the initialization. 
            The use of <strong>BeginInit</strong> and <strong>EndInit</strong> methods prevents the control 
            from being used before it is fully initialized.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.InvalidateChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.InvalidateChild(ILOG.Diagrammer.GraphicObject)">GraphicContainer.InvalidateChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.OnChildrenAdding(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildrenAdding(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">GraphicContainer.OnChildrenAdding</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.OnChildrenAdded(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildrenAdded(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">GraphicContainer.OnChildrenAdded</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.OnChildrenRemoving(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildrenRemoving(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">GraphicContainer.OnChildrenRemoving</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.OnChildrenRemoved(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildrenRemoved(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">GraphicContainer.OnChildrenRemoved</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.OnChildChanging(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildChanging(ILOG.Diagrammer.GraphicChangeEventArgs)">GraphicContainer.OnChildChanging</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.OnChildChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">GraphicContainer.OnChildChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.OnChildZOrderChanged(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildZOrderChanged(ILOG.Diagrammer.GraphicObject)">GraphicContainer.OnChildZOrderChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.OnChildrenHierarchyChanged(ILOG.Diagrammer.ChildrenHierarchyChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildrenHierarchyChanged(ILOG.Diagrammer.ChildrenHierarchyChangeEventArgs)">GraphicContainer.OnChildrenHierarchyChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.OnGraphicChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnGraphicChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">GraphicObject.OnGraphicChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.GetChildrenBounds">
            <summary>
            Gets the bounds of the container's children with no transformation applied.
            </summary>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.GetGeometryBounds">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.GeometryBounds">GraphicObject.GeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.GetBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetBounds</see>.
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.GetStyledBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetStyledBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetStyledBounds</see>.
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.GetRenderBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetRenderBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetRenderBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">GraphicContainer.SetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.SetChildBounds(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Sets the bounds of the specified child object.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference.</param>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</param>
            <remarks>This method is called when the composite is resized. The default implementation changes the
            bounds of <paramref name="obj"/> to specified rectangle.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.OnParentChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnParentChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">GraphicObject.OnParentChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.OnChildTransformChanged(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildTransformChanged(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Transform)">GraphicContainer.OnChildTransformChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.PaintChildren(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.PaintContent(ILOG.Diagrammer.DrawingContext)">GraphicContainer.PaintContent</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.PaintChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to paint the specified child object.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> to paint.</param>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.HitTestChildren(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.HitTestContent(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicContainer.HitTestContent</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.IntersectsChildren(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.IntersectsContent(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">GraphicContainer.IntersectsContent</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.GetChildZOrder(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.GetChildZOrder(ILOG.Diagrammer.GraphicObject)">GraphicContainer.GetChildZOrder</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.AddChildren(ILOG.Diagrammer.GraphicObject[])">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.AddChildren(ILOG.Diagrammer.GraphicObject[])">GraphicContainer.AddChildren</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.InsertChildren(System.Int32,ILOG.Diagrammer.GraphicObject[])">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.InsertChildren(System.Int32,ILOG.Diagrammer.GraphicObject[])">GraphicContainer.InsertChildren</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.RemoveChildren(ILOG.Diagrammer.GraphicObject[])">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.RemoveChildren(ILOG.Diagrammer.GraphicObject[])">GraphicContainer.RemoveChildren</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Composite.SetChildZOrder(ILOG.Diagrammer.GraphicObject,System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.SetChildZOrder(ILOG.Diagrammer.GraphicObject,System.Int32)">GraphicContainer.SetChildZOrder</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Composite.Objects">
            <summary>
            Gets the collection of <see cref="T:ILOG.Diagrammer.GraphicObject"/> elements located in this group.
            </summary>
            <value>A collection of <see cref="T:ILOG.Diagrammer.GraphicObject"/> instances.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Composite.IsBeingDesigned">
            <summary>
            Internal method used to specify that this object is being designed by a root designer...
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Composite.Children">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.Children">GraphicContainer.Children</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Composite.IsVisible">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.IsVisible">GraphicObject.IsVisible</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Composite.IsCollapsed">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.IsCollapsed">GraphicObject.IsCollapsed</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Composite.SupportsChildManagement">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.SupportsChildManagement">GraphicContainer.SupportsChildManagement</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Composite.SupportsChildReparenting">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.SupportsChildReparenting">GraphicContainer.SupportsChildReparenting</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeLighting">
            <summary>
            Defines an <see langword="abstract"/> base class for
            lighting filter effects.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.FilterEffect">
             <summary>
             Defines the <see langword="abstract"/> base class for all filter effects.
             </summary>
             <remarks>
             A filter effect represents a single image filter effect in a <see cref="T:ILOG.Diagrammer.Filter"/> object.
             Each filter effect as one or more input filter effects defined by the <see cref="P:ILOG.Diagrammer.FilterEffect.Inputs"/>
             property. The filter effect take the resulting images created by the input filter effects and
             create a single resulting image.
             </remarks>
             <example>
             <para>The following sample shows how to create a drop shadow filter.</para>
             <code lang="cs">
             Filter CreateDropShadowFilter()
             {
                 Filter filter = new Filter();
            
                 FeGaussianBlur gaussianBlur = new FeGaussianBlur(4f, 4f);
                 gaussianBlur.In = new FeSourceAlpha();
            
                 FeOffset offset = new FeOffset(5f, 5f);
                 offset.In = gaussianBlur;
            
                 FeMerge merge = new FeMerge();
            
                 merge.Inputs.Add(offset);
                 merge.Inputs.Add(new FeSourceGraphic());
            
                 filter.Effects.Add(gaussianBlur);
                 filter.Effects.Add(offset);
                 filter.Effects.Add(merge);
             
                 return filter;
             }
             </code>
             <code lang="vbnet">
             Function CreateDropShadowFilter() As Filter 
             
                 Dim filter As Filter = New Filter 
             
                 Dim gaussianBlur As FeGaussianBlur = New FeGaussianBlur(4F, 4F) 
                 gaussianBlur.In = New FeSourceAlpha 
             
                 Dim offset As FeOffset = New FeOffset(5F, 5F) 
                 offset.In = gaussianBlur 
             
                 Dim merge As FeMerge = New FeMerge
             
                 merge.Inputs.Add(offset);
                 merge.Inputs.Add(New FeSourceGraphic())
            
                 filter.Effects.Add(gaussianBlur)
                 filter.Effects.Add(offset)
                 filter.Effects.Add(merge)
            
                 Return filter 
             End Function
             </code>
             </example>
             <seealso cref="T:ILOG.Diagrammer.Filter"/>
        </member>
        <member name="F:ILOG.Diagrammer.FilterEffect._filter">
            <summary>
            The filter that contains this filter effect.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.FilterEffect._index">
            <summary>
            Index in collection of effects of filter.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.FilterEffect._inputs">
            <summary>
            Inputs filter effects.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.FilterEffect._filterEffectRegion">
            <summary>
            Region on which the filter effect applies.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.FilterEffect._serialInfo">
            <summary>
            Temporary store info on deserialization
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FilterEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.FilterEffect"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FilterEffect.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.FilterEffect"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FilterEffect.GetBounds(ILOG.Diagrammer.FilterPaintContext)">
            <summary>
            Computes the bounding area of this filter in the resolution
            coordinate space.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FilterEffect.GetRegionOfInterest(ILOG.Diagrammer.FilterPaintContext)">
            <summary>
            Computes the region of interest of this filter in the resolution
            coordinate space.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FilterEffect.Apply(ILOG.Diagrammer.FilterPaintContext,System.Drawing.Bitmap[])">
            <summary>
            Applies the filter.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FilterEffect.GetUserSpaceBounds(ILOG.Diagrammer.FilterPaintContext)">
            <summary>
            Computes the bounds in the user space currently used of this
            filter effect.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FilterEffect.GetDependencyRegion(ILOG.Diagrammer.FilterPaintContext,ILOG.Diagrammer.Rectangle2D,System.Int32)">
            <summary>
            Gets the region of input data that is necessary to generate the output
            </summary>
            <param name="context">The context.</param>
            <param name="outRegion">The region that need to be generated</param>
            <param name="srcIndex">The index of the input</param>
            <returns></returns>
        </member>
        <member name="M:ILOG.Diagrammer.FilterEffect.CeilingRect(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Computes the smallest Rectangle object 
            that containts the specified Rectangle2D.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FilterEffect.CreateCompatibleBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle@,System.Drawing.Rectangle)">
            <summary>
            Creates a bitmap that covers the <strong>dstRect</strong> area, knowing that 
            <strong>src</strong> covers the <strong>srcRect</strong> area.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FilterEffect.DisposeCompatibleBitmap(System.Drawing.Bitmap,System.Drawing.Bitmap)">
            <summary>
            Disposes if necessary a bitmap created by <see cref="M:ILOG.Diagrammer.FilterEffect.CreateCompatibleBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle@,System.Drawing.Rectangle)"/>.
            </summary>
            <param name="toDispose">bitmap to eventually dispose</param>
            <param name="reference">reference bitmap.</param>
        </member>
        <member name="M:ILOG.Diagrammer.FilterEffect.Clone">
            <summary>
            Creates a copy of the filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.FilterEffect.Filter">
            <summary>
            Gets the filter to which this filter effect was added.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.FilterEffect.Index">
            <summary>
            Gets or sets the index of this filter effect in the filter effect collection.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.FilterEffect.Inputs">
            <summary>
            Gets and sets the input effects for this filter.
            </summary>
            <value>A collection of <see cref="T:ILOG.Diagrammer.FilterEffect"/> that represents the list of <see cref="T:ILOG.Diagrammer.FilterEffect"/> on which this 
            filter effect operates.</value>
        </member>
        <member name="P:ILOG.Diagrammer.FilterEffect.In">
            <summary>
            Gets or sets the first source of this filter effect.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.FilterEffect"/> that represents the first filter effect in the <see cref="P:ILOG.Diagrammer.FilterEffect.Inputs"/> collection or <see langword="null"/>
            if the <see cref="P:ILOG.Diagrammer.FilterEffect.Inputs"/> collection is empty.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.FilterEffect.FilterEffectRegion">
            <summary>
            Gets or sets the region on which this filter effect applies.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> object that represents the region on which 
            the filter effect applies. The region is only meaningful if the
            value is not an empty rectangle. The coordinate space for value is
            defined by the <see cref="P:ILOG.Diagrammer.Filter.PrimitiveUnits"/> property of the <see cref="T:ILOG.Diagrammer.Filter"/>
            class. If the value is <see cref="F:ILOG.Diagrammer.CoordinateSpace.ObjectBBox">ObjectBBox</see> then the
            value of the filter effect region should be considered as percentage of the graphic 
            object's bounding rectangle otherwise the value
            is defined in the current coordinate space. By default the value is an empty rectangle 
            which means that the filter effect applies on all the filter region defined by the <see cref="P:ILOG.Diagrammer.Filter.FilterRegion"/>
            property of the <see cref="T:ILOG.Diagrammer.Filter"/> class.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.FilterEffect.AlphaChannelOptimized">
            <summary>
            Returns <see langword="true"/> is this filter effect can work only on the
            alpha channel of its sources.
            </summary>
            <returns>The default implementation returns <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeLighting.#ctor(System.Single,ILOG.Diagrammer.Filters.LightSource)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeLighting"/> object with the specified surface scale and light source.
            </summary>
            <param name="surfaceScale">The surface scale parameter of the lighting filter effect</param>
            <param name="light">A <see cref="P:ILOG.Diagrammer.Filters.FeLighting.LightSource"/> object that represents the type of light.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeLighting.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeLighting"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeLighting.Clone">
            <summary>
            Creates a copy of the filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeLighting.SurfaceScale">
            <summary>
            Gets or sets the surface scale parameter of the lighting filter effect.
            </summary>
            <value>Represents the surface scale parameter of the lighting filter effect.
            The default value is 1.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeLighting.LightSource">
            <summary>
            Gets or sets the light source for the filter effect.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Filters.LightSource"/> object that represents the source of light.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeLighting.Inputs">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.FilterEffect.Inputs">FilterEffect.Inputs</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeLighting.In">
            <summary>
            Gets or sets the source of this filter effect.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeDiffuseLighting">
            <summary>
            Defines the diffuse lighting filter effect.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeDiffuseLighting.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeDiffuseLighting"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeDiffuseLighting.#ctor(ILOG.Diagrammer.Filters.LightSource)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeDiffuseLighting"/> object with the specified light source.
            </summary>
            <param name="light">A <see cref="T:ILOG.Diagrammer.Filters.LightSource"/> object that represents the type of light.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeDiffuseLighting.#ctor(System.Single,System.Single,ILOG.Diagrammer.Filters.LightSource)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeDiffuseLighting"/> object.
            </summary>
            <param name="surfaceScale">The surface scale parameter of the lighting filter effect.</param>
            <param name="diffuseConstant">The diffuse constant parameter of the lighting filter effect.</param>
            <param name="light">A <see cref="T:ILOG.Diagrammer.Filters.LightSource"/> object that represents the type of light.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeDiffuseLighting.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeLighting"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeDiffuseLighting.ToString">
            <summary>
            Returns a short description of this filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeDiffuseLighting.DiffuseConstant">
            <summary>
            Gets or sets the diffuse constant parameter.
            </summary>
            <value>Represents the diffuse constant parameter. The value
            must be greater that zero. The default value is 1.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeSpecularLighting">
            <summary>
            Defines the specular lighting filter effect.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeSpecularLighting.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeSpecularLighting"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeSpecularLighting.#ctor(ILOG.Diagrammer.Filters.LightSource)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeSpecularLighting"/> object with the specified light source.
            </summary>
            <param name="light">A <see cref="T:ILOG.Diagrammer.Filters.LightSource"/> object that represents the type of light.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeSpecularLighting.#ctor(System.Single,System.Single,System.Single,ILOG.Diagrammer.Filters.LightSource)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeSpecularLighting"/> object.
            </summary>
            <param name="surfaceScale">The surface scale</param>
            <param name="specularConstant">The specular constant</param>
            <param name="specularExponent">The specular exponent</param>
            <param name="light">A <see cref="T:ILOG.Diagrammer.Filters.LightSource"/> object that represents the type of light.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeSpecularLighting.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeLighting"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeSpecularLighting.ToString">
            <summary>
            Returns a short description of this filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeSpecularLighting.SpecularExponent">
            <summary>
            Gets or sets the specular exponent parameter of the effect.
            </summary>
            <value>Represents the specular exponent parameter of the effect. The default
            value is 1.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeSpecularLighting.SpecularConstant">
            <summary>
            Gets or sets the specular constant parameter of the effect.
            </summary>
            <value>Represents the specular constant parameter of the effect. The default
            value is 1.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeColorMatrixType">
            <summary>
            Represents the type of a <see cref="T:ILOG.Diagrammer.Filters.FeColorMatrix"/> filter effect.
            </summary>
            <remarks>Use the values of this enumeration to set the 
            <see cref="P:ILOG.Diagrammer.Filters.FeColorMatrix.Type"/> property of a <see cref="T:ILOG.Diagrammer.Filters.FeColorMatrix"/>
            object. For more information on types see the description in <see cref="T:ILOG.Diagrammer.Filters.FeColorMatrix"/>.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.FeColorMatrixType.Matrix">
            <summary>
            The Matrix type.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.FeColorMatrixType.Saturate">
            <summary>
            The Saturate type.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.FeColorMatrixType.LuminanceToAlpha">
            <summary>
            The LuminanceToAlpha type.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.FeColorMatrixType.HueRotate">
            <summary>
            The HueRotate type.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeColorMatrix">
            <summary>
            This filter effect applies a matrix transformation on each pixel
            of the input image.
            </summary>
            <remarks>
            This filter applies a matrix transformation:
            <pre>
            | R' |   | a00 a01 a02 a03 a04 |   | R |
            | G' |   | a10 a11 a12 a13 a14 |   | G |
            | B' | = | a20 a21 a22 a23 a24 | * | B |
            | A' |   | a30 a31 a32 a33 a34 |   | A |
            | 1  |   | 0   0   0   0     1 |   | 1 |
            </pre>
            on the RGBA color and alpha values of every pixel on the input 
            graphics to produce a result with a new set of RGBA color
            and alpha values.
            <p/>
            The <see cref="P:ILOG.Diagrammer.Filters.FeColorMatrix.Type"/> property defines the
            type of the matrix transformation. When the type is <see cref="F:ILOG.Diagrammer.Filters.FeColorMatrixType.Matrix"/>
            then the values of the matrix transformation must be specified by the <see cref="P:ILOG.Diagrammer.Filters.FeColorMatrix.Matrix"/>
            property that is an array of 20 floats that represents the 5x4 matrix values (a00, a01, a02, a03 , a04, a10 ...).
            The other types defined by the <see cref="T:ILOG.Diagrammer.Filters.FeColorMatrixType"/> enumeration represent convenience 
            shortcuts to allow commonly used color operations to be performed
            without specifying a complete matrix.
            <p/>
            For type <see cref="F:ILOG.Diagrammer.Filters.FeColorMatrixType.Saturate"/>, the operation is equivalent to the
            following matrix operation:
            <pre>
            | R' |   |0.213+0.787s 0.715-0.715s 0.072-0.072s 0 0 |   | R |
            | G' |   |0.213-0.213s 0.715+0.285s 0.072-0.072s 0 0 |   | G |
            | B' | = |0.213-0.213s 0.715-0.715s 0.072+0.928s 0 0 | * | B |
            | A' |   |           0            0            0 1 0 |   | A |
            | 1  |   |           0            0            0 0 1 |   | 1 |
            </pre>
            where s is defined by the <see cref="P:ILOG.Diagrammer.Filters.FeColorMatrix.Saturation"/> property.
            <p/>
            For type <see cref="F:ILOG.Diagrammer.Filters.FeColorMatrixType.HueRotate"/>, the operation is equivalent
            to the following matrix operation:
            <pre>
            | R' |   | a00 a01 a02 0 0 |   | R |
            | G' |   | a10 a11 a12 0 0 |   | G |
            | B' | = | a20 a21 a22 0 0 | * | B |
            | A' |   | 0     0   0 1 0 |   | A |
            | 1  |   | 0     0   0 0 1 |   | 1 |
            </pre>
            where the terms a00, a01, etc. are calculated as follows:
            <pre>
            | a00 a01 a02 |   [+0.213 +0.715 +0.072]
            | a10 a11 a12 | = [+0.213 +0.715 +0.072] +
            | a20 a21 a22 |   [+0.213 +0.715 +0.072]
                                   [+0.787 -0.715 -0.072]
            cos(hueRotate value) * [-0.213 +0.285 -0.072] +
                                   [-0.213 -0.715 +0.928]
                                   [-0.213 -0.715+0.928]
            sin(hueRotate value) * [+0.143 +0.140-0.283]
                                   [-0.787 +0.715+0.072]
            </pre>
            where hueRotate is defined by the <see cref="P:ILOG.Diagrammer.Filters.FeColorMatrix.Rotation"/> property.
            <p/>
            For type <see cref="F:ILOG.Diagrammer.Filters.FeColorMatrixType.LuminanceToAlpha"/>, the operation is equivalent to the
            following matrix operation:
            <pre>
            | R' |   |      0      0      0 0 0 |   | R |
            | G' |   |      0      0      0 0 0 |   | G |
            | B' | = |      0      0      0 0 0 | * | B |
            | A' |   | 0.2125 0.7154 0.0721 0 0 |   | A |
            | 1  |   |      0      0      0 0 1 |   | 1 |
            </pre>
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.FeColorMatrix._matrix">
            <summary>
            The 5x4 matrix.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.FeColorMatrix._type">
            <summary>
            The type for predefined matrix.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeColorMatrix.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeColorMatrix"/> object with an identity transformation.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeColorMatrix.#ctor(ILOG.Diagrammer.Filters.FeColorMatrixType)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeColorMatrix"/> object with the specified type.
            </summary>
            <param name="type">
            A <see cref="T:ILOG.Diagrammer.Filters.FeColorMatrixType"/> the represents 
            the type of the color matrix.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeColorMatrix.#ctor(System.Single[])">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeColorMatrix"/> object with the specified matrix.
            </summary>
            <param name="matrix">An array of 20 float values that represents the transformation matrix.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeColorMatrix.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeColorMatrix"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeColorMatrix.Clone">
            <summary>
            Creates a copy of the filter effect.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeColorMatrix.ToString">
            <summary>
            Returns a short description of this filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeColorMatrix.Saturation">
            <summary>
            Gets or sets the saturation 
            when the type is <see cref="F:ILOG.Diagrammer.Filters.FeColorMatrixType.Saturate"/>.
            </summary>
            <value>
            A float value between 0 and 1 that represents the saturation value when 
            the type is <see cref="F:ILOG.Diagrammer.Filters.FeColorMatrixType.Saturate"/>. The default value is 1.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeColorMatrix.Rotation">
            <summary>
            Gets or sets the rotation angle in degree 
            when the type is <see cref="F:ILOG.Diagrammer.Filters.FeColorMatrixType.HueRotate"/>.
            </summary>
            <value>
            A float value that represents the rotation in degree when 
            the type is <see cref="F:ILOG.Diagrammer.Filters.FeColorMatrixType.HueRotate"/>. The default value is 0.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeColorMatrix.Type">
            <summary>
            Gets or sets the type of the color matrix. 
            </summary>
            <value>
            One of the <see cref="T:ILOG.Diagrammer.Filters.FeColorMatrixType"/> value that represents the type of
            the transformation matrix. The default value is <see cref="F:ILOG.Diagrammer.Filters.FeColorMatrixType.Matrix"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeColorMatrix.Matrix">
            <summary>
            Gets or sets the 5x4 transformation matrix values.
            </summary>
            <value>An array of 20 float values that represents the values of the transformation matrix.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeColorMatrix.Inputs">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.FilterEffect.Inputs">FilterEffect.Inputs</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeColorMatrix.In">
            <summary>
            Gets or sets the source of this filter effect.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.LinkCreatedEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.LinkCreated"/> event 
            of a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.LinkCreatedEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.LinkCreated"/>
            event of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.LinkCreatedEventArgs.Link">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.ILink"/> that was created.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.ILink"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.LinkCreatedEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the interaction should be canceled.
            </summary>
            <value><see langword="true"/> if the interaction should be canceled; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.LinkConnectedEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.LinkConnected"/> event 
            of a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.LinkConnectedEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.LinkConnected"/>
            event of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.LinkConnectedEventArgs.Link">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.ILink"/> being connected.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.ILink"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.LinkConnectedEventArgs.LinkStartAnchorChanged">
            <summary>
            Indicates whether the link start anchor has changed.
            </summary>
            <value><see langword="true"/> if the link start anchor has changed; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.LinkConnectedEventArgs.LinkEndAnchorChanged">
            <summary>
            Indicates whether the link end anchor has changed.
            </summary>
            <value><see langword="true"/> if the link end anchor has changed; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.LinkConnectedEventArgs.PreviousStartAnchor">
            <summary>
            Gets the previous start anchor of the link.
            </summary>
            <value>An <see cref="T:ILOG.Diagrammer.Anchor"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.LinkConnectedEventArgs.PreviousEndAnchor">
            <summary>
            Gets the previous end anchor of the link.
            </summary>
            <value>An <see cref="T:ILOG.Diagrammer.Anchor"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.LinkConnectedEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the interaction should be canceled.
            </summary>
            <value><see langword="true"/> if the interaction should be canceled; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.QueryLinkTargetEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.QueryLinkTarget"/> event 
            of a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.QueryLinkTargetEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.QueryLinkTarget"/> and
            event of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.QueryLinkTargetEventArgs.LinkTarget">
            <summary>
            Gets or sets the target for the link.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.QueryLinkTargetEventArgs.Location">
            <summary>
            Gets the connection point during the interaction.
            </summary>
            <value>A <see cref="T:System.Drawing.Point"/> structure, expressed in view coordinates.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.QueryLinkTargetEventArgs.Link">
            <summary>
            Gets the link being connected.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.ILink"/> reference.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.QueryLinkTargetEventArgs.LinkStart">
            <summary>
            Indicates whether the link start point is being connected.
            </summary>
            <value><see langword="true"/> if the link start point is being connected; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor">
            <summary>
            The <see cref="T:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor"/> class is a subclass of <see cref="T:ILOG.Diagrammer.Windows.Forms.ViewInteractor"/>
            that is used to interactively edit the anchors of a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ViewInteractor">
            <summary>
            The base class for all view interactors.
            </summary>
            <remarks><p>A <see cref="T:ILOG.Diagrammer.Windows.Forms.ViewInteractor"/> is a class that groups interactions on a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> into
            a single piece of code. Examples of view interactors are the <see cref="T:ILOG.Diagrammer.Windows.Forms.ZoomInteractor"/>, the <see cref="T:ILOG.Diagrammer.Windows.Forms.PanInteractor"/>,
            the <see cref="T:ILOG.Diagrammer.Windows.Forms.SelectInteractor"/>, and the <see cref="T:ILOG.Diagrammer.Windows.Forms.RotateInteractor"/>.</p>
            <p>A <strong>ViewInteractor</strong> is connected to a <strong>DiagramView</strong> by using the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Interactor"/>
            property.</p>
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.ZoomInteractor"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.PanInteractor"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.RotateInteractor"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.SelectInteractor"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ViewInteractor._button">
            <summary>
            The MouseButtons that starts the interaction.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ViewInteractor._view">
            <summary>
            The Grapher View connected to this interactor.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ViewInteractor._inOperation">
            <summary>
            A flag indicating whether the interactor is in operation (ie
            whether an interaction process has started).
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ViewInteractor._selectOnCreate">
            <summary>
            Indicates whether the newly created object is selected.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ViewInteractor._xorStyle">
            <summary>
            The style used to draw the ghost.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ViewInteractor._events">
            <summary>
            The list containing all the EventHandler registered on this interactor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.ViewInteractor"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.#ctor(System.Windows.Forms.MouseButtons)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.ViewInteractor"/> class.
            </summary>
            <param name="button">The mouse button that starts the interaction.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnViewChanging(ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs)">
            <summary>
            Invoked when the view is changing.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnViewChanged(ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.ViewInteractor.View"/> property is changed.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnSelectOnCreateChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.ViewInteractor.SelectOnCreate"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>SelectOnCreate</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.FireEvent(System.Object,System.EventArgs)">
            <summary>
            Fires an event based on key in the Events list.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when a mouse button is pressed.
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
            </summary>
            <remarks>When a view receives an input event, it first forwards the event to the view interactor, if there is one.  
            If there is no interactor, the event is forwarded to a possible 
            graphic object targeted by the input event. Otherwise, the event propagation is stopped.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when a mouse button is released.
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
            </summary>
            <remarks>When a view receives an input event, it first forwards the event to the view interactor, if there is one.  
            If there is no interactor, the event is forwarded to a possible 
            graphic object targeted by the input event. Otherwise, the event propagation is stopped.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the mouse is clicked.
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
            </summary>
            <remarks>When a view receives an input event, it first forwards the event to the view interactor, if there is one.  
            If there is no interactor, the event is forwarded to a possible 
            graphic object targeted by the input event. Otherwise, the event propagation is stopped.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the mouse is clicked twice.
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
            </summary>
            <remarks>When a view receives an input event, it first forwards the event to the view interactor, if there is one.  
            If there is no interactor, the event is forwarded to a possible 
            graphic object targeted by the input event. Otherwise, the event propagation is stopped.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the mouse is moved.
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
            </summary>
            <remarks>When a view receives an input event, it first forwards the event to the view interactor, if there is one.  
            If there is no interactor, the event is forwarded to a possible 
            graphic object targeted by the input event. Otherwise, the event propagation is stopped.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Invoked when the mouse wheel is used.
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
            </summary>
            <remarks>When a view receives an input event, it first forwards the event to the view interactor, if there is one.  
            If there is no interactor, the event is forwarded to a possible 
            graphic object targeted by the input event. Otherwise, the event propagation is stopped.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseEnter(System.EventArgs)">
            <summary>
            Invoked when the mouse pointer enters the view.
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseLeave(System.EventArgs)">
            <summary>
            Invoked when the mouse pointer leaves the view.
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Invoked when a key is pressed.
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
            </summary>
            <remarks>When a view receives an input event, it first forwards the event to the view interactor, if there is one.  
            If there is no interactor, the event is forwarded to a possible 
            graphic object targeted by the input event. Otherwise, the event propagation is stopped.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Invoked when a key is released.
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
            </summary>
            <remarks>When a view receives an input event, it first forwards the event to the view interactor, if there is one.  
            If there is no interactor, the event is forwarded to a possible 
            graphic object targeted by the input event. Otherwise, the event propagation is stopped.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Invoked when a key has been pressed.
            <param name="e">A <see cref="T:System.Windows.Forms.KeyPressEventArgs"/> that contains the event data.</param>
            </summary>
            <remarks>When a view receives an input event, it first forwards the event to the view interactor, if there is one.  
            If there is no interactor, the event is forwarded to a possible 
            graphic object targeted by the input event. Otherwise, the event propagation is stopped.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.DispatchMouseDownEvent(ILOG.Diagrammer.GraphicObject,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Sends the specified <see cref="T:System.Windows.Forms.MouseEventArgs"/> to the <see cref="E:ILOG.Diagrammer.GraphicObject.MouseDown"/> 
            event handlers.
            </summary>
            <param name="target">The event target.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> to send.</param>
            <returns><see langword="true"/> if the target object has consumed the event, <see langword="false"/>
            otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.DispatchMouseUpEvent(ILOG.Diagrammer.GraphicObject,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Sends the specified <see cref="T:System.Windows.Forms.MouseEventArgs"/> to the <see cref="E:ILOG.Diagrammer.GraphicObject.MouseUp"/> 
            event handlers.
            </summary>
            <param name="target">The event target.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> to send.</param>
            <returns><see langword="true"/> if the target object has consumed the event, <see langword="false"/>
            otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.DispatchMouseMoveEvent(ILOG.Diagrammer.GraphicObject,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Sends the specified <see cref="T:System.Windows.Forms.MouseEventArgs"/> to the <see cref="E:ILOG.Diagrammer.GraphicObject.MouseMove"/> 
            event handlers.
            </summary>
            <param name="target">The event target.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs"/> to send.</param>
            <returns><see langword="true"/> if the target object has consumed the event, <see langword="false"/>
            otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.SetCurrentHovered(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Point2D)">
            <summary>
            Sets the object being hovered by the mouse.
            </summary>
            <param name="target">The event target.</param>
            <param name="p">A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</param>
            <remarks><p>Call this method to set the current hovered graphic object on the view. This may
            result in a tooltip being displayed, and in send and leave events being sent.</p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.ShouldDispatchMouseEvents(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Indicates whether to dispatch or not the mouse events to graphic objects.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference.</param>
            <returns><see langword="true"/> if mouse events should be dispatched to graphic objects; Otherwise, 
            <see langword="false"/>.</returns>
            <remarks>The default implementation returns <see langword="false"/>.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.InvalidateView(System.Drawing.Rectangle)">
            <summary>
            Invalidates the view connected to this interactor.
            </summary>
            <param name="r">The area to invalidate.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.InvalidateView">
            <summary>
            Invalidates the view connected to this interactor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.DrawGhost(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Draws the ghost.
            </summary>
            <remarks>The method can be overridden to do temporary drawing when the interactor is working.</remarks>
            <param name="context">The graphics context.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.SetViewCursor(System.Windows.Forms.Cursor)">
            <summary>
            Sets the cursor of the view connected to this interactor.
            </summary>
            <param name="cursor">The new cursor.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.StartInteraction">
            <summary>
             Invoked when the interaction starts.
            </summary>
            <remarks>The method sets the <see cref="P:ILOG.Diagrammer.Windows.Forms.ViewInteractor.InOperation"/> property to <see langword="true"/>
            and fires the <see cref="E:ILOG.Diagrammer.Windows.Forms.ViewInteractor.StartOperation"/> event.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.StopInteraction(System.Boolean)">
            <summary>
             Invoked when the interaction ends.
            </summary>
             <remarks>The method sets the <see cref="P:ILOG.Diagrammer.Windows.Forms.ViewInteractor.InOperation"/> property to <see langword="false"/>
            and fires the <see cref="E:ILOG.Diagrammer.Windows.Forms.ViewInteractor.ValidateOperation"/> or <see cref="E:ILOG.Diagrammer.Windows.Forms.ViewInteractor.CancelOperation"/> event depending on the
            <paramref name="validate"/> parameter.</remarks>
            <param name="validate"><see langword="true"/> to validate the interaction; <see langword="false"/> to cancel the operation.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnStartOperation(System.EventArgs)">
            <summary>
             Invoked when the interaction starts.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnValidateOperation(System.EventArgs)">
            <summary>
             Invoked when the interaction ends.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnCancelOperation(System.EventArgs)">
            <summary>
             Invoked when the interaction has been canceled.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.SetStatusBarText(System.String)">
            <summary>
            Updates the status bar with the specified text.
            </summary>
            <param name="text">A <see cref="T:System.String"/>.</param>
            <remarks>This method uses the <see cref="T:ILOG.Diagrammer.Design.IDiagrammerEditorService"/> service to access the status bar.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.UpdateStatusBarText">
            <summary>
            Is called by the interactor to update the text of the status bar.
            </summary>
            <remarks>This method calls the <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.SetStatusBarText(System.String)"/> method to update the status bar.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ViewInteractor.CanDispatchEvent">
            <summary>
            This method is obsolete. Look at <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CanDispatchEvents"/>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ViewInteractor.Events">
            <summary>
            Gets the list of event handlers that are attached to this <see cref="T:ILOG.Diagrammer.Windows.Forms.ViewInteractor"/>.
            </summary>
            <value>An <see cref="T:System.ComponentModel.EventHandlerList"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ViewInteractor.DrawsGhostOnTop">
            <summary>
            Indicates whether this interactor should draw its ghost on top of the selection graphic objects.
            </summary>
            <value><see langword="true"/> if the interactor should draw its ghost on top of the selection graphic objects; otherwise, <see langword="false"/>. The
            default implementation returns <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ViewInteractor.AllowsToolTips">
            <summary>
            Indicates whether this interactor allows the view to display objects tooltips.
            </summary>
            <value><see langword="true"/> if the interactor allows the view to display objects tooltips; otherwise, <see langword="false"/>. The
            default implementation returns <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ViewInteractor.View">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> connected to this interactor.
            </summary>
            <value>The <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> connected to this interactor.</value>
            <remarks>
            A <strong>ViewInteractor</strong> is connected to a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> by setting the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Interactor"/>
            property.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.ViewInteractor.ViewChanging">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.ViewInteractor.View"/> property is changing.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.ViewInteractor.ViewChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.ViewInteractor.View"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ViewInteractor.Buttons">
            <summary>
            Gets the mouse button that starts the interaction.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.MouseButtons"/> that represents the mouse button that starts the interaction.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ViewInteractor.SelectOnCreate">
            <summary>
            Indicates whether an object created during this interaction is selected.
            </summary>
            <value><see langword="true"/> if an object created during this interaction is selected; Otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.ViewInteractor.SelectOnCreateChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.ViewInteractor.SelectOnCreate"/> property is changed.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.ViewInteractor.StartOperation">
            <summary>
            Event fired when the interaction starts.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.ViewInteractor.ValidateOperation">
            <summary>
            Event fired when the interaction ends.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.ViewInteractor.CancelOperation">
            <summary>
            Event fired when the interaction is canceled.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ViewInteractor.InOperation">
            <summary>
            Gets or sets whether this interactor is in operation state.
            </summary>
            <value><see langword='true'/> if the interaction is in operation state, <see langword='false'/> otherwise.</value>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.StartInteraction">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnStartOperation(System.EventArgs)">ViewInteractor.OnStartOperation</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.OnViewChanging(ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs)">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnViewChanging(ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs)">ViewInteractor.OnViewChanging</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.OnViewChanged(ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs)">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnViewChanged(ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs)">ViewInteractor.OnViewChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.StopInteraction(System.Boolean)">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.StopInteraction(System.Boolean)">ViewInteractor.StopInteraction</see>
            and resets the state of the interactor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseDown</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseMove</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseUp(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseUp</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">ViewInteractor.OnKeyDown</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnKeyUp(System.Windows.Forms.KeyEventArgs)">ViewInteractor.OnKeyUp</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.DrawGhost(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.DrawGhost(ILOG.Diagrammer.DrawingContext)">ViewInteractor.DrawGhost</see>
            and draws the <see cref="T:ILOG.Diagrammer.Anchor"/> objects attached to the
            current highlighted graphic object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.DrawAnchor(ILOG.Diagrammer.Anchor,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphicObject,System.Drawing.Graphics,System.Boolean)">
            <summary>
            This method is called by the <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor"/> to
            draw each <see cref="T:ILOG.Diagrammer.Anchor"/> object attached to the current highlighted graphic object
            during the interaction.
            </summary>
            <remarks>
            The default implementation draws a small square using the
            <see cref="P:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.AnchorStroke"/> or <see cref="P:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.HighlightedAnchorStroke"/> style.
            </remarks>
            <param name="a">The anchor to draw.</param>
            <param name="p">The anchor's connection point (in local object coordinates).</param>
            <param name="obj">The graphic object to which the anchor belongs.</param>
            <param name="g">The graphics context.</param>
            <param name="highlighted">If true, the anchor's drawing must reflect the fact that
            the anchor is highlighted (for example by using a thicker stroke).</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.GetAnchorBounds(ILOG.Diagrammer.Anchor,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphicObject)">
            <summary>
            Gets the bounds inside which the DrawAnchor method draws.
            The DrawAnchor method guarantees must not draw anything
            outside of the bounds returned by this method.
            </summary>
            <param name="a">The anchor to draw.</param>
            <param name="p">The anchor's connection point (in local object coordinates).</param>
            <param name="obj">The graphic object to which the anchor belongs.</param>
            <remarks>
            The largest possible bounds must be returned, for example if the
            anchor is larger when highlighted then the highlighted bounds must be returned.
            </remarks>
            
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.GetLinkTarget(System.Drawing.Point,ILOG.Diagrammer.ILink,System.Boolean)">
            <summary>
            Is called to find the object that will be used as the link target when the mouse is at the specified location
            during an interaction.
            </summary>
            <param name="point">The mouse location.</param>
            <param name="link">The Link that will be connected to the target.</param>
            <param name="start"><see langword="true"/> if target will be connected to the link start; otherwise, <see langword="false"/>.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.GetAnchors(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.ILink,System.Boolean)">
            <summary>
            Is called to retrieve the anchors of the specified <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <param name="link">The link being involved in the interaction.</param>
            <param name="start"><see langword="true"/> if the current interaction if connecting the link start;
            Otherwise, <see langword="false"/>.</param>
            <returns>A collection of <see cref="T:ILOG.Diagrammer.Anchor"/> objects.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.DisposeDefaultAnchors">
            <summary>
            Dispose default anchors to remove event handlers...
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.SetNode(ILOG.Diagrammer.GraphicObject,System.Boolean)">
            <summary>
            Sets the current node.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.Reset">
            <summary>
            Resets the internal state of the interactor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.Invalidate(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Invalidates the area of a graphic object (including its anchors).
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.DrawAnchors(ILOG.Diagrammer.GraphicObject,System.Drawing.Graphics)">
            <summary>
            Draws the anchors of a graphic object. Calls DrawAnchor for each anchor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.NotTooClose(ILOG.Diagrammer.GraphicObject,System.Collections.Generic.ICollection{ILOG.Diagrammer.Anchor})">
            <summary>
            Returns a subset of the graphic object's anchors that are
            not "too close" from each other.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.AnchorsBounds(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Returns the total bounds of a graphic object, including its anchors.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.HitTestAnchor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Finds the anchor at the current cursor location.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.NodeDisposed(System.Object,System.EventArgs)">
            <summary>
            Called when the currently highlighted node is disposed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.UpdateStatusBarText">
            <summary>
            This method overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.UpdateStatusBarText">ViewInteractor.UpdateStatusBarText</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.ToolTip">
            <summary>
            Gets the <see cref="P:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.ToolTip"/> used internally by the interactor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.AnchorStroke">
            <summary>
            Gets or sets the stroke used to draw the anchors during an interaction.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.HighlightedAnchorStroke">
            <summary>
            Gets or sets the stroke used to draw the highlighted anchor during an interaction.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.AnchorFill">
            <summary>
            Gets or sets the fill style used to fill the anchors during an interaction.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.HighlightedAnchorFill">
            <summary>
            Gets or sets the fill style used to fill the anchors during an interaction.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.AnchorColor">
            <summary>
            Gets or sets the color used to draw the anchors during an interaction.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.AnchorSize">
            <summary>
            Gets or sets the size of the anchors.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.Cursor">
            <summary>
            Gets or sets the cursor used when the mouse moves over the view.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.CanScroll">
            <summary>
            Indicates whether moving the mouse outside the diagram view during an interaction scrolls it.
            </summary>
            <value><see langword="true"/> if scrolling is allowed; <see langword="false"/> otherwise.</value>
            <remarks>The default behavior inherits from the <see cref="P:ILOG.Diagrammer.SelectionStyle.AutoScroll"/> value.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.IsReconnecting">
            <summary>
            Indicates whether this interactor is currently reconnecting an existing link.
            </summary>
            <value>
            <see langword="true"/> if this interactor is reconnecting an existing link;
            <see langword="false"/> if this interactor is creating a new link.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.EditAnchorsInteractor.ShowTooltips">
            <summary>
            Determines whether this interactor displays tooltips on the anchors.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor">
            <summary>
            The <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor"/> class is a subclass of <see cref="T:ILOG.Diagrammer.Windows.Forms.ViewInteractor"/>
            that is used to interactively create new instances of classes that implement the
            <see cref="T:ILOG.Diagrammer.ILink"/> interface.
            </summary>
            <remarks>
            <para>
            The <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor"/> is used to create new <see cref="T:ILOG.Diagrammer.ILink"/>
            objects in a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </para>
            <para>
            To create a new link, the user first clicks on the start point of the link, then on the end point.
            Alternatively, the user can press the left mouse button on the start point, drag the mouse,
            then release the mouse button on the end point.
            </para>
            <para>
            New links can be created in an empty area of the diagram view, or they can be
            connected to existing graphic objects. To create a connected link, the user first moves the
            mouse cursor over the start object. The <see cref="T:ILOG.Diagrammer.Anchor"/> objects attached to the
            object are drawn as small squares. The user then moves the mouse cursor over the anchor
            to which the link must be connected, and clicks (or presses) the left mouse button.
            The same process is repeated for the end object.
            </para>
            <para>
            By default, the <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor"/> creates new instances of
            the <see cref="T:ILOG.Diagrammer.Graphic.Link"/> class. To create an instance of another class, the
            <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.LinkFactory"/> property can be set to an instance of a class
            that implements the <see cref="T:ILOG.Diagrammer.Windows.Forms.IGraphicObjectFactory"/> interface (note that the
            created object must implement the <see cref="T:ILOG.Diagrammer.ILink"/> interface). If you just need to
            create instances of the <see cref="T:ILOG.Diagrammer.Graphic.Link"/> class with a different <see cref="P:ILOG.Diagrammer.Graphic.Link.ShapeType"/>,
            you can set the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.LinkShapeType"/> property.
            </para>
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.IGraphicObjectFactory">
            <summary>
            Factory to handle creation of <see cref="T:ILOG.Diagrammer.GraphicObject"/> instances.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.IGraphicObjectFactory.CreateInstance(System.IServiceProvider)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
            <param name="serviceProvider">A <see cref="T:System.IServiceProvider"/> instance.</param>
            <returns>A new <see cref="T:ILOG.Diagrammer.GraphicObject"/>. </returns>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.IGraphicObjectFactoryProvider">
            <summary>
            Interface that gives a access to a <see cref="T:ILOG.Diagrammer.Windows.Forms.IGraphicObjectFactory"/>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.IGraphicObjectFactoryProvider.GraphicObjectFactory">
            <summary>
            Gets or sets a <see cref="T:ILOG.Diagrammer.Windows.Forms.IGraphicObjectFactory"/>.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Windows.Forms.IGraphicObjectFactory"/> instance.</value>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.#ctor(ILOG.Diagrammer.Graphic.LinkShapeType)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor"/> class
            using the specified <paramref name="linkShapeType"/> argument.
            </summary>
            <param name="linkShapeType">
            This argument is used to initialize the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.LinkShapeType"/>property.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.StartLinkConnection(ILOG.Diagrammer.Windows.Forms.DiagramView,ILOG.Diagrammer.ILink,ILOG.Diagrammer.ObjectMouseEventArgs,System.Boolean)">
            <summary>
            Starts an interaction sequence to connect the start or end point of a link.
            </summary>
            <remarks>
            This method is called by the <see cref="M:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.OnMouseDown(ILOG.Diagrammer.ObjectMouseEventArgs)"/>
            method of the <see cref="T:ILOG.Diagrammer.Graphic.LinkSelectionGraphic"/> when the user clicks on
            the start or end point of a <see cref="T:ILOG.Diagrammer.Graphic.Link"/>.
            </remarks>
            <param name="view">The diagram view where the interaction must take place.</param>
            <param name="link">The link to connect.</param>
            <param name="args">The mouse event arguments.</param>
            <param name="start">True to connect the start of the link, or false to connect the end of the link.</param>
            <returns>The <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor"/> that is set on the view to handle the connect interaction.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.StartLinkConnection(ILOG.Diagrammer.Windows.Forms.DiagramView,ILOG.Diagrammer.ILink,ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor,System.Drawing.Point,System.Boolean)">
            <summary>
            Starts an interaction sequence to connect the start or end point of a link.
            </summary>
            <remarks>
            This method is called by the <see cref="M:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.OnMouseDown(ILOG.Diagrammer.ObjectMouseEventArgs)"/>
            method of the <see cref="T:ILOG.Diagrammer.Graphic.LinkSelectionGraphic"/> when the user clicks on
            the start or end point of a <see cref="T:ILOG.Diagrammer.Graphic.Link"/>.
            </remarks>
            <param name="view">The diagram view where the interaction must take place.</param>
            <param name="link">The link to connect.</param>
            <param name="interactor">The <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor"/> object that will be used to perform the link connection interaction.</param>
            <param name="startPoint">The point where the interaction starts.</param>
            <param name="start">True to connect the start of the link, or false to connect the end of the link.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.OnObjectCreated(ILOG.Diagrammer.Windows.Forms.GraphicObjectCreatedEventArgs)">
            <summary>
            Invoked when a link has been created.
            </summary>
            <param name="e">An <see cref="T:ILOG.Diagrammer.Windows.Forms.GraphicObjectCreatedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.CreateLink(System.IServiceProvider)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.ILink"/> instance.
            </summary>
            <remarks>This methods uses <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.LinkFactory"/> property to create the new graphic object.</remarks>
            <returns>A <see cref="T:ILOG.Diagrammer.ILink"/> instance.</returns>
            <seealso cref="P:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.LinkFactory"/>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.ILOG#Diagrammer#Windows#Forms#IGraphicObjectFactory#CreateInstance(System.IServiceProvider)">
            <summary>
            This method is called by the <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor"/> to create new links
            when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.LinkFactory"/> property has its default value.
            This method creates a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Link"/> class
            and sets its <see cref="P:ILOG.Diagrammer.Graphic.Link.ShapeType"/> property to the value of the
            <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.LinkShapeType"/> property of the interactor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.LinkFactory">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.Windows.Forms.IGraphicObjectFactory"/> object that is
            used by this interactor to create new <see cref="T:ILOG.Diagrammer.ILink"/> instances.
            </summary>
            <remarks>
            <para>
            Note that the <see cref="M:ILOG.Diagrammer.Windows.Forms.IGraphicObjectFactory.CreateInstance(System.IServiceProvider)"/> method of
            the factory must create an instance of a class that implements the <see cref="T:ILOG.Diagrammer.ILink"/>
            interface.
            </para>
            <para>
            By default, this property is set to the <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor"/>
            instance, and new links are created by the <see cref="M:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.CreateLink(System.IServiceProvider)"/> method.
            </para>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.LinkShapeType"/>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.LinkShapeType">
            <summary>
            Gets or sets the shape type of the new <see cref="T:ILOG.Diagrammer.Graphic.Link"/> instances
            created by this interactor when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.LinkFactory"/> property
            has its default value.
            </summary>
            <remarks>
            This property is used only if the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.LinkFactory"/> property
            has its default value, that is, the <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor"/>
            instance.
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.LinkFactory"/>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor.ObjectCreated">
            <summary>
            Occurs when a link has been created.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel">
            <summary>
            A base class for all the internal graph models that we use.
            </summary>
            <remarks>
            This is suitable for internal graph models that need only one attached
            layout, and handle only flat graphs.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.IGraphModel">
            <summary>
            <strong>IGraphModel</strong> defines a suitable generic API for graphs
            that have to be laid out with IBM ILOG Diagram for .NET graph layout
            algorithms.
            </summary>
            <remarks>
            The class is implemented by <see cref="T:ILOG.Diagrammer.GraphLayout.AbstractGraphModel"/> and
            by <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>.
            <p>
            The concept of the graph model allows the use of
            any application object as a graph, a node, or a link. This makes it
            much easier to add graph layout features to existing applications.
            </p>
            <p>
            All the layout algorithms provided in IBM ILOG Diagram for .NET are
            designed to lay out a graph model. This allows any application to
            benefit from the graph layout algorithms, whether or not it
            uses the IBM ILOG Diagram for .NET graphic container
            (<see cref="T:ILOG.Diagrammer.GraphicContainer"/>). However, to make
            things simple for the common case of applications that use a
            graphic container, it is not mandatory to work directly with
            the graph model, since an appropriate instance of
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/> is allocated on the fly
            when attaching the layout to a graphic container.
            </p>
            <p>
            Learning to use the interface <strong>IGraphModel</strong> is a bit
            difficult because it is very general and uses the type 
            <strong>Object</strong> for the arguments of many methods. For laying out
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/> graphs, most often
            it is sufficient to use the API of the layout algorithms.
            </p>
            <p>
            Note that if an application uses the class
            <see cref="T:ILOG.Diagrammer.GraphicContainer"/>, the graphic container
            can be attached directly to the layout instance without explicitly using
            a graph model (see the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>). In
            this case the appropriate adapter (<see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>)
            is created internally. If necessary, this adapter can be retrieved
            using the  method <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetGraphModel"/>, which in
            this circumstance returns an instance of
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>.
            </p>
            <p>
            The methods defined in this interface can be divided into the following
            categories:
            <UL>
            <LI> Methods and properties that provide information about the topology
               (structure) of the graph. For instance:
               <see cref="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Nodes"/>, <see cref="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Links"/>, <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetLinksFrom(System.Object)"/>,
               <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetLinksTo(System.Object)"/>, and so on.
            </LI>
            <LI> Methods that provide information about the geometry of the graph.
               For instance: <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.BoundingBox(System.Object)"/> and <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetLinkPoints(System.Object)"/>.
            </LI>
            <LI> Methods that allow the layout algorithm to modify the geometry of
              the graph. For instance: <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.MoveNode(System.Object,System.Single,System.Single)"/> and
              <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/>.
            </LI>
            <LI> Methods that provide services such as the test whether layout
               is needed or the capability to store "property objects" for
               nodes and links,  and so on.
            </LI>
            <LI> Since graphs can be nested (nodes can be graphs themselves), some
               methods and properties are only relevant for nested graphs, such as
               <see cref="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Subgraphs"/>, <see cref="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Parent"/>,
               <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetGraphModel(System.Object)"/>, and so on.
            </LI>
            </UL>
            </p>
            <p>
            Note that the efficiency of the layout algorithms directly depends on
            the efficiency of the implementation of the graph model as well as
            the efficiency of the implementation of the underlying graph data
            structure.
            </p>
            <p>
            The implementations of <strong>IGraphModel</strong> usually assume that
            the method <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.Dispose"/> is called after detaching the layouts
            when you no longer need the graph model instance; otherwise, some objects
            may not be garbage collected.
            If you allocate an instance of <strong>IGraphModel</strong>,
            you should call <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.Dispose"/> when your instance is no longer
            needed. Calling <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.Dispose"/> in your code is not necessary if the
            graph model instance is created internally by the IBM ILOG Diagram for
            .NET Graph Layout library, because then it will be called by the
            the system automatically. Internally allocated graph models occur
            for instance when you directly attach a <strong>GraphicContainer</strong>
            to a layout instance using
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>, or
            when you use an <see cref="T:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider"/> for recursive
            layout.
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.Dispose">
            <summary>
            Disposes of this <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/> and releases any
            resources that it is using.
            </summary>
            <remarks>
            A <strong>GraphModel</strong> object
            cannot be used after the <strong>Dispose</strong> method has been
            called.
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Detach">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsDisposed">
            <summary>
            Returns <see langword="true"/> if this graph model is already
            disposed.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.Dispose">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.OnAttach(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Called when the graph layout instance is attached to the graph model.
            </summary>
            <param name="layout">The layout instance that has been attached.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.OnDetach(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Called when the graph layout instance is detached to the graph model.
            </summary>
            <param name="layout">The layout instance that has been detached.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetGraphModel(System.Object)">
            <summary>
            Returns a graph model instance for a subgraph of a nested graph.
            </summary>
            <remarks>
            The current graph model must belong to the nested graph;
            for instance, it can be the root graph model or the parent graph
            model of the subgraph.
            <p>
            The typical way to deal with nested graphs is the following:
            <UL>
            <LI> You create only the graph model for the root graph explicitly.
                 </LI>
            <LI> You retrieve the graph models of subgraphs by calling
                <strong>GetGraphModel(subgraph)</strong> on the root graph
                model.
                If a graph model has already been created for a subgraph,
                the graph model is returned. Otherwise, a new instance of
                a graph model is created.
                </LI>
            </UL>
            </p>
            The method must always return the same graph model for the same
            subgraph. The implementation of the method must remember which
            graph model is used for which subgraph.
            </remarks>
            <param name="subgraph">The subgraph object. This is an object
            for which the method <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsSubgraph(System.Object)"/>, called on the
            parent graph model of the returned graph model, returns
            <see langword="true"/>.
            This must not be the root graph.
            </param>
            <returns> The graph model that encapsulates <strong>subgraph</strong>.
            </returns>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Root">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsLayoutNeeded(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Returns <see langword="true"/> if a given layout that has been
            already applied to this graph is still valid.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutNeeded">
            </seealso>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.StructureUpToDate">
            </seealso>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.GeometryUpToDate">
            </seealso>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.BeforeLayout(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Called before a layout is performed.
            </summary>
            <param name="layout">The layout algorithm that is about to be
            performed.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.AfterLayout(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Called after a layout is performed.
            </summary>
            <param name="layout">The layout algorithm that was performed.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetLinksFrom(System.Object)">
            <summary>
            Returns all the links that have <strong>node</strong>
            as their origin.
            </summary>
            <remarks>
            It must not contain intergraph links, that is, links whose
            origin or destination node is not stored in this graph.
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetLinksTo(System.Object)">
            </seealso>
            <param name="node">The origin node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetLinksTo(System.Object)">
            <summary>
            Returns all the links that have <strong>node</strong>
            as their destination.
            </summary>
            <remarks>
            It must not contain intergraph links, that is, links whose
            origin or destination node is not stored in this graph.
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetLinksFrom(System.Object)">
            </seealso>
            <param name="node">The origin node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetFrom(System.Object)">
            <summary>
            Returns the origin node of a link.
            </summary>
            <remarks>
            This method must work for normal links and for intergraph links.
            Notice that for intergraph links, the returned node may not be
            a node of this graph model (that is, <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsNode(System.Object)"/> may return
            <see langword="false"/>).
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetTo(System.Object)">
            <summary>
            Returns the destination node of a link.
            </summary>
            <remarks>
            This method must work for normal links and for intergraph links.
            Notice that for intergraph links, the returned node may not be
            a node of this graph model (that is, <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsNode(System.Object)"/> may return
            <see langword="false"/>).
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsNode(System.Object)">
            <summary>
            Returns <see langword="true"/> if an object is a valid node, and
            <see langword="false"/> otherwise.
            </summary>
            <remarks>
            Note that an object can be both a node and a graph; therefore, both
            this method and <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsSubgraph(System.Object)"/> can return
            <see langword="true"/> for the same object.
            </remarks>
            <param name="obj">The object to test.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsLink(System.Object)">
            <summary>
            Returns <see langword="true"/> if the object is a valid normal link,
            and <see langword="false"/> otherwise.
            </summary>
            <remarks>
            The method must return <see langword="false"/> for intergraph links.
            </remarks>
            <param name="obj">The object to test.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)">
            <summary>
            Returns <see langword="true"/> if the object is a valid intergraph
            link, and <see langword="false"/> otherwise.
            </summary>
            <remarks>
            An intergraph link is a link stored in a given graph that has an
            origin or destination not stored in this graph.
            </remarks>
            <param name="obj">The object to test.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsLink(System.Object)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsSubgraph(System.Object)">
            <summary>
            Returns <see langword="true"/> if the object is a valid subgraph,
            and <see langword="false"/> otherwise.
            </summary>
            <remarks>
            A subgraph is a node of this graph model (that is
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsNode(System.Object)"/> must return <see langword="true"/>) that
            represents a graph nested inside this graph.
            </remarks>
            <param name="obj">The object to test.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a property for a node or a link.
            </summary>
            <remarks>
            If <strong>val</strong> is <see langword="null"/>, the property is
            removed.
            Otherwise, the property value is set to <strong>val</strong>.
            The method must work for normal links and intergraph links.
            </remarks>
            <param name="nodeOrLink">The node or link for which the property
            is to be set.
            </param>
            <param name="key">The key string for the property.
            </param>
            <param name="val">The new value of the property.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetProperty(System.Object,System.String)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetProperty(System.Object,System.String)">
            <summary>
            Returns the value of a property.
            </summary>
            <remarks>
            The method returns <see langword="null"/> if the property does
            not exist.
            The method must work for normal links and intergraph links.
            </remarks>
            <param name="nodeOrLink">The node or link for which the property
            is to be retrieved.
            </param>
            <param name="key">The key string for the property.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.SetProperty(System.Object,System.String,System.Object)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.SetProperty(System.String,System.Object)">
            <summary>
            Sets the value of a property for the graph model.
            </summary>
            <remarks>
            If <strong>val</strong> is <see langword="null"/>, the property is
            removed.
            Otherwise, the property value is set to <strong>val</strong>.
            </remarks>
            <param name="key">The key string for the property.
            </param>
            <param name="val">The new value of the property.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetProperty(System.String)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetProperty(System.String)">
            <summary>
            Returns the value of a property of the graph model.
            </summary>
            <remarks>
            The method returns <see langword="null"/> if the property does
            not exist.
            </remarks>
            <param name="key">The key string for the property.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.SetProperty(System.String,System.Object)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.MoveNode(System.Object,System.Single,System.Single)">
            <summary>
            Changes the position of the specified node.
            </summary>
            <remarks>
            The <strong>x</strong>
            and <strong>y</strong> coordinates correspond to the top-left
            corner of the rectangle that defines the node (see also the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.BoundingBox(System.Object)"/>).
            </remarks>
            <param name="node">The node.
            </param>
            <param name="x">The new <strong>x</strong> position of the node.
            </param>
            <param name="y">The new <strong>y</strong> position of the node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.BoundingBox(System.Object)">
            <summary>
            Returns the bounding rectangle of a node or a link.
            </summary>
            <remarks>
            The method must work for normal links and intergraph links.       
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetLinkPoints(System.Object)">
            <summary>
            Returns the points that define a link.
            </summary>
            <remarks>
            The point at index 0
            must correspond to the connection point of the link on the
            origin node. The point at the last index must correspond to the
            connection point of the link on the destination node.
            <p>
            A link must always have at least 2 points, corresponding to
            the connection points.
            Therefore, the length of the array returned by this method must
            be at least 2.
            The method must work for normal links and intergraph links.
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)">
             <summary>
             Reshapes a link.
             </summary>
             <remarks>
             The method must work for normal links and intergraph links.
             <p>
             The link style represents the style of the shape of the
             link. The details of the shape of the link are given by
             the further arguments of the method.
             If the new shape of the link must be a straight-line link without
             any intermediate points, call the method with an empty array      
             for the <strong>points</strong> argument, or with the value 
             <strong>0</strong> for the <strong>length</strong> argument.
             In this case, the values of the arguments <strong>startIndex</strong>
             and <strong>length</strong> are ignored.
             </p><p>
             The mode parameters determine how the <paramref name="fromPoint"/>
             and <paramref name="toPoint"/> should be used:
             <ul>
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Ignore"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout does not
             specify how the corresponding origin or destination point of 
             the link should be determined.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Move"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains a meaningful value. The layout wants to
             move the corresponding origin or destination point of the link
             to the specified point.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Fix"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout wants to
             keep the previous corresponding origin or destination point of
             the link fixed, relative to the node position.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Clip"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout wants to
             clip the corresponding origin or destination point of
             the link against the border of the node.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.MoveAndClip"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains a meaningful value. The layout wants to
             clip the corresponding origin or destination point of
             the link against the border of the node, but the link should
             go though the specified point.</li>
            
             </ul>
             </p>
             </remarks>
             <param name="link">The link to be reshaped.
             </param>
             <param name="style">The style of the shape of the link.
             </param>
             <param name="fromPoint">The connection point of the link on the
             origin node.
             </param>
             <param name="fromPointMode">The mode that indicates how the
             <paramref name="fromPoint"/> should be used.
             </param>
             <param name="points">The array of intermediate points. Ignored
             if <strong>length</strong> is <strong>0</strong>."/&gt;
             </param>
             <param name="startIndex">The starting position in the array of
             points.
             </param>
             <param name="length">The number of intermediate points.
             </param>
             <param name="toPoint">The connection point of the link on the
             destination node.
             </param>
             <param name="toPointMode">The mode that indicates how the
             <paramref name="toPoint"/> should be used.
             </param>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsLink(System.Object)">
             </seealso>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)">
             </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasMoveableConnectionPoint(System.Object,System.Boolean)">
            <summary>
            Returns whether the connection point of a link can be moved.
            </summary>
            <remarks>
            Returns <see langword="true"/> if the connection point of
            <strong>link</strong> on the origin or destination node can be
            moved by a call to the method <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/>. It
            returns <see langword="false"/> if such a call may fail to set the
            connection point to the argument passed to
            <strong>ReshapeLink</strong>.
            The method must work for normal links and intergraph links.
            </remarks>
            <param name="link">The link.
            </param>
            <param name="origin">Set to <see langword="true"/> if the connection
            point is on the origin and <see langword="false"/> otherwise.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)">
            <summary>
            Returns whether the connection point of a link is pinned.
            </summary>
            <remarks>
            Returns <see langword="true"/> if the connection point of
            <strong>link</strong> on the origin or destination node is "pinned,"
            and <see langword="false"/> otherwise. The connection point is said
            to be "pinned" if its location is fixed with respect to the
            bounding box of the corresponding origin or destination node of
            the link.
            The method must work for normal links and intergraph links.
            </remarks>
            <param name="link">The link.
            </param>
            <param name="origin">Set to <see langword="true"/> if the connection
            point is on the origin and <see langword="false"/> otherwise.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasMoveableConnectionPoint(System.Object,System.Boolean)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetLinkWidth(System.Object)">
            <summary>
            Returns the width of a link.
            </summary>
            <remarks>
            The method must work for normal links and intergraph links.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Parent">
            <summary>
            Gets the graph model of the parent graph of this graph, or
            <see langword="null"/>.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetGraphModel(System.Object)">
            </seealso>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Root">
            </seealso>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Root">
            <summary>
            Gets the root graph model of this graph model, if any, or
            <see langword="null"/> otherwise.
            </summary>
            <remarks>
            If this method is called for a graph model of one of the
            subgraphs of a nested graph, it returns the graph model of
            the topmost graph. It returns <see langword="null"/> when called
            on the graph model of the topmost graph.
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.GetGraphModel(System.Object)">
            </seealso>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Parent">
            </seealso>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Nodes">
            <summary> Gets the nodes.</summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsNode(System.Object)">
            </seealso>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Links">
            </seealso>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Links">
            <summary>
            Gets the normal links.
            </summary>
            <remarks>
            It must not contain intergraph links, that is,
            links whose origin or destination node is not stored in this graph.
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Nodes">
            </seealso>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Subgraphs">
            <summary>
            Gets the subgraphs of this graph model.
            </summary>
            <remarks>
            It must contain nodes of the graph, that
            is, objects for which the method <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsNode(System.Object)"/>
            returns <see langword="true"/>.
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsSubgraph(System.Object)">
            </seealso>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Nodes">
            </seealso>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Links">
            </seealso>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.IGraphModel.InterGraphLinks">
            <summary>
            Gets the intergraph links contained in this graph.
            </summary>
            <remarks>
            An intergraph link is a link stored in a given graph that has an
            origin or destination not stored in this graph.
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
        </member>
        <member name="E:ILOG.Diagrammer.GraphLayout.IGraphModel.ContentsChanged">
            <summary>
            Occurs when the contents of the graph model is changed.
            </summary>
            <remarks>
            Occurs when nodes or links are added or removed, or when their
            position, size or shape changed.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.Dispose">
            <summary>
            Disposes of this <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/> and releases any
            resources that it is using.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.IsDisposed">
            <summary>
            Returns <see langword="true"/> if this graph model is already
            disposed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.OnAttach(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Called when the graph layout instance is attached to the graph model.
            </summary>
            <param name="layout">The layout instance that has been attached.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.OnDetach(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Called when the graph layout instance is detached to the graph model.
            </summary>
            <param name="layout">The layout instance that has been detached.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.DetachLayouts">
            <summary>
            Detach all attached layouts.
            </summary>
            <remarks>
            This must be called after the isDisposed becomes true, to avoid
            infinite loop.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.GetGraphModel(System.Object)">
            <summary>
            Returns a graph model instance for a subgraph of a nested graph.
            </summary>
            <param name="subgraph">The subgraph object. This is an object
            for which the method <see cref="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.IsSubgraph(System.Object)"/>, called on the
            parent graph model of the returned graph model, returns
            <see langword="true"/>.
            This must not be the root graph.
            </param>
            <returns> The graph model that encapsulates <strong>subgraph</strong>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.IsLayoutNeeded(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Returns <see langword="true"/> if a given layout that has been
            already applied to this graph is still valid.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.BeforeLayout(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Called before a layout is performed.
            </summary>
            <param name="layout">The layout algorithm that is about to be
            performed.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.AfterLayout(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Called after a layout is performed.
            </summary>
            <param name="layout">The layout algorithm that was performed.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.GetLinksFrom(System.Object)">
            <summary>
            Returns all the links that have <strong>node</strong>
            as their origin.
            </summary>
            <param name="node">The origin node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.GetLinksTo(System.Object)">
            <summary>
            Returns all the links that have <strong>node</strong>
            as their destination.
            </summary>
            <param name="node">The origin node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.GetFrom(System.Object)">
            <summary>
            Returns the origin node of a link.
            </summary>
            <param name="link">The link.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.GetTo(System.Object)">
            <summary>
            Returns the destination node of a link.
            </summary>
            <param name="link">The link.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.IsNode(System.Object)">
            <summary>
            Returns <see langword="true"/> if an object is a valid node, and
            <see langword="false"/> otherwise.
            </summary>
            <param name="obj">The object to test.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.IsLink(System.Object)">
            <summary>
            Returns <see langword="true"/> if the object is a valid normal link,        /// and <see langword="false"/> otherwise.
            </summary>
            <param name="obj">The object to test.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.IsInterGraphLink(System.Object)">
            <summary>
            Returns <see langword="true"/> if the object is a valid intergraph
            link, and <see langword="false"/> otherwise.
            </summary>
            <remarks>
            All links here are considered normal links, hence it always returns
            <see langword="false"/>.
            </remarks>
            <param name="obj">The object to test.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.IsSubgraph(System.Object)">
            <summary>
            Returns <see langword="true"/> if the object is a valid subgraph,
            and <see langword="false"/> otherwise.
            </summary>
            <remarks>
            All nested nodes are considered normal nodes, hence it always
            returns <see langword="false"/>.
            </remarks>
            <param name="obj">The object to test.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a property for a node or a link.
            </summary>
            <remarks>
            If <strong>val</strong> is <see langword="null"/>, the property is
            removed.
            Otherwise, the property value is set to <strong>val</strong>.
            </remarks>
            <param name="nodeOrLink">The node or link for which the property
            is to be set.
            </param>
            <param name="key">The key string for the property.
            </param>
            <param name="val">The new value of the property.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.GetProperty(System.Object,System.String)">
            <summary>
            Returns the value of a property.
            </summary>
            <remarks>
            The method returns <see langword="null"/> if the property does
            not exist.
            </remarks>
            <param name="nodeOrLink">The node or link for which the property
            is to be retrieved.
            </param>
            <param name="key">The key string for the property.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.SetProperty(System.String,System.Object)">
            <summary>
            Sets the value of a property for the graph model.
            </summary>
            <remarks>
            If <strong>val</strong> is <see langword="null"/>, the property is
            removed.
            Otherwise, the property value is set to <strong>val</strong>.
            </remarks>
            <param name="key">The key string for the property.
            </param>
            <param name="val">The new value of the property.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.GetProperty(System.String)">
            <summary>
            Returns the value of a property of the graph model.
            </summary>
            <remarks>
            The method returns <see langword="null"/> if the property does
            not exist.
            </remarks>
            <param name="key">The key string for the property.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.MoveNode(System.Object,System.Single,System.Single)">
            <summary>
            Changes the position of the specified node.
            Not needed for link routing.
            </summary>
            <param name="node">The node.
            </param>
            <param name="x">The new <strong>x</strong> position of the node.
            </param>
            <param name="y">The new <strong>y</strong> position of the node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.BoundingBox(System.Object)">
            <summary>
            Returns the bounding rectangle of a node or a link.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.GetLinkPoints(System.Object)">
            <summary>
            Returns the points that define a link.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)">
             <summary>
             Reshapes a link.
             </summary>
             <remarks>
             The method must work for normal links and intergraph links.
             <p>
             The link style represents the style of the shape of the
             link. The details of the shape of the link are given by
             the further arguments of the method.
             If the new shape of the link must be a straight-line link without
             any intermediate points, call the method with an empty array      
             for the <strong>points</strong> argument, or with the value 
             <strong>0</strong> for the <strong>length</strong> argument.
             In this case, the values of the arguments <strong>startIndex</strong>
             and <strong>length</strong> are ignored.
             </p><p>
             The mode parameters determine how the <paramref name="fromPoint"/>
             and <paramref name="toPoint"/> should be used:
             <ul>
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Ignore"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout does not
             specify how the corresponding origin or destination point of 
             the link should be determined.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Move"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains a meaningful value. The layout wants to
             move the corresponding origin or destination point of the link
             to the specified point.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Fix"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout wants to
             keep the previous corresponding origin or destination point of
             the link fixed, relative to the node position.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Clip"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout wants to
             clip the corresponding origin or destination point of
             the link against the border of the node.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.MoveAndClip"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains a meaningful value. The layout wants to
             clip the corresponding origin or destination point of
             the link against the border of the node, but the link should
             go though the specified point.</li>
            
             </ul>
             </p>
             </remarks>
             <param name="link">The link to be reshaped.
             </param>
             <param name="style">The style of the shape of the link.
             </param>
             <param name="fromPoint">The connection point of the link on the
             origin node.
             </param>
             <param name="fromPointMode">The mode that indicates how the
             <paramref name="fromPoint"/> should be used.
             </param>
             <param name="points">The array of intermediate points. Ignored
             if <strong>length</strong> is <strong>0</strong>."/&gt;
             </param>
             <param name="startIndex">The starting position in the array of
             points.
             </param>
             <param name="length">The number of intermediate points.
             </param>
             <param name="toPoint">The connection point of the link on the
             destination node.
             </param>
             <param name="toPointMode">The mode that indicates how the
             <paramref name="toPoint"/> should be used.
             </param>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.IsLink(System.Object)">
             </seealso>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.IsInterGraphLink(System.Object)">
             </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.HasMoveableConnectionPoint(System.Object,System.Boolean)">
            <summary>
            Returns whether the connection point of a link can be moved.
            </summary>
            <param name="link">The link.
            </param>
            <param name="origin">Set to <see langword="true"/> if the connection
            point is on the origin and <see langword="false"/> otherwise.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)">
            <summary>
            Returns whether the connection point of a link is pinned.
            </summary>
            <param name="link">The link.
            </param>
            <param name="origin">Set to <see langword="true"/> if the connection
            point is on the origin and <see langword="false"/> otherwise.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.GetLinkWidth(System.Object)">
            <summary>
            Returns the width of a link.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.Root">
            <summary>
            Gets the root graph model of this graph model, if any, or
            <see langword="null"/> otherwise.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.Parent">
            <summary>
            Gets the graph model of the parent graph of this graph, or
            <see langword="null"/>. Not needed for this model.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.GetGraphModel(System.Object)">
            </seealso>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.Root">
            </seealso>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.Nodes">
            <summary> Gets the nodes.</summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.Links">
            <summary>
            Gets the normal links.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.Subgraphs">
            <summary>
            Gets the subgraphs of this graph model.
            </summary>
            <remarks>
            Not needed for intergraph link routing, because we consider the
            subgraphs as well as all their contents here as normal nodes.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.InterGraphLinks">
            <summary>
            Gets the intergraph links contained in this graph.
            </summary>
            <remarks>
            Not needed for intergraph link routing, because we consider the
            intergraph links here as normal links.
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphLayout.Internal.InternalFlatBaseGraphModel.ContentsChanged">
            <summary>
            Occurs when the contents of the graph model is changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil">
             This class contains utilities for managing node/link parameters.
            
             To use the standard parameter storage mechanism (including input check), 
             use the high-level API:
              Set/GetNode/Link/NodeOrLinkParameter
            
             You can also use the lower-level API:
              Set/GetNode/Link/NodeOrLinkProperty
            
             @author 	Adrian Vasiliu
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.CheckInputNode(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String)">
             Throws an exception if the node is not a node that can be parameterized
             for a graph layout instance. No check is performed if the input
             check is not enabled on the layout instance.
            
             @param layout The layout instance for which the check is done.
             @param node The node to be checked
             @param objDescr A description of the node (e.g. "The root node"). 
                            If <code>null</code>, the string "The node " is used.
             @see GraphLayout#isInputCheckEnabled
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.CheckInputLink(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String)">
             Throws an exception if the link is not a link that can be parameterized
             for a graph layout instance. No check is performed if the input
             check is not enabled on the layout instance.
            
             @param layout The layout instance for which the check is done.
             @param link The link to be checked
             @param objDescr A description of the link (e.g. "The link").
                            If <code>null</code>, the string "The link" is used.
             @see GraphLayout#isInputCheckEnabled
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.CheckInputNodeOrLink(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String)">
             Throws an exception if the node or link is not a node or link that can be
             parameterized for a graph layout instance. No check is performed if the
             input check is not enabled on the layout instance.
            
             @param layout The layout instance for which the check is done.
             @param nodeOrLink The node or link to be checked
             @param objDescr A description of the link (e.g. "The object").
                            If <code>null</code>, the string "The object" is used.
             @see GraphLayout#isInputCheckEnabled
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.CheckInputNodeOrLink(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.String,System.String,System.Boolean,System.Boolean)">
             Throws an exception if the node or link is not a node or link that can be
             parameterized for a graph layout instance. No check is performed if the
             input check is not enabled on the layout instance.
            
             @param layout       The layout instance for which the check is done.
             @param nodeOrLink   The node or link to be checked
             @param objDescr     A description of the link (e.g. "The object").
                                 If <code>null</code>, the default description is used.
             @param defaultDescr The default description. It must not be
                                 <code>null</code>.
             @param reqDescr     The requirement description (e.g. "a link", such that
                                 the text "must be a link ...." makes sense).
             @param checkNode    <code>true</code> if we want to check whether it is
                                 a node. 
             @param checkLink    <code>true</code> if we want to check whether it is
                                 a link. 
             @see GraphLayout#isInputCheckEnabled
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.SetNodeParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Int32,System.Int32)">
             Stores a layout parameter for a node contained in the
             graph model attached to <code>layout</code>.
            
             @param layout The layout instance that stores the parameter
             @param node The node
             @param key The name of the property used for storing the parameter
             @param value The value of the parameter
             @param defaultValue The default value of the parameter
             @return true if a different value has been stored for <code>key</code>, 
                   or none stored under this key
                     
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.SetNodeParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Boolean,System.Boolean)">
             Stores a layout parameter for a node contained in the
             graph model attached to <code>layout</code>.
            
             @param layout The layout instance that stores the parameter
             @param node The node
             @param key The name of the property used for storing the parameter
             @param value The value of the parameter
             @param defaultValue The default value of the parameter
             @return true if a different value has been stored for <code>key</code>,
                or none stored under this key
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.SetNodeParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Single,System.Single)">
             Stores a layout parameter for a node contained in the
             graph model attached to <code>layout</code>.
            
             @param layout The layout instance that stores the parameter
             @param node The node
             @param key The name of the property used for storing the parameter
             @param value The value of the parameter
             @param defaultValue The default value of the parameter
             @return true if a different value has been stored for <code>key</code>, 
                or none stored under this key
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.SetNodeParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Object)">
             Stores a layout parameter for a node contained in the
             graph model attached to <code>layout</code>.
            
             @param layout The layout instance that stores the parameter
             @param node The node
             @param key The name of the property used for storing the parameter
             @param value The value of the parameter
             @return true if a different value has been stored for <code>key</code>, 
                  or none stored under this key
                     
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.SetLinkParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Int32,System.Int32)">
             Stores a layout parameter for a link contained in the
             graph model attached to <code>layout</code>.
            
             @param layout The layout instance that stores the parameter
             @param link The link
             @param key The name of the property used for storing the parameter
             @param value The value of the parameter
             @param defaultValue The default value of the parameter
             @return true if a different value has been stored for <code>key</code>, or none stored under this key
                     
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.SetLinkParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Boolean,System.Boolean)">
             Stores a layout parameter for a link contained in the
             graph model attached to <code>layout</code>.
            
             @param layout The layout instance that stores the parameter
             @param link The link
             @param key The name of the property used for storing the parameter
             @param value The value of the parameter
             @param defaultValue The default value of the parameter
             @return true if a different value has been stored for <code>key</code>, or none stored under this key
                     
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.SetLinkParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Single,System.Single)">
             Stores a layout parameter for a link contained in the
             graph model attached to <code>layout</code>.
            
             @param layout The layout instance that stores the parameter
             @param link The link
             @param key The name of the property used for storing the parameter
             @param value The value of the parameter
             @param defaultValue The default value of the parameter
             @return true if a different value has been stored for <code>key</code>, or none stored under this key
                     
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.SetLinkParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Object)">
             Stores a layout parameter for a link contained in the
             graph model attached to <code>layout</code>.
            
             @param layout The layout instance that stores the parameter
             @param link The link
             @param key The name of the property used for storing the parameter
             @param value The value of the parameter
             @return true if a different value has been stored for <code>key</code>, or none stored under this key
                     
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.SetNodeOrLinkParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Int32,System.Int32)">
             Stores a layout parameter for a node or a link contained in the
             graph model attached to <code>layout</code>.
            
             @param layout The layout instance that stores the parameter
             @param nodeOrLink The node or the link
             @param key The name of the property used for storing the parameter
             @param value The value of the parameter
             @param defaultValue The default value of the parameter
             @return true if a different value has been stored for <code>key</code>, or none stored under this key
                     
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.SetNodeOrLinkParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Boolean,System.Boolean)">
             Stores a layout parameter for a node or a link contained in the
             graph model attached to <code>layout</code>.
            
             @param layout The layout instance that stores the parameter
             @param nodeOrLink The node or the link
             @param key The name of the property used for storing the parameter
             @param value The value of the parameter
             @param defaultValue The default value of the parameter
             @return true if a different value has been stored for <code>key</code>, or none stored under this key
                     
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.SetNodeOrLinkParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Single,System.Single)">
             Stores a layout parameter for a node or a link contained in the
             graph model attached to <code>layout</code>.
            
             @param layout The layout instance that stores the parameter
             @param nodeOrLink The node or the link
             @param key The name of the property used for storing the parameter
             @param value The value of the parameter
             @param defaultValue The default value of the parameter
             @return true if a different value has been stored for <code>key</code>, or none stored under this key
                     
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.SetNodeOrLinkParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Object)">
             Stores a layout parameter for a node or a link contained in the
             graph model attached to <code>layout</code>.
            
             @param layout The layout instance that stores the parameter
             @param nodeOrLink The node or the link
             @param key The name of the property used for storing the parameter
             @param value The value of the parameter
             @return true if a different value has been stored for <code>key</code>, or none stored under this key
                     
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.SetNodeOrLinkParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Boolean,System.Boolean,System.String,System.Object)">
             Stores a layout parameter for a node or a link contained in the
             graph model attached to <code>layout</code>.
             If input check is enabled, it checks that the node/link is really
             contained in the graph. 
            
             @param layout The layout instance that stores the parameter
             @param nodeOrLink The node or the link
             @param objectDescr A text that describes the object
             @param checkNode If true, and input check is enabled, check if 
                              <code>nodeOrLink</code> is a node of the
                              graph model attached to <code>layout</code>
             @param checkLink If true, and input check is enabled, check if 
                              <code>nodeOrLink</code> is a link of the 
                              graph model attached to <code>layout</code>
             @param key The name of the property used for storing the parameter
             @param value The value of the parameter
             @return true if a different value has been stored for <code>key</code>, or none stored under this key
                     
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.SetNodeProperty(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Boolean,System.String,System.Object)">
             Stores a property object for a node contained in the
             graph model attached to <code>layout</code>.
             If input check is enabled, it checks that the node is really
             contained in the graph. 
            
             @param layout The layout instance that stores the parameter
             @param node The node
             @param objectDescr A text that describes the object
             @param checkNode If true, and input check is enabled, check if 
                              <code>node</code> is a node of the
                              graph model attached to <code>layout</code>
             @param key The name of the property used for storing the parameter
             @param value The value of the parameter
             @return true if a different value has been stored for <code>key</code>, or none stored under this key
                     
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.SetLinkProperty(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Boolean,System.String,System.Object)">
             Stores a property object for a link contained in the
             graph model attached to <code>layout</code>.
             If input check is enabled, it checks that the link is really
             contained in the graph. 
            
             @param layout The layout instance that stores the parameter
             @param link The link
             @param objectDescr A text that describes the object
             @param checkLink If true, and input check is enabled, check if 
                              <code>link</code> is a node of the
                              graph model attached to <code>layout</code>
             @param key The name of the property used for storing the parameter
             @param value The value of the parameter
             @return true if a different value has been stored for <code>key</code>, or none stored under this key
                     
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.SetNodeOrLinkProperty(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Boolean,System.Boolean,System.String,System.Object)">
             Stores a property object for a node or a link contained in the
             graph model attached to <code>layout</code>.
             If input check is enabled, it checks that the node/link is really
             contained in the graph. 
            
             @param layout The layout instance that stores the parameter
             @param nodeOrLink The node or the link
             @param objectDescr A text that describes the object
             @param checkNode If true, and input check is enabled, check if 
                              <code>nodeOrLink</code> is a node of the
                              graph model attached to <code>layout</code>
             @param checkLink If true, and input check is enabled, check if 
                              <code>nodeOrLink</code> is a link of the 
                              graph model attached to <code>layout</code>
             @param key The name of the property used for storing the parameter
             @param value The value of the parameter
             @return true if a different value has been stored for <code>key</code>, 
                  or none stored under this key
                     
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetGraphModel(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Boolean,System.Boolean)">
            Returns the graph model attached to a layout instance.
            If input check is enabled, the method checks (on request)
            whether <code>nodeOrLink</code> is a node/link contained in
            the graph model attached to the layout instance.
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetNodeParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Boolean)">
             Returns the value of a bool layout parameter for a node.
             
             For performance reasons, no check is performed to see if the
             node actually belongs to the graph model attached to the
             layout.
            
             @param layout The layout instance that nay have stored the 
                             parameter
             @param node The node 
             @param key The name of the property used for storing the parameter
             @param defaultValue The default value of the parameter
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetNodeParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Int32)">
             Returns the value of a int layout parameter for a node.
             
             For performance reasons, no check is performed to see if the
             node actually belongs to the graph model attached to the
             layout.
            
             @param layout The layout instance that nay have stored the 
                             parameter
             @param node The node
             @param key The name of the property used for storing the parameter
             @param defaultValue The default value of the parameter
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetNodeParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Single)">
             Returns the value of a float layout parameter for a node.
             
             For performance reasons, no check is performed to see if the
             node actually belongs to the graph model attached to the
             layout.
            
             @param layout The layout instance that nay have stored the 
                             parameter
             @param node The node
             @param key The name of the property used for storing the parameter
             @param defaultValue The default value of the parameter
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetNodeParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String)">
             Returns the property object eventually stored on a node or a link,
             or null otherwise.
             
             For performance reasons, no check is performed to see if the
             node or link actually belongs to the graph model attached to the
             layout.
            
             @param layout The layout instance that has stored the parameter
             @param nodeOrLink The node or the link
             @param key The name of the property used for storing the parameter
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetLinkParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Boolean)">
             Returns the value of a bool layout parameter for a link.
             
             For performance reasons, no check is performed to see if the
             link actually belongs to the graph model attached to the
             layout.
            
             @param layout The layout instance that nay have stored the 
                             parameter
             @param link The link 
             @param key The name of the property used for storing the parameter
             @param defaultValue The default value of the parameter
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetLinkParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Int32)">
             Returns the value of a int layout parameter for a link.
             
             For performance reasons, no check is performed to see if the
             link actually belongs to the graph model attached to the
             layout.
            
             @param layout The layout instance that nay have stored the 
                             parameter
             @param link The link
             @param key The name of the property used for storing the parameter
             @param defaultValue The default value of the parameter
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetLinkParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Single)">
             Returns the value of a float layout parameter for a link.
             
             For performance reasons, no check is performed to see if the
             link actually belongs to the graph model attached to the
             layout.
            
             @param layout The layout instance that nay have stored the 
                             parameter
             @param link The link
             @param key The name of the property used for storing the parameter
             @param defaultValue The default value of the parameter
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetLinkParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String)">
             Returns the property object eventually stored on a link,
             or null otherwise.
             
             For performance reasons, no check is performed to see if the
             link actually belongs to the graph model attached to the
             layout.
            
             @param layout The layout instance that has stored the parameter
             @param link The link
             @param key The name of the property used for storing the parameter
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetNodeOrLinkParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Boolean)">
             Returns the value of a bool layout parameter for a node 
             or a link.
             
             For performance reasons, no check is performed to see if the
             node or link actually belongs to the graph model attached to the
             layout.
            
             @param layout The layout instance that nay have stored the 
                             parameter
             @param nodeOrLink The node or the link
             @param key The name of the property used for storing the parameter
             @param defaultValue The default value of the parameter
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetNodeOrLinkParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Int32)">
             Returns the value of a int layout parameter for a node 
             or a link.
             
             For performance reasons, no check is performed to see if the
             node or link actually belongs to the graph model attached to the
             layout.
            
             @param layout The layout instance that nay have stored the 
                             parameter
             @param nodeOrLink The node or the link
             @param key The name of the property used for storing the parameter
             @param defaultValue The default value of the parameter
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetNodeOrLinkParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Single)">
             Returns the value of a float layout parameter for a node 
             or a link.
             
             For performance reasons, no check is performed to see if the
             node or link actually belongs to the graph model attached to the
             layout.
            
             @param layout The layout instance that nay have stored the 
                             parameter
             @param nodeOrLink The node or the link
             @param key The name of the property used for storing the parameter
             @param defaultValue The default value of the parameter
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetNodeOrLinkParameter(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String)">
             Returns the property object eventually stored on a node or a link,
             or null otherwise.
             
             For performance reasons, no check is performed to see if the
             node or link actually belongs to the graph model attached to the
             layout.
            
             @param layout The layout instance that has stored the parameter
             @param nodeOrLink The node or the link
             @param key The name of the property used for storing the parameter
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetNodeProperty(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String)">
             Returns the property object eventually stored on a node,
             or null otherwise.
             
             For performance reasons, no check is performed to see if the
             node actually belongs to the graph model attached to the
             layout.
            
             @param layout The layout instance that has stored the property
             @param node The node
             @param key The name of the property used for storing the property
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetLinkProperty(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String)">
             Returns the property object eventually stored on a link,
             or null otherwise.
             
             For performance reasons, no check is performed to see if the
             link actually belongs to the graph model attached to the
             layout.
            
             @param layout The layout instance that has stored the property
             @param link The link
             @param key The name of the property used for storing the property
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetNodeOrLinkProperty(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String)">
             Returns the property object eventually stored on a node or a link,
             or null otherwise.
             
             For performance reasons, no check is performed to see if the
             node or link actually belongs to the graph model attached to the
             layout.
            
             @param layout The layout instance that has stored the parameter
             @param nodeOrLink The node or the link
             @param key The name of the property used for storing the parameter
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetNodePropertyName(System.String)">
            Returns the name of the layout property used to save layout parameters
            for a node.
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetLinkPropertyName(System.String)">
            Returns the name of the layout property used to save layout parameters
            for a link.
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LayoutParametersUtil.GetGraphModel(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Returns the graph model of the specified layout. if no graph model
            was attached, create a temporary graph model and attach it.
            This method is called instead of all (3) occurences of layout.GetGraphModel()
            this file.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.TempGraphicContainerAdapter">
            <summary>
            The temporary graph model used to store the parameters before the real
            model is attached. We use a GraphicContainerAdapter: it stores the parameters
            in the properties of the graphic object, so when the new graph model is
            attached the properties will still be there (no need to transfer them).
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter">
            <summary>
            An <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/> encapsulates an <see cref="T:ILOG.Diagrammer.GraphicContainer"/> and 
            provides a bridge between the API of the <see cref="T:ILOG.Diagrammer.GraphicContainer"/> and the
            API of the <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/>
            <p>
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/> is a concrete subclass of
            <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/> that allows a <see cref="T:ILOG.Diagrammer.GraphicContainer"/> to be laid
            out using the layout algorithms provided in IBM ILOG Diagram for .NET. 
            It provides an implementation for all the abstract methods of
            <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/>. 
            It also provides overridden implementation of some non-abstract methods of 
            <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/>, in order to improve the efficiency by taking
            advantage of the particularities of the <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </p>
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.AbstractGraphModel">
            <summary>
            <strong>AbtractGraphModel</strong> is an abstract default implementation
            of <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/>.
            </summary>
            <remarks> 
            <p>
            This class can be used as base class for a concrete implementation of
            <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/>. It encapsulates some services that are 
            common to all graph models. A special adapter class,
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>, is provided in order to use an
            <see cref="T:ILOG.Diagrammer.GraphicContainer"/> as the underlying graph
            data structure.  
            </p>
            <p>
            Note that you must call the method <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.Dispose"/> after
            detaching the layouts when you no longer need the graph model
            instance; otherwise, some objects may not be garbage collected.
            If you allocate an instance of <strong>AbstractGraphModel</strong>,
            you should call <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.Dispose"/> when your instance is no longer
            needed. Calling <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.Dispose"/> in your code is not necessary if the
            graph model instance is created internally by the IBM ILOG Diagram for
            .NET Graph Layout library, because then it will be called by the
            the system automatically. Internally allocated graph models occur
            for instance when you directly attach a <strong>GraphicContainer</strong>
            to a layout instance using
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>, or
            when you use an <see cref="T:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider"/> for recursive
            layout.
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.AbstractGraphModel._rootModel">
            The root graph model.
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.AbstractGraphModel._isDisposed">
            A flag which indicates whether this model is disposed 
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.#ctor">
            <summary>
            Creates a new <strong>GraphModel</strong>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.InitPropertyNames(System.Int32)">
            <summary>
            Initializes the property names.
            </summary>
            <param name='id'> The unique id of this instance.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetPropertyName(System.String,System.Int32)">
            <summary>
            Method to be used everywhere in the package to choose  names for
            properties that must be unique for a given graph model instance.
            </summary>
            <remarks>
            Not private because accessed in subclasses. Not protected because
            dont want to export.
            </remarks>
            <param name='name'> The name of the property.
            </param>
            <param name='id'> The unique id of this instance.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.Dispose">
            <summary>
            Disposes of this <see cref="T:ILOG.Diagrammer.GraphLayout.AbstractGraphModel"/> and releases any
            resources that it is using.
            </summary>
            <remarks>
            An <strong>AbstractGraphModel</strong> object
            cannot be used after the <strong>Dispose</strong> method has been
            called. If there are any layouts still attached, they get automatically
            detached from the graph model. The method recursively disposes of this
            graph model and all its  graph model children (if any). 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Detach"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.DisposeThis">
            <summary>
            Disposes of this <strong>GraphModel</strong> and releases any 
            resources that it is using.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.Dispose"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.DisposeChildren"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.CleanSubmodelProperty">
            <summary>
            Cleans the subgraph properties that may have been stored on this
            graph.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.DetachLayouts">
            <summary>
            Detach all attached layouts.
            </summary>
            <remarks>
            This must be called after the isDisposed becomes true, to avoid
            infinite loop.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.DisposeChildren">
            <summary>
            Disposes this graph model and all its children.
            </summary>
            <remarks>
            Overridden in GraphicContainerAdapter to handle collapsed subgraphs
            correctly.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsDisposed">
            <summary>
            Returns <see langword="true"/> if this graph model is already
            disposed.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.Dispose">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.OnAttach(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Called when the graph layout instance is attached to the graph model.
            </summary>
            <param name="layout">The layout instance that has been attached.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.OnDetach(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Called when the graph layout instance is detached to the graph model.
            </summary>
            <param name="layout">The layout instance that has been detached.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.SetRootModel(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            Sets the root graph model.
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.StoreGraphModel(System.Object,ILOG.Diagrammer.GraphLayout.AbstractGraphModel)">
            <summary>
            Sets <paramref name="graphModel"/> as the graph model encapsulating
            <paramref name="subgraph"/>, with respect to this graph model, which
            encapsulates the topmost graph (that is, it is the root model).
            </summary>
            <remarks> 
            <p>
            The method stores the graph model instance as a user property of 
            the subgraph object (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.SetProperty(System.Object,System.String,System.Object)"/>). 
            </p>
            <p>
            Note that you can only set graph models for subgraphs, but you
            cannot  set a graph model for the root graph in this way (that is,
            <paramref name="graphModel"/> must not be this graph model).  
            </p>
            <p>
            The graph models for the subgraphs are automatically created by the
            method <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetGraphModel(System.Object)"/>, using the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.CreateGraphModel(System.Object)"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="subgraph"> The subgraph object. This must be an object
            for which the method <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsSubgraph(System.Object)"/>, called on the parent
            graph model of <paramref name="graphModel"/>, returns
            <see langword="true"/>.
            </param>
            <param name="graphModel"> The graph model to be used for
            <paramref name="subgraph"/>.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.RemoveStoredGraphModel(System.Object)">
            <summary>
            Removes the stored submodel.
            </summary>
            <remarks>
            To be called on the root model.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetStoredGraphModel(System.Object)">
            <summary>
            Returns the graph model that has been stored for a subgraph, if any.
            </summary>
            <remarks>
            Returns null if none has been stored.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetGraphModel(System.Object)">
            <summary>
            Returns a graph model instance for a subgraph of a nested graph.
            </summary>
            <remarks>
            The current graph model must belong to the nested graph;
            for instance, it can be the root graph model or the parent graph
            model of the subgraph.
            <p>
            The typical way to deal with nested graphs is the following:
            <UL>
            <LI> You create only the graph model for the root graph explicitly.
                 </LI>
            <LI> You retrieve the graph models of subgraphs by calling
                <strong>GetGraphModel(subgraph)</strong> on the root graph
                model.
                If a graph model has already been created for a subgraph,
                the graph model is returned. Otherwise, a new instance of
                a graph model is created.
                </LI>
            </UL>
            </p>
            </remarks>
            <param name="subgraph">The subgraph object. This is an object
            for which the method <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsSubgraph(System.Object)"/>, called on the
            parent graph model of the returned graph model, returns
            <see langword="true"/>.
            This must not be the root graph.
            </param>
            <returns> The graph model that encapsulates
            <paramref name="subgraph"/>.
            </returns>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.Root">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.CreateGraphModel(System.Object)">
            <summary>
            Creates a new graph model for a subgraph.
            </summary>
            <remarks>
            The method is called on the root graph model that encapsulates the
            root graph of the nested graph containing the subgraph. 
            <p>
            Subclasses must override this method in order to return a new instance
            of the appropriate subclass of <strong>AbstractGraphModel</strong>,
            encapsulating  <paramref name='subgraph'/>. 
            </p>
            <p>
            </p>
            </remarks>
            <param name='subgraph'> The subgraph object.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetLinksFrom(System.Object)">
            <summary>
            Returns all the links that have <strong>node</strong>
            as their origin.
            </summary>
            <remarks>
            It must not contain intergraph links, that is, links whose
            origin or destination node is not stored in this graph.
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetLinksTo(System.Object)">
            </seealso>
            <param name="node">The origin node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetLinksTo(System.Object)">
            <summary>
            Returns all the links that have <strong>node</strong>
            as their destination.
            </summary>
            <remarks>
            It must not contain intergraph links, that is, links whose
            origin or destination node is not stored in this graph.
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetLinksFrom(System.Object)">
            </seealso>
            <param name="node">The origin node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetFrom(System.Object)">
            <summary>
            Returns the origin node of a link.
            </summary>
            <remarks>
            This method must work for normal links and for intergraph links.
            Notice that for intergraph links, the returned node may not be
            a node of this graph model (that is, <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsNode(System.Object)"/> may return
            <see langword="false"/>).
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetTo(System.Object)">
            <summary>
            Returns the destination node of a link.
            </summary>
            <remarks>
            This method must work for normal links and for intergraph links.
            Notice that for intergraph links, the returned node may not be
            a node of this graph model (that is, <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsNode(System.Object)"/> may return
            <see langword="false"/>).
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsNode(System.Object)">
            <summary>
            Returns <see langword="true"/> if an object is a valid node, and
            <see langword="false"/> otherwise.
            </summary>
            <remarks>
            Note that an object can be both a node and a graph; therefore, both
            this method and <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsSubgraph(System.Object)"/> can return
            <see langword="true"/> for the same object.
            </remarks>
            <param name="obj">The object to test.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsLink(System.Object)">
            <summary>
            Returns <see langword="true"/> if the object is a valid normal link,
            and <see langword="false"/> otherwise.
            </summary>
            <remarks>
            The method must return <see langword="false"/> for intergraph links.
            </remarks>
            <param name="obj">The object to test.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsInterGraphLink(System.Object)">
            <summary>
            Returns <see langword="true"/> if the object is a valid intergraph
            link, and <see langword="false"/> otherwise.
            </summary>
            <remarks>
            An intergraph link is a link stored in a given graph that has an
            origin or destination not stored in this graph.
            The default implementation returns always <see langword="false"/>. 
            </remarks>
            <param name="obj">The object to test.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsLink(System.Object)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsSubgraph(System.Object)">
            <summary>
            Returns <see langword="true"/> if the object is a valid subgraph,
            and <see langword="false"/> otherwise.
            </summary>
            <remarks>
            A subgraph is a node of this graph model (that is
            <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsNode(System.Object)"/> must return <see langword="true"/>) that
            represents a graph nested inside this graph.
            The default implementation returns always <see langword="false"/>. 
            </remarks>
            <param name="obj">The object to test.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsLayoutNeeded(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Returns <see langword="true"/> if a given layout that has been
            already applied to this graph is still valid.
            </summary>
            <remarks>
            The method returns <see langword="true"/> if at least one of the
            following holds: 
            <UL>
            <LI>The method <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/> called
            on <paramref name="layout"/>  returns <see langword="false"/>. </LI>
            <LI>The method <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.GeometryUpToDate"/> called
            on <paramref name="layout"/>  returns <see langword="false"/>. </LI>
            <LI>The method <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.StructureUpToDate"/> called
            on <paramref name="layout"/>  returns <see langword="false"/>. </LI>
            </UL>
            If none of the conditions above holds, the method returns
            <see langword="false"/>  
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutNeeded"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.StructureUpToDate"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.GeometryUpToDate"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.BeforeLayout(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Called before a layout is performed.
            </summary>
            <param name="layout">The layout algorithm that is about to be
            performed.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.AfterLayout(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Called after a layout is performed.
            </summary>
            <param name="layout">The layout algorithm that was performed.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a property for a node or a link.
            </summary>
            <remarks>
            <p>
            If <paramref name="val"/> is <see langword="null"/>, the property is
            removed. Otherwise, the property value is set to
            <paramref name="val"/>.
            The method must work for normal links and intergraph links.
            </p>
            <p>
            The default implementation uses an internal data structure to store
            the binding between the node or link, the value of the property, and
            its key. 
            </p>
            </remarks>
            <param name="nodeOrLink">The node or link for which the property
            is to be set.
            </param>
            <param name="key">The key string for the property.
            </param>
            <param name="val">The new value of the property.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetProperty(System.Object,System.String)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetProperty(System.Object,System.String)">
            <summary>
            Returns the value of a property.
            </summary>
            <remarks>
            The method returns <see langword="null"/> if the property does
            not exist.
            The method must work for normal links and intergraph links.
            </remarks>
            <param name="nodeOrLink">The node or link for which the property
            is to be retrieved.
            </param>
            <param name="key">The key string for the property.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.SetProperty(System.Object,System.String,System.Object)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.SetProperty(System.String,System.Object)">
            <summary>
            Sets the value of a property for the graph model.
            </summary>
            <remarks>
            If <paramref name="val"/> is <see langword="null"/>, the property is
            removed. Otherwise, the property value is set to
            <paramref name="val"/>.  The default implementation uses an internal
            data structure to store the  binding between the node or link, the
            value of the property, and its key. 
            </remarks>
            <param name="key"> The key string for the property.
            </param>
            <param name="val"> The new value of the property.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetProperty(System.String)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetProperty(System.String)">
            <summary>
            Returns the value of a property of the graph model.
            </summary>
            <remarks>
            The method returns <see langword="null"/> if the property does not
            exist. 
            </remarks>
            <param name="key"> The key string for the property.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.SetProperty(System.String,System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.FireEvent(System.Object,ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction,System.Boolean)">
            <summary>
            Notifies that nodes or links have been added or removed, or that
            their geometry has changed (nodes or links were moved or reshaped).
            </summary>
            <remarks> 
            <p>
            This method fires a graph model <strong>ContentsChanged</strong> event.
            </p>
            <p>
            It is the responsibility of the graph model subclasses to call this
            method any time the contents of the model have changed (for example,
            when changes are due to user interaction).
            </p>
            <p>
            This notification is needed to allow the graph layout algorithms to
            detect changes and avoid performing the layout when it is not
            needed. If a graph model subclass does not call this method but a
            change has occurred in the graph, you need to force a re-layout by
            passing a <strong>force</strong> flag of <see langword="true"/> and
            calling the method <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>. 
            </p>
            <p>
            If a series of events is fired due to major modifications of the
            contents, it is useful to start the series of events with an optional
            call of <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.BeginUpdate"/> and then mark these events with
            <paramref name="updating"/> flag set to <see langword="true"/>.
            In this case, the series of the events must be followed by a call
            of <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.EndUpdate"/> to indicate the end of the series.
            This allows event handlers to optimize their treatment of series of
            events, since not all event handlers need to react on each single event
            of the series.
            </p>
            <p>
            Furthermore, the notification is used by the default graph model
            (<see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>) to ensure that
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CleanNode(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)"/> and
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CleanLink(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)"/> are called automatically at the
            right time. The <strong>GraphicContainerAdapter</strong> calls this
            method with event type
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.NodeRemoved"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.LinkRemoved"/>
            whenever a node or link is removed. If you do not use the
            <strong>GraphicContainerAdapter</strong> or if your model does not
            fire these events, the cleanup is not automatically performed, so
            you need to call these cleaning methods yourself. 
            </p>
            </remarks>
            <param name="nodeOrLink"> The object that was added, removed or
            moved, or <see langword="null"/> if the event concerns unknown nodes
            or links.
            </param>
            <param name="eventType"> The type of the event (a combination of the
            bit masks, see
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction"/>).
            </param>
            <param name="updating"> Indicates whether this event is in a series
            of events.
            </param>
            <seealso cref="E:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.ContentsChanged"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.EndUpdate"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.FireEvent(ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.BeginUpdate">
            <summary>
            Notifies that it is the start of a series of events.
            </summary>
            <remarks> 
            <p>
            This method fires a graph model <strong>ContentsChanged</strong> event
            that indicates the start of a series of events.
            This method can be called at the start of a series of events
            that have the updating flag enabled (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.FireEvent(System.Object,ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction,System.Boolean)"/>).
            This method indicates the start of a major modification of the
            contents of the graph model, for example when adding,
            removing, moving, or reshaping many nodes or links. 
            </p>
            <p>
            It is the responsibility of the graph model subclasses to call this
            method before a series of updating events. 
            If a <strong>BeginUpdate</strong> event before a series of updating
            events is missing, this is usually not fatal, while a missing
            <strong>EndUpdate</strong> may result in the layout not being
            automatically performed in automatic layout mode.
            </p>
            </remarks>
            <seealso cref="E:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.ContentsChanged"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.FireEvent(ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.EndUpdate">
            <summary>
            Notifies that it is the end of a series of events.
            </summary>
            <remarks> 
            <p>
            This method fires a graph model <strong>ContentsChanged</strong> event
            that indicates the end of a series of events.
            This method must be called at the end of a series of events
            that have the updating flag enabled (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.FireEvent(System.Object,ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction,System.Boolean)"/>).
            This method indicates the end of a major modification of the
            contents of the graph model, for example when adding,
            removing, moving, or reshaping many nodes or links. 
            </p>
            <p>
            It is the responsibility of the graph model subclasses to call this
            method after a series of updating events. 
            </p>
            <p>
            This notification is needed to allow the graph layout algorithms to
            detect changes and avoid performing the layout when it is not
            needed. If a graph model subclass does not call this method but a
            change has occurred in the graph, you need to force a re-layout by
            passing a <strong>force</strong> flag of <see langword="true"/> and
            calling the method <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>.
            </p>
            </remarks>
            <seealso cref="E:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.ContentsChanged"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.FireEvent(ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.FireEvent(ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs)">
            <summary>
            Fires a graph model <strong>ContentsChanged</strong> event.
            </summary>
            <remarks>
            This is called by <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.FireEvent(System.Object,ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction,System.Boolean)"/>
            and by <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.BeginUpdate"/> and <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.EndUpdate"/> in order
            to notify the event handlers that the contents of the graph model has
            changed. 
            This could be when an object (node or link) has been added, removed,
            reshaped, or moved.
            </remarks>
            <param name="e"> The event arguments.
            </param>
            <seealso cref="E:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.ContentsChanged"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.MoveNode(System.Object,System.Single,System.Single)">
            <summary>
            Changes the position of the specified node.
            </summary>
            <remarks>
            The <strong>x</strong>
            and <strong>y</strong> coordinates correspond to the top-left
            corner of the rectangle that defines the node (see also the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.BoundingBox(System.Object)"/>).
            </remarks>
            <param name="node">The node.
            </param>
            <param name="x">The new <strong>x</strong> position of the node.
            </param>
            <param name="y">The new <strong>y</strong> position of the node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.BoundingBox(System.Object)">
            <summary>
            Returns the bounding rectangle of a node or a link.
            </summary>
            <remarks>
            The method must work for normal links and intergraph links.    
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetLinkPoints(System.Object)">
            <summary>
            Returns the points that define a link.
            </summary>
            <remarks>
            The point at index 0
            must correspond to the connection point of the link on the
            origin node. The point at the last index must correspond to the
            connection point of the link on the destination node.
            <p>
            A link must always have at least 2 points, corresponding to
            the connection points.
            Therefore, the length of the array returned by this method must
            be at least 2.
            The method must work for normal links and intergraph links.
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)">
             <summary>
             Reshapes a link.
             </summary>
             <remarks>
             The method must work for normal links and intergraph links.
             <p>
             The link style represents the style of the shape of the
             link. The details of the shape of the link are given by
             the further arguments of the method.
             If the new shape of the link must be a straight-line link without
             any intermediate points, call the method with an empty array      
             for the <strong>points</strong> argument, or with the value 
             <strong>0</strong> for the <strong>length</strong> argument.
             In this case, the values of the arguments <strong>startIndex</strong>
             and <strong>length</strong> are ignored.
             </p><p>
             The mode parameters determine how the <paramref name="fromPoint"/>
             and <paramref name="toPoint"/> should be used:
             <ul>
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Ignore"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout does not
             specify how the corresponding origin or destination point of 
             the link should be determined.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Move"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains a meaningful value. The layout wants to
             move the corresponding origin or destination point of the link
             to the specified point.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Fix"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout wants to
             keep the previous corresponding origin or destination point of
             the link fixed, relative to the node position.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Clip"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout wants to
             clip the corresponding origin or destination point of
             the link against the border of the node.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.MoveAndClip"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains a meaningful value. The layout wants to
             clip the corresponding origin or destination point of
             the link against the border of the node, but the link should
             go though the specified point.</li>
            
             </ul>
             </p>
             </remarks>
             <param name="link">The link to be reshaped.
             </param>
             <param name="style">The style of the shape of the link.
             </param>
             <param name="fromPoint">The connection point of the link on the
             origin node.
             </param>
             <param name="fromPointMode">The mode that indicates how the
             <paramref name="fromPoint"/> should be used.
             </param>
             <param name="points">The array of intermediate points. Ignored
             if <strong>length</strong> is <strong>0</strong>."/&gt;
             </param>
             <param name="startIndex">The starting position in the array of
             points.
             </param>
             <param name="length">The number of intermediate points.
             </param>
             <param name="toPoint">The connection point of the link on the
             destination node.
             </param>
             <param name="toPointMode">The mode that indicates how the
             <paramref name="toPoint"/> should be used.
             </param>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsLink(System.Object)">
             </seealso>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsInterGraphLink(System.Object)">
             </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.HasMoveableConnectionPoint(System.Object,System.Boolean)">
            <summary>
            Returns whether the connection point of a link can be moved.
            </summary>
            <remarks>
            <p>
            Returns <see langword="true"/> if the connection point of
            <paramref name="link"/> on the origin or destination node can be
            moved by a call to the method <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/>. It
            returns <see langword="false"/> if such a call may fail to set the
            connection point to the argument passed to
            <strong>ReshapeLink</strong>.
            The method must work for normal links and intergraph links.
            </p>
            <p>
            The default implementation always returns <see langword="true"/>.
            </p>
            </remarks>
            <param name="link">The link.
            </param>
            <param name="origin">Set to <see langword="true"/> if the connection
            point is on the origin and <see langword="false"/> otherwise.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)">
            <summary>
            Returns whether the connection point of a link is pinned.
            </summary>
            <remarks>
            <p>
            Returns <see langword="true"/> if the connection point of
            <paramref name="link"/> on the origin or destination node is "pinned,"
            and <see langword="false"/> otherwise. The connection point is said
            to be "pinned" if its location is fixed with respect to the
            bounding box of the corresponding origin or destination node of
            the link.
            The method must work for normal links and intergraph links.
            </p>
            <p>
            The default implementation always returns <see langword="false"/>.
            </p>
            </remarks>
            <param name="link">The link.
            </param>
            <param name="origin">Set to <see langword="true"/> if the connection
            point is on the origin and <see langword="false"/> otherwise.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.HasMoveableConnectionPoint(System.Object,System.Boolean)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetLinkWidth(System.Object)">
            <summary>
            Returns the width of a link.
            </summary>
            <remarks>
            The default implementation returns <strong>1</strong>. The method
            must work for normal links and intergraph links.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.Parent">
            <summary>
            Gets the graph model of the parent graph of this graph, or
            <see langword="null"/>.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetGraphModel(System.Object)">
            </seealso>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.Root">
            </seealso>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.Root">
            <summary>
            Gets the root graph model of this graph model, if any, or
            <see langword="null"/> otherwise.
            </summary>
            <remarks>
            <p>
            If this method is called for a graph model of one of the
            subgraphs of a nested graph, it returns the graph model of
            the topmost graph. It returns <see langword="null"/> when called
            on the graph model of the topmost graph.
            </p>
            <p>
            The returned root graph model is the one that created this graph
            model by <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.CreateGraphModel(System.Object)"/>. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetGraphModel(System.Object)">
            </seealso>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.Parent">
            </seealso>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.Nodes">
            <summary> Gets the nodes.</summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsNode(System.Object)">
            </seealso>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.Links">
            </seealso>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.Links">
            <summary>
            Gets the normal links.
            </summary>
            <remarks>
            It must not contain intergraph links, that is,
            links whose origin or destination node is not stored in this graph.
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.Nodes">
            </seealso>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.Subgraphs">
            <summary>
            Gets the subgraphs of this graph model.
            </summary>
            <remarks>
            It must contain nodes of the graph, that
            is, objects for which the method <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsNode(System.Object)"/>
            returns <see langword="true"/>.
            The default implementation returns an empty collection.
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsSubgraph(System.Object)">
            </seealso>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.Nodes">
            </seealso>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.Links">
            </seealso>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.InterGraphLinks">
            <summary>
            Gets the intergraph links contained in this graph.
            </summary>
            <remarks>
            An intergraph link is a link stored in a given graph that has an
            origin or destination not stored in this graph.
            The default implementation returns an empty collection.
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
        </member>
        <member name="E:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.ContentsChanged">
            <summary>
            Occurs when the contents of the graph model is changed.
            </summary>
            <remarks>
            Occurs when nodes or links are added or removed, or when their
            position, size or shape changed.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.#ctor(ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/> class
            using the specified <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
            <param name="container">The <see cref="T:ILOG.Diagrammer.GraphicContainer"/> that this adapter encapsulates.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Dispose">
            <summary>
            Invoked when this graphic container adapter is not used any more.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implementation of the <strong>IEnumerable</strong> interface.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.BelongsTo(System.Object,ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Checks that a given object belongs to this graph model, that is,
            is a descendent of the top grapher with intermediate ancestors that
            are all "transparent", that is, that are non-nested subgraphs and that
            support graph layout.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.GetLinksTo(System.Object)">
            <summary>
            Returns the links whose end node is the specified object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.GetLinksFrom(System.Object)">
            <summary>
            Returns the links whose start node is the specified object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.IsSubgraph(System.Object)">
            <summary>
            Indicates whether the specified object is a sub-graph, that is,
            is a <see cref="T:ILOG.Diagrammer.GraphicContainer"/>
            and that implements the <see cref="T:ILOG.Diagrammer.INestedGraph"/> interface such that its
            <see cref="P:ILOG.Diagrammer.INestedGraph.NestedGraphMode"/> property is equal to <see cref="F:ILOG.Diagrammer.GraphLayout.NestedGraphMode.Subgraph"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.IsNode(System.Object)">
            <summary>
            Indicates whether the specified object is a node of the graph, that is,
            is not an instance of the <see cref="T:ILOG.Diagrammer.Graphic.Link"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.IsLink(System.Object)">
            <summary>
            Indicates whether the specified object is a link of the graph, that is,
            is an instance of the <see cref="T:ILOG.Diagrammer.Graphic.Link"/> class and is connected (at both ends)
            to graphic objects that are contained in the same <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.IsInterGraphLink(System.Object)">
            <summary>
            Indicates whether the specified object is an intergraph link of the graph, that is,
            is an instance of the <see cref="T:ILOG.Diagrammer.Graphic.Link"/> class, is connected (at both ends)
            to graphic objects, and at least one of the graphic objects is not contained in the
            same <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.IsLinkOrInterGraphLink(System.Object)">
            <summary>
            Indicates whether the specified object is a link or an intergraph link of the graph, that is,
            is an instance of the <see cref="T:ILOG.Diagrammer.Graphic.Link"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.GetGeometryToGrapherTransform(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Similar to go.GetGeometryToContainerTransform(grapher),
            but takes into account logical transforms...
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.BoundingBox(System.Object)">
            <summary>
            Gets the bounding rectangle of the specified graphic object.
            </summary>
            <param name="obj">An instance of the <see cref="T:ILOG.Diagrammer.GraphicObject"/> class.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.GetLinkPoints(System.Object)">
            <summary>
            Gets the points of the specified link.
            </summary>
            <param name="link">An instance of the <see cref="T:ILOG.Diagrammer.Graphic.Link"/> class.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.GetLinkWidth(System.Object)">
            <summary>
            Gets the width of a link.
            </summary>              
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.GetFrom(System.Object)">
            <summary>
            Gets the start node of the specified link.
            </summary>
            <param name="link">An instance of the <see cref="T:ILOG.Diagrammer.Graphic.Link"/> class.</param>
            <returns></returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.GetTo(System.Object)">
            <summary>
            Gets the end node of the specified link.
            </summary>
            <param name="link">An instance of the <see cref="T:ILOG.Diagrammer.Graphic.Link"/> class.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.MoveNode(System.Object,System.Single,System.Single)">
            <summary>
            Moves the specified node of the graph to the specified position.
            </summary>
            <param name="node">An instance of the <see cref="T:ILOG.Diagrammer.GraphicObject"/> class.</param>
            <param name="x">The new X position.</param>
            <param name="y">The new Y position.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)">
             <summary>
             Reshapes a link.
             </summary>
             <remarks>
             The method must work for normal links and intergraph links.
             <p>
             The link style represents the style of the shape of the
             link. The details of the shape of the link are given by
             the further arguments of the method.
             If the new shape of the link must be a straight-line link without
             any intermediate points, call the method with an empty array      
             for the <strong>points</strong> argument, or with the value 
             <strong>0</strong> for the <strong>length</strong> argument.
             In this case, the values of the arguments <strong>startIndex</strong>
             and <strong>length</strong> are ignored.
             </p><p>
             The mode parameters determine how the <paramref name="fromPoint"/>
             and <paramref name="toPoint"/> should be used:
             <ul>
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Ignore"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout does not
             specify how the corresponding origin or destination point of 
             the link should be determined.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Move"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains a meaningful value. The layout wants to
             move the corresponding origin or destination point of the link
             to the specified point.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Fix"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout wants to
             keep the previous corresponding origin or destination point of
             the link fixed, relative to the node position.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Clip"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout wants to
             clip the corresponding origin or destination point of
             the link against the border of the node.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.MoveAndClip"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains a meaningful value. The layout wants to
             clip the corresponding origin or destination point of
             the link against the border of the node, but the link should
             go though the specified point.</li>
            
             </ul>
             </p>
             </remarks>
             <param name="link">The link to be reshaped.
             </param>
             <param name="style">The style of the shape of the link.
             </param>
             <param name="fromPoint">The connection point of the link on the
             origin node.
             </param>
             <param name="fromPointMode">The mode that indicates how the
             <paramref name="fromPoint"/> should be used.
             </param>
             <param name="points">The array of intermediate points. Ignored
             if <strong>length</strong> is <strong>0</strong>."/&gt;
             </param>
             <param name="startIndex">The starting position in the array of
             points.
             </param>
             <param name="length">The number of intermediate points.
             </param>
             <param name="toPoint">The connection point of the link on the
             destination node.
             </param>
             <param name="toPointMode">The mode that indicates how the
             <paramref name="toPoint"/> should be used.
             </param>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.IsLink(System.Object)">
             </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.MoveAnchor(ILOG.Diagrammer.Graphic.Link,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,System.Boolean)">
            <summary>
            Modify the start or end anchor of a link so that the connection point
            will be at the specified location.
            </summary>
            <param name="link">The link whose start or end anchor must be changed.</param>
            <param name="newPoint">The new location of the connection point.</param>
            <param name="referencePoint">The reference point.</param>
            <param name="start">
            Indicates which anchor to change:
            <see langword="true"/> to change the start anchor, or
            <see langword="false"/> to change the end anchor.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.MoveAndClip(ILOG.Diagrammer.Graphic.Link,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,System.Boolean)">
            <summary>
            Modify the start or end anchor of a link so that the connection point
            will be at the specified location, but "clipped" to the node's outline.
            </summary>
            <param name="l">The link whose start or end anchor must be changed.</param>
            <param name="newPoint">The new location of the connection point.</param>
            <param name="referencePoint">The reference point.</param>
            <param name="start">
            Indicates which anchor to change:
            <see langword="true"/> to change the start anchor, or
            <see langword="false"/> to change the end anchor.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.SetShapeAnchor(ILOG.Diagrammer.Graphic.Link,System.Boolean,ILOG.Diagrammer.Point2D)">
            <summary>
            Connects the link to a ShapeAnchor. This is called when the adapter is told
            to not set the from/to point: in that case, we set a ShapeAnchor so that
            the link is clipped, because this usually gives the best result.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.HasPinnedConnectionPoint(System.Object,System.Boolean)">
            <summary>
            Returns <see langword="true"/> if the specified link is connected to
            a <see cref="T:ILOG.Diagrammer.BoundsAnchor"/> whose <see cref="P:ILOG.Diagrammer.Anchor.CanMove"/> property
            is <see langword="false"/> and whose <see cref="P:ILOG.Diagrammer.BoundsAnchor.Position"/>
            property is not <see cref="F:ILOG.Diagrammer.AnchorPosition.Automatic"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.CreateGraphModel(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/> class
            that encapsulates the specified <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
            <param name="subgraph">An instance of the <see cref="T:ILOG.Diagrammer.GraphicContainer"/> class.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.BeforeLayout(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Called before a layout is performed.
            </summary>
            <param name="layout">The layout algorithm that is about to be performed.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.AfterLayout(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Called after a layout is performed.
            </summary>
            <param name="layout">The layout algorithm that has just been performed.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.SetOriginatingLayout(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Stores the layout that created this model internally because
            a grapher got directly attached.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.GetOriginatingLayout">
            <summary>
            Returns the layout that created this model internally because
            a <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/> got directly attached.
            </summary>
            <remarks>
            It returns <see langword="null"/> if the model was not internally
            created but explicitly allocated by the user.
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.SetProperty(System.Object,System.String,System.Object)"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.GetProperty(System.Object,System.String)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetProperty(System.Object,System.String)"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.SetProperty(System.String,System.Object)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.SetProperty(System.String,System.Object)"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.GetProperty(System.String)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphLayout.AbstractGraphModel.GetProperty(System.String)"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.SaveAndEnableViewCoordinates(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Saves the reference transformer and reference view such that it can
            later be restored.
            </summary>
            <remarks>
            It also saves the coordinates mode.
            Then it sets the coordinates to view coordinates, and sets the
            reference view to the reference view of the input root graph model.
            <p>
            This is used only for internal purposes. You should not call this
            method directly.
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.RestoreAndDisableViewCoordinates">
            <summary>
            Restores the reference transformer and reference view that was
            previously saved.
            </summary>
            <remarks>
            It also restores the coordinates mode.
            This is used only for internal purposes. You should not call this
            method directly.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.GraphicContainer">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.GraphicContainer"/> that this adapter encapsulates.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Filter">
            <summary>
            Gets or sets the filter that determines whether or not a graphic object
            must be taken into account for graph layout.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.NodeComparer">
            <summary>
            Gets or sets the <see cref="T:System.Collections.IComparer"/> object that is used to sort the
            nodes of this model.
            </summary>
            <remarks>
            The <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.NodeComparer"/> determines the order of the nodes
            in the <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Nodes"/> property. If <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.NodeComparer"/>
            is <see langword="null"/>, the order of the nodes is the order in
            which they are stored in the <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Nodes">
            <summary>
            Returns the graphics objects contained in the <see cref="T:ILOG.Diagrammer.GraphicContainer"/>
            that are not links.
            </summary>
            <remarks>
            <para>
            If the <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Filter"/> property is non-<see langword="null"/>, the objects for
            which the <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphLayoutFilter.Accept(ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter,ILOG.Diagrammer.GraphicObject)"/> method of the filter returns
            <see langword="false"/> are not contained in this collection.
            Otherwise, objects for which the <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetIgnored(System.Object)"/> method returns <see langword="true"/>
            are not contained in this collection.
            </para>
            <para>
            If the <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.NodeComparer"/> property is non-<see langword="null"/>, the nodes
            are sorted according to the specified <see cref="T:System.Collections.IComparer"/>.
            </para>
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Links">
            <summary>
            Returns the <see cref="T:ILOG.Diagrammer.Graphic.Link"/> objects contained in the <see cref="T:ILOG.Diagrammer.GraphicContainer"/>,
            excluding intergraph links (that is, links that are connected to objects not contained
            in the <see cref="T:ILOG.Diagrammer.GraphicContainer"/>).
            </summary>
            <remarks>
            If the <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Filter"/> property is non-<see langword="null"/>, the objects for
            which the <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphLayoutFilter.Accept(ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter,ILOG.Diagrammer.GraphicObject)"/> method of the filter returns
            <see langword="false"/> are not contained in this collection.
            Otherwise, objects for which the <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetIgnored(System.Object)"/> method returns <see langword="true"/>
            are not contained in this collection.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.InterGraphLinks">
            <summary>
            Returns the intergraph links contained in the <see cref="T:ILOG.Diagrammer.GraphicContainer"/>
            (that is, links that are connected to objects not contained
            in the <see cref="T:ILOG.Diagrammer.GraphicContainer"/>).
            </summary>
            <remarks>
            If the <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Filter"/> property is non-<see langword="null"/>, the objects for
            which the <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphLayoutFilter.Accept(ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter,ILOG.Diagrammer.GraphicObject)"/> method of the filter returns
            <see langword="false"/> are not contained in this collection.
            Otherwise, objects for which the <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetIgnored(System.Object)"/> method returns <see langword="true"/>
            are not contained in this collection.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.CoordinatesMode">
            <summary>
            Gets or sets the coordinates mode to be used outside layout.
            </summary>
            <remarks>
            Sets the coordinates mode to be used outside layout.
            Valid value are:
            <list type="bullet">
            <item> <term><see cref="F:ILOG.Diagrammer.GraphLayout.CoordinatesMode.GraphicContainerCoordinates"/></term>
                 <description>
                 The geometry of the graph is computed using the coordinate space of
                 the  encapsulated <see cref="T:ILOG.Diagrammer.GraphicContainer"/> without 
                 applying any transformation.
                 <p>
                 This mode should be used if you visualize the graph at zoom level 1, 
                 or you do not visualize it at all, or the grapher contains only
                 fully zoomable objects. In all these cases there is no
                 need to take the transformer into account during the layout.
                 </p>
                 <p>
                 Note that in this mode the dimensional parameters of the layout 
                 algorithms are considered as being specified in manager coordinates.
                 </p>
                 </description></item>
            <item> <term><see cref="F:ILOG.Diagrammer.GraphLayout.CoordinatesMode.ViewCoordinates"/></term>
                 <description>
                 The geometry of the graph is computed in the coordinate space of
                 the reference <see cref="T:ILOG.Diagrammer.IDiagramView"/>. More exactly, all the coordinates are transformed
                 using the current reference transformer.
                 <p>
                 This mode should be used if you want the dimensional parameters of 
                 the layout algorithms to be considered as being specified in 
                 manager view coordinates.
                 </p>
                 </description>
                 </item>
            <item> <term><see cref="F:ILOG.Diagrammer.GraphLayout.CoordinatesMode.InverseViewCoordinates"/></term>
                 <description>
                 The geometry of the graph is computed using the coordinate system of 
                 the graphic container and then transforming them back into the coordinate 
                 system of the manager (by applying the inverse transformation). This 
                 mode is equivalent to the "graphic container coordinates" mode if the geometry 
                 of the graphic objects strictly obeys the transformer. (A small 
                 difference may exist because of the limited precision of the 
                 computations.)
                 <p>
                 On the contrary, if some graphic objects are either nonzoomable 
                 or semizoomable (for example, links 
                 with a maximum line width), this mode gives different results than the 
                 manager coordinates mode. These results are optimal if the grapher is 
                 visualized using the same transformer as the one taken into account 
                 during the layout.
                 </p>
                 <p>
                 Note that in this mode the dimensional parameters of the layout 
                 algorithms are considered as being specified in manager coordinates.
                 </p>
                 </description>
                 </item>
            </list>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.CoordinatesMode.InverseViewCoordinates"/>.
            </p>
            <p> 
            Note: this coordinates mode is only used when layout is not running.
            While layout is running, the coordinates mode of the layout instance
            is used (see <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.CoordinatesMode"/>).
            </p>
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.ReferenceView">
            <summary>
            Gets or sets the view that is used to retrieve
            the reference transformer used when the <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.CoordinatesMode"/> property is
            <see cref="F:ILOG.Diagrammer.GraphLayout.CoordinatesMode.ViewCoordinates"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.CoordinatesMode.InverseViewCoordinates"/>.
            </summary>
            <remarks>
            If this property is not <see langword="null"/>, the
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.ReferenceTransform"/> property always returns the
            transformation of the reference view.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.ReferenceTransform">
            <summary>
            Gets or sets the transformation used when <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.CoordinatesMode"/> property is
            <see cref="F:ILOG.Diagrammer.GraphLayout.CoordinatesMode.ViewCoordinates"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.CoordinatesMode.InverseViewCoordinates"/>.
            </summary>
            <remarks>
            If the <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.ReferenceView"/> property is not <see langword="null"/>,
            the reference transformation is always the transformation of the view.
            So, setting the <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.ReferenceTransform"/> property is useful only when the
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.ReferenceView"/> property is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Parent">
            <summary>
            Returns the graph model that encapsulates the parent of the graphic container
            encapsulated by this graph model, or <see langword="null"/>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Subgraphs">
            <summary>
            Gets the instances of <see cref="T:ILOG.Diagrammer.GraphicContainer"/> contained in the <see cref="T:ILOG.Diagrammer.GraphicContainer"/>
            that this adapter encapsulates.
            </summary>
            <remarks>
            This method returns only the instances of <see cref="T:ILOG.Diagrammer.GraphicContainer"/> whose
            <see cref="M:ILOG.Diagrammer.GraphicContainer.SupportsGraphLayout"/> method returns <see langword="true"/>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TempGraphicContainerAdapter.IsNode(System.Object)">
            <summary>
            Returns true to always pass the node/link checks.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TempGraphicContainerAdapter.IsLink(System.Object)">
            <summary>
            Returns true to always pass the node/link checks.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TempGraphicContainerAdapter.IsInterGraphLink(System.Object)">
            <summary>
            Returns true to always pass the node/link checks.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphLayout">
            <summary>
            The base class of the Graph Layout algorithms.
            </summary>
            <remarks> 
            <p>
            IBM ILOG Diagram for .NET provides special support for applications
            that need to display graphs (also called networks) of nodes and
            links. Using the <see cref="T:ILOG.Diagrammer.GraphicContainer"/>
            class, any graphic object can be defined to behave like a node and
            can be connected to other nodes with links, which themselves can have
            many different forms. Used in conjunction with layout algorithms,
            this feature is often used to create network topologies for
            telecommunications networks and system management applications. 
            </p>
            <p>
            The usage of the Graph Layout algorithms is not restricted to
            applications using an <see cref="T:ILOG.Diagrammer.GraphicContainer"/>
            to store and display the graph. You can use external graph data
            source structures. This is achieved through the generic graph model
            (see <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/>). This interface defines the API that
            is necessary to allow the graph layout algorithms to work. To use an
            external graph, all you need to do is to implement an adapter that
            connects the graph with the generic graph model. For details, see the
            class <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/>. 
            </p>
            <p>
            The class <strong>GraphLayout</strong> is abstract and cannot be used
            directly. You must use one of its concrete subclasses. 
            </p>
            <p>
            You can also create your own subclasses to implement other layout
            algorithms. Note that, in order to be applied on any graph, the
            layout algorithms must be written using the API of
            <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/> instead of the API of
            <see cref="T:ILOG.Diagrammer.GraphicContainer"/>. 
            </p>
            <p>
            The class contains layout parameters or options that can be useful
            for different layout algorithms. The implementation of the
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout"/> method
            is solely responsible for whether or not the current settings of the
            parameters are taken into account. 
            </p>
            <p>
            Note that all layout parameters that are specific to nodes or links,
            such as the "fixed" attribute (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetFixed(System.Object,System.Boolean)"/>,
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetFixed(System.Object)"/>), can
            be accessed only while the graph that contains the nodes or links is
            attached to the layout instance. Also, if the attached graph model is
            an <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>, layout parameters that are
            specific to nodes or links must be set after specifying filtering
            rules (see <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Filter"/>). 
            </p>
            <p>
            If the documentation does not indicate a different coordinate space,
            all dimensional parameters are expressed in the same coordinate space
            as the position and dimension of the nodes and the link points. In
            particular, when laying out an
            <see cref="T:ILOG.Diagrammer.GraphicContainer"/>, the dimensional
            parameters are expressed by default in the coordinate space of the
            graphic container, not in the coordinate space of the view
            (<see cref="T:ILOG.Diagrammer.IDiagramView"/>). However, optionally,
            the coordinate space of the view can be used. For details, see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.CoordinatesMode"/>.
            
            </p>
            <p>
            If you want to perform the layout on a subset of the nodes and links
            of and <see cref="T:ILOG.Diagrammer.GraphicContainer"/>, you can use a
            filter (see the class <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphLayoutFilter"/> and the
            property <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Filter"/>). The filter
            allows the layout algorithm to determine, for each node and link of a
            graph, if it must be taken into account or can be ignored. 
            </p>
            <p>
            If you want to perform the layout recursively over a nested graph
            (for instance, an <see cref="T:ILOG.Diagrammer.GraphicContainer"/>
            contained in another <see cref="T:ILOG.Diagrammer.GraphicContainer"/>),
            you can use the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
            and pass <see langword="true"/> for the <strong>traverse</strong>
            argument.  
            </p>
            <p>
            To learn more about the layout algorithms and the corresponding
            <strong>GraphLayout</strong> subclasses, read the sections of the
            Reference Manual describing those classes and the IBM ILOG Diagram for
            .NET Graph Layout User's Manual. 
            </p>
            <p>
            Note that, when implementing a subclass of
            <strong>GraphLayout</strong>, the initialization of all instance
            variables of the subclass needs to be done in the overridden
            implementation of the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Init"/>. This is
            to prevent execution of methods of the subclasses before the
            initialization of the instance variables of the subclasses. 
            </p>
            <p>
            Note also that you must call the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Detach"/> when you
            no longer need the layout instance; otherwise, some objects may not
            be garbage collected. This is necessary only if the layout instance
            is directly created by your code. Calling
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Detach"/> is not
            necessary if the layout instance is created internally by the ILOG
            Diagram for .NET Graph Layout library, when using an
            <see cref="T:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider"/> for recursive layout. 
            </p>
            </remarks>
             
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.GridLayout"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalLayout"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.ShortLinkLayout"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.LongLinkLayout"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.RandomLayout"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.TreeLayout"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>
            <seealso cref="T:ILOG.Diagrammer.GraphicContainer"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetIgnored(System.Object)">
            <summary>
            Returns <see langword="true"/> if the specified object must be
            ignored by the graph layout.
            </summary>
            <remarks>
            <para>
            This method is used only when the layout is attached to a <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>
            (it is the case when the layout is attached to a <see cref="T:ILOG.Diagrammer.GraphicContainer"/>).
            </para>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetIgnored(System.Object,System.Boolean)">
            <summary>
            Determines whether or not the specified object must be
            ignored by the graph layout.
            </summary>
            <remarks>
            <para>
            This method has an effect only when the layout is attached to a <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>
            (it is the case when the layout is attached to a <see cref="T:ILOG.Diagrammer.GraphicContainer"/>).
            </para>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetRadialOffset(System.Object)">
            <summary>
            Returns the radial offsets used by the graph layout
            to compute the connection points of links to this node.
            </summary>
            <remarks>
            This extended property has an effect only if <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLinkConnectionBox"/>
            returns <see langword="true"/>, and if the <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>
            property has been set to a non-null value.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetRadialOffset(System.Object,ILOG.Diagrammer.Margins)">
            <summary>
            Sets the radial offsets used by the graph layout
            to compute the connection points of links to this node.
            </summary>
            <remarks>
            This extended property has an effect only if <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLinkConnectionBox"/>
            returns <see langword="true"/>, and if the <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>
            property has been set to a non-null value.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetTangentialOffset(System.Object)">
            <summary>
            Returns the tangential offsets used by the graph layout
            to compute the connection points of links to this node.
            </summary>
            <remarks>
            This extended property has an effect only if <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLinkConnectionBox"/>
            returns <see langword="true"/>, and if the <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>
            property has been set to a non-null value.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetTangentialOffset(System.Object,ILOG.Diagrammer.Margins)">
            <summary>
            Sets the tangential offsets used by the graph layout
            to compute the connection points of links to this node.
            </summary>
            <remarks>
            This extended property has an effect only if <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLinkConnectionBox"/>
            returns <see langword="true"/>, and if the <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>
            property has been set to a non-null value.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnAttached">
            <summary>
            Invoked when the graph layout algorithm is attached to a graphic container.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnDetached">
            <summary>
            Invoked when the graph layout algorithm is detached from a graphic container.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Finalize">
            <summary>
            This member overrides <see cref="M:System.Object.Finalize">Object.Finalize</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Dispose">
            <summary>
            Releases the resources used by the object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.Component.Dispose(System.Boolean)">Component.Dispose(bool)</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CanExtend(System.Object)">
            <summary>
            This member implements <see cref="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.#ctor">
            <summary>
            Creates a new instance of the layout algorithm.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.#ctor(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Creates a new layout instance by copying an existing one.
            </summary>
            <remarks>
            This constructor is used by the
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Copy"/> method.
            Any subclass should provide a copy constructor. 
            <p>
            The parameters of the <strong>source</strong> layout are copied
            using the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>.
            The attached graph is not copied. 
            </p>
            </remarks>
            <param name="source"> The layout instance that is copied.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Copies the parameters from a given layout instance.
            </summary>
            <remarks>
            <p>
            Note that the parameters which are specific to a node or a link are
            not copied. The other parameters, including the layout region
            specification and the link connection box interfaces,
            are also copied. If the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLayoutOfConnectedComponents"/>
            returns <see langword="true"/>, a copy of the layout instance used
            for laying out the connected components is set on this layout
            instance.
            </p>
            <p>
            If a method of the type <strong>SupportsXXX</strong> is associated
            with a parameter, the parameter is copied only if the corresponding
            method returns <see langword="true"/>.
            </p>
            <p>
            Subclasses that need to copy additional parameters must override
            this method. The method can be implemented as follows:
            </p>
            <code lang="cs">
            public override void CopyParameters(GraphLayout source)
            {
              base.CopyParameters(source);
              // SubClassLayout is the name of the subclass
              if (source is SubClassLayout) {
                SubClassLayout msource = (SubClassLayout)source;
                // copy the parameters of the subclass
                SomeParameter = msource.SomeParameter;
              }
            }
            </code>
            <code lang="vbnet">
            Public Overloads Overrides Sub CopyParameters(ByVal source As GraphLayout)
             MyBase.CopyParameters(source)
             ' SubClassLayout is the name of the subclass
             If TypeOf source Is SubClassLayout Then
               Dim msource As SubClassLayout = CType(source, SubClassLayout)
               ' copy the parameters of the subclass
               SomeParameter = msource.SomeParameter
             End If
            End Sub
            </code>
            </remarks>
            <param name="source"> The layout instance from which the parameters
            are copied.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Init">
            <summary>
            Initializes instance variables.
            </summary>
            <remarks> 
            <p>
            You should not call this method directly. The method is called
            internally by the constructor without arguments and by the copy
            constructor. 
            </p>
            <p>
            The method must be overridden by subclasses that need to initialize
            additional instance variables. The initialization of all the
            instance variables of the subclasses must be done in this method. 
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Copy">
            <summary>
            Copies the layout instance.
            </summary>
            <remarks> 
            <p>
            This method must return a copy of this layout instance by calling a
            constructor defined as follows: <strong>public
            &lt;CLASSNAME&gt;(&lt;CLASSNAME&gt; source)</strong>. 
            </p>
            <p>
            When performing a recursive layout on a nested graph, this method is
            used by <see cref="T:ILOG.Diagrammer.GraphLayout.ILayoutProvider"/> to "clone" the layout instance
            of a parent graph. 
            </p>
            <p>
            Note that the parameters which are specific to a node or a link are
            not copied. The other parameters, including the layout region
            specification and the link clip and link connection box interfaces,
            are also copied. If the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLayoutOfConnectedComponents"/>
            returns <see langword="true"/>, a copy of the layout instance used
            for laying out the connected components is set on the new instance. 
            </p>
            <p>
            If a method of the type <strong>SupportsXXX</strong> is associated
            with a parameter, the parameter is copied only if the corresponding
            method returns <see langword="true"/>. 
            </p>
            </remarks>
            <returns>A copy of the layout instance.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetInstanceId">
            <summary>
            A utility method that returns a unique integer value for each layout
            instance inside the same C# program.
            </summary>
            <remarks>
            This method can be used to obtain names for properties that are
            unique for each layout instance.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Sets the graphic container to be laid out.
            </summary>
            <remarks>
            This method automatically creates  an
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/> to encapsulate the graphic
            container.  Then, the adapter is attached to the layout instance by
            calling the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            
            <p>
            You must attach the graphic container before performing the layout,
            that is, before calling the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>,
            and before specifying layout parameters for specific nodes or links.
            
            </p>
            <p>
            The method does nothing if the graphic container is already
            attached. 
            </p>
            <p>
            You can get the <strong>GrapherAdapter</strong> instance created by
            this method using
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetGraphModel"/>.
            However, notice that you are not allowed to do the following: 
            <UL>
            <LI>Attach this adapter to any other layout instance.</LI> 
            <LI>Use this adapter in any way once the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Detach"/> has
            been called on the layout instance.</LI> 
            </UL>
            In case you need to be able to do any of the above operations,
            create directly the instance of <strong>GrapherAdapter</strong> and
            attach it using
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            
            </p>
            <p>
            To determine whether a given <strong>GraphModel</strong> instance
            has been created using
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>,
            you can use the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.GetOriginatingLayout"/>. This
            method returns a non-<see langword="null"/> object if the model has
            not been created using
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>.
            
            </p>
            </remarks>
            <param name="grapher"> The graphic container.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Detach"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetGraphModel"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetGraphicContainer"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Sets the graph model to be laid out.
            </summary>
            <remarks> 
            <p>
            You must attach the graph model before performing the layout, that
            is, before calling the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>,
            and before specifying layout parameters for specific nodes or links.
            
            </p>
            <p>
            This method first calls
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Detach"/> if a
            graph model is already attached. The method calls
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.OnAttach(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>, passing this layout instance as
            argument. 
            </p>
            </remarks>
            <param name="graphModel"> The graph model to lay out.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Detach"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetGraphModel"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Detach">
            <summary>
            Detaches the graph model from the layout instance.
            </summary>
            <remarks> 
            <p>
            When a new graph model is attached to the layout instance, it is not
            necessary to detach the previously attached graph model because this
            is done automatically when the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            is called. 
            </p>
            <p>
            This method performs cleaning operations on the graph model (for
            example, properties added to the graph model objects and graph model
            event handlers are removed). The method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CleanGraphModel(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            is called with the currently attached graph model as the argument.
            The methods
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CleanNode(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)"/> and
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CleanLink(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)"/> are
            called for each node and link returned by the methods
            <see cref="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Nodes"/>, <see cref="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Links"/> and
            <see cref="P:ILOG.Diagrammer.GraphLayout.IGraphModel.InterGraphLinks"/>. 
            </p>
            <p>
            If the model currently attached is an
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/> internally created using the
            method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>,
            the method <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.Dispose"/> is called on it. Notice
            that in this case you can no longer use the adapter instance. 
            </p>
            <p>
            Subclasses can override this method to remove additional information
            stored in the layout instance. 
            </p>
            <p>
            The method calls <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.OnDetach(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>, passing this
            layout instance as an argument. If the model has been internally
            created using the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>,
            the method <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.OnDetach(ILOG.Diagrammer.GraphLayout.GraphLayout)"/> is called just before
            disposing of the model. 
            </p>
            <p>
            Note that you must call this method when you no longer need the
            layout instance; otherwise, some objects may not be garbage
            collected. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CleanGraphModel(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CleanNode(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CleanLink(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.Dispose"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CleanGraphModel(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Cleans a graph model.
            </summary>
            <remarks>
            This method removes any data that has been stored by the layout
            algorithm on a graph model. 
            <p>
            Subclasses can override this method to remove additional information
            stored in the graph model. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="graphModel"> The graph model to be cleaned.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Detach"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.Dispose"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CleanNode(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)">
            <summary>
            Cleans a node.
            </summary>
            <remarks>
            This method removes any data that has been stored by the layout
            algorithm on a node. 
            <p>
            The method is automatically called by
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.ModelContentsChanged(System.Object,ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs)"/>
            whenever a <see cref="T:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs"/> of type
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.NodeRemoved"/> is
            received. 
            </p>
            <p>
            Subclasses can override this method to remove additional information
            stored in the nodes. 
            </p>
            <p>
            Notice that the method may be called multiple times for the same
            node. At the time this method is called, the node may already be
            removed; therefore, overridden versions of this method should be
            implemented so that they work even if the object is no longer a node
            of <paramref name="graphModel"/>. 
            </p>
            </remarks>
            <param name="graphModel"> The graph model to which the
            <paramref name="node"/> belongs.
            </param>
            <param name="node"> The node to be cleaned.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Detach"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.Dispose"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CleanLink(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)">
            <summary>
            Cleans a link.
            </summary>
            <remarks>
            This method removes any data that has been stored by the layout
            algorithm on a regular link or on an intergraph link. 
            <p>
            The method is automatically called by
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.ModelContentsChanged(System.Object,ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs)"/>
            whenever a <see cref="T:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs"/> of type
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.LinkRemoved"/> is
            received. 
            </p>
            <p>
            Subclasses can override this method to remove additional information
            stored in the links. 
            </p>
            <p>
            Notice that the method may be called multiple times for the same
            link. At the time this method is called, the link may already be
            removed; therefore, overridden versions of this method should be
            implemented so that they work even if the object is no longer a link
            of <paramref name="graphModel"/>. 
            </p>
            </remarks>
            <param name="graphModel"> The graph model to which the
            <paramref name="link"/> belongs.
            </param>
            <param name="link"> The link to be cleaned.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Detach"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.Dispose"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetGraphModel">
            <summary>
            Returns the graph model to lay out if a graph model is attached.
            </summary>
            <remarks>
            Otherwise, the method returns <see langword="null"/>. 
            <p>
            If an <see cref="T:ILOG.Diagrammer.GraphicContainer"/> is attached
            directly using
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>,
            the method returns the instance of
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/> that has been created
            internally. Note that in this case the model cannot be used once the
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Detach"/> method
            has been called and cannot be attached to any other layout instance.
            
            </p>
            <p>
            Note that, during the layout of a disconnected graph by a layout
            class that supports the connected components layout mechanism (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLayoutOfConnectedComponents"/>)
            and for which this mechanism is enabled (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>),
            the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetGraphModel"/>
            may return a different graph model than the one originally attached
            using the method 
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            For details, see the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>.
            
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetGraphicContainer">
            <summary>
            Returns the <see cref="T:ILOG.Diagrammer.GraphicContainer"/> that contains the nodes and
            links to be laid out.
            Returns <see langword="null"/> if the graph model is not a
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>.
            </summary> 
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetParentLayout(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Sets the parent layout of this layout instance.
            </summary>
            <remarks>
            You should not call this method directly. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetParentLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetParentLayout">
            <summary>
            Returns the parent layout.
            </summary>
            <remarks>
            If a layout instance <strong>A</strong> creates or uses another
            layout instance <strong>B</strong> to accomplish a part of or the
            total layout work, the layout instance <strong>A</strong> is called
            the "parent" of the layout instance <strong>B</strong>. The parent
            layout instance is responsible for declaring itself as a parent of
            <strong>B</strong> by calling the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetParentLayout(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            on it. The layout instance <strong>B</strong> is called a sublayout
            of <strong>A</strong>. 
            <p>
            Sublayouts never have their own local event handlers for the
            <strong>LayoutStepPerformed</strong> event. Layout events have
            parent layouts as the source. 
            </p>
            <p>
            The method returns <see langword="null"/> if the layout instance has
            no parent. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetParentLayout(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CreateLayoutReport">
            <summary>
            Returns a new instance of the layout report.
            </summary>
            <remarks>
            The default implementation returns a new instance of
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayoutReport"/>. 
            <p>
            You can overwrite this method in order to create subclasses of
            <strong>GraphLayoutReport</strong>. 
            </p>
            <p>
            This method is called by
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            The returned object is stored internally in the layout instance and
            will be returned by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            
            </p>
            <p>
            You can use this method to obtain information about the behavior of
            the layout algorithm if the information is added in the layout
            report inside the implementation of the
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout"/> method,
            where it can be obtained using
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetLayoutReport"/>.
            
            </p>
            <p>
            While the
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout"/> method
            is running, you can also obtain the layout report outside this
            method via handlers of the <see cref="E:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutStepPerformed"/> event. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetLayoutReport"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.GraphLayoutReport"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
            <seealso cref="E:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutStepPerformed"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetLayoutReport(ILOG.Diagrammer.GraphLayout.GraphLayoutReport)">
            <summary>
            Sets the layout report, that is, the object that contains
            information about the behavior of the layout algorithm.
            </summary>
            <remarks> 
            <p>
            This method is called automatically by
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            with the layout report created using the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CreateLayoutReport"/>.
            Subclasses can override this method to perform additional actions. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CreateLayoutReport"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetLayoutReport"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetLayoutReport">
            <summary>
            Returns the layout report, that is, the object that contains
            information about the behavior of the layout algorithm.
            </summary>
            <remarks> 
            <p>
            If this method is called after the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            was called for the first time on this layout instance, it returns
            the instance of the layout report created by
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CreateLayoutReport"/>.
            Otherwise, it returns <see langword="null"/>. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CreateLayoutReport"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetLayoutReport(ILOG.Diagrammer.GraphLayout.GraphLayoutReport)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout">
            <summary>
            Starts the layout algorithm using the currently attached graph model
            and the current settings for the layout parameters.
            </summary>
            <remarks>
            <p>
            This method simply calls
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean)"/>
            with the <strong>force</strong> argument set to
            <see langword="false"/>.
            </p>
            <p>
            The layout report returned by
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean)"/>
            is returned.
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean)">
             <summary>
             Starts the layout algorithm using the currently attached graph model
             and the current settings for the layout parameters.
             </summary>
             <remarks>
             <p>
             The method first calls
             <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CreateLayoutReport"/>
             to obtain a new instance of the layout report. This instance is
             stored internally and can be used to obtain information about the
             behavior of the layout algorithm when the method returns. The
             implementation of the
             <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout"/> method
             is solely responsible for adding this information to the layout
             report. Note that subclasses of <strong>GraphLayout</strong> can
             override the method
             <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CreateLayoutReport"/>
             in order to return a subclass of of <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayoutReport"/>
             when additional information needs to be stored in the report.
             </p>
             <p>
             If the graph is empty (that is, it does not contain any node) the
             appropriate code (<see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.EmptyGraph"/>)
             is stored in the layout report and the method returns.
             </p>
             <p>
             If the argument <paramref name="force"/> is <see langword="false"/>,
             the method calls
             <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutNeeded"/>
             to determine if it is necessary to perform the layout. If this
             method returns <see langword="false"/>, the appropriate code
             (<see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.NotNeeded"/>) is stored in the
             layout report and the method returns.
             </p>
             <p>
             Otherwise, if the argument <paramref name="force"/> is
             <see langword="true"/> or
             <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutNeeded"/>
             returns <see langword="true"/>, the method
             <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.BeforeLayout(ILOG.Diagrammer.GraphLayout.GraphLayout)"/> is called on the attached
             graph model.
             Then the method
             <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout"/>, which
             executes the layout algorithm, is called.
             </p>
             <p>
             Instead of directly calling the method
             <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout"/> on the
             attached graph model, layout classes which support the connected
             components layout (see
             <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLayoutOfConnectedComponents"/>)
             and for which this mechanism is enabled (see
             <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>
             first cut the graph model into connected components. Then each
             connected component is laid out separately by a call of the method
             <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout"/>. To do
             this, the attached graph model is temporarily changed into an
             internally generated graph model corresponding to each of the
             connected components of the original graph. Finally, the layout
             instance returned by the property
             <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents"/>
             is used to position the connected components.
             </p>
             <p>
             Note that while the
             <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout"/> method
             is running, you can also obtain the layout report outside this
             method using the layout event handler mechanism (see
             <see cref="E:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutStepPerformed"/>).
            
             </p>
             <p>
             If the layout is successfully performed (that is, if the property
             <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/> called on the layout report
             instance returns <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.LayoutDone"/> or
             <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndValid"/>), the layout
             instance is notified that the structure, the geometry, and the
             parameters are now up-to-date (see the properties
             <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.StructureUpToDate"/>,
             <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.GeometryUpToDate"/>,
             and
             <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/>).
            
             </p>
             <p>
             In any case, if the method <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.BeforeLayout(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
             has been called, the method
             <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.AfterLayout(ILOG.Diagrammer.GraphLayout.GraphLayout)"/> is
             finally called on the attached graph model.
             </p>
             </remarks>
             <param name="force"> If <see langword="true"/>, the method
             <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutNeeded"/>
             is not called. No check is made to determine if it is necessary to
             perform the layout.
             </param>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutNeeded"/>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.StructureUpToDate"/>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.GeometryUpToDate"/>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)">
             <summary>
             Starts the layout algorithm using the currently attached graph model
             and the current settings for the layout parameters.
             </summary>
             <remarks>
             <p>
             If the argument <paramref name="traverse"/> is
             <see langword="false"/>, the method simply calls
             <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean)"/>
             passing the <paramref name="force"/> argument.
             Note that if the attached graph is a nested graph, this
             applies the layout only on the topmost graph and does not apply
             recursively on the subgraphs. In this case, the return value is the
             result code stored in the layout report (see
             <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>).
             </p>
             <p>
             If the argument <paramref name="traverse"/> is
             <see langword="true"/>, the layout is applied to the attached graph
             model and recursively to all subgraph models of the attached graph
             model. In fact, clones of this layout are attached and used for the
             subgraph models. This is equivalent to
             <strong>GetRecursiveLayout().PerformLayout(force)</strong>.
             In this case, the return value is the combined result code of all
             layout calls:
             <UL>
             <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.EmptyGraph"/> - The graph is
             empty.</LI>
            
             <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.NotNeeded"/> - The layout was
             up-to-date in the graph and in all subgraphs.</LI>
            
             <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.LayoutDone"/> - The layout was
             successfully done in the graph and in all subgraphs, as needed.</LI>
            
             <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndValid"/> - The
             layout was successfully done in the graph and in all subgraphs, as
             needed, but some layouts of subgraphs run out of time before
             completion and stored the result code
             <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndValid"/> in their layout
             reports.</LI>
            
             <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/> - The
             layout was not completed. The method
             <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.StopImmediately"/>
             was called, or the layout of one of the subgraphs run out of time
             before completion and stored the result code
             <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/> in its layout
             report. In this
             case, the entire recursion stopped immediately, and the layouts of
             the remaining subgraphs was not done.</LI>
             </UL>
             To get the report of the Recursive Layout after performing layout,
             you can call
             <strong>GetRecursiveLayout().GetLayoutReport()</strong>. To get the
             report of the layout of a specific subgraph, you can call
             <strong>GetRecursiveLayout().GetLayoutReport(subgraph)</strong>.
             You can also install a handler for the
             <strong>LayoutStepPerformed</strong> event for all layouts of 
             subgraphs via
             <strong>GetRecursiveLayout().SubLayoutStepPerformed</strong>.
             </p>
             <p>
             This method is the simplest way to apply a single layout recursively
             on an entire nested graph. If different layout algorithms need to be
             used for different subgraphs, or some subgraphs should not be laid
             out at all, you should explicitly allocate a Recursive Layout and
             either use the internal provider mode or the specified provider mode
             (see <see cref="T:ILOG.Diagrammer.GraphLayout.RecursiveLayout"/>).
             </p>
             </remarks>
             <returns>The layout code.
             </returns>
             <param name="force"> If <see langword="true"/>, the method
             <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutNeeded"/>
             is not called. No check is made to determine if it is necessary to
             perform the layout.
             </param>
             <param name="traverse"> If <see langword="true"/>, the layout is
             applied to the attached graph model and recursively to all subgraph
             models of the attached graph model. Otherwise, it is only applied on
             the attached graph model.
             </param>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean)"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutNeeded"/>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.StructureUpToDate"/>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.GeometryUpToDate"/>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/>
             <seealso cref="T:ILOG.Diagrammer.GraphLayout.RecursiveLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformSublayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout,System.Boolean)">
            <summary>
            Starts the input layout algorithm.
            </summary>
            <remarks>
            This is used when this layout controls the input layout as
            sublayout. Layout classes can override this method if changes are
            needed with respect to the way how the input layout is started. You
            should not call this method directly.
            <p>
            </p>
            </remarks>
            <param name="subgraph"> The subgraph if used during nested layout,
            or <see langword="null"/>.
            </param>
            <param name="layout"> The sublayout to be performed.
            </param>
            <param name="force"> If <see langword="true"/>, no check is made to
            determine if it is necessary to perform the layout.
            </param>
            <returns>The layout code. See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetRecursiveLayout">
            <summary>
            Returns the instance of Recursive Layout that is used to perform
            this layout recursively when you call
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
            with the traverse flag set to <see langword="true"/>.
            </summary>
            <remarks>
            The returned instance of Recursive Layout uses this layout as a
            reference layout, and it is attached to the same graph model as this
            graph model. You should call this method only when a graph model is
            attached. You should neither detach the returned layout nor attach
            it to any other graph model. 
            <p>
            You can use this instance of Recursive Layout to set parameters per
            node or link for the layout of a subgraph, and to save or load the
            settings from the named properties. 
            </p>
            <p>
            The returned instance always uses the reference layout mode (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>).
             
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayout(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetLayouts(System.Boolean)">
            <summary>
            Returns the instances of <strong>GraphLayout</strong> for the nested
            graph encapsulated by the graph model of this layout instance.
            </summary>
            <remarks>
            <p>
            It returns this layout instance and recursively the layout instances
            for all subgraphs that are clones of this layout instance. The order
            of the enumeration can be preorder (that is, the layout of the
            parent graph comes before the layout of the subgraphs) or postorder
            (that is, the layout of the subgraphs comes before the layout of the
            parent graph).
            </p>
            <p>
            This method is equivalent to
            <strong>GetRecursiveLayout().GetLayouts(preOrder)</strong>.
            </p>
            <p>
            </p>
            </remarks>
            <param name="preOrder"> If <see langword="true"/>, the layout
            instances are returned in preorder, otherwise in postorder.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetRecursiveLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayouts(System.Boolean)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetLayout(System.Object)">
            <summary>
            Returns the layout instance for a subgraph of the nested graph
            encapsulated by the graph model of this layout instance.
            </summary>
            <remarks>
            The returned layout instance is a clone of this layout instance. 
            <p>
            This method is equivalent to
            <strong>GetRecursiveLayout().GetLayout(subgraph)</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="subgraph"> The subgraph object. This must not be the
            root graph.
            </param>
            <returns>The layout instance.
            </returns>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetRecursiveLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayout(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutNeeded">
            <summary>
            Verifies that it is necessary to perform the layout.
            </summary>
            <remarks>
            The default implementation returns the value returned by a call of
            the method <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsLayoutNeeded(ILOG.Diagrammer.GraphLayout.GraphLayout)"/> on the attached
            graph model, with this layout instance as argument. 
            <p>
            If no graph model is attached, the method returns
            <see langword="false"/>. 
            </p>
            <p>
            Basically, the method returns <see langword="false"/> if no changes
            occurred on the graph model (no nodes or links were inserted,
            removed, reshaped, or moved) and no parameters changed since the
            last time the layout was successfully performed using this layout
            instance. Otherwise, the method returns <see langword="true"/>. 
            </p>
            </remarks>
            <returns><see langword="true"/> if it is necessary to perform the
            layout, <see langword="false"/> otherwise.
            </returns>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.StructureUpToDate"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.GeometryUpToDate"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout">
             <summary>
             Executes the layout.
             </summary>
             <remarks>
             <p>
             This method must be implemented by each layout algorithm (subclasses
             of <strong>GraphLayout</strong>). This method computes the
             coordinates of the nodes in the attached graph model and moves the
             nodes to the new positions using the method
             <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.MoveNode(System.Object,System.Single,System.Single)"/>.
             </p>
             <p>
             The method can also perform reshape operations on the links using
             the method <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/>.
             </p>
             <p>
             When writing the implementation of this method, you can obtain an
             instance of the layout report using
             <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetLayoutReport"/>
             and store particular information about the behavior of the layout
             algorithm in the layout report. You can also notify the
             handlers for the <strong>LayoutStepPerformed</strong> event
             using the method
             <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)"/>.
            
             </p>
             <p>
             When the layout algorithm is finished and if the layout is performed
             successfully, you must set the property 
             <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/> to the value 
             <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.LayoutDone"/> on the layout report
             instance.
             </p>
             <p>
             Here is a sample implementation for a Random layout:
             </p>
             <code lang="cs">
             protected void Layout()
             {
               // obtain the graph model
               IGraphModel graphModel = GetGraphModel();
               // obtain the layout report
               GraphLayoutReport layoutReport = GetLayoutReport();
               // obtain how many steps to do
               int stepsToGo = graphModel.Nodes.Count;
               int stepsGone = 1;
            
               // obtain the layout region
               Rectangle2D rect = GetCalcLayoutRegion();
               float xMin = rect.X;
               float yMin = rect.Y;
               float xMax = rect.X + rect.Width;
               float yMax = rect.Y + rect.Height;
            
               // initialize the random generator
               System.Random random = UseSeedValueForRandomGenerator ?
                 new System.Random(SeedValueForRandomGenerator) :
                 new System.Random();
            
               // browse the nodes
               foreach (Object node in graphModel.Nodes) {
            
                 // skip fixed nodes
                 if (PreserveFixedNodes &amp;&amp; GetFixed(node))
                   continue;
            
                 // compute coordinates
                 float x = xMin + (xMax - xMin) * (float)random.NextDouble();
                 float y = yMin + (yMax - yMin) * (float)random.NextDouble();
            
                 // move the node to the computed position
                 graphModel.MoveNode(node, x, y);
            
                 // notify handlers on layout step performed events
                 IncreasePercentageComplete(stepsGone++ * 100 / stepsToGo);
                 // Call ...IfNeeded to avoid that we sent events too often
                 OnLayoutStepPerformedIfNeeded();
               }
            
               // final notification that we are at 100% complete
               IncreasePercentageComplete(100);
               OnLayoutStepPerformed(false, false);
            
               // Set the final result code
               layoutReport.Code = GraphLayoutReportCode.LayoutDone;
             }
             </code>
             <code lang="vbnet">
             Protected Sub Layout()
               ' obtain the graph model
               Dim graphModel As IGraphModel = GetGraphModel
               ' obtain the layout report
               Dim layoutReport As GraphLayoutReport = GetLayoutReport
               ' obtain how many steps to do
               Dim stepsToGo As Integer = graphModel.Nodes.Count
               Dim stepsGone As Integer = 1
              
               ' obtain the layout region
               Dim rect As Rectangle2D = GetCalcLayoutRegion
               Dim xMin As Single = rect.X
               Dim yMin As Single = rect.Y
               Dim xMax As Single = rect.X + rect.Width
               Dim yMax As Single = rect.Y + rect.Height
              
               ' initialize the random generator
               Dim random As System.Random = New System.Random
               If UseSeedValueForRandomGenerator Then
                 random = New System.Random(SeedValueForRandomGenerator)
               End If
              
               ' browse the nodes
               For Each node As Object In graphModel.Nodes
              
                 ' skip fixed nodes
                 If Not (PreserveFixedNodes AndAlso GetFixed(node)) Then
              
                   ' compute coordinates
                   Dim x As Single = xMin + (xMax - xMin) * CType(random.NextDouble, Single)
                   Dim y As Single = yMin + (yMax - yMin) * CType(random.NextDouble, Single)
                   '  move the node to the computed position
                   graphModel.MoveNode(node, x, y)
              
                   ' notify handlers on layout step performed events 
                   IncreasePercentageComplete(System.Math.Min( _
                       System.Threading.Interlocked.Increment(stepsGone),stepsGone-1) _
                        * 100 / stepsToGo)
              
                   ' Call ...IfNeeded to avoid that we sent events too often
                   OnLayoutStepPerformedIfNeeded
              
                 End If
               Next
              
               ' final notification that we are at 100% complete
               IncreasePercentageComplete(100)
               OnLayoutStepPerformed(False, False)
              
               ' Set the final result code
               layoutReport.Code = GraphLayoutReportCode.LayoutDone
             End Sub
             </code>
             </remarks>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetLayoutReport"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)"/>
             <seealso cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.BeforeLayout">
            <summary>
            Performs preprocessing operations before the layout of the entire
            graph.
            </summary>
            <remarks>
            This is called in each layout run once per graph.
            <p>
            The default implementation calls
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.BeforeLayout(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>. Subclasses
            can override this method to perform some initialization operations
            when appropriate.
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.BeforeLayoutOfSubgraph(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.BeforeLayoutOfSubgraph(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Performs preprocessing operations before the layout of each subgraph
            or connected component.
            </summary>
            <remarks>
            This is called in each layout run once per connected component. 
            <p>
            The default implementation does nothing. Subclasses can override
            this method to perform some initialization operations when
            appropriate. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.AfterLayoutOfSubgraph(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.AfterLayoutOfSubgraph(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Performs postprocessing operations after the layout of each subgraph
            or connected component.
            </summary>
            <remarks> 
            <p>
            The default implementation does nothing. Subclasses can override
            this method to perform some cleanup operations when appropriate. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.AfterLayoutOfSubgraph(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutRunning">
            <summary>
            Indicates whether the layout algorithm is running or not.
            </summary>
            <remarks>
            It returns <see langword="true"/> if the layout has been started and
            is not yet completed. It returns <see langword="false"/> otherwise. 
            <p>
            The layout is considered as started once the method 
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            is called.  It is considered as completed after this method returns
            or throws an exception. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)">
            <summary>
            Fires a graph layout <strong>LayoutStepPerformed</strong> event/ 
            </summary>
            <param name='layoutStarted'>
            Indicates whether it is the very first event during the execution
            of this layout.
            </param>
            <param name='layoutFinished'>
            Indicates whether it is the very last event during the execution
            of this layout.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformedIfNeeded">
            <summary>
            Calls <strong>layoutStepPerformed</strong> when necessary.
            </summary>
            <remarks> 
            <p>
            This method is provided for convenience in the implementation of
            layout algorithms. It calls
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)"/>
            when the last call finished earlier than the minimal busy time
            before this call. It avoids calling
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)"/>
            when the layout time has elapsed or when the layout is notified to
            stop immediately, if the algorithm supports these features. 
            </p>
            <p>
            This mechanism is used by some algorithms to avoid the overhead of
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)"/>
            becoming too high if it is called too often. Internal routines of
            layout algorithms can use
            <strong>callLayoutStepPerformedIfNeeded</strong> often without
            worrying that too many layout events are raised. 
            </p>
            <p>
            Layout algorithms call
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)"/>
            directly instead of using
            <strong>callLayoutStepPerformedIfNeeded</strong> when it is
            necessary to report a specific state (for example, when the layout
            report sets the code
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.LayoutStarted"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.LayoutFinished"/>). 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.GraphLayoutReport"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.MinBusyTime"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.StopImmediately"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnParameterChanged(System.String)">
            <summary>
            This method is called when a global layout parameter changed.
            </summary>
            <remarks>
            Global layout parameters affect all or many nodes and links. It sets
            the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/>
            to <see langword="false"/> to notify the layout instance that the
            layout is not anymore up to date. It also fires a graph layout
            parameter event. If you add new global parameters in your own
            subclass of <strong>GraphLayout</strong>, you should call this
            method each time they are modified. 
            </remarks>
            <seealso cref="E:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutPropertyChanged"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnParameterChanged(System.Object,System.String)">
            <summary>
            This method is called when a layout parameter for a specific node or
            link changed.
            </summary>
            <remarks>
            It sets the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/>
            to <see langword="false"/> to notify the layout instance that the
            layout is not anymore up to date. It also fires a graph layout
            parameter event. If you add new parameters for specific nodes and
            links in your own subclass of <strong>GraphLayout</strong>, you
            should call this method each time they are modified. 
            </remarks>
            <seealso cref="E:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutPropertyChanged"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsPreserveFixedNodes">
            <summary>
            Indicates whether the layout class allows the user to specify fixed
            nodes.
            </summary>
            <remarks>
            Fixed nodes are not moved during the layout. 
            <p>
            The default implementation always returns <see langword="false"/>.
            Subclasses can override this method in order to return
            <see langword="true"/>, that is, to indicate that this option is
            supported. 
            </p>
            <p>
            Note that fixed nodes can be handled differently by different layout
            algorithms. Some layout algorithms can adapt the layout of the
            nonfixed nodes to take into account the current positions of the
            fixed nodes. For details, see the documentation of the layout
            algorithm. 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/>
            '/&gt;
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetFixed(System.Object,System.Boolean)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetFixed(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.UnfixAllNodes"/>
            <returns>Always <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetFixed(System.Object,System.Boolean)">
            <summary>
            Sets the specified node or link as fixed.
            </summary>
            <remarks> 
            <p>
            Fixed nodes are not moved during the layout only if the value of the
            property 
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/> is 
            <see langword="true"/>. <br/>By default, no node is fixed. 
            </p>
            <p>
            Fixed links are not reshaped during the layout only if the value of the
            property 
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/> is 
            <see langword="true"/>. <br/>By default, no link is fixed. 
            </p>
            <p>
            If the argument <paramref name="nodeOrLink"/> is a node, the setter
            of this property throws an exception if the layout class does not support fixed
            nodes. If the argument <paramref name="nodeOrLink"/> is a link, the setter
            of this property throws an
            exception is thrown an exception if the layout class does not support fixed
            links. <br/>An exception is also thrown if the
            node or link does not belong to the attached graph model. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetFixed(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsPreserveFixedNodes"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/>
            '/&gt;
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.UnfixAllNodes"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsPreserveFixedLinks"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/>
            '/&gt;
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.UnfixAllLinks"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetFixed(System.Object)">
            <summary>
            Returns whether the node or link is specified as fixed.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetFixed(System.Object,System.Boolean)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/>
            '/&gt;
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.UnfixAllNodes"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsPreserveFixedNodes"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/>
            '/&gt;
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.UnfixAllLinks"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsPreserveFixedLinks"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.UnfixAllNodes">
            <summary>
            Removes the fixed attribute from all nodes in the graph model.
            </summary>
            <remarks> 
            <p>
            An exception is thrown if the layout class does not support this
            option or if there is no attached graph model. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsPreserveFixedNodes"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/>
            '/&gt;
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetFixed(System.Object,System.Boolean)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetFixed(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsPreserveFixedLinks">
            <summary>
            Indicates whether the layout class allows the user to specify fixed
            links.
            </summary>
            <remarks>
            Fixed links are not reshaped during the layout. <br/> The default
            implementation always returns <see langword="false"/>. Subclasses
            can override this method in order to return <see langword="true"/>;
            that is, to indicate that this option is supported. 
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/>
            '/&gt;
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetFixed(System.Object,System.Boolean)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetFixed(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.UnfixAllLinks"/>
            <returns>always <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.UnfixAllLinks">
            <summary>
            Removes the fixed attribute from all links in the graph model.
            </summary>
            <remarks> 
            <p>
            An exception is thrown if the layout class does not support this
            option or if there is no attached graph model. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsPreserveFixedLinks"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/>
            '/&gt;
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetFixed(System.Object,System.Boolean)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetFixed(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsPercentageComplete">
            <summary>
            Indicates whether the layout class can estimate the percentage of
            completion during the run of layout.
            </summary>
            <remarks>
            If supported, the percentage is stored in the layout report and can
            be retrieved by any event handler for the
            <strong>LayoutStepPerformed</strong> event. For instance, this
            feature can be used by a progress bar that shows how much of the
            layout has already been performed. 
            <p>
            The default implementation always returns <see langword="false"/>.
            Subclasses can override this method in order to return
            <see langword="true"/>; that is, to indicate that this option is
            supported. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IncreasePercentageComplete(System.Int32)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.PercentageComplete"/>
            <returns>Always <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IncreasePercentageComplete(System.Int32)">
            <summary>
            Increases the percentage of completion that is stored in the layout
            report to the input value.
            </summary>
            <remarks>
            Layout algorithms that support the percentage complete feature
            should call this method during the run of the layout. This method
            does not set the percentage to a lower value than the previous
            value. It also does not set the value to more than 100%. It silently
            ignores wrong input values. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsPercentageComplete"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.PercentageComplete"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsStopImmediately">
            <summary>
            Indicates whether the layout class can interrupt the current run of
            layout immediately in a controlled way.
            </summary>
            <remarks> 
            <p>
            The default implementation always returns <see langword="false"/>.
            Subclasses can override this method in order to return
            <see langword="true"/>, that is, to indicate that this option is
            supported. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.StopImmediately"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsStoppedImmediately"/>
            <returns>Always <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.StopImmediately">
            <summary>
            Stops the running layout algorithm as soon as possible.
            </summary>
            <remarks> 
            <p>
            This method only sets the flag
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsStoppedImmediately"/>
            to <see langword="true"/>. It is the sole responsibility of the
            implementation of the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout"/> to
            react in an appropriate way. Layout algorithms that support the
            immediate stop feature should check this flag from time to time and
            react when the flag
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsStoppedImmediately"/>
            changes to <see langword="true"/>. 
            </p>
            <p>
            This method can be used when multiple threads are used for layout
            and GUI control. The GUI control thread calls this method to notify
            the layout thread that the layout run must be stopped. This method
            returns <see langword="true"/> if the stop is possible and
            <see langword="false"/> otherwise. The layout algorithm will perform
            final cleanup operations before terminating. Therefore, the layout
            thread will continue until the cleanup operations are finished. The
            GUI thread, however, returns immediately from this method. 
            </p>
            <p>
            Layout algorithms that are stopped in this way set the result code
            of the layout report either to
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndValid"/> or to
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsStopImmediately"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsStoppedImmediately"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsStoppedImmediately">
            <summary>
            Returns <see langword="true"/> if the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.StopImmediately"/>
            was called.
            </summary>
            <remarks>
            Layout algorithm classes can use this method to recognize that it
            was requested to stop the current layout run. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.StopImmediately"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsStoppedImmediately"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutOfConnectedComponentsEnabledByDefault">
            <summary>
            Returns <see langword="true"/> if the connected components layout
            mechanism is enabled by default.
            </summary>
            <remarks>
            Otherwise, the method returns <see langword="false"/>. 
            <p>
            The default implementation always returns <see langword="false"/>. 
            </p>
            <p>
            Subclasses can override this method in order to return
            <see langword="true"/>, that is, to indicate that the connected
            components layout is enabled by default. 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetLayoutOfConnectedComponentsReport">
            <summary>
            Returns the layout report containing information about the behavior
            of the connected components layout.
            </summary>
            <remarks> 
            <p>
            This method returns the instance of the layout report created by the
            connected components layout instance. 
            </p>
            <p>
            If the last run of the layout did not use the connected components
            layout (because either the graph was connected, the layout does not
            support this feature, this feature was disabled, or an exception
            occurred during the layout process), the method returns
            <see langword="null"/>. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLayoutOfConnectedComponents"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLayoutRegion">
            <summary>
            Indicates whether the layout class can control the position and/or
            size of the graph drawing according to a user-defined region (a
            rectangle) or a user-defined area of a manager view.
            </summary>
            <remarks> 
            <p>
            The default implementation always returns <see langword="false"/>. 
            </p>
            <p>
            Subclasses can override this method in order to return
            <see langword="true"/>, that is, to indicate that this option is
            supported. 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetCalcLayoutRegion"/>
            <returns>Always <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetSpecLayoutRegion">
            <summary>
            Returns the rectangle that defines the layout region, as
            specified using 
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/> and 
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegionMode"/>.
            </summary>
            <remarks> 
            <p>
            Note that if the attached graph is an <strong>GraphicContainer</strong> or an
            <strong>GraphicContainerAdapter</strong>, the dimensions of the rectangle are
            in graphic container coordinates, and not in diagram view coordinates. 
            </p>
            <p>
            Several cases can occur:
            <br/>1. If the layout region mode is 
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutRegionMode.RectangleInGraphicContainerCoordinates"/>,
            and a rectangle has been specified for the layout region property, it returns this 
            rectangle with no transformation. 
            <br/>2. If the layout region mode is 
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutRegionMode.RectangleInViewCoordinates"/>,
            and a rectangle has been specified for the layout region property, it returns this 
            rectangle transformed to graphic container coordinates using the transformer of
            the reference view. 
            <br/>3. If the layout region mode is 
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutRegionMode.ViewBounds"/>,
            and a rectangle has been specified for the layout region property, 
            it returns a rectangle with the attributes X=0, Y=0 and the
            Width/Height equal to the current Width/Height of the view transformed
            to graphic container coordinates using the current transformer of the view.
            (However, the transformation to graphic container coordinates is not done if
            the coordinates mode is
            <see cref="F:ILOG.Diagrammer.GraphLayout.CoordinatesMode.ViewCoordinates"/>.) 
            <br/>4. If no layout region is specified, the default behavior is to 
            return a rectangle with the dimensions W=0, Y=0
            and the Width/Height equal to the current Width/Height of the first
            attached view, transformed to graphic container coordinates using the
            transformer of the view. (However, the transformation to graphic container
            coordinates is not done if the coordinates mode is
            <see cref="F:ILOG.Diagrammer.GraphLayout.CoordinatesMode.ViewCoordinates"/>.)
            If no view is
            attached, or the width or height of the view is zero, the method
            returns <see cref="F:ILOG.Diagrammer.Rectangle2D.Invalid"/>. 
            </p>
            <p>
            The implementation of the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout"/> in
            subclasses of <strong>GraphLayout</strong> is solely responsible for
            whether the rectangle returned by this method is taken into account
            when calculating the layout, and in which manner. 
            </p>
            <p>
            The method returns
            <see cref="F:ILOG.Diagrammer.Rectangle2D.Invalid"/> in the following cases: 
            <UL>
            <LI> The layout region mechanism is not supported (that is,
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLayoutRegion"/>
            returns <see langword="false"/>).</LI> 
            <LI> The layout region mode requires to consider the size of the view but
            the view has a width or height equal to zero, or no view is attached to the
            <see cref="T:ILOG.Diagrammer.GraphicContainer"/>, or 
            no graph model is attached to the layout.
            </LI> 
            </UL>
            </p>
            <p>
            Note that, when the layout region depends on the size of a view, 
            the layout region can change with time, for example because the
            size of the view changes, or its transformer is changed. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLayoutRegion"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegionMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetCalcLayoutRegion"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetCalcLayoutRegion">
            <summary>
            Returns the rectangle that defines the layout region parameter.
            </summary>
            <remarks> 
            <p>
            This method first tries to use the layout region specification by
            calling
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetSpecLayoutRegion"/>.
            If this method does not return a
            <see cref="F:ILOG.Diagrammer.Rectangle2D.Invalid"/>, this rectangle is
            returned. Otherwise, the method tries to estimate an appropriate
            layout region according to the number and size of the nodes in the
            attached graph. If no graph is attached or the attached graph is
            empty, it returns a default rectangle <strong>(0, 0, 1000,
            1000)</strong>. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLayoutRegion"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetSpecLayoutRegion"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsFitToView">
            <summary>
            Returns <see langword="true"/> if the graph drawing must fit
            (exactly or approximately) an area of a given diagram view.
            </summary>
            <remarks>
            This is the case when the layout region mode is 
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutRegionMode.RectangleInViewCoordinates"/>
            or <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutRegionMode.ViewBounds"/>.
            Otherwise, the method returns <see langword="false"/>. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLayoutRegion"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegionMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsRandomGenerator">
            <summary>
            Indicates whether the layout class uses randomly generated numbers
            (or randomly chosen parameters) for which it can accept a
            user-defined seed value.
            </summary>
            <remarks>
            When you perform the same layout on the same graph several times and
            use the same user-defined seed value (or some other constant value),
            the same random numbers are generated and, if the algorithm is
            deterministic, you obtain the same drawing of the graph model. If
            you want different drawings each time you perform the layout, you
            can modify the seed value and set the property 
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.UseSeedValueForRandomGenerator"/> 
            to the value <see langword="true"/>. 
            <p>
            For example, you can use this parameter in the implementation of the
            method <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout"/>
            in the following way: 
            </p>
            <code>
            Random random;
            if (isUseSeedValueForRandomGenerator())
              random = new Random(getSeedValueForRandomGenerator());
            else
              random = new Random();
            </code> 
            <p>
            The default implementation always returns <see langword="false"/>. 
            </p>
            <p>
            Subclasses can override this method in order to return
            <see langword="true"/>, that is, to indicate that this option is
            supported. 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.SeedValueForRandomGenerator"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.UseSeedValueForRandomGenerator"/>
            <returns>Always <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsAllowedTime">
            <summary>
            Indicates whether the layout class can stop the layout computation
            when a user-defined allowed time is exceeded.
            </summary>
            <remarks> 
            <p>
            The default implementation always returns <see langword="false"/>. 
            </p>
            <p>
            Subclasses can override this method in order to return
            <see langword="true"/>, that is, to indicate that this option is
            supported. 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/>
            '/&gt;
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutTimeElapsed"/>
            <returns>Always <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutTimeElapsed">
            <summary>
            Returns <see langword="true"/> if, at the moment the method is
            called, the allowed layout time is exceeded; returns
            <see langword="false"/> otherwise.
            </summary>
            <remarks> 
            <p>
            You can call this method inside the implementation of the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout"/>. 
            </p>
            <p>
            Always returns <see langword="false"/> if the layout does not
            support this mechanism. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsAllowedTime"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/>
            '/&gt;
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLayoutOfConnectedComponents">
            <summary>
            Indicates whether the layout class can cut the attached graph into
            connected components, apply itself on each connected component
            separately, and then use the layout instance returned by the
            property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents"/>
            to position the connected components.
            </summary>
            <remarks> 
            <p>
            The default implementation always returns <see langword="false"/>.
            Subclasses can override this method in order to return
            <see langword="true"/>, that is, to indicate that this option is
            supported. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
            <returns>Always <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.ModelContentsChanged(System.Object,ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs)">
            <summary>
            Invoked when the structure or the geometry of the graph changes.
            </summary>
            <remarks>
            If the type of the event is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.StructureChanged"/>,
            the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.StructureUpToDate"/>
            is set to <see langword="false"/>.
            Or, if the type of the event is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.GeometryChanged"/>,
            the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.GeometryUpToDate"/>
            is set to <see langword="false"/>.
            <p>
            Then, the method calls
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CleanNode(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)"/> if
            the type of the event is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.NodeRemoved"/> or
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CleanLink(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)"/> if
            the type of the event is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.LinkRemoved"/>. The
            node or link that is passed to these methods is obtained using
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs.NodeOrLink"/>.
            </p>
            <p>
            Finally, if the auto layout is enabled (that is, the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AutoLayout"/>
            is <see langword="true"/>) the method calls
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformAutoLayout"/>
            to redo the layout.
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AutoLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformAutoLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformAutoLayout">
            <summary>
            Performs the layout again following a structural or geometric change
            of the graph.
            </summary>
            <remarks> 
            <p>
            You should not call this method directly. The method is called by
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.ModelContentsChanged(System.Object,ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs)"/>.
            The default implementation checks whether an auto layout handler is
            installed. If a handler is installed, it calls
            <see cref="M:ILOG.Diagrammer.GraphLayout.IAutoLayoutHandler.PerformAutoLayout(System.Object,System.Collections.ArrayList)"/>,
            passing <strong>this</strong> as layout and <see langword="null"/>
            as vector. Otherwise it simply calls the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean)"/>
            with both <strong>force</strong> and <strong>redraw</strong>
            arguments of <see langword="true"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AutoLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AutoLayoutHandler"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.ModelContentsChanged(System.Object,ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLinkConnectionBox">
            <summary>
            Indicates whether the layout class can use a link connection box
            interface to calculate the end points of a link.
            </summary>
            <remarks>
            The link connection box interface is an object that provides the
            rectangle to which the links are connected for each node and the
            tangential shift offset at each side for the connection points.
            <p>
            If the layout class supports this feature and a connection box
            interface object is set at the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>,
            the layout algorithm uses this object to calculate the connection
            points for links.
            If additionally the clip mode is enabled
            (see <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkClipping"/>)
            the layout tells the graph model to obtain the final connection points
            by clipping against the shape of the nodes via the reshape mode of
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/>.
            </p>
            <p>
            The default implementation always returns <see langword="false"/>.
            Subclasses can override this method in order to return
            <see langword="true"/>, that is, to indicate that this option is
            supported.
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkClipping"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/>
            <seealso cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Clip"/>
            <seealso cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.MoveAndClip"/>
            <returns>Always <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetProperty(System.String,System.Object)">
            <summary>
            Sets the value of a property for the layout instance.
            </summary>
            <remarks>
            If <paramref name="val"/> is <see langword="null"/>, the property is
            removed. Otherwise, the property value is set to
            <paramref name="val"/>. 
            </remarks>
            <param name="key"> The key string for the property.
            </param>
            <param name="val"> The new value of the property.
            </param>
            <returns>The value that was previously stored for
            <paramref name="key"/>, or <see langword="null"/> if none.
            </returns>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetProperty(System.String)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetProperty(System.String)">
            <summary>
            Returns the value of a property of the layout instance.
            </summary>
            <remarks>
            The method returns <see langword="null"/> if the property does not
            exist. 
            </remarks>
            <param name="key"> The key string for the property.
            </param>
            <returns>The value stored for <paramref name="key"/>.
            </returns>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetProperty(System.String,System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetProperty(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a property for a node or a link, using a given
            graph model.
            </summary>
            <remarks> 
            <p>
            If <paramref name="val"/> is <see langword="null"/>, the property is
            removed. Otherwise, the property value is set to
            <paramref name="val"/>. 
            </p>
            <p>
            Notice that the method does not check whether the node or link
            actually belongs to <paramref name="graphModel"/>. The input graph
            model does not need to be the graph model currently attached to this
            layout instance. 
            </p>
            </remarks>
            <param name="graphModel"> The graph model used for storing the
            property.
            </param>
            <param name="nodeOrLink"> The node or link for which the property is
            to be set.
            </param>
            <param name="key"> The key string for the property.
            </param>
            <param name="val"> The new value of the property.
            </param>
            <returns>The value that was previously stored for
            <paramref name="key"/>, or <see langword="null"/> if none.
            </returns>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetProperty(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object,System.String)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetProperty(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object,System.String)">
            <summary>
            Returns the value of a property of the layout instance.
            </summary>
            <remarks>
            The method returns <see langword='null'/> if the property does not
            exist. 
            <p>
            Notice that the method does not checks whether the node or link
            actually belongs to <paramref name='graphModel'/>. The input graph
            model does not need to be the graph model currently attached to this
            layout instance. 
            </p>
            </remarks>
            <param name='graphModel'> The graph model used for storing the
            property.
            </param>
            <param name='nodeOrLink'> The node or link for which the property is
            to be retrieved.
            </param>
            <param name='key'> The key string for the property.
            </param>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegionMode">
            <summary>
            Gets or sets the layout region mode.
            </summary>
            <remarks>
            The layout region mode determines how the <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/> rectangle
            is interpreted.
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion">
            <summary>
            Gets or sets the layout region.
            </summary>
            <remarks>
            <para>
            For subclasses that support this parameter, the layout region is
            usually the rectangle that the graph must fit (exactly or
            approximately) after the layout is performed, or the rectangle which
            influences the position and/or size of the resulting layout. The way
            the layout region parameter is taken into account is the sole
            responsibility of the subclasses. 
            </para>
            <para>
            The layout region is interpreted according to the <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegionMode"/> property.
            </para>
            <para>
            If <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegionMode"/> is <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutRegionMode.RectangleInGraphicContainerCoordinates"/>,
            the <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/> is interpreted as a rectangle in the coordinate system of the
            <see cref="T:ILOG.Diagrammer.GraphicContainer"/> to which this layout is attached.
            </para>
            <para>
            If <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegionMode"/> is <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutRegionMode.RectangleInViewCoordinates"/>,
            the <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/> is interpreted as a rectangle in the coordinate system of the
            reference view.
            </para>
            <para>
            If <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegionMode"/> is <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutRegionMode.ViewBounds"/>,
            the <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/> is ignored, and the layout region is set to the visible
            area of the reference view.
            </para>
            <para>
            The reference view is the first view (an object of type <see cref="T:ILOG.Diagrammer.IDiagramView"/>) that displays the
            <see cref="T:ILOG.Diagrammer.GraphicContainer"/> to which this layout is attached.
            </para>
            <para>
            Note: if the width or height of the <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/> are less than zero, the behavior is
            always as if <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegionMode"/> was <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutRegionMode.ViewBounds"/>.
            </para>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegionMode"/>
        </member>
        <member name="E:ILOG.Diagrammer.GraphLayout.GraphLayout.Attached">
            <summary>
            Occurs when the graph layout algorithm is attached to a graphic container.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphLayout.GraphLayout.Detached">
            <summary>
            Occurs when the graph layout algorithm is detached from a graphic container.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphLayout.GraphLayout.Disposed">
            <summary>
            Occurs when the graph layoutobject is disposed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.Site">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite"/> of the graph layout object.
            </summary>
            <value>The <see cref="T:System.ComponentModel.ISite"/> associated with the graph layout object, if any.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.Name">
            <summary>
            Gets or sets the name of the graph layout object.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutStepPerformed">
            <summary>
            Occurs when the layout algorithm has finished a step in the
            algorithm.
            </summary>
            <remarks>
            This allows you to receive information during the execution of
            the layout (after each iteration, for example).
            You can use a event handler for example to implement a progress
            bar that shows the progress of the layout.
            <p>Note that to have an event handler notified, the subclass of
            <strong>GraphLayout</strong> must call
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)"/>.
            </p>
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutPropertyChanged">
            <summary>
            Occurs when a layout parameter has changed.
            </summary>
            <remarks>
            This allows you to receive an event each time the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnParameterChanged(System.String)"/>,
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnParameterChanged(System.Object,System.String)"/>, and
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/>
            is called, that is, each time a layout parameter changes and each
            time the layout was successfully performed.
            Different to <see cref="E:ILOG.Diagrammer.GraphLayout.GraphLayout.PropertyChanged"/>, this receives events
            about global <i>and local</i> parameter changes per node and link.
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphLayout.GraphLayout.PropertyChanged">
            <summary>
            Occurs when a property has changed.
            </summary>
            <remarks>
            This allows you to receive an event each time a global property
            of the layout instance has changed.
            It is nearly the same as <see cref="E:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutPropertyChanged"/>,
            however it receives only the global changed. It does not recieve
            those events that change a local parameter of a node or link.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.MinBusyTime">
            <summary>
            Gets or sets the minimal time that the layout algorithm can be busy.
            </summary>
            <remarks>
            This is the time between two calls of
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)"/>
             when the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformedIfNeeded"/>
            is used. 
            <p>
            The objective is to avoid the overhead of
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)"/>
            becoming too high if the method is called too often. Internal
            routines of layout algorithms usually call
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformedIfNeeded"/>,
            which calls
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)"/>
            if the time since the last call was at least the minimal busy time. 
            </p>
            <p>
            The default value is 50 (milliseconds). 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformedIfNeeded"/>
            <value>The minimal time that the layout algorithm can be busy.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.StructureUpToDate">
            <summary>
            Gets or sets whether the structure of the graph is up to date.
            </summary>
            <remarks> 
            <p>
            Returns <see langword="false"/> if at least one modification
            occurred in the structure of the graph model (a node or link was
            added or removed) since the last time the layout was successfully
            performed on the same graph model using this layout instance or if
            the layout has never been performed successfully on the same graph
            model. The following are considered to be modifications of the
            structure: adding or removing a node or link, or modifying the
            filter (see <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Filter"/>). 
            </p>
            <p>
            Returns <see langword="true"/> if no changes occurred. 
            </p>
            <p>
            This method is automatically called by
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutNeeded"/>.
            
            </p>
            <p>
            Note that when the layout is performed successfully (that is,
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/> called on the layout report
            returns <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.LayoutDone"/>), the layout
            instance is automatically notified that the structure is now
            up-to-date. It is also automatically notified of the topological
            modifications of the graph model. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutNeeded"/>
            <value>Whether the structure of the graph is up to date.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.GeometryUpToDate">
            <summary>
            Gets or sets whether the geometry of the graph is up to date.
            </summary>
            <remarks> 
            <p>
            Returns <see langword="false"/> if at least one node or link was
            moved or reshaped since the last time the layout was successfully
            performed on the same graph model or if the layout has never been
            performed successfully on the same graph model. 
            </p>
            <p>
            Returns <see langword="true"/> if no changes occurred. 
            </p>
            <p>
            This method is automatically called by
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutNeeded"/>.
            
            </p>
            <p>
            Note that when the layout is performed successfully (that is,
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/> called on the layout report
            returns <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.LayoutDone"/>), the layout
            instance is automatically notified that the geometry of the graph is
            now up-to-date. It is also automatically notified of the
            modifications of the geometry of the graph model. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutNeeded"/>
            <value>Whether the geometry of the graph is up to date.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.CoordinatesMode">
            <summary>
            Gets or sets the coordinates mode to be used during layout.
            </summary>
            <remarks> 
            <p>
            Valid values are: 
            <UL> 
            <p>
            <LI>
            <see cref="F:ILOG.Diagrammer.GraphLayout.CoordinatesMode.GraphicContainerCoordinates"/>
            - The geometry of the graph is computed using the coordinate space
            of the graphic container (that is, the attached
            <see cref="T:ILOG.Diagrammer.GraphicContainer"/>) without applying any
            transformation. 
            <p>
            This mode should be used if you visualize the graph at zoom level 1,
            or you do not visualize it at all, or the graph contains only fully
            zoomable objects. In all these cases there is no need to take the
            transformer into account during the layout. 
            </p>
            <p>
            Note that in this mode the dimensional parameters of the layout
            algorithms are considered as being specified in graphic container
            coordinates. 
            </p>
            </LI> 
            </p>
            <p>
            <LI>
            <see cref="F:ILOG.Diagrammer.GraphLayout.CoordinatesMode.ViewCoordinates"/>
            - The geometry of the graph is computed in the coordinate space of
            the diagram view. More exactly, all the coordinates are transformed
            using the current reference transformer. 
            <p>
            This mode should be used if you want the dimensional parameters of
            the layout algorithms to be considered as being specified in diagram
            view coordinates. 
            </p>
            </LI> 
            </p>
            <p>
            <LI>
            <see cref="F:ILOG.Diagrammer.GraphLayout.CoordinatesMode.InverseViewCoordinates"/>
            - The geometry of the graph is computed using the coordinate space
            of the diagram view and then applying the inverse transformation.
            This mode is equivalent to the "graphic container coordinates" mode
            if the geometry of the graphic objects strictly obeys the
            transformer. (A small difference may exist because of the limited
            precision of the computations.) 
            <p>
            On the contrary, if some graphic objects are either nonzoomable  or
            semizoomable (for example, links with a maximum line width), this
            mode gives different results than the graphic container coordinates
            mode. These results are optimal if the graph is visualized using the
            same transformer as the one taken into account during the layout. 
            </p>
            <p>
            Note that in this mode the dimensional parameters of the layout
            algorithms are considered as being specified in graphic container
            coordinates. 
            </p>
            </LI> 
            </p>
            </UL> 
            </p>
            <p>
            The default value is
            <see cref="F:ILOG.Diagrammer.GraphLayout.CoordinatesMode.InverseViewCoordinates"/>.
            
            </p>
            <p>
            This option is useful only if the attached graph model is an
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/> (or a subclass). Otherwise, it
            has no effect. Note: the coordinates mode of the layout is used only
            while this layout is running. If layout is not running, operations
            on the graphic container adapter use the coordinates mode that was
            set on the graphic container adapter directly (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.CoordinatesMode"/>). 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.CoordinatesMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.ReferenceTransform"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.ReferenceView"/>
            <value>The coordinates mode to be used during layout.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate">
            <summary>
            Gets or sets whether the layout parameters are up to date.
            </summary>
            <remarks> 
            <p>
            Returns <see langword="false"/> if at least one parameter was
            modified since the last time the layout was successfully performed
            on the same graph or if the layout has never been performed
            successfully on the same graph. 
            </p>
            <p>
            Returns <see langword="true"/> if no parameters changed since the
            last time the layout was successfully performed on the same graph
            model. 
            </p>
            <p>
            If a layout class supports the layout of the connected components
            (that is,
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLayoutOfConnectedComponents"/>
            returns <see langword="true"/>) and if this mechanism is enabled
            (that is,
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>
            returns <see langword="true"/>), an additional test is performed to
            check that the layout of the connected components is up-to-date.
            Therefore, the property is <see langword="false"/> if the graph is
            disconnected and the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/>
            called on the layout instance returned by
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents"/>
            returns <see langword="false"/>. 
            </p>
            <p>
            If a layout class supports the layout region mechanism (that is,
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLayoutRegion"/>
            returns <see langword="true"/>) and if a diagram view must be taken
            into account for the computation of the layout region in manager
            coordinates (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetCalcLayoutRegion"/>),
            an additional test is performed to verify that the size of the
            diagram view has changed. The property is <see langword="false"/> if
            a change occurred.  
            </p>
            <p>
            This method is automatically called by
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutNeeded"/>.
            
            </p>
            <p>
            Note that when the layout is performed successfully (that is,
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/> called on the layout report
            returns <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.LayoutDone"/>), the layout
            instance is automatically notified that the parameters are now
            up-to-date. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutNeeded"/>
            <value>Whether the layout parameters are up to date.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.InputCheckEnabled">
            <summary>
            Gets or sets whether the checks for the nodes and/or links provided
            as arguments for the different methods of the layout algorithms are
            enabled.
            </summary>
            <remarks> 
            <p>
            If enabled, methods that require a node or a link as an argument
            check whether the object they receive is really a node or a link in
            the attached graph (using the methods
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsNode(System.Object)"/> and
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsLink(System.Object)"/>). 
            </p>
            <p>
            The default value is <see langword="true"/>. The checks can be
            disabled to avoid their overhead cost. 
            </p>
            </remarks>
            <value>Whether the checks for the nodes and/or links provided as
            arguments for the different methods of the layout algorithms are
            enabled.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes">
            <summary>
            Gets or sets whether the layout avoids movement of fixed nodes.
            </summary>
            <remarks>
            If the argument is <see langword="true"/>, specifies that the layout
            is not allowed to move the nodes indicated as fixed by the user. If
            the argument is <see langword="false"/>, the layout is free to move
            all the nodes of the graph. (This does not change the setting for
            the fixed nodes, which can still be used at any time in the future.)
            
            <p>
            The default value is <see langword="false"/>. 
            </p>
            <p>
            An exception is thrown if the layout class does not support this
            option. 
            </p>
            <p>
            Note that fixed nodes can be handled differently by different layout
            algorithms. Some layout algorithms can adapt the layout of the
            nonfixed nodes to take into account the current positions of the
            fixed nodes. For details, see the documentation of the layout
            algorithm. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetFixed(System.Object,System.Boolean)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetFixed(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsPreserveFixedNodes"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.UnfixAllNodes"/>
            <value>Whether the layout avoids movement of fixed nodes.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks">
            <summary>
            Gets or sets whether the layout avoids movement of fixed links.
            </summary>
            <remarks>
            If the argument is <see langword="true"/>, specifies that the layout
            is not allowed to reshape the links indicated as fixed by the user.
            If the argument is <see langword="false"/>, the layout is free to
            reshape all the links of the graph. (This does not change the
            setting for the fixed links, which can still be used at any time in
            the future.) <br/>The default value is <see langword="false"/>. 
            <p>
            An exception is thrown if the layout class does not support this
            option. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetFixed(System.Object,System.Boolean)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetFixed(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsPreserveFixedLinks"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.UnfixAllLinks"/>
            <value>Whether the layout avoids movement of fixed links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled">
            <summary>
            Gets or sets whether the generic connected component layout
            mechanism is enabled.
            </summary>
            <remarks>
            If enabled on a layout class that supports this mechanism (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLayoutOfConnectedComponents"/>),
            the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
            cuts the attached graph model into connected components and lays out
            each connected component separately. Then the connected components
            are placed using the layout instance returned by the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents"/>.
            
            <p>
            Notice that the connected component layout is not used if the graph
            is connected. 
            </p>
            <p>
            An exception is thrown if the layout does not support this
            mechanism. 
            </p>
            <p>
            The default value is the value returned by the property
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutOfConnectedComponentsEnabledByDefault"/>.
            
            </p>
            </remarks>
            <value>Set to <see langword="true"/> to enable the connected
            component layout mechanism, or <see langword="false"/> to disable.
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents">
            <summary>
            Gets or sets the layout instance that lays out the connected
            components of the graph.
            </summary>
            <remarks>
            When this property is not set, a default layout instance (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents"/>
            is used. You can set this property to <see langword="null"/> to
            return to the default connected components layout instance. 
            <p>
            An exception is thrown if the layout does not support this
            mechanism. 
            </p>
            <p>
            Note the following points: 
            <UL>
            <LI>The layout instance passed as the argument cannot be used
            independently as long as it is set as a connected component
            layout.</LI> 
            <LI>The connected component layout is not used if the graph is
            connected.</LI> 
            </UL> 
            </p>
            </remarks>
            <value>The layout instance to set, or <see langword="null"/> to
            return to the default layout instance.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.SeedValueForRandomGenerator">
            <summary>
            Gets or sets the seed value for the random generator.
            </summary>
            <remarks>
            The default value is <strong>0</strong>. The user-defined seed value
            is used only if you set the property 
            <strong>UseSeedValueForRandomGenerator</strong> to 
            <see langword="true"/>.
            <p>
            An exception is thrown if the layout does not support this
            mechanism.
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsRandomGenerator"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.UseSeedValueForRandomGenerator"/>
            '/&gt;<value>The seed value for the random generator.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.UseSeedValueForRandomGenerator">
            <summary>
            Gets or sets whether the user-defined seed value should be used for
            the random generator.
            </summary>
            <remarks> 
            <p>
            An exception is thrown if the layout does not support this
            mechanism. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsRandomGenerator"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.SeedValueForRandomGenerator"/>
            '/&gt;<value>Whether the user-defined seed value should be used for the random generator.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime">
            <summary>
            Gets or sets the upper limit for the duration of the layout
            algorithm.
            </summary>
            <remarks> 
            <p>
            When an iterative layout algorithm is used, the iterations can be
            stopped when this time is exceeded. Noniterative algorithms can also
            use this parameter as an upper limit for the computation time. The
            default value is normally <strong>32000</strong> (32 seconds).
            Subclasses that support this feature can use a different default
            value depending on their particular behavior. Layout algorithms that
            are stopped in this way set the result code of the layout report
            either to <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndValid"/> or to
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/>. 
            </p>
            <p>
            When the connected components of disconnected graphs are laid out
            separately (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLayoutOfConnectedComponents"/>),
            the specified allowed time is considered as the total time for the
            layout of all the connected components plus the time for the
            connected components layout. 
            </p>
            <p>
            Note that the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
            does NOT automatically stop the layout when the allowed time is
            exceeded. It is the sole responsibility of the implementation of the
            method <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout"/>
            to do this. 
            </p>
            <p>
            An exception is thrown if the layout does not support this
            mechanism. 
            </p>
            </remarks>
            <value>The allowed time in milliseconds.
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsAllowedTime"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutTimeElapsed"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AutoLayoutHandler">
            <summary>
            Gets or sets the auto layout handler.
            </summary>
            <value>The auto layout handler.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AutoLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformAutoLayout"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AutoLayout">
            <summary>
            Gets or sets whether the auto layout mode is enabled.
            </summary>
            <remarks>
            If the argument is <see langword="true"/>, the layout is
            automatically performed each time the layout instance is notified
            that the geometry or the structure of the graph has changed. 
            <p>
            The default value is <see langword="false"/>. 
            </p>
            <p>
             
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.ModelContentsChanged(System.Object,ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformAutoLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AutoLayoutHandler"/>
            <value>Whether the auto layout mode is enabled.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider">
            <summary>
            Gets or sets the link connection box interface for the connection
            points of links.
            </summary>
            <remarks>
            The link connection box interface is an object that provides the
            rectangle to which the links are connected for each node and the
            tangential shift offset at each side for the connection points. 
            <p>
            By default, the layout algorithm places the connection points of the
            links relative to the bounding box of the nodes (see
            <see cref="P:ILOG.Diagrammer.GraphicObject.Bounds"/> and
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.BoundingBox(System.Object)"/>). 
            </p>
            <p>
            By setting a link connection box interface, the links can be
            connected relative to a different box (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.INodeBoxProvider.GetBox(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)"/>). It is furthermore possible
            to "shift" the links tangentially by using the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.ILinkConnectionBoxProvider.GetTangentialOffset(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object,ILOG.Diagrammer.GraphLayout.NodeSide)"/> from
            the interface <strong>LinkConnectionBoxInterface</strong>: 
            <UL>
            <LI> On the "top" and "bottom" sides of a node, the connection
            points are moved to the right if the offset is positive and to the
            left if the offset is negative.</LI> 
            <LI> On the "left" and "right" sides of a node, the connection
            points are moved to the bottom if the offset is positive and to the
            top if the offset is negative.</LI> 
            </UL>
            The details of how the link connection box is used depend on the
            specific layout algorithm. If the layout class supports the link
            connection box and link clipping, this method calculates the initial
            connection points with the link connection box interface and obtains
            the final connection points by clipping with the link clip
            interface. 
            </p>
            <p>
            You can call this method with a <see langword="null"/> argument to
            restore the default behavior. 
            </p>
            <p>
            An exception is thrown if the layout does not support this
            mechanism. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLinkConnectionBox"/>
            <value>The link connection box interface for the connection points
            of links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkClipping">
            <summary>
            Gets or sets whether links should be clipped at the shape of the
            end nodes.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLinkConnectionBox"/>
            <value>Whether links should be clipped at the shape of the
            end nodes.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.DefaultLinkConnectionBoxProvider">
            <summary>
            A default implementation of <see cref="T:ILOG.Diagrammer.GraphLayout.ILinkConnectionBoxProvider"/>
            that uses the extended properties defined by the
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetRadialOffset(System.Object)"/>
            and <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLinkConnectionBoxProvider.GetTangentialOffset(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object,ILOG.Diagrammer.GraphLayout.NodeSide)"/> methods.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.ILinkConnectionBoxProvider">
             <summary>
             An interface used to customize the computation of the connection
             points of the links.
             </summary>
             <remarks>
             An interface used to customize the computation of the connection
             points of the links. 
             <p>
             This interface is useful when a layout algorithm that supports this
             customization must place the connection points of the links at a
             certain distance inside or outside the bounding box of the nodes.
             This interface also allows a tangential "translation" of the
             connection points separately for each side of each node. 
             </p>
             </remarks>
            
             <example>
             <para lang='cs,vbnet'>In the following code, the connection points are at a
             distance of 10 outside the bounding box of the nodes. Therefore, the
             method computes the bounding box of the node and expands it with a
             value of 10 in all four directions.</para>
             <code lang='cs'>
             public Rectangle2D GetBox(IGraphModel graphModel, Object node)
             {
               Rectangle2D bbox = graphModel.BoundingBox(node);
               bbox.X -= 10;
               bbox.Y -= 10;
               bbox.Width += 20;
               bbox.Height += 20;
               return bbox;
             }
             </code>
             <code lang='vbnet'>
             Public Function GetBox(ByVal graphModel As IGraphModel, ByVal node As Object) As Rectangle2D
               Dim bbox As Rectangle2D = graphModel.BoundingBox(node)
               bbox.X -= 10
               bbox.Y -= 10
               bbox.Width += 20
               bbox.Height += 20
               Return bbox
             End Function   
             </code>
             </example>
             
             <example>
             <para lang='cs,vbnet'>In the following code, the connection points on the left
             and right side of the nodes are shifted to the top by a fixed amount
             of 10. (Of course, this amount could be variable dependent on
             specific conditions, for example, the height of a label below a
             node)</para>
             <code lang='cs'>
             public float GetTangentialOffset(IGraphModel graphModel, Object node, NodeSide nodeSide)
             {
               switch (nodeSide) {
                 case NodeSide.Left:
                   return -10;
                 case NodeSide.Right:
                   return -10;
                 default:
                   return 0;
               }
             }
             </code>
             <code lang='vbnet'>
             Public Function GetTangentialOffset(ByVal graphModel As IGraphModel, ByVal node As Object, ByVal nodeSide As NodeSide) As Single
               Select nodeSide
               Case NodeSide.Left
                 Return -10
               Case NodeSide.Right
                 Return -10
               Case Else
                 Return 0
               End Select
             End Function
             </code>
             </example>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.INodeBoxProvider">
            <summary>
            An interface used to define a rectangle associated with a node of a
            graph.
            </summary>
            <remarks>
            An interface used to define a rectangle associated with a node of a
            graph. 
            <p>
            This interface is useful when a layout algorithm must use a node size
            that is different from the bounding box (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.BoundingBox(System.Object)"/>).  
            </p>
            </remarks>
            
            <example>
            <para lang="cs,vbnet">The following code is an example of the implementation
            of the method <see cref="M:ILOG.Diagrammer.GraphLayout.INodeBoxProvider.GetBox(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)"/>. In this example, the height of the node box
            is never smaller than a predefined value (80). The additional height is
            added to the bottom of the original bounding box.</para>
            <code lang="cs">
            public Rectangle2D GetBox(IGraphModel graphModel, Object node) {    
              Rectangle2D bbox = graphModel.BoundingBox(node);
              if (bbox.Height &lt; 80)
                bbox.Height = 80;
              return bbox;
            }
            </code>
            <code lang="vbnet">
            Public Function GetBox(ByVal graphModel As IGraphModel, _
                                   ByVal node As Object) As Rectangle2D
              Dim bbox As Rectangle2D = graphModel.BoundingBox(node)
              If bbox.Height &lt; 80 Then
                bbox.Height = 80
              End If
              Return bbox
            End Function
            </code>
            </example>
            
            <example>
            <para lang="cs,vbnet">In the following code example, the additional height
            is added to the top of the original bounding box.</para>
            <code lang="cs">
            public Rectangle2D GetBox(IGraphModel graphModel, Object node) {    
              Rectangle2D bbox = graphModel.BoundingBox(node);
              if (bbox.Height) &lt; 80) {
                bbox.Y = bbox.Y + bbox.Height - 80;
                bbox.height = 80;
              }
              return bbox;
            }
            </code>
            <code lang="vbnet">
            Public Function GetBox(ByVal graphModel As IGraphModel, ByVal node As Object) As Rectangle2D
              Dim bbox As Rectangle2D = graphModel.BoundingBox(node)
              If bbox.Height &lt; 80 Then
                bbox.Y = bbox.Y + bbox.Height - 80
                bbox.Height = 80
              End If
              Return bbox
            End Function
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.INodeBoxProvider.GetBox(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)">
            <summary>
            Returns the rectangle associated to <paramref name="node"/>.
            </summary>
            <remarks>
            Returns the rectangle associated to <paramref name="node"/>. The
            rectangle must be in the actual coordinate system of the input node.
            
            <p>
            Note that when routing intergraph links, the coordinate system of
            the node is not necessarily the same as the coordinate system of the
            link. If the input graph model is a grapher adapter (instance of
            <strong>GraphicContainerAdapter</strong>), the returned rectangle value
            should depend on the actual coordinate mode that can be queried from
            the input model by <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.CoordinatesMode"/>. 
            </p>
            </remarks>
            <param name="graphModel"> The graph model to which the node belongs
            </param>
            <param name="node"> The node
            </param>
            <returns>The rectangle which defines the size of the node
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ILinkConnectionBoxProvider.GetTangentialOffset(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object,ILOG.Diagrammer.GraphLayout.NodeSide)">
            <summary>
            Returns the tangential offset for the connection points of a link on
            a  given side of a node.
            </summary>
            <remarks>
            Returns the tangential offset for the connection points of a link on
            a  given side of a node. The offset must be in the actual coordinate
            system of the input node. 
            <p>
            By default, some layout algorithms place the links connected to a
            given  side of a node symmetrically with respect to the middle of
            the side. Using this method, it is possible to "shift" the links
            tangentially as follows: 
            <UL>
            <LI> On the "top" side of a node, the connection points are
            translated to the right if the offset is positive and to the left if
            the offset  is negative. </LI>
            <LI> On the "bottom" side of a node, the connection points are
            translated to the right if the offset is positive and to the left if
            the offset  is negative. </LI>
            <LI> On the "left" side of a node, the connection points are
            translated to the bottom if the offset is positive and to the top if
            the offset  is negative. </LI>
            <LI> On the "right" side of a node, the connection points are
            translated to the bottom if the offset is positive and to the top if
            the offset  is negative. </LI>
            </UL>
            This method must return <strong>0</strong> if no offset is necessary
            on a certain node and/or side. 
            </p><p>
            Note that when routing intergraph links, the coordinate system of
            the node is not necessarily the same as the coordinate system of the
            link. If the input graph model is a grapher adapter (instance of
            <strong>GraphicContainerAdapter</strong>), the returned offset value should
            depend on the actual coordinate mode that can be queried from the
            input model by <see cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.CoordinatesMode"/>. 
            </p>
            </remarks>
            <param name="graphModel"> The graph model to which the node belongs.
            </param>
            <param name="node"> The node.
            </param>
            <param name="nodeSide"> The side of the node. The values are defined
            in the enumeration <see cref="T:ILOG.Diagrammer.GraphLayout.NodeSide"/>. 
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.DefaultLinkConnectionBoxProvider.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.GraphLayout.DefaultLinkConnectionBoxProvider"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.DefaultLinkConnectionBoxProvider.#ctor(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.GraphLayout.DefaultLinkConnectionBoxProvider"/> class
            for the specified <see cref="P:ILOG.Diagrammer.GraphLayout.DefaultLinkConnectionBoxProvider.GraphLayout"/> instance.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.DefaultLinkConnectionBoxProvider.GetTangentialOffset(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object,ILOG.Diagrammer.GraphLayout.NodeSide)">
            <summary>
            Reads the tangential offset of a node by calling the
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetRadialOffset(System.Object)"/> method.
            </summary>
            <remarks>
            At design-time, the tangential offset can be set using the
            <strong>TangentialOffset</strong> extended property of the graphic object.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.DefaultLinkConnectionBoxProvider.GetBox(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)">
            <summary>
            Reads the radial offset of a node by calling the
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetRadialOffset(System.Object)"/> method, and
            adds this offset to the bounds of the node.
            </summary>
            <remarks>
            At design-time, the radial offset can be set using the
            <strong>RadialOffset</strong> extended property of the graphic object.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.DefaultLinkConnectionBoxProvider.GraphLayout">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayout"/> object to which this provider is associated.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.DrawingContext">
            <summary>
            Stores state during the display pass: clip, transformation, and so on.
            </summary>
            <remarks>This class is used during the paint and hittest processes.</remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.Paint(ILOG.Diagrammer.DrawingContext)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphicObject.HitTest(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)"/>
        </member>
        <member name="M:ILOG.Diagrammer.DrawingContext.#ctor(System.Drawing.Graphics,ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Initalizes a new instance of the <see cref="T:ILOG.Diagrammer.DrawingContext"/> class.
            </summary>
            <param name="g">A <see cref="P:ILOG.Diagrammer.DrawingContext.Graphics"/> instance used to draw on.</param>
            <param name="root">A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> instance that represents the root container of the drawing.</param>
        </member>
        <member name="M:ILOG.Diagrammer.DrawingContext.IsVisible(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Indicates whether the specified object is visible in this drawing context.
            </summary>
            <param name="graphic">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference.</param>
            <returns><see langword="true"/> if the specified object is visible in this drawing
            context; Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.DrawingContext.IsVisible(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Indicates whether the specified object is visible in this drawing context.
            </summary>
            <param name="graphic">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference.</param>
            <param name="clip">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> that represents the clipping area of the drawing context.</param>
            <returns><see langword="true"/> if the specified object is visible in this drawing
            context; Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.DrawingContext.IsHitTestable(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Indicates whether the specified object is hit testable in this drawing context.
            </summary>
            <param name="graphic">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference.</param>
            <returns><see langword="true"/> if the specified object is hit testable in this drawing
            context; Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.DrawingContext.IsHitTestable(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Indicates whether the specified object is hit testable in this drawing context.
            </summary>
            <param name="graphic">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference.</param>
            <param name="clip">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> that represents the clipping area of the drawing context.</param>
            <returns><see langword="true"/> if the specified object is hit testable in this drawing
            context; Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.DrawingContext.PushClip(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Intersects the clip with the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </summary>
            <param name="path">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> reference.</param>
        </member>
        <member name="M:ILOG.Diagrammer.DrawingContext.PushClip(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Intersects the clip with the specified <see cref="T:ILOG.Diagrammer.Rectangle2D"/>.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</param>
        </member>
        <member name="M:ILOG.Diagrammer.DrawingContext.PopClip">
            <summary>
            Removes the clip previously set by calling one of the <strong>PushClip</strong> methods.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DrawingContext.PushTransform(ILOG.Diagrammer.Transform)">
            <summary>
            Composes the current transformation with the specified <see cref="T:ILOG.Diagrammer.Transform"/>.
            </summary>
            <param name="t">A <see cref="T:ILOG.Diagrammer.Transform"/> stucture.</param>
        </member>
        <member name="M:ILOG.Diagrammer.DrawingContext.PopTransform">
            <summary>
            Removes the transformation previously set by calling <see cref="M:ILOG.Diagrammer.DrawingContext.PushTransform(ILOG.Diagrammer.Transform)"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DrawingContext.Dispose">
            <summary>
            Releases all resources used by the drawing context.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DrawingContext.Finalize">
            <summary>
            This member overrides <see cref="M:System.Object.Finalize">Object.Finalize</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DrawingContext.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the drawing context and optionally releases the managed resources. 
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; 
            <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="P:ILOG.Diagrammer.DrawingContext.Transform">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.Transform"/> of this <see cref="T:ILOG.Diagrammer.DrawingContext"/>.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</value>
            <remarks>To modify the <see cref="T:ILOG.Diagrammer.Transform"/> of a <see cref="T:ILOG.Diagrammer.DrawingContext"/>, use the <see cref="M:ILOG.Diagrammer.DrawingContext.PushTransform(ILOG.Diagrammer.Transform)"/>
            and <see cref="M:ILOG.Diagrammer.DrawingContext.PopTransform"/> methods.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.DrawingContext.Root">
            <summary>
            Gets the root container of the drawing.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.DrawingContext.Graphics">
            <summary>
            Gets the <see cref="T:System.Drawing.Graphics"/> used to draw on.
            </summary>
            <value>A <see cref="T:System.Drawing.Graphics"/> instance.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.SubDiagram">
             <summary>
             A graphic container with a title that can be collapsed/expanded and scrolled.
             </summary>
             <remarks>
             The <see cref="T:ILOG.Diagrammer.Graphic.SubDiagram"/> class is a graphic container that provides the following features:
             <list type="bullet">
               <item>
                 <term><b>Expand/collapse:</b></term>
                 <description>
                   The sub-diagram can appear as an embedded diagram, or as a single collapsed object.
                 </description>
               </item>
               <item>
                 <term><b>Scrolling:</b></term>
                 <description>
                   The content of the expanded sub-diagram can extend outside of the sub-diagram bounds,
                   and can be scrolled using built-in scrollbars.
                 </description>
               </item>
               <item>
                 <term><b>Title bar:</b></term>
                 <description>
                   In expanded state, the sub-diagram has an optional title bar that displays
                   a title text and can be placed on either side of the sub-diagram.
                 </description>
               </item>
               <item>
                 <term><b>Customizable icons:</b></term>
                 <description>
                   The icons displayed in expanded and collapsed state can be customized
                   (bitmaps, SVG or IVN files can be used). The expand and collapsed buttons
                   can be changed too.
                 </description>
               </item>
               <item>
                 <term><b>Graph layout:</b></term>
                 <description>
                   Graph layout algorithms can be applied to the contents of the sub-diagram.
                 </description>
               </item>
             </list>
            </remarks>
             <example>
             <para lang="cs,vbnet">
             The following example creates a simple sub-diagram containing two rectangles:
             </para>
             <code lang="cs">
             SubDiagram CreateSubDiagram()
             {
                 SubDiagram subDiagram = new SubDiagram();
                 subDiagram.TitleText = "Sub-Diagram (Expanded)";
                 subDiagram.CollapsedText = "Sub-Diagram (Collapsed)";
                 subDiagram.SubDiagramObjects.Add(new Rect(10, 10, 20, 20));
                 subDiagram.SubDiagramObjects.Add(new Rect(200, 100, 20, 20));
                 return subDiagram;
             }
             </code>
             <code lang="vbnet">
             Function CreateSubDiagram() As SubDiagram
                 Dim subDiagram As SubDiagram = New SubDiagram
                 subDiagram.TitleText = "Sub-Diagram (Expanded)"
                 subDiagram.CollapsedText = "Sub-Diagram (Collapsed)"
                 subDiagram.SubDiagramObjects.Add(New Rect(10, 10, 20, 20))
                 subDiagram.SubDiagramObjects.Add(New Rect(200, 100, 20, 20))
                 Return subDiagram
             End Function
             </code>
             </example>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.UserSymbol">
            <summary>
            Provides the base class for designing user defined symbols.
            </summary>
            <remarks>
            The <see cref="T:ILOG.Diagrammer.Graphic.UserSymbol"/> gives you the ability
            to create graphic objects that can be used in multiple places within an application or organization.
            You can define the graphical representation of the symbol by combining graphic objects or other <see cref="T:ILOG.Diagrammer.Graphic.UserSymbol"/>
            in a subclass of <see cref="T:ILOG.Diagrammer.Graphic.UserSymbol"/>. You can also include all the code needed for defining the logic and the user inputs 
            necessary for the symbol. The easiest way to create a new <see cref="T:ILOG.Diagrammer.Graphic.UserSymbol"/> is to use the Visual Studio Designer
            provided by Diagram for .NET.
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.Graphic.GraphicSymbol"/>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.UserSymbol._defaultSize">
            <summary>
            The default size of the symbol;
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.UserSymbol._minimumSize">
            <summary>
            The minimum size of the symbol;
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.UserSymbol._maximumSize">
            <summary>
            The maximum size of the symbol;
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.UserSymbol._keepAspectRatio">
            <summary>
            Indicates whether to keep aspect ratio.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.UserSymbol._validLayout">
            <summary>
            Indicates whether the layout is valid.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.UserSymbol._inLayout">
            <summary>
            true when re-layouting.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.UserSymbol._suspendLayout">
            <summary>
            Indicates that layout is suspended.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.UserSymbol._childResizeMode">
            <summary>
            The resize mode for children.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.UserSymbol._childTransform">
            <summary>
            The child transform.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.UserSymbol"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.OnKeepAspectRatioChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.UserSymbol.KeepAspectRatio"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.OnChildResizeModeChanged(ILOG.Diagrammer.ResizeMode,ILOG.Diagrammer.ResizeMode)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.UserSymbol.ChildResizeMode"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.OnMinimumSizeChanged(ILOG.Diagrammer.Size2D,ILOG.Diagrammer.Size2D)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.UserSymbol.MinimumSize"/> property is modified.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.OnMaximumSizeChanged(ILOG.Diagrammer.Size2D,ILOG.Diagrammer.Size2D)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.UserSymbol.MaximumSize"/> property is modified.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.OnRectangleChanged(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.UserSymbol.Rectangle"/> property is modified.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.OnDefaultSizeChanged(ILOG.Diagrammer.Size2D,ILOG.Diagrammer.Size2D)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.UserSymbol.DefaultSize"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.GetGeometryBounds">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetGeometryBounds">GraphicObject.GetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.GetBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.GetStyledBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetStyledBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetStyledBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.LayoutChildren(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Is called to resize the children 
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.BeginInit">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.BeginInit">GraphicContainer.BeginInit</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.EndInit">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.EndInit">GraphicContainer.EndInit</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.OnChildrenAdded(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildrenAdded(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">GraphicContainer.OnChildrenAdded</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.OnChildrenRemoved(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildrenRemoved(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">GraphicContainer.OnChildrenRemoved</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.OnChildGeometryChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            Is called when the specified child has its geometry changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.OnChildChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">GraphicContainer.OnChildChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.ShouldSerializeObjects">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Composite.ShouldSerializeObjects">Composite.ShouldSerializeObjects</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">GraphicObject.GetPreferredSizeCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.GetDefaultAnchors">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetDefaultAnchors">GraphicObject.GetDefaultAnchors</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.CanSelectChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanSelectChild(ILOG.Diagrammer.GraphicObject)">GraphicContainer.CanSelectChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.CanRotateChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanRotateChild(ILOG.Diagrammer.GraphicObject)">GraphicContainer.CanRotateChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">GraphicContainer.CanResizeChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.CanMoveChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanMoveChild(ILOG.Diagrammer.GraphicObject)">GraphicContainer.CanMoveChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.CanReparentChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanReparentChild(ILOG.Diagrammer.GraphicObject)">GraphicContainer.CanReparentChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.CanCopyChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanCopyChild(ILOG.Diagrammer.GraphicObject)">GraphicContainer.CanCopyChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.CanDropChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanDropChild(ILOG.Diagrammer.GraphicObject)">GraphicContainer.CanDropChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.CanDropChild(System.Type)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanDropChild(System.Type)">GraphicContainer.CanDropChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.CanConnectChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.ILink,System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanConnectChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.ILink,System.Boolean)">GraphicContainer.CanConnectChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.GetContainerForLogicalChildren">
            <summary>
            Gets the container in which logical children will be added.
            </summary>
            <returns>The default implementation returns <see langword="null"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.IsLogicalParent(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.IsLogicalParent(ILOG.Diagrammer.GraphicObject)">GraphicContainer.IsLogicalParent</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.AddChildren(ILOG.Diagrammer.GraphicObject[])">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.AddChildren(ILOG.Diagrammer.GraphicObject[])">GraphicContainer.AddChildren</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.RemoveChildren(ILOG.Diagrammer.GraphicObject[])">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.RemoveChildren(ILOG.Diagrammer.GraphicObject[])">GraphicContainer.RemoveChildren</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.InsertChildren(System.Int32,ILOG.Diagrammer.GraphicObject[])">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.InsertChildren(System.Int32,ILOG.Diagrammer.GraphicObject[])">GraphicContainer.InsertChildren</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.SetChildZOrder(ILOG.Diagrammer.GraphicObject,System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.SetChildZOrder(ILOG.Diagrammer.GraphicObject,System.Int32)">GraphicContainer.SetChildZOrder</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.GetChildZOrder(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.GetChildZOrder(ILOG.Diagrammer.GraphicObject)">GraphicContainer.GetChildZOrder</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.SuspendLayout">
            <summary>
            Temporarily suspends the layout logic for the symbol. 
            </summary>
            <remarks>Call the <see cref="M:ILOG.Diagrammer.Graphic.UserSymbol.SuspendLayout"/> method to suspend the layout logic, and <see cref="M:ILOG.Diagrammer.Graphic.UserSymbol.ResumeLayout"/> to restore it.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.ResumeLayout">
            <summary>
            Resumes the usual layout logic for the symbol.
            </summary>
            <remarks>Call the <see cref="M:ILOG.Diagrammer.Graphic.UserSymbol.SuspendLayout"/> method to suspend the layout logic, and <see cref="M:ILOG.Diagrammer.Graphic.UserSymbol.ResumeLayout"/> to restore it.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.ResumeLayout(System.Boolean)">
            <summary>
            Resumes the usual layout logic for the symbol.
            </summary>
            <param name="performLayout"><see langword="true"/> to force a relayout; otherwise, <see langword="false"/>.</param>
            <remarks>Call the <see cref="M:ILOG.Diagrammer.Graphic.UserSymbol.SuspendLayout"/> method to suspend the layout logic, and <see cref="M:ILOG.Diagrammer.Graphic.UserSymbol.ResumeLayout"/> to restore it.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.InvalidateLayout">
            <summary>
            Invalidates the current layout logic.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.InvalidateLayout(System.Boolean)">
            <summary>
            Invalidates the current layout logic.
            </summary>
            <param name="redraw"><see langword="true"/> if a redraw is needed; Otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.PerformLayout">
            <summary>
            Forces the panel to apply layout logic to all its child objects. 
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.OnLayout(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Graphic.UserSymbol.Layout"/> event.
            </summary>
            <param name="args">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbol.DoLayout">
            <summary>
            Is called to perform the layout of child objects.
            </summary>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.UserSymbol.KeepAspectRatio">
            <summary>
            Gets or sets a value indicating whether resizing the object should keep it aspect ratio unchanged.
            </summary>
            <value><see langword="true"/> to keep aspect ratio; Otherwise, <see langword="false."/>.</value>     
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.UserSymbol.KeepAspectRatioChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.UserSymbol.KeepAspectRatio"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.UserSymbol.ChildResizeMode">
            <summary>
            Gets or sets the resize mode for the children of this object.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.ResizeMode"/> values. The default value is <see cref="F:ILOG.Diagrammer.ResizeMode.Zoom"/>.</value>
            <remarks>When the geometry bounds of the user symbol are changed, the user symbol has two way of applying the
            new size to its children, depending on the value of the <see cref="P:ILOG.Diagrammer.Graphic.UserSymbol.ChildResizeMode"/> property. If this property is
            <see cref="F:ILOG.Diagrammer.ResizeMode.Zoom"/>, the user symbol will apply an affine transformation to its children. If this property
            is <see cref="F:ILOG.Diagrammer.ResizeMode.Resize"/>, the user symbol will resize its children.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.UserSymbol.ChildResizeModeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.UserSymbol.ChildResizeMode"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.UserSymbol.ChildTransform">
            <summary>
            Gets or sets the affine transformed applied to the graphic
            object children when rendered.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Transform"/> that represents the
            children transform of the object.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.UserSymbol.MinimumSize">
            <summary>
            Gets of sets the minimum size for the symbol.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Size2D"/> structure.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.UserSymbol.MaximumSize"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.UserSymbol.MinimumSizeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.UserSymbol.MinimumSize"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.UserSymbol.MaximumSize">
            <summary>
            Gets of sets the maximum size for the symbol.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Size2D"/> structure.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.UserSymbol.MinimumSize"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.UserSymbol.MaximumSizeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.UserSymbol.MaximumSize"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.UserSymbol.Rectangle">
            <summary>
            Gets or sets the rectangle that defines the object.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> object that defines the object.</value>
            <remarks>When this property is changed, the user symbol has two way of applying the
            new size to its children, depending on the value of the <see cref="P:ILOG.Diagrammer.Graphic.UserSymbol.ChildResizeMode"/> property. If this property is
            <see cref="F:ILOG.Diagrammer.ResizeMode.Zoom"/>, the user symbol will apply an affine transformation to its children. If this property
            is <see cref="F:ILOG.Diagrammer.ResizeMode.Resize"/>, the user symbol will resize its children.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.UserSymbol.RectangleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.UserSymbol.Rectangle"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.UserSymbol.DefaultSize">
            <summary>
            Gets or sets the default size for this user symbol.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Size2D"/> structure.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.UserSymbol.DefaultSizeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.UserSymbol.DefaultSize"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.UserSymbol.HasPreferredHeight">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight">GraphicContainer.HasPreferredHeight</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.UserSymbol.HasPreferredWidth">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth">GraphicContainer.HasPreferredWidth</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.UserSymbol.SupportsChildSelection">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.SupportsChildSelection">GraphicContainer.SupportsChildSelection</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.UserSymbol.SupportsChildReparenting">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.SupportsChildReparenting">GraphicContainer.SupportsChildReparenting</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.UserSymbol.SupportsLinkReparenting">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.SupportsLinkReparenting">GraphicContainer.SupportsLinkReparenting</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.UserSymbol.LogicalChildren">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.LogicalChildren">GraphicContainer.LogicalChildren</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.UserSymbol.LogicalChildTransform">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.LogicalChildTransform">GraphicContainer.LogicalChildTransform</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.UserSymbol.IsLayoutSuspended">
            <summary>
            Indicates whether the layout logic has been suspended.
            </summary>
            <value><see langword="true"/> if the layout logic has been suspended; Otherwise, <see langword="false"/>.</value>
            <remarks>Call the <see cref="M:ILOG.Diagrammer.Graphic.UserSymbol.SuspendLayout"/> method to suspend the layout logic, and <see cref="M:ILOG.Diagrammer.Graphic.UserSymbol.ResumeLayout"/> to restore it.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.UserSymbol.IsInLayout">
            <summary>
            Indicates whether the symbol is layouting its children.
            </summary>
            <value><see langword="true"/> if the panel is layouting its children; Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.UserSymbol.Layout">
            <summary>
            Occurs when the user symbol layout is performed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.INestedGraph">
            <summary>
            Defines the behavior of <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayout"/> algorithms with
            respect to a sub-graph, that is, a <see cref="T:ILOG.Diagrammer.GraphicContainer"/> contained in
            another <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.INestedGraph.CorrectSubgraph(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Invoked after a graph layout has been performed on this sub-graph.
            </summary>
            <param name="layout">The graph layout algorithm that has just been performed on this subgraph.</param>
            
            <remarks>
            <para>
            This method will be called only if the <see cref="P:ILOG.Diagrammer.INestedGraph.NestedGraphMode"/> property
            is <see cref="F:ILOG.Diagrammer.GraphLayout.NestedGraphMode.Subgraph"/>.
            </para>
            <para>
            A typical action to take in this method is to call <see cref="M:ILOG.Diagrammer.GraphicObject.FitToSize"/>
            to resize the sub-graph to the bounds of its children.
            </para>
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.INestedGraph.NestedGraphMode">
            <summary>
            Determines the behavior of <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayout"/> algorithms with
            respect to this sub-graph.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.SubDiagram.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.#ctor">
            <summary>
            Creates a new sub-diagram.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.GetContainerForLogicalChildren">
            <summary>
            Overrides the <see cref="M:ILOG.Diagrammer.Graphic.UserSymbol.GetContainerForLogicalChildren">UserSymbol.GetContainerForLogicalChildren</see> member.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnExpandedChanged(System.Boolean,System.Boolean)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.Expanded"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnTitleVisibleChanged(System.Boolean,System.Boolean)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.TitleVisible"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnTitlePositionChanged(ILOG.Diagrammer.Graphic.DockStyle,ILOG.Diagrammer.Graphic.DockStyle)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.TitlePosition"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnTitleBackgroundChanged(ILOG.Diagrammer.Fill,ILOG.Diagrammer.Fill)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.TitleBackground"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnTitleBorderChanged(ILOG.Diagrammer.Stroke,ILOG.Diagrammer.Stroke)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.TitleBorder"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnTitleTextChanged(System.String,System.String)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.TitleText"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnTitleTextAppearanceChanged(ILOG.Diagrammer.TextAppearance,ILOG.Diagrammer.TextAppearance)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.TitleTextAppearance"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnCollapsedBackgroundChanged(ILOG.Diagrammer.Fill,ILOG.Diagrammer.Fill)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedBackground"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnCollapsedBorderChanged(ILOG.Diagrammer.Stroke,ILOG.Diagrammer.Stroke)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedBorder"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnCollapsedRadiusChanged(ILOG.Diagrammer.Size2D,ILOG.Diagrammer.Size2D)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedRadius"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnCollapsedTextChanged(System.String,System.String)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedText"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnCollapsedTextAppearanceChanged(ILOG.Diagrammer.TextAppearance,ILOG.Diagrammer.TextAppearance)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedTextAppearance"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnExpandedBackgroundChanged(ILOG.Diagrammer.Fill,ILOG.Diagrammer.Fill)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedBackground"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnExpandedBorderChanged(ILOG.Diagrammer.Stroke,ILOG.Diagrammer.Stroke)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedBorder"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnExpandedRadiusChanged(ILOG.Diagrammer.CornerRadius,ILOG.Diagrammer.CornerRadius)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedRadius"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnExpandedRectangleChanged(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedRectangle"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnCollapsedRectangleChanged(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedRectangle"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnCollapseButtonChanged(ILOG.Diagrammer.Graphic.SubDiagramIcon,ILOG.Diagrammer.Graphic.SubDiagramIcon)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapseButton"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnExpandButtonChanged(ILOG.Diagrammer.Graphic.SubDiagramIcon,ILOG.Diagrammer.Graphic.SubDiagramIcon)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandButton"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnCollapsedIconChanged(ILOG.Diagrammer.Graphic.SubDiagramIcon,ILOG.Diagrammer.Graphic.SubDiagramIcon)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedIcon"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnExpandedIconChanged(ILOG.Diagrammer.Graphic.SubDiagramIcon,ILOG.Diagrammer.Graphic.SubDiagramIcon)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedIcon"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.SetChildBounds(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Overrides the <see cref="M:ILOG.Diagrammer.Graphic.Composite.SetChildBounds(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Rectangle2D)"/> member.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnContentMarginsChanged(ILOG.Diagrammer.Margins,ILOG.Diagrammer.Margins)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.ContentMargins"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.SupportsGraphLayout">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.SupportsGraphLayout"/> and returns <see langword="true"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnAutoSizeAfterGraphLayoutChanged(System.Boolean,System.Boolean)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.AutoSizeAfterGraphLayout"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.ShouldDispatchSelectionEvents(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides the <see cref="M:ILOG.Diagrammer.GraphicContainer.ShouldDispatchSelectionEvents(ILOG.Diagrammer.GraphicObject)">GraphicContainer.ShouldDispatchSelectionEvents</see> member.
            </summary>
            <remarks>
            This method returns <see langword="true"/> if the child is either the collapse button,
            the expand button, or one of the scrollbars of the sub-diagram.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.ShouldStartMultipleChildrenSelection(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides the <see cref="M:ILOG.Diagrammer.GraphicContainer.ShouldStartMultipleChildrenSelection(ILOG.Diagrammer.GraphicObject)">GraphicContainer.ShouldStartMultipleChildrenSelection</see> member.
            </summary>
            <remarks>
            A multiple children selection will be started only if the user clicked in the content area of
            the sub-diagram. If the user clicked in the title bar, or if the sub-diagram is collapsed, the whole
            sub-diagram object is selected and a move interaction is started
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnBoundsChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnBoundsChanged(System.EventArgs)">GraphicObject.OnBoundsChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnHScrollBarChanged(ILOG.Diagrammer.Graphic.ScrollBarVisibility,ILOG.Diagrammer.Graphic.ScrollBarVisibility)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.HScrollBar"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnVScrollBarChanged(ILOG.Diagrammer.Graphic.ScrollBarVisibility,ILOG.Diagrammer.Graphic.ScrollBarVisibility)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.VScrollBar"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnContentOriginChanged(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.ContentOrigin"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.DoLayout">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.UserSymbol.DoLayout"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.UpdateScrollbars">
            <summary>
            Update the ScrollViewer's properties to adjust to the new position and size
            of the content group.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.EndInit">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.UserSymbol.EndInit">UserSymbol.EndInit</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagram.OnAutoBoundsChanged(System.Boolean,System.Boolean)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.AutoBounds"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.SupportsChildReparenting">
            <summary>
            Overrides the <see cref="P:ILOG.Diagrammer.Graphic.UserSymbol.SupportsChildReparenting">UserSymbol.SupportsChildReparenting</see> member.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.Expanded">
            <summary>
            Determines whether the sub-diagram is expanded or collapsed.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.Expanded"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.TitleVisible">
            <summary>
            Determines whether the title bar is visible.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.TitleVisibleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.TitleVisible"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.TitlePosition">
            <summary>
            Gets or sets the position of the title bar.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.TitlePositionChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.TitlePosition"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.TitleBackground">
            <summary>
            Gets or sets the fill style of the title bar.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.TitleBackgroundChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.TitleBackground"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.TitleBorder">
            <summary>
            Gets or sets the stroke of the title bar.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.TitleBorderChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.TitleBorder"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.TitleText">
            <summary>
            Gets or sets the title text.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.TitleTextChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.TitleText"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.TitleTextAppearance">
            <summary>
            Gets or sets the parameters of the title text.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.TitleTextAppearanceChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.TitleTextAppearance"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedBackground">
            <summary>
            Gets or sets the fill style of the collapsed sub-diagram.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedBackgroundChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedBackground"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedBorder">
            <summary>
            Gets or sets the stroke of the collapsed sub-diagram.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedBorderChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedBorder"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedRadius">
            <summary>
            Gets or sets the corner radius of the collapsed sub-diagram.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedRadiusChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedRadius"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedText">
            <summary>
            Gets or sets the text of the collapsed sub-diagram.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedTextChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedText"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedTextAppearance">
            <summary>
            Gets or sets the parameters of the text of the collapsed sub-diagram.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedTextAppearanceChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedTextAppearance"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedBackground">
            <summary>
            Gets or sets the fill style of the expanded sub-diagram.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedBackgroundChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedBackground"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedBorder">
            <summary>
            Gets or sets the stroke of the expanded sub-diagram.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedBorderChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedBorder"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedRadius">
            <summary>
            Gets or sets the corner radius of the expanded sub-diagram.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedRadiusChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedRadius"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedRectangle">
            <summary>
            Gets or sets the location and size of the expanded sub-diagram.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedRectangleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedRectangle"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedRectangle">
            <summary>
            Gets or sets the location and size of the collapsed sub-diagram.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedRectangleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedRectangle"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapseButton">
            <summary>
            Gets or sets the collapse button.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.CollapseButtonChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapseButton"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandButton">
            <summary>
            Gets or sets the expand button.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.ExpandButtonChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandButton"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedIcon">
            <summary>
            Gets or sets the collapsed icon.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedIconChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedIcon"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedIcon">
            <summary>
            Gets or sets the expanded icon.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedIconChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedIcon"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.Rectangle">
            <summary>
            Gets or sets the bounding rectangle of the sub-diagram.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.SubDiagramObjects">
            <summary>
            Gets the collection of objects contained in the sub-diagram.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.ContentMargins">
            <summary>
            Gets or sets the margins around the sub-diagram contents.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.ContentMarginsChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.ContentMargins"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.AutoSizeAfterGraphLayout">
            <summary>
            Determines whether or not the sub-diagram is resized when a graph layout is performed.
            </summary>
            <remarks>
            If <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.AutoSizeAfterGraphLayout"/> is <see langword="true"/>, the sub-diagram
            is resized after a graph layout is performed so as to fit the size of its contents. 
            If <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.AutoSizeAfterGraphLayout"/> is <see langword="false"/>, the sub-diagram
            is not resized.
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.AutoSizeAfterGraphLayoutChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.AutoSizeAfterGraphLayout"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.SupportsMultipleChildSelection">
            <summary>
            This member overrides the <see cref="P:ILOG.Diagrammer.GraphicContainer.SupportsMultipleChildSelection">GraphicContainer.SupportsMultipleChildSelection</see> member.
            </summary>
            <remarks>This method returns <see langword="true"/>.</remarks>
            <seealso cref="M:ILOG.Diagrammer.Graphic.SubDiagram.ShouldStartMultipleChildrenSelection(ILOG.Diagrammer.GraphicObject)"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.HScrollBar">
            <summary>
            Gets or sets the visibility of the horizontal scrollbar.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.HScrollBarChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.HScrollBar"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.VScrollBar">
            <summary>
            Gets or sets the visibility of the vertical scrollbar.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.VScrollBarChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.VScrollBar"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.ContentOrigin">
            <summary>
            Gets or sets the origin point of the sub-diagram contents.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.ContentOriginChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.ContentOrigin"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.HasPreferredWidth">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth">GraphicObject.HasPreferredWidth</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.HasPreferredHeight">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight">GraphicObject.HasPreferredHeight</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagram.AutoBounds">
            <summary>
            Determines whether the expanded sub-diagram adjusts its bounds automatically to its contents.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.SubDiagram.AutoBoundsChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.AutoBounds"/> property contents has changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.SubDiagramIcon">
             <summary>
             Defines a button or an icon of a <see cref="T:ILOG.Diagrammer.Graphic.SubDiagram"/> object.
             </summary>
             <remarks>
             <para>
             The <see cref="T:ILOG.Diagrammer.Graphic.SubDiagramIcon"/> class is used to customize the icons and buttons
             of a <see cref="T:ILOG.Diagrammer.Graphic.SubDiagram"/>. The <see cref="T:ILOG.Diagrammer.Graphic.SubDiagram"/> properties that contain
             <see cref="T:ILOG.Diagrammer.Graphic.SubDiagramIcon"/> objects are <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandButton"/>,
             <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapseButton"/>, <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.CollapsedIcon"/> and
             <see cref="P:ILOG.Diagrammer.Graphic.SubDiagram.ExpandedIcon"/>.
             </para>
             <para>
             The image of a <see cref="T:ILOG.Diagrammer.Graphic.SubDiagramIcon"/> is defined by the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagramIcon.Image"/>
             property and can be either a bitmap image or a vector image (SVG or IVN).
             </para>
            </remarks>
             <example>
             <para lang="cs,vbnet">
             The following example sets the collapsed icon of a sub-diagram to an image defined in an SVG file:
             </para>
             <code lang="cs">
             void SetCollapsedIcon(SubDiagram subDiagram)
             {
                 SubDiagramIcon icon = new SubDiagramIcon();
                 icon.Image = "file://" + System.IO.Path.GetFullPath("icon.svg");
                 icon.Size = new Size2D(50, 50);
                 subDiagram.CollapsedIcon = icon;
                 subDiagram.CollapsedText = "";
             }
             </code>
             <code lang="vbnet">
             Function SetCollapsedIcon(ByVal subDiagram As SubDiagram)
                 Dim icon As SubDiagramIcon = New SubDiagramIcon()
                 Icon.Image = "file://" + System.IO.Path.GetFullPath("icon.svg")
                 Icon.Size = New Size2D(50, 50)
                 subDiagram.CollapsedIcon = Icon
                 subDiagram.CollapsedText = ""
                 Return 0
             End Function
             </code>
             </example>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagramIcon.#ctor">
            <summary>
            Creates a new sub-diagram icon.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagramIcon.Equals(System.Object)">
            <summary>
            Overrides the <see cref="M:System.Object.Equals(System.Object)">Object.Equals</see> member.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.SubDiagramIcon.GetHashCode">
            <summary>
            Overrides the <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see> member.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagramIcon.Image">
             <summary>
             Gets or sets the image of the icon.
             </summary>
             <remarks>
             The image is specified as a string that can be either a Uri string
             pointing to the image definition, or an immediate string containing
             the XML definition of the image in IVN format.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagramIcon.GraphicObject">
            <summary>
            Gets or sets the graphic object representing the icon image.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagramIcon.Dock">
            <summary>
            Gets or sets the dock position of the icon.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagramIcon.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the icon.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagramIcon.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the icon.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagramIcon.Margins">
            <summary>
            Gets or sets the margins of the icon.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagramIcon.Size">
            <summary>
            Gets or sets the margins of the icon.
            </summary>
            <remarks>
            A size of (0,0) means the default size of the image.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagramIcon.Visible">
            <summary>
            Determines whether the icon is visible or hidden.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.SubDiagramIcon.Color">
            <summary>
            Gets or sets the base color of the icon.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.UserSymbolSelectionGraphic">
            <summary>
            The selection class dedicated to <see cref="T:ILOG.Diagrammer.Graphic.UserSymbol"/> objects.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbolSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.UserSymbolSelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbolSelectionGraphic.IsTypeSupported(System.Type)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.SelectionGraphic.IsTypeSupported(System.Type)">SelectionGraphic.IsTypeSupported</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbolSelectionGraphic.GetMinimumSize">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.ReshapeSelectionGraphic.GetMinimumSize">ReshapeSelectionGraphic.GetMinimumSize</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.UserSymbolSelectionGraphic.GetMaximumSize">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.ReshapeSelectionGraphic.GetMaximumSize">ReshapeSelectionGraphic.GetMaximumSize</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.UserSymbolSelectionGraphic.KeepAspectRatio">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.ReshapeSelectionGraphic.KeepAspectRatio">ReshapeSelectionGraphic.KeepAspectRatio</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.UserSymbolSelectionGraphic.ShowMiddleHandles">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.ReshapeSelectionGraphic.ShowMiddleHandles">ReshapeSelectionGraphic.ShowMiddleHandles</see>
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.AnchorConnectionType">
            <summary>
            Represents the connection type of an <see cref="T:ILOG.Diagrammer.Anchor"/> object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AnchorConnectionType.Input">
            <summary>
            The anchor can be connected to link ends.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AnchorConnectionType.Output">
            <summary>
            The anchor can be connected to link starts.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AnchorConnectionType.InputOutput">
            <summary>
            The anchor can be connected to both the end and start of links.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.FilterAnchorsEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.FilterAnchors"/> event of a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.FilterAnchorsEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.FilterAnchors"/> event 
            of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.FilterAnchorsEventArgs.GraphicObject">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.GraphicObject"/> whose anchors are being filtered.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.FilterAnchorsEventArgs.Link">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.ILink"/> being involved in the current interaction.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.ILink"/> instance. This value may be <see langword="null"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.FilterAnchorsEventArgs.ConnectingLinkStart">
            <summary>
            Gets a value indicating whether the current interaction is trying to connect the link start.
            </summary>
            <value><see langword="true"/> if the current interaction is trying to connect the link start.</value>
        </member>
        <member name="P:ILOG.Diagrammer.FilterAnchorsEventArgs.Point">
            <summary>
            Gets the current <see cref="T:System.Drawing.Point"/> in the current interaction.
            </summary>
            <value>A <see cref="T:System.Drawing.Point"/> structure.</value>
        </member>
        <member name="P:ILOG.Diagrammer.FilterAnchorsEventArgs.Anchors">
            <summary>
            Gets or sets the anchors for the current interaction.
            </summary>
            <value>A collection of <see cref="T:ILOG.Diagrammer.Anchor"/>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Anchor">
            <summary>
            Represents a connection point between a graphic object
            and a link (instance of <see cref="T:ILOG.Diagrammer.ILink"/>).
            </summary>
            <remarks>
            An anchor defines a connection point and holds a collection of
            <see cref="T:ILOG.Diagrammer.ILink"/> objects that are connected to it.
            This class is <see langword="abstract"/>, you must
            override the <see cref="M:ILOG.Diagrammer.Anchor.GetPoint(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)"/> and <see cref="M:ILOG.Diagrammer.Anchor.NeedsReferencePoint"/> methods.
            The base class caches the connection point according to the
            owner-to-parent transform, and the reference point (if <see cref="M:ILOG.Diagrammer.Anchor.NeedsReferencePoint"/>
            returns <see langword="true"/>), so subclasses do not need to implement their own caching mechanism.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Anchor"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.Dispose">
            <summary>
            Releases the resources used by the object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.Finalize">
            <summary>
            This member overrides <see cref="M:System.Object.Finalize">Object.Finalize</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.Component.Dispose(System.Boolean)">Component.Dispose(bool)</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.SupportsMove">
            <summary>
            Tells if this anchor class can be moved,
            that is, if the <see cref="M:ILOG.Diagrammer.Anchor.Move(ILOG.Diagrammer.Point2D)"/> method is actually implemented.
            </summary>
            <remarks>
            The default implementation of this property returns always <see langword="false"/>.
            </remarks>
            <returns><see langword="true"/> if this anchor class can be moved; Otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.CanBeMoved">
            <summary>
            Tells if this anchor class can be moved,
            that is, if the <see cref="M:ILOG.Diagrammer.Anchor.Move(ILOG.Diagrammer.Point2D)"/> method can be called to move the anchor,
            and the <see cref="P:ILOG.Diagrammer.Anchor.CanMove"/> property is <see langword="true"/>.
            </summary>
            <returns><see langword="true"/> if this anchor class can be moved; Otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.OnGraphicChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            Sends the <see cref="E:ILOG.Diagrammer.Anchor.Changed"/> event with arguments indicating that
            the change was caused by a modification of the graphic object that owns
            this anchor.
            </summary>
            <param name="args">The arguments that describe the changes of the graphic object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.OnAnchorChanged">
            <summary>
            Sends the <see cref="E:ILOG.Diagrammer.Anchor.Changed"/> event with arguments indicating that
            the change was caused by a modification of anchor itself.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.OnChanged(ILOG.Diagrammer.AnchorChangeEventArgs)">
            <summary>
            Sends the <see cref="E:ILOG.Diagrammer.Anchor.Changed"/> event.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.OnGraphicChanging(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            Sends the <see cref="E:ILOG.Diagrammer.Anchor.Changing"/> event with arguments indicating that
            the change was caused by a modification of the graphic object that owns
            this anchor.
            </summary>
            <param name="args">The arguments that describe the changes of the graphic object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.OnAnchorChanging">
            <summary>
            Sends the <see cref="E:ILOG.Diagrammer.Anchor.Changing"/> event with arguments indicating that
            the change was caused by a modification of anchor itself.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.OnChanging(ILOG.Diagrammer.AnchorChangeEventArgs)">
            <summary>
            Sends the <see cref="E:ILOG.Diagrammer.Anchor.Changing"/> event.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.FindAnchor(ILOG.Diagrammer.GraphicObject,System.String,System.Boolean)">
            <summary>
            Finds an anchor by its name in a specified object.
            </summary>
            <remarks>
            If the <paramref name="recursively"/> parameter is <see langword="true"/>,
            the anchor is looked for recursively in sub-containers of this object.
            Otherwise, the anchor is looked for only in the anchors of this object.
            </remarks>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> to start the search.</param>
            <param name="name">The name of the anchor to search.</param>
            <param name="recursively">Specifies if the search must be done recursively
            in the sub-objects of this objects.</param>
            <returns>The first anchor in the specified object (or in one of its
            descendants) whose name is equal to <paramref name="name"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.GetRelativePoint(ILOG.Diagrammer.GraphicContainer,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)">
            <summary>
            Gets the connection and origin points in the coordinate system of the specified parent.
            </summary>
            <remarks>
            <para>
            The <paramref name="referencePoint"/> parameter is ignored if
            <see cref="M:ILOG.Diagrammer.Anchor.NeedsReferencePoint"/> returns <see langword="false"/>.
            Otherwise, the <paramref name="referencePoint"/> parameter must be in
            the local coordinate system of the <paramref name="parent"/> container.
            </para>
            <para>
            This method first checks if the previously cached connection and origin points
            are valid. If so, they are returned immediately. Otherwise, the method calls
            <see cref="M:ILOG.Diagrammer.Anchor.GetPoint(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)"/> and applies the appropriate transforms so
            that the returned points <paramref name="connectionPoint"/> and <paramref name="originPoint"/>
            are in the parent's coordinate system.
            </para>
            </remarks>
            <param name="parent">An ancestor of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/> object. The
            connection and origin points will returned in the coordinate system of this container.</param>
            <param name="referencePoint">The reference point used to compute the anchor points.
            Typically, the reference point is the "other end" of the link.</param>
            <param name="connectionPoint">The method must set this parameter to the connection point.
            When an <see cref="T:ILOG.Diagrammer.ILink"/> is connected to this anchor, the start or end point of the
            <see cref="T:ILOG.Diagrammer.ILink"/> connected to this anchor will be set to the connection point.</param>
            <param name="originPoint">The method must set this parameter to the origin point.
            The origin point is typically the center of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/> object.
            When an <see cref="T:ILOG.Diagrammer.ILink"/> is connected to this anchor, the origin point may be used,
            for example, to determine whether the link starts with a horizontal or a vertical segment.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.GetRelativePoint(ILOG.Diagrammer.GraphicContainer,ILOG.Diagrammer.Point2D)">
            <summary>
            Gets the connection point in the coordinate system of the specified parent.
            </summary>
            <remarks>
            <para>
            If you need to get the origin point as well as the connection point,
            use the other overload.
            </para>
            <para>
            The <paramref name="referencePoint"/> parameter is ignored if
            <see cref="M:ILOG.Diagrammer.Anchor.NeedsReferencePoint"/> returns <see langword="false"/>.
            Otherwise, the <paramref name="referencePoint"/> parameter must be in
            the local coordinate system of the <paramref name="parent"/> container.
            </para>
            <para>
            This method first checks if the previously cached connection and origin points
            are valid. If so, they are returned immediately. Otherwise, the method calls
            <see cref="M:ILOG.Diagrammer.Anchor.GetPoint(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)"/> and applies the appropriate transforms so
            that the returned point
            is in the parent's coordinate system.
            </para>
            </remarks>
            <param name="parent">An ancestor of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/> object. The
            connection and origin points will returned in the coordinate system of this container.</param>
            <param name="referencePoint">The reference point used to compute the anchor points.
            Typically, the reference point is the "other end" of the link.</param>
            <returns>The method must return the connection point.
            When an <see cref="T:ILOG.Diagrammer.ILink"/> is connected to this anchor, the start or end point of the
            <see cref="T:ILOG.Diagrammer.ILink"/> connected to this anchor will be set to the connection point.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.GetPoint(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)">
            <summary>
            Returns the connection and points in the object's local coordinate system.
            </summary>
            <remarks>
            <para>
            The <paramref name="referencePoint"/> parameter may be an empty point
            if <see cref="M:ILOG.Diagrammer.Anchor.NeedsReferencePoint"/> returns <see langword="false"/>.
            Otherwise, the <paramref name="referencePoint"/> parameter is in
            the local coordinate system of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/> of this <see cref="T:ILOG.Diagrammer.Anchor"/>.
            </para>
            <para>
            This method must return the points <paramref name="connectionPoint"/> and
            <paramref name="originPoint"/> in the local coordinate system of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/>
            of this <see cref="T:ILOG.Diagrammer.Anchor"/>.
            </para>
            </remarks>
            <param name="referencePoint">The reference point used to compute the anchor points.
            Typically, the reference point is the "other end" of the link.</param>
            <param name="connectionPoint">The method must set this parameter to the connection point.
            When an <see cref="T:ILOG.Diagrammer.ILink"/> is connected to this anchor, the start or end point of the
            <see cref="T:ILOG.Diagrammer.ILink"/> connected to this anchor will be set to the connection point.</param>
            <param name="originPoint">The method must set this parameter to the origin point.
            The origin point is typically the center of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/> object.
            When an <see cref="T:ILOG.Diagrammer.ILink"/> is connected to this anchor, the origin point may be used,
            for example, to determine whether the link starts with a horizontal or a vertical segment.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.NeedsReferencePoint">
            <summary>
            Indicates whether this anchor needs a reference point to compute its connection point.
            </summary>
            <returns><see langword="true"/> if this anchor needs a reference point; Otherwise, <see langword="false"/>.</returns>
            <remarks>
            This method is called by the <see cref="M:ILOG.Diagrammer.Anchor.NeedsReferencePoint"/> property.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.GetConnectionBounds">
            <summary>
            Returns the connection bounds of the owner of this anchor, in the
            local coordinate system of the owner object.
            </summary>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
            <remarks>
            The connection bounds may be used to compute the shape of the links so
            that they avoid crossing the owner's bounding region.
            The base implementation returns the owner's <see cref="M:ILOG.Diagrammer.GraphicObject.GetDisplayBounds"/>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.GetRelativeConnectionBounds(ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Returns the connection bounds of the owner of this anchor, in the
            local coordinate system of the owner object.
            </summary>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
            <remarks>
            The connection bounds may be used to compute the shape of the links so
            that they avoid crossing the owner's bounding region.
            This method calls <see cref="M:ILOG.Diagrammer.Anchor.GetConnectionBounds"/> and transforms the
            resulting rectangle into the specified parent's coordinate system.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.Connect(ILOG.Diagrammer.ILink)">
            <summary>
            Connects a link to this anchor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.Disconnect(ILOG.Diagrammer.ILink)">
            <summary>
            Disconnects a link from this anchor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.ValidFor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Checks if this anchor type can be used with the specified
            graphic object.
            </summary>
            <param name="obj">The graphic object for which the validity of this <see cref="T:ILOG.Diagrammer.Anchor"/> is tested.</param>
            <returns><see langword="true"/> if this anchor can be added to the specified graphic object; Otherwise, 
            <see langword="false"/>. The default implementation returns <see langword="true"/>.</returns>
            <remarks>
            The basic implementation returns true for all graphic objects.
            You must redefine this if you implement a subclass of <see cref="T:ILOG.Diagrammer.Anchor"/>
            that works only for some specific graphic objects.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.Accepts(ILOG.Diagrammer.ILink,System.Boolean)">
            <summary>
            Is called to know whether the specified link can be connected to this anchor.
            </summary>
            <param name="link">An <see cref="T:ILOG.Diagrammer.ILink"/> reference.</param>
            <param name="start"><see langword="true"/> if the connection is made to the link start; Otherwise
            <see langword="false"/>.</param>
            <returns><see langword="true"/> if this anchor can be connected to the specified link; Otherwise, 
            <see langword="false"/>.</returns>
            <remarks>The default implementation checks the <see cref="P:ILOG.Diagrammer.Anchor.ConnectionType"/> and <see cref="P:ILOG.Diagrammer.Anchor.ConnectionsLimit"/>
            properties.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.Move(ILOG.Diagrammer.Point2D)">
            <summary>
            Moves the anchor by a specified offset.
            </summary>
            <remarks>
            <p>
            This method should be called only
            if <see cref="M:ILOG.Diagrammer.Anchor.SupportsMove"/> returns <see langword="true"/>.
            </p>
            <p>
            The default implementation of this method does nothing.
            </p>
            </remarks>
            <param name="offset">A Point2D structure containing the X and Y offsets in the local coordinate system of the owner of the anchor.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.MoveTo(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Moves the anchor to a specified point.
            </summary>
            <remarks>
            <p>
            This method computes the offset required to move this anchor to
            a specified point, and calls the <see cref="M:ILOG.Diagrammer.Anchor.Move(ILOG.Diagrammer.Point2D)"/> method to actually move the connection point.
            </p>
            <p>
            This method should be called only
            if <see cref="M:ILOG.Diagrammer.Anchor.SupportsMove"/> returns <see langword="true"/>.
            </p>
            </remarks>
            <param name="newConnectionPoint">
            The new desired connection point.
            This point is relative to the coordinate system of the specified container.
            </param>
            <param name="referencePoint">
            The reference point used to compute the current connection point.
            </param>
            <param name="container">
            The graphic container that defines the coordinate system of the new connection point.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.IsSame(ILOG.Diagrammer.Anchor)">
            <summary>
            Tests equality of this anchor with another anchor.
            </summary>
            <param name="anchor">An <see cref="T:ILOG.Diagrammer.Anchor"/> reference.</param>
            <returns><see langword="true"/> if <paramref name="anchor"/> is the same as this instance; Otherwise
            <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Anchor.Clone">
            <summary>
            Creates a clone of this anchor.
            </summary>
            <returns>A new <see cref="T:ILOG.Diagrammer.Anchor"/> instance.</returns>
        </member>
        <member name="E:ILOG.Diagrammer.Anchor.Disposed">
            <summary>
            Occurs when the graphic object is disposed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Anchor.Site">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite"/> of the graphic object.
            </summary>
            <value>The <see cref="T:System.ComponentModel.ISite"/> associated with the graphic object, if any.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Anchor.Name">
            <summary>
            Gets or sets the name of the anchor.
            </summary>
            <value>A <see cref="T:System.String"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Anchor.ConnectionsLimit">
            <summary>
            Gets or sets the maximum number of connections this anchor can handle.
            </summary>
            <value>An <see cref="T:System.Int32"/> value. The default value is <strong>-1</strong>, which means that there's no
            maximum number of connections.</value>
            <remarks>This value is only used during interactions to find the anchors that can be connected to
            a link.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Anchor.ConnectionType">
            <summary>
            Gets or sets the connection type for this anchor.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.AnchorConnectionType"/> values. The default value is
            <see cref="F:ILOG.Diagrammer.AnchorConnectionType.InputOutput"/>.</value>
            <remarks>This value is only used during interactions to find the anchors that can be connected to
            a link.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Anchor.Owner">
            <summary>
            The graphic object to which this anchor belongs.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Anchor.Links">
            <summary>
            The links connected to this anchor.
            </summary>
            <value>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> collection.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Anchor.IsDuplicated">
            <summary>
            Gets or sets the flag that indicates that this anchor was duplicated
            from a default anchor.
            </summary>
            <remarks>This flag is used internally, it must not be modified by user code.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Anchor.CanMove">
            <summary>
            Determines whether or not this anchor can be moved.
            </summary>
            <value><see langword="true"/> if this anchor can be moved; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
            <remarks>
            This property can be set to <see langword="false"/> on an individual anchor to disallow moving the anchor.
            An anchor can be moved (that is, the <see cref="M:ILOG.Diagrammer.Anchor.CanBeMoved"/> method returns <see langword="true"/>)
            if the <see cref="M:ILOG.Diagrammer.Anchor.SupportsMove"/> method returns <see langword="true"/> and the <see cref="P:ILOG.Diagrammer.Anchor.CanMove"/>
            property is <see langword="true"/>.
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Anchor.Changed">
            <summary>
            The <see cref="E:ILOG.Diagrammer.Anchor.Changed"/> event is sent when the anchor point has changed.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Anchor.Changing">
            <summary>
            The <see cref="E:ILOG.Diagrammer.Anchor.Changing"/> event is sent when the anchor point is about to change.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Anchor.IsReferencePointNeeded">
            <summary>
            Indicates whether this anchor needs a reference point to compute its connection point.
            </summary>
            <value><see langword="true"/> if this anchor needs a reference point; Otherwise, <see langword="false"/>.</value>
            <remarks>
            This property calls the <see cref="M:ILOG.Diagrammer.Anchor.NeedsReferencePoint"/> method.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.AnchorChangeEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.Anchor.Changing"/> and 
            <see cref="E:ILOG.Diagrammer.Anchor.Changed"/>events of an <see cref="T:ILOG.Diagrammer.Anchor"/> object.
            </summary>
            <param name="sender">The <see cref="T:ILOG.Diagrammer.Anchor"/> object that sends the event.</param>
            <param name="e">A <see cref="T:ILOG.Diagrammer.AnchorChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ILOG.Diagrammer.AnchorChangeEventArgs">
            <summary>
            Provides data for the
            <see cref="E:ILOG.Diagrammer.Anchor.Changed"/> and <see cref="E:ILOG.Diagrammer.Anchor.Changing"/> events of an <see cref="T:ILOG.Diagrammer.Anchor"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.AnchorChangeEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.AnchorChangeEventArgs"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.AnchorChangeEventArgs.#ctor(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.AnchorChangeEventArgs"/> class
            using the specified <see cref="T:ILOG.Diagrammer.GraphicChangeEventArgs"/> arguments.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.AnchorChangeEventArgs.AnchorChange">
            <summary>
            Gets the type of change.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.AnchorChange"/> values.</value>
        </member>
        <member name="P:ILOG.Diagrammer.AnchorChangeEventArgs.GraphicChange">
            <summary>
            Gets the type of change of the <see cref="T:ILOG.Diagrammer.GraphicObject"/> of the <see cref="T:ILOG.Diagrammer.Anchor"/>,
            when the <see cref="P:ILOG.Diagrammer.AnchorChangeEventArgs.AnchorChange"/> property is <see cref="F:ILOG.Diagrammer.AnchorChange.Graphic"/>.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.GraphicChange"/> values.</value>
        </member>
        <member name="P:ILOG.Diagrammer.AnchorChangeEventArgs.GraphicObject">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.GraphicObject"/> that caused this <see cref="T:ILOG.Diagrammer.Anchor"/> to change,
            when the <see cref="P:ILOG.Diagrammer.AnchorChangeEventArgs.AnchorChange"/> property is <see cref="F:ILOG.Diagrammer.AnchorChange.Graphic"/>.
            </summary>
            <value>A <see cref="P:ILOG.Diagrammer.AnchorChangeEventArgs.GraphicObject"/> instance.</value>
        </member>
        <member name="T:ILOG.Diagrammer.AnchorChange">
            <summary>
            Defines the possible causes
            for an <see cref="E:ILOG.Diagrammer.Anchor.Changed"/> and <see cref="E:ILOG.Diagrammer.Anchor.Changing"/> events of an
            <see cref="T:ILOG.Diagrammer.Anchor"/>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AnchorChange.Graphic">
            <summary>
            The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that owns the <see cref="T:ILOG.Diagrammer.Anchor"/> has changed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AnchorChange.Anchor">
            <summary>
            The <see cref="F:ILOG.Diagrammer.AnchorChange.Anchor"/> itself has changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.ILink">
            <summary>
            Interface implemented by graphic objects that can be connected to
            two <see cref="T:ILOG.Diagrammer.Anchor"/> objects. A link also has start and end points, which are used
            if the link is not connected to an anchor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.ILink.StartAnchor">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.Anchor"/> connected to the start of the link.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Anchor"/> instance, or <see langword="null"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ILink.EndAnchor">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.Anchor"/> connected to the end of the link.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Anchor"/> instance, or <see langword="null"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ILink.StartPoint">
            <summary>
            Gets or sets the start point of the link.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</value>
            <remarks>
            This point is used when <see cref="P:ILOG.Diagrammer.ILink.StartAnchor"/> is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.ILink.EndPoint">
            <summary>
            Gets or sets the end point of the link.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</value>
            <remarks>
            This point is used when <see cref="P:ILOG.Diagrammer.ILink.EndAnchor"/> is <see langword="null"/>.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.BoundsAnchor">
            <summary>
            Represents a subclass of <see cref="T:ILOG.Diagrammer.Anchor"/> that defines a fixed connection point
            relative to a graphic object's bounds.
            </summary>
            <seealso cref="T:ILOG.Diagrammer.ShapeAnchor"/>
        </member>
        <member name="M:ILOG.Diagrammer.BoundsAnchor.#ctor(ILOG.Diagrammer.AnchorPosition)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.BoundsAnchor"/> class using the specified <paramref name="position"/>.
            </summary>
            <param name="position">The anchor position.</param>
        </member>
        <member name="M:ILOG.Diagrammer.BoundsAnchor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.BoundsAnchor"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.BoundsAnchor.GetOwnerBounds(ILOG.Diagrammer.Transform)">
            <summary>
            Returns the rectangle used to compute the position of the anchor.
            </summary>
            <remarks>
            By default, this method returns the styled bounds of the owner of the anchor.
            </remarks>
            <param name="t">The transformation for which the bounds are requested.</param>
            <returns>The rectangle used to compute the position of the anchor.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.BoundsAnchor.GetPoint(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)">
            <summary>
            Overrides the <see cref="M:ILOG.Diagrammer.Anchor.GetPoint(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)">Anchor.GetPoint</see> method and returns the
            connection point defined by the <see cref="P:ILOG.Diagrammer.BoundsAnchor.Position"/> and <see cref="P:ILOG.Diagrammer.BoundsAnchor.Offset"/>
            properties.
            </summary>
            <param name="referencePoint">The reference point used to compute the connection point.
            This parameter is used only if <see cref="P:ILOG.Diagrammer.BoundsAnchor.Position"/> is equal to <see cref="F:ILOG.Diagrammer.AnchorPosition.Automatic"/>,
            otherwise it is ignored.</param>
            <param name="connectionPoint">The
            connection point defined by the <see cref="P:ILOG.Diagrammer.BoundsAnchor.Position"/> and <see cref="P:ILOG.Diagrammer.BoundsAnchor.Offset"/>
            propertie will be stored in this out parameter.</param>
            <param name="originPoint">The center of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/> graphic object will
            be stored in this out parameter.</param>
        </member>
        <member name="M:ILOG.Diagrammer.BoundsAnchor.NeedsReferencePoint">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Anchor.NeedsReferencePoint">Anchor.NeedsReferencePoint</see> and returns <see langword="false"/>
            to indicate that the reference point is not used by this <see cref="T:ILOG.Diagrammer.Anchor"/> class.
            </summary>
            <returns><see langword="true"/> if this anchor needs a reference point; Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.BoundsAnchor.ToString">
            <summary>
            Returns a short description of this <see cref="T:ILOG.Diagrammer.BoundsAnchor"/> mentioning the <see cref="P:ILOG.Diagrammer.BoundsAnchor.Position"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.BoundsAnchor.IsSame(ILOG.Diagrammer.Anchor)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Anchor.IsSame(ILOG.Diagrammer.Anchor)">Anchor.IsSame</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.BoundsAnchor.SupportsMove">
            <summary>
            This member overrides the <see cref="M:ILOG.Diagrammer.Anchor.SupportsMove">Anchor.SupportsMove</see> member
            and returns <see langword="true"/> if the <see cref="P:ILOG.Diagrammer.BoundsAnchor.Position"/> property is not
            <see cref="F:ILOG.Diagrammer.AnchorPosition.Automatic"/>.
            </summary>
            <returns><see langword="true"/> if this anchor supports moving; Otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.BoundsAnchor.Move(ILOG.Diagrammer.Point2D)">
            <summary>
            This member overrides the <see cref="M:ILOG.Diagrammer.Anchor.Move(ILOG.Diagrammer.Point2D)">Anchor.Move</see> member
            and modifies the <see cref="P:ILOG.Diagrammer.BoundsAnchor.Offset"/> of the anchor.
            </summary>
            <param name="offset">The new location for the anchor.</param>
        </member>
        <member name="P:ILOG.Diagrammer.BoundsAnchor.Position">
            <summary>
            Gets or sets the position of the anchor relative to the bounds of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/> graphic object.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.AnchorPosition"/> values that defines the position of the 
            anchor relative to the bounds of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/> graphic object. The default value
            is <see cref="F:ILOG.Diagrammer.AnchorPosition.Center"/>.
            </value>
            <remarks>
            The final connection point may be modified by the <see cref="P:ILOG.Diagrammer.BoundsAnchor.Offset"/> property.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.BoundsAnchor.Offset">
            <summary>
            Gets or sets the offset of the connection point from the point defined by the <see cref="P:ILOG.Diagrammer.BoundsAnchor.Position"/> property.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</value>
        </member>
        <member name="P:ILOG.Diagrammer.BoundsAnchor.CoordinateSpace">
            <summary>
            Gets or sets the coordinate system for the <see cref="P:ILOG.Diagrammer.BoundsAnchor.Offset"/> property.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.CoordinateSpace"/> values. The default value is <see cref="F:ILOG.Diagrammer.CoordinateSpace.ObjectBBox"/>.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.AnchorPosition">
            <summary>
            Defines the position of a <see cref="T:ILOG.Diagrammer.BoundsAnchor"/> relative to its graphic object.
            </summary>
            <remarks>
            Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.BoundsAnchor.Position"/> 
            property of a <see cref="T:ILOG.Diagrammer.BoundsAnchor"/> object.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.AnchorPosition.TopLeft">
            <summary>
            Specifies that the connection point defined by a <see cref="T:ILOG.Diagrammer.BoundsAnchor"/>
            is located at the top-left corner of the bounds of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/> graphic object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AnchorPosition.Top">
            <summary>
            Specifies that the connection point defined by a <see cref="T:ILOG.Diagrammer.BoundsAnchor"/>
            is located at the horizontal center of the top side of the bounds of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/> graphic object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AnchorPosition.TopRight">
            <summary>
            Specifies that the connection point defined by a <see cref="T:ILOG.Diagrammer.BoundsAnchor"/>
            is located at the top-right corner of the bounds of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/> graphic object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AnchorPosition.Left">
            <summary>
            Specifies that the connection point defined by a <see cref="T:ILOG.Diagrammer.BoundsAnchor"/>
            is located at the vertical center of the left side of the bounds of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/> graphic object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AnchorPosition.Center">
            <summary>
            Specifies that the connection point defined by a <see cref="T:ILOG.Diagrammer.BoundsAnchor"/>
            is located at the center of the bounds of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/> graphic object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AnchorPosition.Right">
            <summary>
            Specifies that the connection point defined by a <see cref="T:ILOG.Diagrammer.BoundsAnchor"/>
            is located at the vertical center of the right side of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/> graphic object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AnchorPosition.BottomLeft">
            <summary>
            Specifies that the connection point defined by a <see cref="T:ILOG.Diagrammer.BoundsAnchor"/>
            is located at the bottom-left corner of the bounds of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/> graphic object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AnchorPosition.Bottom">
            <summary>
            Specifies that the connection point defined by a <see cref="T:ILOG.Diagrammer.BoundsAnchor"/>
            is located at the horizontal center of the bottom side of bounds of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/> graphic object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AnchorPosition.BottomRight">
            <summary>
            Specifies that the connection point defined by a <see cref="T:ILOG.Diagrammer.BoundsAnchor"/>
            is located at the bottom-right corner of the bounds of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/> graphic object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AnchorPosition.Automatic">
            <summary>
            Specifies that the connection point defined by a <see cref="T:ILOG.Diagrammer.BoundsAnchor"/>
            is located at the center of the side of the <see cref="P:ILOG.Diagrammer.Anchor.Owner"/> graphic object,
            that is closest to the reference point of the link.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.ShapeAnchor">
            <summary>
            Represents a floating connection point on the outline of a <see cref="T:ILOG.Diagrammer.Graphic.Shape"/>
            object.
            </summary>
            <remarks>
            <para>
            The connection point defined by this anchor class is the intersection of
            the outline of the graphic object object with a line starting at the
            reference point and ending at the center of the graphic object bounds, translated
            using the <see cref="P:ILOG.Diagrammer.ShapeAnchor.CenterOffset"/> property. The <see cref="P:ILOG.Diagrammer.ShapeAnchor.Distance"/> property can
            be used to set a distance between the connection point and the graphic object outline.
            </para>
            <para>
            Although this class will work with any shape, it is best suited
            for closed shapes.
            </para>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.ShapeAnchor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.ShapeAnchor"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ShapeAnchor.GetPoint(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Anchor.GetPoint(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)">Anchor.GetPoint</see>.
            <paramref name="connectionPoint"/> is set
            to the intersection of
            the outline of the <see cref="T:ILOG.Diagrammer.Graphic.Shape"/> object with a line starting at the
            <paramref name="referencePoint"/> and ending at the center point. The center point is the center of the <see cref="T:ILOG.Diagrammer.Graphic.Shape"/>, modified by the <see cref="P:ILOG.Diagrammer.ShapeAnchor.CenterOffset"/> property.
            <paramref name="originPoint"/> is set to the center point.
            </summary>. 
            <param name="referencePoint">The reference point used to compute the connection point.</param>
            <param name="connectionPoint">The resulting connection point.</param>
            <param name="originPoint">The resulting center point.</param>
        </member>
        <member name="M:ILOG.Diagrammer.ShapeAnchor.NeedsReferencePoint">
            <summary>
            Returns <see langword="true"/> because this anchor class uses the reference
            point to compute the connection point.
            </summary>
            <value><see langword="true"/>.</value>
        </member>
        <member name="M:ILOG.Diagrammer.ShapeAnchor.ToString">
            <summary>
            Returns a short description of this anchor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ShapeAnchor.IsSame(ILOG.Diagrammer.Anchor)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Anchor.IsSame(ILOG.Diagrammer.Anchor)">Anchor.IsSame</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ShapeAnchor.ValidFor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Anchor.ValidFor(ILOG.Diagrammer.GraphicObject)">Anchor.ValidFor</see>.
            </summary>
            <value><see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ShapeAnchor.Distance">
            <summary>
            Gets or sets the distance between the shape of the graphic object and the connection point.
            </summary>
            <value>A <see cref="T:System.Single"/> value in pixels. The default value is <strong>0</strong>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ShapeAnchor.CenterOffset">
            <summary>
            Gets or sets the offset of the center point.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> structure. The default value is the <strong>(0, 0)</strong>
            point.</value>
            <remarks>
            <para>
            The X and Y coordinates of the offset are floating-point values between -1 and 1,
            and define a relative position within the bounds of the owner object. For example,
            an offset equal to (0.25, 0) means that the center point is half-way between the
            center of the shape and its right side.
            </para>
            <para>
            The connection is computed as the intersection of the outline of the <see cref="T:ILOG.Diagrammer.Graphic.Shape"/> object
            with a line starting at the <paramref name="referencePoint"/> and ending at the center point.
            The center point is the center of the <see cref="T:ILOG.Diagrammer.GraphicObject"/>, modified by the
            <see cref="P:ILOG.Diagrammer.ShapeAnchor.CenterOffset"/> property.
            </para>
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.DelegateAnchor">
            <summary>
            Represents a subclass of <see cref="T:ILOG.Diagrammer.Anchor"/> that delegates the connection point to a wrapped anchor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DelegateAnchor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.DelegateAnchor"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DelegateAnchor.#ctor(ILOG.Diagrammer.Anchor)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.DelegateAnchor"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DelegateAnchor.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Anchor.Dispose(System.Boolean)">Anchor.Dispose</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DelegateAnchor.Accepts(ILOG.Diagrammer.ILink,System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Anchor.Accepts(ILOG.Diagrammer.ILink,System.Boolean)">Anchor.Accepts</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DelegateAnchor.ValidFor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Anchor.ValidFor(ILOG.Diagrammer.GraphicObject)">Anchor.ValidFor</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DelegateAnchor.GetPoint(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Anchor.GetPoint(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)">Anchor.GetPoint</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DelegateAnchor.NeedsReferencePoint">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Anchor.NeedsReferencePoint">Anchor.NeedsReferencePoint</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DelegateAnchor.ToString">
            <summary>
            Returns a short description of this anchor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.DelegateAnchor.IsSame(ILOG.Diagrammer.Anchor)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Anchor.IsSame(ILOG.Diagrammer.Anchor)">Anchor.IsSame</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.DelegateAnchor.TargetAnchor">
            <summary>
            Gets the wrapped anchor.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Anchor"/> instance.</value>
            <remarks>This value is computed using the <see cref="P:ILOG.Diagrammer.DelegateAnchor.TargetName"/> property.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.DelegateAnchor.TargetName">
            <summary>
            Gets or sets the name of the wrapped anchor.
            </summary>
            <value>A <see cref="T:System.String"/> reference.</value>
            <remarks>After setting this value, the wrapped anchor can be accessed using the
            <see cref="P:ILOG.Diagrammer.DelegateAnchor.TargetAnchor"/> property.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.DelegateAnchor.CanMove">
            <summary>
            This member redefines <see cref="P:ILOG.Diagrammer.Anchor.CanMove">Anchor.CanMove</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.DelegateAnchor.ConnectionsLimit">
            <summary>
            This member redefines <see cref="P:ILOG.Diagrammer.Anchor.ConnectionsLimit">Anchor.ConnectionsLimit</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.DelegateAnchor.ConnectionType">
            <summary>
            This member redefines <see cref="P:ILOG.Diagrammer.Anchor.ConnectionType">Anchor.ConnectionType</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.AnchorAttribute">
            <summary>
            Defines an attribute that allows to specify the types
            of <see cref="T:ILOG.Diagrammer.Anchor"/> objects that can be attached to a graphic
            object class. The <see cref="T:ILOG.Diagrammer.AnchorAttribute"/> must be specified on a
            subclass of <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AnchorAttribute._typeName">
            <summary>
            The type of the anchor.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AnchorAttribute._valid">
            <summary>
            Is the anchor valid for the type?
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.AnchorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.AnchorAttribute"/> class using the
            specified type of anchor.
            </summary>
            <param name="typeName">The name of the <see cref="T:ILOG.Diagrammer.Anchor"/> subclass.</param>
        </member>
        <member name="M:ILOG.Diagrammer.AnchorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.AnchorAttribute"/> class using the
            specified type of anchor.
            </summary>
            <param name="type">The type of the <see cref="T:ILOG.Diagrammer.Anchor"/> subclass.</param>
        </member>
        <member name="M:ILOG.Diagrammer.AnchorAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.AnchorAttribute"/> class using the
            specified type and validity flag.
            </summary>
            <param name="typeName">The name of the <see cref="T:ILOG.Diagrammer.Anchor"/> subclass.</param>
            <param name="valid">Pass <cref langword="true"/> to specify that the anchor type
            can be used with the graphic object class, or <cref langword="false"/> to specify that
            the anchor type cannot be used with the target graphic object class</param>.
        </member>
        <member name="M:ILOG.Diagrammer.AnchorAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.AnchorAttribute"/> class using the
            specified type and validity flag.
            </summary>
            <param name="type">The type of the <see cref="T:ILOG.Diagrammer.Anchor"/> subclass.</param>
            <param name="valid">Pass <cref langword="true"/> to specify that the anchor type
            can be used with the graphic object class, or <cref langword="false"/> to specify that
            the anchor type cannot be used with the target graphic object class</param>.
        </member>
        <member name="M:ILOG.Diagrammer.AnchorAttribute.Equals(System.Object)">
            <summary>
            This member overrides <see cref="M:System.Attribute.Equals(System.Object)">Attribute.Equals</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.AnchorAttribute.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Attribute.GetHashCode">Attribute.GetHashCode</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.AnchorAttribute.AnchorType">
            <summary>
            Gets the name of the anchor object 
            class in the <see cref="P:System.Type.AssemblyQualifiedName"/> format. 
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.AnchorAttribute.Valid">
            <summary>
            Gets a boolean that specifies if the anchor type is valid
            for the target graphic object class.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.LongLinkLayoutReport">
            <summary>
             The class used to store information about the behavior of the
            Orthogonal Long Link Layout algorithm.
            </summary>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.LongLinkLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphLayoutReport">
            <summary>
            The base class of the objects used to store information about the
            behavior of the layout algorithms.
            </summary>
            <remarks> 
            <p>
            The layout report is returned by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            It can be also obtained during the layout using the handlers for the
            <strong>LayoutStepPerformed</strong> event. 
            </p>
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.GraphLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventHandler"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.#ctor">
            <summary>
            Creates a new instance of the report object.
            </summary>
            <remarks>
            This is done by
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CreateLayoutReport"/>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.CodeToString(ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode)">
            <summary>
            Returns a message string (in English) corresponding to the code
            value that can be obtained by <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>.
            </summary>
            <remarks>  
            <p>
            For example, the method returns the string "layout done" for the
            input code <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.LayoutDone"/> and the
            string "layout not needed" for the input code
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.NotNeeded"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.LayoutTime">
            <summary>
            Gets the total duration of the layout algorithm (in milliseconds).
            </summary>
            <remarks>
            The starting and ending times are automatically recorded. The total
            duration is the sum of the duration of the methods
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutNeeded"/>
            and <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout"/>. 
            </remarks>
            <value>The total duration of the layout algorithm (in milliseconds).
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.PercentageComplete">
            <summary>
            Gets the current percentage of completion during layout, if the
            layout algorithm supports the percentage completion feature.
            </summary>
            <remarks>
            This value is set to <strong>0</strong> at the beginning of layout,
            increases during layout, and reaches <strong>100</strong> at the end
            of layout. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsPercentageComplete"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IncreasePercentageComplete(System.Int32)"/>
            <value>The current percentage of completion during layout, if the
            layout algorithm supports the percentage completion feature.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code">
            <summary>
            Gets or sets the code describing the current state of the layout
            algorithm.
            </summary>
            <remarks>
            The possible values are 
            (<see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.LayoutDone"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndValid"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.NotNeeded"/>, and so on). 
            <p>
            The property can be queried inside an event handler that handles the
            <see cref="E:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutStepPerformed"/> event to inform the
            event handler about the status of layout. This method returns
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.LayoutStarted"/> if it is called at
            the beginning of the layout process (unless the layout is not
            needed). 
            </p>
            <p>
            It returns <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.LayoutFinished"/> if it
            is called at the end of the layout process (unless the layout is not
            needed or the graph is empty). 
            </p>
            <p>
            Whenever the code <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.LayoutStarted"/>
            is returned, the code
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.LayoutFinished"/> will also be
            returned, even in the cases when an exception occurs during the
            layout process, the layout is stopped prematurely (by
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.StopImmediately"/>,
            or because the layout time elapsed). 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsStopImmediately"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsAllowedTime"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs.LayoutStarted"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs.LayoutFinished"/>
            <value>The code describing the current state of the layout
            algorithm.
            </value>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayoutReport.#ctor">
            <summary>
            Creates a new instance of the report object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayoutReport.GetNumberOfFallbackLinks">
            <summary>
             Returns the number of links that could not be routed on the grid
            without obstacle overlaps.
            </summary>
            <remarks>
            A link may not be routed without overlaps, if the allowed time to
            find a route for this single link elapsed (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AllowedTimePerLink"/>), if the route would
            have to bypass too many obstacles (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MaxBacktrack"/>), or if there is no path
            on the grid from the start node to the end node that bypasses all
            obstacles at all. 
            <p>
            If the fallback routing option was set to <see langword="true"/> by
            using <see cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.FallbackRouteEnabled"/>, these links
            are routed by a simple fallback routing algorithm. 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.FallbackRouteEnabled"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.GetCalcFallbackLinks"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.HLayout.HLevelSweepAlgorithm.Run">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.PathBuilder">
            <summary>
            Utility class to create a PathData.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.FillDialog">
            <summary>
            A dialog that edits a <see cref="T:ILOG.Diagrammer.Fill"/> instance.
            </summary>
            <remarks>Use the <see cref="P:ILOG.Diagrammer.Windows.Forms.FillDialog.Fill"/> property to get or set the edited <see cref="T:ILOG.Diagrammer.Fill"/>.
            <p/>
            <img src="images/Windows/Forms/FillDialog.png"/>
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample shows how to edit a <see cref="T:ILOG.Diagrammer.Fill"/> using
            the <see cref="T:ILOG.Diagrammer.Windows.Forms.FillDialog"/>.</para>
            <code lang="cs">
            Fill fill = new SolidFill(Color.Red);
            FillDialog dialog = new FillDialog();
            dialog.Fill = fill;
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                fill = dialog.Fill;
            }
            </code>
            <code lang="vbnet">
            Dim fill As Fill = New SolidFill(Color.Red)
            Dim dialog As FillDialog = New FillDialog
            dialog.Fill = fill
            If (dialog.ShowDialog = DialogResult.OK) Then
                fill = dialog.Fill
            End If
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.StrokeDialog"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.FormatLinkDialog"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.FilterDialog"/>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.FillDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.FillDialog._fillPages">
            <summary>
            to lookup the pages depending on the Fill type.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.FillDialog._selectedFillPage">
            <summary>
            The current selected page.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.FillDialog._advancedFillPage">
            <summary>
            The Advanced page.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.FillDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.FillDialog"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.FillDialog.AddFillEditorPage(ILOG.Diagrammer.Windows.Forms.FillEditorPage)">
            <summary>
            Adds the specified <see cref="T:ILOG.Diagrammer.Windows.Forms.FillEditorPage"/> to the dialog.
            </summary>
            <param name="page">The page to add to the dialog.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.FillDialog.SetSelectedPage(ILOG.Diagrammer.Windows.Forms.FillEditorPage)">
            <summary>
            Selects the specified page.
            </summary>
            <param name="page">The page to select.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.FillDialog.SetSelectedPage(System.Type)">
            <summary>
            Selects the page corresponding to the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="fillType">The fill type of the page to select.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.FillDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.FillDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.FillDialog.AllowNullFill">
            <summary>
            Gets or sets a value indicating whether to show the remove button.
            </summary>
            <value><see langword="true"/> to show the remove button; Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.FillDialog.Fill">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.Fill"/> edited by the user.
            </summary>
            <value>A <see cref="P:ILOG.Diagrammer.Windows.Forms.FillDialog.Fill"/> instance.</value>
            <remarks>When setting or getting the property, the value is cloned.</remarks>
            <example>
            <para lang="cs,vbnet">The following sample shows how to edit a <see cref="T:ILOG.Diagrammer.Fill"/> using
            the <see cref="T:ILOG.Diagrammer.Windows.Forms.FillDialog"/>.</para>
            <code lang="cs">
            Fill fill = new SolidFill(Color.Red);
            FillDialog dialog = new FillDialog();
            dialog.Fill = fill;
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                fill = dialog.Fill;
            }
            </code>
            <code lang="vbnet">
            Dim fill As Fill = New SolidFill(Color.Red)
            Dim dialog As FillDialog = New FillDialog
            dialog.Fill = fill
            If (dialog.ShowDialog = DialogResult.OK) Then
                fill = dialog.Fill
            End If
            </code>
            </example>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.FillDialog.ShowAdvancedPage">
            <summary>
            Gets or sets a value indicating whether to show the advanced tab page.
            </summary>
            <value><see langword="true"/> to show the advanced page; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.FillEditorPage">
            <summary>
            An <see langword="abstract"/> class that represents a specific editor for a type of Fill.
            </summary>
            <remarks>A <see cref="T:ILOG.Diagrammer.Windows.Forms.FillEditorPage"/> represents a tab page for editing a <see cref="P:ILOG.Diagrammer.Windows.Forms.FillEditorPage.Fill"/> value.
            This class is used by the <see cref="T:ILOG.Diagrammer.Windows.Forms.FillDialog"/>.</remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.FillEditorPage._name">
            <summary>
            The display name of the Fill type.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.FillEditorPage._FillType">
            <summary>
            The fill type handled by this page.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.FillEditorPage._fill">
            <summary>
            The edited fill.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.FillEditorPage.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.FillEditorPage"/> class.
            </summary>
            <param name="name">The display name of the fill type handled by this page.</param>
            <param name="type">The type of the <see cref="T:ILOG.Diagrammer.Fill"/> handled by this page.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.FillEditorPage.#ctor(System.String,ILOG.Diagrammer.Fill)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.FillEditorPage"/> class.
            </summary>
            <param name="name">The display name of the fill type handled by this page.</param>
            <param name="fill">The <see cref="T:ILOG.Diagrammer.Fill"/> instance to edit.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.FillEditorPage.OnFillChanged(System.EventArgs)">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.FillEditorPage.Fill"/> property changes.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains data about the event.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.FillEditorPage.FillName">
            <summary>
            Gets the display name of the fill handled by this page.
            </summary>
            <value>A <see cref="T:System.String"/> object.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.FillEditorPage.FillType">
            <summary>
            Gets the type of <see cref="T:ILOG.Diagrammer.Fill"/> handled by this page.
            </summary>
            <value>A <see cref="T:System.Type"/> object.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.FillEditorPage.Fill">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.Fill"/> to edit.
            </summary>
            <value>A <see cref="P:ILOG.Diagrammer.Windows.Forms.FillEditorPage.Fill"/> instance.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.StylingControl">
            <summary>
            Represents a control that allows to change the style of graphic objects.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.StylingControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StylingControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StylingControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StylingControl.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Windows.Forms.StylingControl"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StylingControl.SetTarget(System.Collections.ICollection,System.Object)">
            <summary>
            Sets the collection of objects that are edited.
            </summary>
            <param name="target">A <see cref="T:System.Collections.ICollection"/> that represents the list of objects that are edited.</param>
            <param name="primaryTarget">The primary edited object.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StylingControl.Target">
            <summary>
            Gets the collection of objects that are edited.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StylingControl.PrimaryTarget">
            <summary>
            Gets the primary edited object.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StylingControl.Fill">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.Fill"/> edited by the user.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StylingControl.Stroke">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.Stroke"/> edited by the user.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.StyleWindow.StylePanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.StylePanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.StylePanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.StylePanel.AddFillEditorPage(ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage)">
            <summary>
            Adds the specified <see cref="T:ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage"/> to the dialog.
            </summary>
            <param name="page">The page to add to the dialog.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.StylePanel.SetSelectedPage(System.Type)">
            <summary>
            Selects the page corresponding to the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="fillType">The fill type of the page to select.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.StylePanel.SetSelectedPage(ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage)">
            <summary>
            Selects the specified page.
            </summary>
            <param name="page">The page to select.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.StylePanel.Fill">
            <summary>
            Gets or sets the <see cref="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.StylePanel.Fill"/> edited by the user.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactStrokeChooser.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactStrokeChooser.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactStrokeChooser.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.DiagramRuler">
            <summary>
            The base class for the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramHRuler"/> and <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramVRuler"/> classes.
            </summary>
            <remarks><p>A ruler can be horizontal or vertical. It's used to show the coordinates of a <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.DiagramView"/>.
            To connect the ruler to a view, use the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.DiagramView"/> property.</p>
            <p>Use the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.Unit"/> property to specify the ruler unit used. To specify a custom unit, set the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.Unit"/>
            property to <see cref="T:ILOG.Diagrammer.Windows.Forms.RulerUnit">RulerUnit.Custom</see> and handle the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.ConvertRulerUnit"/> event.</p></remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramRuler"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnShowMarkerChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.ShowMarkerChanged"/> event.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.ShowMarker"/> property is changed on the control.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnShowSelectionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.ShowSelectionChanged"/> event.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.ShowSelection"/> property is changed on the control.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.SetSelection(System.Single,System.Single)">
            <summary>
            Sets the selection range of the ruler.
            </summary>
            <param name="start">A <see cref="T:System.Single"/> value that represents the selection start.</param>
            <param name="end">A <see cref="T:System.Single"/> value that represents the selection end.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnSelectionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.SelectionChanged"/> event.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.SelectionStart"/> or <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.SelectionEnd"/> properties are changed on the control.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnDiagramViewChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.DiagramViewChanged"/> event.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.DiagramView"/> property is changed on the control.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnTicksAtRightOrBottomChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.TicksAtRightOrBottomChanged"/> event.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.TicksAtRightOrBottom"/> property is changed on the control.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnUnitChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.UnitChanged"/> event.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.Unit"/> property is changed on the control.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnTickColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.TickColorChanged"/> event.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.TickColor"/> property is changed on the control.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnMarkerColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.MarkerColorChanged"/> event.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.MarkerColor"/> property is changed on the control.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnSelectionColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.SelectionColorChanged"/> event.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.SelectionColor"/> property is changed on the control.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.FireEvent(System.Object,System.EventArgs)">
            <summary>
            Fires an event based on key in the Events list.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnClientSizeChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)">Control.OnClientSizeChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnForeColorChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)">Control.OnForeColorChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnParentForeColorChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)">Control.OnParentForeColorChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnBackColorChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)">Control.OnBackColorChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnParentBackColorChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)">Control.OnParentBackColorChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnFontChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)">Control.OnFontChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnParentFontChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)">Control.OnParentFontChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">Control.SetBoundsCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.ConvertToPixels(System.Double,System.Single)">
            <summary>
            Is called to convert the specified value into pixels.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> value.</param>
            <param name="dpi">A <see cref="T:System.Single"/> that represents the number of DPI.</param>
            <returns>A <see cref="T:System.Double"/> that represent the <paramref name="value"/> converted to pixels.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.ConvertFromPixels(System.Double,System.Single)">
            <summary>
            Is called to convert the specified value into the ruler unit.
            </summary>
            <param name="value">A <see cref="T:System.Double"/> value that represents a number of pixels.</param>
            <param name="dpi">A <see cref="T:System.Single"/> that represents the number of DPI.</param>
            <returns>A <see cref="T:System.Double"/> that represent the <paramref name="value"/> converted to the ruler unit.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnConvertRulerUnit(ILOG.Diagrammer.Windows.Forms.ConvertRulerUnitEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.ConvertRulerUnit"/> event.
            </summary>
            <remarks>This method is called only if the property <see cref="T:ILOG.Diagrammer.Windows.Forms.RulerUnit"/> is <see cref="T:ILOG.Diagrammer.Windows.Forms.RulerUnit">RulerUnit.Custom</see>.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnRulerChanged">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.RulerChanged"/> event.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.UpdateRuler">
            <summary>
            Updates the ruler values.
            </summary>
            <remarks>You have to call this method only when changing the unit conversion method when listening to the ConvertRulerUnit event.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramRuler.OnUpdateScale">
            <summary>
            Is called to update the scale internally used by the ruler.
            </summary>
            <remarks>Use the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.LinearScale"/> property to access the scale.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.ShowMarker">
            <summary>
            Indicates whether the pointer location is displayed on the ruler.
            </summary>
            <value><see langword="true"/> if the pointer location is displayed on the ruler; Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.ShowMarkerChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.ShowMarker"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.ShowSelection">
            <summary>
            Indicates whether the selection is displayed on the ruler.
            </summary>
            <value><see langword="true"/> if the selection is displayed on the ruler; Otherwise, <see langword="false"/>.</value>
            <remarks>The selection is given by the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.SelectionStart"/> and <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.SelectionEnd"/> properties.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.ShowSelectionChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.ShowSelection"/> property is changed on the control.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.SelectionChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.SelectionStart"/> or <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.SelectionEnd"/> properties are changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.SelectionStart">
            <summary>
            Gets or sets the start of the ruler selection.
            </summary>
            <value>A <see cref="T:System.Single"/> value that represents the selection start.</value>
            <remarks>The ruler selection range is displayed with a specific background color</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.SelectionEnd">
            <summary>
            Gets or sets the end of the ruler selection.
            </summary>
            <value>A <see cref="T:System.Single"/> value that represents the selection end.</value>
            <remarks>The ruler selection range is displayed with a specific background color</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.DiagramView">
            <summary>
            Gets or sets the view monitored by this ruler.
            </summary>
            <value>
            An <see cref="T:ILOG.Diagrammer.IDiagramView"/> object that represents the object to monitor.
            </value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.DiagramViewChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.DiagramView"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.TicksAtRightOrBottom">
            <summary>
            Indicates where are located the ticks in the ruler.
            </summary>
            <value><see langword="true"/> if the ticks are located on the right or bottom sides of the ruler; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/> . </value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.TicksAtRightOrBottomChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.TicksAtRightOrBottom"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.Unit">
            <summary>
            Gets or sets the unit for the ruler background.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Windows.Forms.RulerUnit"/> values.
            The default value is <strong>RulerUnit.Pixels</strong>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.UnitChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.Unit"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.TickColor">
            <summary>
            Gets or sets the color for the ruler ticks.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> structure.
            The default value is <strong>WindowText</strong>. </value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.TickColorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.TickColor"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.MarkerColor">
            <summary>
            Gets or sets the color for the marker.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> structure.
            The default value is <strong>Red</strong>. </value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.MarkerColorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.MarkerColor"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.SelectionColor">
            <summary>
            Gets or sets the color for the selection.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> structure.
            The default value is <strong>ControlDarkDark</strong>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.SelectionColorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.SelectionColor"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.Marker">
            <summary>
            Gets the graphic object used to show the mouse pointer position on the ruler.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Graphic.Shape"/> reference.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.Selection">
            <summary>
            Gets the graphic object used to show the graphic object selection on the ruler.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Graphic.Shape"/> reference.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.MinorTicksInterval">
            <summary>
            Gets the interval between minor ticks in pixels.
            </summary>
            <value>A <see cref="T:System.Single"/> values.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.MajorTicksInterval">
            <summary>
            Gets the interval between major ticks in pixels.
            </summary>
            <value>A <see cref="T:System.Single"/> values.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.LinearScale">
            <summary>
            Gets the graphic object used to draw the ruler.
            </summary>
            <value>A <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.LinearScale"/> reference.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.MarkerPosition">
            <summary>
            Gets or sets the marker position.
            </summary>
            <value>A <see cref="T:System.Single"/> value.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.Orientation">
            <summary>
            Gets the ruler orientation.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Orientation"/> values.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.ConvertRulerUnit">
            <summary>
            Occurs to convert values from ruler units to pixels, or vice versa.
            </summary>
            <remarks>This event is raised only if the property <see cref="T:ILOG.Diagrammer.Windows.Forms.RulerUnit"/> is <see cref="T:ILOG.Diagrammer.Windows.Forms.RulerUnit">RulerUnit.Custom</see>.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.RulerChanged">
            <summary>
            Occurs when the ruler has changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.DiagramHRuler">
            <summary>
            Represents an horizontal ruler that can be connected to a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramHRuler.Orientation">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.Orientation">DiagramRuler.Orientation</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramHRuler.DefaultSize">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.UserControl.DefaultSize">UserControl.DefaultSize</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.DiagramVRuler">
            <summary>
            Represents a vertical ruler that can be connected to a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramVRuler.Orientation">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramRuler.Orientation">DiagramRuler.Orientation</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramVRuler.DefaultSize">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.UserControl.DefaultSize">UserControl.DefaultSize</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.RulerUnit">
            <summary>
            The type of unit displayed by a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramHRuler"/> or <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramVRuler"/> control.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.RulerUnit.Pixels">
            <summary>
            The unit is the pixel.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.RulerUnit.Inchs">
            <summary>
            The unit is the inch.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.RulerUnit.Centimers">
            <summary>
            The unit is the centimeter
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.RulerUnit.Custom">
            <summary>
            The unit is computed using custom code. See the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.ConvertRulerUnit"/> event.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ConvertRulerUnitEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.ConvertRulerUnit">DiagramView.ConvertRulerUnit</see> and
            event <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.ConvertRulerUnit">DiagramRuler.ConvertRulerUnit</see> events.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ConvertRulerUnitEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.ConvertRulerUnit">DiagramView.ConvertRulerUnit</see> and
            event <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramRuler.ConvertRulerUnit">DiagramRuler.ConvertRulerUnit</see> events.
            </summary>
            <remarks>
            The value to convert is given by the <see cref="P:ILOG.Diagrammer.Windows.Forms.ConvertRulerUnitEventArgs.Value"/> property. Use the <see cref="P:ILOG.Diagrammer.Windows.Forms.ConvertRulerUnitEventArgs.ConvertToPixel"/> property to know in which unit conversion should be done. Then, set the converted
            value by setting the <see cref="P:ILOG.Diagrammer.Windows.Forms.ConvertRulerUnitEventArgs.Value"/> property.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ConvertRulerUnitEventArgs.Ruler">
            <summary>
            Gets the ruler for which the conversion is being computed.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramRuler"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ConvertRulerUnitEventArgs.ConvertToPixel">
            <summary>
            Indicates whether the event has been sent to convert from the ruler unit to pixels.
            </summary>
            <value><see langword="true"/> if the event has been sent to convert from the ruler unit to pixels;
            Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ConvertRulerUnitEventArgs.Value">
            <summary>
            Gets or sets the value to convert.
            </summary>
            <value>A <see cref="T:System.Double"/> that represents the value to be converted.</value>
            <remarks>When the event is raised, this property contains the value to convert. You should set this property
            with the converted value.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ConvertRulerUnitEventArgs.Dpi">
            <summary>
            Gets the number of dpi used during the conversion.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientStopControl.FireEvent(System.Object,System.EventArgs)">
            <summary>
            Fires an event based on key in the Events list.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.GradientChooser">
            <summary>
            A control that edits a <see cref="T:ILOG.Diagrammer.GradientFill"/> instance.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GradientChooser._internalUpdate">
            <summary>
            internal flag indicating whether we are processing an internal update
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GradientChooser._fill">
            <summary>
            The edited GradientFill.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GradientChooser._delegate">
            <summary>
            The delegate that handles the current gradient family.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GradientChooser._delegates">
            <summary>
            Holds the delegates.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GradientChooser._linearConfigs">
            <summary>
            Holds the GradientConfig instances.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GradientChooser._pathConfigs">
            <summary>
            Holds the GradientPath-based config.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.GradientChooser"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.OnFillChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.GradientChooser.Fill"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>Fill</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.FireEvent(System.Object,System.EventArgs)">
            <summary>
            Fires an event based on key in the Events list.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.OnGradientChanged(System.EventArgs)">
            <summary>
            Invoked when the gradient definition of the edited <see cref="T:ILOG.Diagrammer.GradientFill"/> is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the gradient definition of the edited <strong>Fill</strong> is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.SelectGradientTypeItem">
            <summary>
            Select the gradient type in the list corresponding to the current Fill.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.UpdateControls">
            <summary>
            Updates UI controls.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.DrawPreview(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws the preview area.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.DrawTemplatePreview(System.Object,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Draws the predefined settings view.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.GradientTypeChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when a Gradient type has been selected.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.ColorsCheckChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the Checked property of the TwoColors checkbox is changed. 
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.TwoColorsChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the value of the start and end color controls is changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.OnOpacityChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the value of the opacity control is changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser._fill_Changed(System.Object,ILOG.Diagrammer.StyleChangeEventArgs)">
            <summary>
            Invoked when the edited fill is changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">A <see cref="T:ILOG.Diagrammer.StyleChangeEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.OnSelectedTemplateChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when a gradient template is chosen.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.UpdateTemplateView">
            <summary>
            Updates the templates view.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.GetDelegate(ILOG.Diagrammer.Windows.Forms.GradientChooser.GradientType)">
            <summary>
            Gets the delegate matching the specified GradientType.
            </summary>
            <param name="type">The type of the gradient.</param>
            <returns>The <see cref="T:ILOG.Diagrammer.Windows.Forms.GradientChooser.GradientDelegate"/> matching the specified GradientType</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.IsLinearGradientFill(ILOG.Diagrammer.GradientFill)">
            <summary>
            Returns whether the specified GradientFill is a LinearGradientFill.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.IsCircleGradientFill(ILOG.Diagrammer.GradientFill)">
            <summary>
            Returns whether the specfied GradientFill is of the Circle gradient family.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.IsRectangularGradientFill(ILOG.Diagrammer.GradientFill)">
            <summary>
            Returns whether the specfied GradientFill is of the Rectangular gradient family.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.IsEllipseGradientFill(ILOG.Diagrammer.GradientFill)">
            <summary>
            Returns whether the specfied GradientFill is of the Ellipse gradient family.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.IsShapeGradientFill(ILOG.Diagrammer.GradientFill)">
            <summary>
            Returns whether the specfied GradientFill is of the Shape gradient family.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GradientChooser.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientChooser.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GradientChooser.Fill">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.GradientFill"/> to edit.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GradientFill"/> instance to edit the properties.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.GradientChooser.FillChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.GradientChooser.Fill"/> property is changed on the control.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.GradientChooser.GradientChanged">
            <summary>
            Occurs when the gradient definition of the edited <see cref="T:ILOG.Diagrammer.GradientFill"/> is changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.GradientChooser.GradientType">
            <summary>
            Specifies the type of available gradient.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.GradientChooser.GradientTypeItem">
            <summary>
            A class that represents a predefined setting.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.GradientChooser.GradientConfig">
            <summary>
            A class that represents a gradient configurator. Instance of
            this class perform atomic configurations on a gradient. It is based on
            a composite pattern.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.GradientChooser.RotationConfig">
            <summary>
            A class that configure the rotation factor of a LinearGradientFill.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.GradientChooser.CenterPointConfig">
            <summary>
            A class that configure the center point of a PathGradientFill.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.GradientChooser.GradientDelegate">
            <summary>
            A class that handle various operations depending on the family of the GradientFill.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ColorPreviewControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ColorPreviewControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ColorPreviewControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ColorFields.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ColorFields.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ColorFields.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.HorizontalAlignment">
            <summary>
            Describes the horizontal alignment of a child element within a <see cref="T:ILOG.Diagrammer.Graphic.Panel"/>'s layout slot.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.HorizontalAlignment.Left">
            <summary>
            Child element is aligned to the left of the panel's layout slot.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.HorizontalAlignment.Center">
            <summary>
            Child element is aligned to the center of the panel's layout slot.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.HorizontalAlignment.Right">
            <summary>
            Child element is aligned to the right of the panel's layout slot.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.HorizontalAlignment.Stretch">
            <summary>
            Child element stretches to fill the panel's layout slot.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.VerticalAlignment">
            <summary>
            Describes the vertical alignment of a child element within a <see cref="T:ILOG.Diagrammer.Graphic.Panel"/>'s layout slot.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.VerticalAlignment.Top">
            <summary>
            Child element is aligned to the top of the panel's layout slot.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.VerticalAlignment.Center">
            <summary>
            Child element is aligned to the center of the panel's layout slot.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.VerticalAlignment.Bottom">
            <summary>
            Child element is aligned to the bottom of the panel's layout slot.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.VerticalAlignment.Stretch">
            <summary>
            Child element stretches to fill the panel's layout slot.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.DockStyle">
            <summary>
            Describes the layout of a child element within a <see cref="T:ILOG.Diagrammer.Graphic.DockPanel"/>.
            </summary>
            <remarks>Use the values of this enumeration to set the docking of the children of a <see cref="T:ILOG.Diagrammer.Graphic.DockPanel"/>
            object through the <see cref="M:ILOG.Diagrammer.Graphic.DockPanel.SetDock(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.DockStyle)"/> method.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.DockStyle.None">
            <summary>
            The element is not docked.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.DockStyle.Left">
            <summary>
            The element's left edge is docked to the left of its container.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.DockStyle.Right">
            <summary>
            The element's right edge is docked to the right of its container.
            </summary>		
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.DockStyle.Top">
            <summary>
            The element's top edge is docked to the top of its container.
            </summary>		
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.DockStyle.Bottom">
            <summary>
            The element's bottom edge is docked to the bottom of its container.
            </summary>		
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.DockStyle.Fill">
            <summary>
            All the element's edges are docked to the all edges of its container and sized appropriately.
            </summary>		
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.AnchorStyle">
            <summary>
            Describes the layout of a child element within a <see cref="T:ILOG.Diagrammer.Graphic.Canvas"/>.
            </summary>
            <remarks>Use the values of this enumeration to set the anchor of the children of a <see cref="T:ILOG.Diagrammer.Graphic.Canvas"/>
            object through the <see cref="M:ILOG.Diagrammer.Graphic.Canvas.SetAnchor(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.AnchorStyle)"/> method.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.AnchorStyle.None">
            <summary>
            The element is not anchored.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.AnchorStyle.Bottom">
            <summary>
            The element is anchored to the bottom edge of its container.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.AnchorStyle.Left">
            <summary>
            The element is anchored to the left edge of its container.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.AnchorStyle.Right">
            <summary>
            The element is anchored to the right edge of its container.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.AnchorStyle.Top">
            <summary>
            The element is anchored to the top edge of its container.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.GridUnitType">
            <summary>
            Describes the unit type of a row or column in a <see cref="T:ILOG.Diagrammer.Graphic.GridPanel"/>.
            </summary>
            <remarks>
            Describes the unit type of a row or column in a <see cref="T:ILOG.Diagrammer.Graphic.GridPanel"/>. Use the values of
            this enumeration to set the <see cref="P:ILOG.Diagrammer.Graphic.GridElement.UnitType"/> of a <see cref="T:ILOG.Diagrammer.Graphic.GridElement"/> object.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.GridUnitType.Fixed">
            <summary>
            The row or column has a fixed size.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.GridUnitType.Elastic">
            <summary>
            The row or column is elastic.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.GridUnitType.AutoSize">
            <summary>
            The row or column has automatically computes its size.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.PanelSelectionGraphic">
            <summary>
            The selection class dedicated to <see cref="T:ILOG.Diagrammer.Graphic.Panel"/> objects.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PanelSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.PanelSelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PanelSelectionGraphic.IsTypeSupported(System.Type)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.SelectionGraphic.IsTypeSupported(System.Type)">SelectionGraphic.IsTypeSupported</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PanelSelectionGraphic.GetSelectedObjectDefinitionBounds">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetSelectedObjectDefinitionBounds">DefaultSelectionGraphic.GetSelectedObjectDefinitionBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PanelSelectionGraphic.DoResize(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.ReshapeSelectionGraphic.DoResize(ILOG.Diagrammer.Rectangle2D)">ReshapeSelectionGraphic.DoResize</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PanelSelectionGraphic.ShowMoveHandle">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.DefaultSelectionGraphic.ShowMoveHandle">DefaultSelectionGraphic.ShowMoveHandle</see>.
            </summary> 
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ICircularShape">
            <summary>
            Defines an interface implemented by graphic objects representing a circle.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ICircularShape.Center">
            <summary>
            Gets or sets the center of the circle.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ICircularShape.Radius">
            <summary>
            Gets or sets the radius of the circle.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Circle">
            <summary>
            Defines a graphic object that represent a circle.
            </summary>
            <remarks>
            <see cref="T:ILOG.Diagrammer.Graphic.Circle"/> represents a graphic object that displays a circle. The circle is defined by a center point through the
            <see cref="P:ILOG.Diagrammer.Graphic.Circle.Center"/> property and a radius through the <see cref="P:ILOG.Diagrammer.Graphic.Circle.Radius"/> property.
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample shows how to create a circle.</para>
            <code lang="cs">
            Circle CreateCircle()
            {
                Circle circle = new Circle();
                circle.Center = new Point2D(100, 100);
                circle.Radius = 80;
                circle.Stroke = new Stroke(Color.Black, 2, DashStyle.Dash);
                circle.Fill = new SolidFill(Color.Blue);
                return circle;
            } 
            </code>
            <code lang="vbnet">
            Function CreateCircle() As Circle 
                Dim circle As Circle = New Circle 
                circle.Center = New Point2D(100, 100) 
                circle.Radius = 80 
                circle.Stroke = New Stroke(Color.Black, 2, DashStyle.Dash) 
                circle.Fill = New SolidFill(Color.Blue) 
                Return circle 
            End Function
            </code>
            </example>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Shape">
            <summary>
            Represents the <see langword="abstract"/> base class of graphic objects that
            represent shapes.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Shape._defaultStroke">
            <summary>
            Default stroke for shape objects.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Shape._path">
            <summary>
            The graphics path used internally to paint or do hit testing.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Shape._pathValid">
            <summary>
            Indicates whether the graphics path is valid.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Shape._fill">
            <summary>
            The fill of the shape.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Shape._stroke">
            <summary>
            The stroke of the shape.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Shape._styledBoundsCache">
            <summary>
            A cache for the styled bounds of this shape at different transformers
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Shape"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.Component.Dispose(System.Boolean)">Component.Dispose(bool)</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.OnStrokeChanged(ILOG.Diagrammer.StyleChangeType)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Shape.Stroke"/> has changed.
            </summary>
            <param name="type">One of the <see cref="T:ILOG.Diagrammer.StyleChangeType"/> values.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.OnStrokeChanged(ILOG.Diagrammer.Stroke,ILOG.Diagrammer.Stroke)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Shape.Stroke"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.StrokeIsChanging(System.Object,ILOG.Diagrammer.StyleChangeEventArgs)">
            <summary>
            Invoked when the Stroke changes in some way.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.StrokeHasChanged(System.Object,ILOG.Diagrammer.StyleChangeEventArgs)">
            <summary>
            Invoked when the Stroke changes in some way.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.OnTransformChanged(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnTransformChanged(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Transform)">GraphicObject.OnTransformChanged</see>.
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.OnFillChanged">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Shape.Fill"/> is changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.OnFillChanged(ILOG.Diagrammer.Fill,ILOG.Diagrammer.Fill)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Shape.Fill"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.FillHasChanged(System.Object,ILOG.Diagrammer.StyleChangeEventArgs)">
            <summary>
            Invoked when the Fill changes in some way.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.GetGraphicsPath">
            <summary>
            Gets a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> that represents the shape of the object.
            </summary>
            <returns>A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> that represents the shape of the object.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.ILOG#Diagrammer#IQueryGraphicsPath#GetGraphicsPath(ILOG.Diagrammer.Transform)">
            <summary>
            Gets a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> that represents the shape of the object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.InvalidateStyledBounds">
            <summary>
            Invalidates the cache for the styled bounds.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.GetStyledBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetStyledBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetStyledBounds</see>
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.ComputeStyledBounds(ILOG.Diagrammer.Transform)">
            <summary>
            Computes the styled bounds of the object when it's drawn using the specified transformation.
            </summary>
            <param name="t">A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
            <remarks>This method is called by <see cref="M:ILOG.Diagrammer.Graphic.Shape.GetStyledBounds(ILOG.Diagrammer.Transform)"/> to compute the bounds. The result is cached for
            performance reasons. You should override this method if you need to control the styled bounds.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.GetBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetBounds</see>
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.GetGeometryBounds">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetGeometryBounds">GraphicObject.GetGeometryBounds</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.InvalidateGraphicsPath">
            <summary>
            Invalidates the internal <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> of this shape.
            </summary>
            <remarks>Calling this method will cause the <see cref="M:ILOG.Diagrammer.Graphic.Shape.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)"/> method to be called.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Updates the <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> that defines the shape of the graphic object.
            </summary>
            <param name="path">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> to update.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">GraphicObject.IntersectsCore</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.PaintCore(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)">GraphicObject.PaintCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.RenderFill(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to fill the shape.
            </summary>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Shape.RenderStroke(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to draw the shape outline.
            </summary>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Shape.Stroke">
            <summary>
            Gets or sets the stroke used to draw the outline of the object.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Stroke"/> object used to draw the outline of the object. If 
            the value is <see langword="null"/>, then no outline is drawn.
            </value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Shape.Fill"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Shape.StrokeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Shape.Stroke"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Shape.Fill">
            <summary>
            Gets or sets the fill style of the object.
            </summary>
            <value> A <see cref="T:ILOG.Diagrammer.Fill"/> object that represents the 
            way the object is filled.
            The value of this property can be <see langword="null"/>,
            in this case the object is not filled.
            </value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Shape.Stroke"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Shape.FillChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Shape.Fill"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Shape.Path">
            <summary>
            Gets a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> that represents the shape of the object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Circle._center">
            <summary>
            Center in user space.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Circle._radius">
            <summary>
            Radius in user space.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Circle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Circle"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Circle.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Circle"/> class using
            the specified parameters.
            </summary>
            <param name="cx">The x coordinate of the center.</param>
            <param name="cy">The y coordinate of the center.</param>
            <param name="radius">The radius of the circle.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Circle.#ctor(ILOG.Diagrammer.Point2D,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Circle"/> class using
            the specified parameters.
            </summary>
            <param name="center">A <see cref="T:ILOG.Diagrammer.Point2D"/> object that 
            represents the center of the circle</param>
            <param name="radius">The radius of the circle.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Circle.OnCenterChanged(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Circle.Center"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Circle.OnRadiusChanged(System.Single,System.Single)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Circle.Radius"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Circle.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">GraphicObject.GetPreferredSizeCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Circle.GetGeometryBounds">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetGeometryBounds">GraphicObject.GetGeometryBounds</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Circle.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetGeometryBounds</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Circle.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Shape.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">Shape.UpdateGraphicsPath</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Circle.GetBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetBounds</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Circle.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestCore</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Circle.Center">
            <summary>
            Gets or sets the center of the circle.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> object that represents the center of the circle. The
            default value is the point at (0,0).</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Circle.Radius"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Circle.CenterChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Circle.Center"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Circle.Radius">
            <summary>
            Gets or sets the radius of this circle.
            </summary>
            <value>A float value that represents the radius of the circle. The default value is 100f.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Circle.Center"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Circle.RadiusChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Circle.Radius"/> property has changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.CircleSelectionGraphic">
            <summary>
            The selection class dedicated to objects implementing the <see cref="T:ILOG.Diagrammer.Graphic.ICircularShape"/> interface.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.FirstHandleIndex">
            <summary>
            The index of the first handle for this class.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.MoveRadiusTopHandleIndex">
            <summary>
            The index of the top handle that allows to change the circle radius.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.MoveRadiusRightHandleIndex">
            <summary>
            The index of the top handle that allows to change the circle radius.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.MoveRadiusBottomHandleIndex">
            <summary>
            The index of the top handle that allows to change the circle radius.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.MoveRadiusLeftHandleIndex">
            <summary>
            The index of the top handle that allows to change the circle radius.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.LastHandleIndex">
            <summary>
            The index of the last handle for this class.
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.CircleSelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.IsTypeSupported(System.Type)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.SelectionGraphic.IsTypeSupported(System.Type)">SelectionGraphic.IsTypeSupported</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">DefaultSelectionGraphic.GetHandleDescription</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.GetHandlePoints">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandlePoints">DefaultSelectionGraphic.GetHandlePoints</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.IsHandleVisible(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.IsHandleVisible(System.Int32)">DefaultSelectionGraphic.IsHandleVisible</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.GetHandleType(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleType(System.Int32)">DefaultSelectionGraphic.GetHandleType</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.OnInteractionStarted">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnInteractionStarted">DefaultSelectionGraphic.OnInteractionStarted</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.OnInteractionValidated">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnInteractionValidated">DefaultSelectionGraphic.OnInteractionValidated</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.DoSetRadius(System.Single)">
            <summary>
            Is called to resize the edited object during an interaction.
            </summary>
            <param name="radius">A <see cref="T:System.Single"/> that represents the new
            radius of the edited object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.MoveHandle(System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.MoveHandle(System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">DefaultSelectionGraphic.MoveHandle</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.GetHandleCursor(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleCursor(System.Int32)">DefaultSelectionGraphic.GetHandleCursor</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.ValidateGhostGraphic(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.ValidateGhostGraphic(ILOG.Diagrammer.GraphicObject)">DefaultSelectionGraphic.ValidateGhostGraphic</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.Circle">
            <summary>
            Casts the Edited object to an ICircularShape.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.CircleSelectionGraphic.CanEditRadius">
            <summary>
            Gets or sets a value indicating whether it's possible to edit the circle radius by clicking the corresponding selection 
            handle and dragging it.
            </summary>
            <value><see langword="true"/> to enable the editing of the radius; Otherwise, <see langword="false"/>.
            The default value inherits from the
            <see cref="P:ILOG.Diagrammer.SelectionStyle.CanEditShape">SelectionStyle.CanEditShape</see> property.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.Kernel">
            <summary>
            Defines a kernel matrix used in filtering operations. 
            </summary>
            <remarks>
            A kernel is a matrix describing how a given pixel 
            and its surrounding pixels affect the value computed 
            for the given pixel position in the output image of a filtering operation.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.Kernel.#ctor(System.Int32,System.Int32,System.Single[])">
            <summary>
            Creates a new <see cref="T:ILOG.Diagrammer.Filters.Kernel"/> object from an array of floats.
            </summary>
            <remarks>
            The first width*height elements of the data array are copied. 
            If the length of the data array is less than width*height, an exception is thrown. 
            </remarks>
            <param name="width">Width of the kernel.</param>
            <param name="height">Height of the kernel.</param>
            <param name="values">Kernel data in row major order.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.Kernel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.Kernel"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.Kernel.SetValues(System.Int32,System.Int32,System.Single[])">
            <summary>
            Changes the kernel data.
            </summary>
            <remarks>
            The first width*height elements of the data array are copied. 
            If the length of the data array is less than width*height, an exception is thrown. 
            </remarks>
            <param name="width">Width of the kernel.</param>
            <param name="height">Height of the kernel.</param>
            <param name="values">Kernel data in row major order.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.Kernel.Equals(System.Object)">
            <summary>
            Checks if <paramref name="obj"/> is a <see cref="T:ILOG.Diagrammer.Filters.Kernel"/> and has the same values as this kernel.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.Kernel.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.Kernel.GetKernelValues">
            <summary>
            Gets the kernel data in row major order.
            </summary>
            <returns>The kernel data.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.Kernel.ToString">
            <summary>
            This member overrides <see cref="M:System.Object.ToString">object.ToString</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.Kernel.Width">
            <summary>
            Gets the width of the kernel.
            </summary>
            <value>The width of the kernel</value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.Kernel.Height">
            <summary>
            Gets the height of the kernel.
            </summary>
            <value>The height of the kernel</value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.Kernel.Values">
            <summary>
            Gets or sets the kernel data in row major order.
            </summary>
            <value>The kernel data in row major order.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializer">
            <summary>
            A class to serialize object instances.
            </summary>
            <remarks>
            The <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializer"/> class is a generic class that is
            able to serialize any kind of objects to or from an XML representation.
            The only requirement is that the class to serialize must define a default
            constructor.
            <para>
            This class maintains the state of the reference graph during the serialization,
            and recycles instances when the graph is deserialized.
            </para>
            <para>
            The format used by the serializer follows a Class-Property-Class pattern. 
            The class declaration is serialized first as an Xml element (provided the serialization scope allows it),
            then the properties of the class. Each property is serialized as an Xml element recursively by
            means of their corresponding serializers. 
            <example>
            The following example illustrates the Class-Property-Class pattern, where a class A with two properties PropB and PropC
            of type respectively B and C would be serialized as:
            <code>
            <A>
              <PropB>
                <B>
                 ... Properties of class B
                </B>
              </PropB>
              <PropC>
                <C>
                 ... Properties of class C
                </C>
              </PropC>
            </A>
            </code>
            </example>
            Exceptions to this rule are for properties whose data type support bi-directional string conversion
            (object-to-string and string-to-object). For such cases, properties are serialized as <see cref="T:System.Xml.XmlAttribute"/>
            of the parent element.
            </para>
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/>
            <seealso cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/>
        </member>
        <member name="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase">
            <summary>
            The base class for XML serializers.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase.Serialize(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Serializes an XML representation of the given instance to the given <see cref="T:System.Xml.XmlDocument"/> .
            </summary>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="instance">The instance to serialize.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="parent">The parent node of this xml representation.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase.Deserialize(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Creates and initializes an instance from the given XML representation.
            </summary>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="instance">The instance to initialize or <see langword="null"/> if the instance does not exist yet.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="element">The root node of this XML representation </param>
            <returns>An instance created and initialized from this XML representation.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializer"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializer.Serialize(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Overrides the <see cref="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase.Serialize(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)">ObjectXmlSerializerBase.Serialize</see> member.
            </summary>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="instance">The instance to serialize.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="parent">The parent node of this xml representation.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializer.ShouldSerializeDeclaration(System.Object,ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Xml.XmlDocument,ILOG.Diagrammer.Serialization.XmlSerializerContext)">
            <summary>
            Returns whether a class declaration element should be written for the given instance.
            </summary>
            <param name="instance">The instance being serialized.</param>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="context">The current <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializerContext"/>.</param>
            <returns><see langword="true"/> if a class declaration element should be written for the given instance,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializer.ShouldSerialize(System.Object,ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Xml.XmlDocument,ILOG.Diagrammer.Serialization.XmlSerializerContext)">
            <summary>
            Returns whether this serializer can serialize the specified instance.
            </summary>
            <remarks>The default implementation returns <see langword="false"/> when there is no default constructor
            for the instance type. Exceptions to this rule are String, value types or properties that have a 
            serialization visibility to <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Content"/>.</remarks>
            <param name="instance">The instance being serialized.</param>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="context">The current <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializerContext"/>.</param>
            <returns><see langword="true"/> if this serializer can serialize the specified instance,
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializer.SerializeDeclaration(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            Serializes the class declaration of the given instance.
            </summary>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="instance">The instance to serialize.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="parent">The parent node of this xml representation.</param>
            <param name="refElement">The <see cref="T:System.Xml.XmlElement"/> corresponding to this instance if it as already
            been serialized, if any.</param>
            <returns>The <see cref="T:System.Xml.XmlElement"/> representing the class declaration.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializer.MakeRefDefRelationship(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Xml.XmlDocument,System.Xml.XmlElement,System.Xml.XmlElement,System.Object)">
            <summary>
            Implements the relationship between two elements that references the same instance.
            </summary>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="refElement">The referenced element, ie the one which should have the def:Name attribute.</param>
            <param name="element">The referent element, ie the one which should have the ref:Name attribute.</param>
            <param name="instance">The instance to serialize.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializer.SerializeProperties(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Serializes the class properties of the given instance.
            </summary>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="instance">The instance to serialize.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="parent">The parent node of this xml representation.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializer.SerializeProperty(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Serializes a property of the given instance.
            </summary>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="instance">The instance to serialize.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="parent">The parent node of this xml representation.</param>
            <param name="pdesc">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the property being serialized.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializer.GetPropertyValue(System.Object,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns the value of the instance property described by the specified <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </summary>
            <param name="instance">The instance to get the property value.</param>
            <param name="pdesc">The PropertyDescriptor describing the requested property.</param>
            <returns>The value of the property described by the specified <see cref="T:System.ComponentModel.PropertyDescriptor"/></returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializer.AddDefinitionElement(System.Xml.XmlDocument,ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object)">
            <summary>
            Creates a declaration class for this object and registers it as an orphan defintion element.
            </summary>
            <returns>The declaration element, or null if the object type has no public default ctor.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializer.Deserialize(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Overrides the <see cref="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase.Deserialize(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)">ObjectXmlSerializerBase.Deserialize</see> member.
            </summary>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="instance">The instance to initialize or <see langword="null"/> if the instance does not exist yet.</param>
            <param name="element">The root node of this XML representation </param>
            <returns>An instance created and initialized from this XML representation.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializer.DeserializeDeclaration(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Reads the given XML class declaration.
            </summary>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="objectElement">The class declaration element.</param>
            <returns>An instance created from the given XML class declaration.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializer.GetReference(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Xml.XmlDocument,System.String)">
            <summary>
            Gets the instance referenced by the specified name in the document.
            </summary>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="refName">The name of the instance.</param>
            <returns>The instance referenced by the specified name in the document.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializer.CreateInstance(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Xml.XmlDocument,System.Type,System.String,System.Xml.XmlElement)">
            <summary>
            Creates an instance of the given data type.
            </summary>
            <param name="manager">The <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager"/> instance that manages the serialization.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="objType">The data type to instantiate.</param>
            <param name="name">The name associated with this instance.</param>
            <param name="element">The class declaration element.</param>
            <returns>An instance of the given data type.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializer.DeserializeProperties(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Xml.XmlDocument,System.Object,System.Xml.XmlElement)">
            <summary>
            Reads the properties from the given xml representation and initialized the specified instance.
            </summary>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="instance">The instance to initialize.</param>
            <param name="objectElement">The XML representation.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.KernelSerializer.ShouldSerialize(System.Object,ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Xml.XmlDocument,ILOG.Diagrammer.Serialization.XmlSerializerContext)">
            <summary>
            overrided to bypass the missing default ctor.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.FilterDialog">
             <summary>
             Defines a dialog box that allows to select a <see cref="T:ILOG.Diagrammer.Filter"/>.
             </summary>
             <remarks>
             The class defines a dialog box that allows to edit a <see cref="T:ILOG.Diagrammer.Filter"/> object.
             You specify the filter to edit through the <see cref="P:ILOG.Diagrammer.Windows.Forms.FilterDialog.Filter"/> property. You can preview the result
             of the filter on a specific graphic object through the <see cref="P:ILOG.Diagrammer.Windows.Forms.FilterDialog.PreviewObject"/> property.
             <p/>
             <img src="images/Windows/Forms/filterDialog.png"/>
             </remarks>
             <example>
             <para lang="cs,vbnet">
             The following example shows how to use the dialog box.
             </para>
             <code lang="cs">
             Filter EditFilter(Filter filter, GraphicObject preview)
             {
                // Create the dialog.
                FilterDialog dialog = new FilterDialog();
            
                // Specify the filter to edit.
                dialog.Filter = filter;
            
                // Specify the graphic object used to preview the result
                dialog.PreviewObject = preview;
            
                // Show the dialog
                if (dialog.ShowDialog() == DialogResult.OK)
                {
                     // returns the resulting filter
                      return dialog.Filter;
                }
                // in other case return the old filter
                return filter;
             }
             </code>
             <code lang="vbnet">
             Function EditFilter(ByVal filter As Filter, ByVal preview As GraphicObject) As Filter 
            
               ' Create the dialog
               Dim dialog As FilterDialog = New FilterDialog 
            
               ' Specify the filter to edit
            
               dialog.Filter = filter 
            
               ' Specify the graphic object used to preview the result
               dialog.PreviewObject = preview 
            
              ' Show the dialog
               If dialog.ShowDialog = DialogResult.OK Then 
            
                 ' returns the resulting filter
                 Return dialog.Filter 
            
               End If 
            
               ' in other case return the old filter
               Return filter 
             End Function
            
             </code>
             </example>
             <seealso cref="T:ILOG.Diagrammer.Windows.Forms.StrokeDialog"/>
             <seealso cref="T:ILOG.Diagrammer.Windows.Forms.FormatLinkDialog"/>
             <seealso cref="T:ILOG.Diagrammer.Windows.Forms.FillDialog"/>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.FilterDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.FilterDialog"/> class.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.FilterDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.FilterDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.FilterDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.FilterDialog.AllowNullFilter">
            <summary>
            Gets or sets a value indicating whether a button is visible to specify a null filter.
            </summary>
            <value><see langword="true"/> to show the button; Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.FilterDialog.Filter">
            <summary>
            Gets or sets the filter selected in the dialog box.
            </summary>
            <value>A <see cref="P:ILOG.Diagrammer.Windows.Forms.FilterDialog.Filter"/> instance.</value>
            <remarks>When setting or getting the property, the value is cloned.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.FilterDialog.ShowAdvancedPage">
            <summary>
            Gets or sets a value indicating whether to show the advanced tab page.
            </summary>
            <value><see langword="true"/> to show the advanced page; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.FilterDialog.PreviewObject">
            <summary>
            Gets or sets the graphic object that will be used to preview the filter effect.
            </summary>
            <value>An <see cref="T:ILOG.Diagrammer.GraphicObject"/> object used to preview the filter effect.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.SelectInteractor">
            <summary>
            An interactor class to perform selection on a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
            <remarks>
            <p>The <see cref="T:ILOG.Diagrammer.Windows.Forms.SelectInteractor"/> allows to select, move, copy, or reparent graphic objects.</p>
            <p>The <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.SelectionStyle"/> property can be used to configure the interactor.</p>
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.ZoomInteractor"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.RotateInteractor"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.PanInteractor"/>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor">
            <summary>
            An interactor that drags a rectangle in a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> to perform an action.
            </summary>
            <remarks>
            <p>This class is <see langword="abstract"/>.</p>
            <p>To use this interactor: Click the view, drag the mouse, then release the 
            mouse button. The <see cref="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.DoIt"/> method is called to perform the interactor action.
            The <see cref="P:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.DragRectangle"/> property can be used to get the coordinates of the dragged
            rectangle.</p>
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.SelectInteractor"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.PanInteractor"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.ZoomInteractor"/>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor._points">
            <summary>
            The four points that define the rectangle in Grapher coordinate.
            0: TL
            1: TR
            2: BR
            3: BL
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor._startPt">
            <summary>
            The starting point of the drag rectangle.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor._ratio">
            <summary>
            The aspect ratio of the dragged rectangle.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.#ctor(System.Windows.Forms.MouseButtons)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor"/> class.
            </summary>
            <param name="buttons">The button that starts the operation.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.OnAspectRatioChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.AspectRatio"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>AspectRatio</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.OnRectangleColorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.RectangleColor"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>RectangleColor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.OnDashStyleChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.DashStyle"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>DashStyle</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseDown</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseMove</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseUp(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseUp</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">ViewInteractor.OnKeyDown</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.StopInteraction(System.Boolean)">
            <summary>
             Invoked when the interaction ends.
            </summary>
            <param name="validate"><see langword="true"/> to validate the interaction; <see langword="false"/> to abort.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.ComputePoints(ILOG.Diagrammer.Point2D)">
            <summary>
            Computes the definition points of the dragged rectangle depending on the current mouse position.
            </summary>
            <param name="loc">The current mouse position.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.ValidateRect(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Point2D)">
            <summary>
            Invoked to validate the computed rectangle.
            </summary>
            <param name="rect">The computed rectangle expressed in view coordinate system.</param>
            <param name="p">The current point location.</param>
            <returns>The validated dragged rectangle.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.DoIt">
            <summary>
            Performs the interaction.
            </summary>
            <remarks>This method is invoked when the mouse button that started the interactor
            is released to perform the interaction.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.GetInvalidateRect">
            <summary>
            Gets the rectangle to invalidate.
            </summary>
            <returns>The rectangle to invalidate.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.DrawGhost(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Draws the dragged rectangle.
            </summary>
            <param name="context">The graphics context.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.AspectRatio">
            <summary>
            Gets or sets the aspect ratio of the dragged rectangle.
            </summary>
            <remarks>This method allows you to set an aspect ratio for the rectangle.
            A value of zero allows dragging any rectangle regardless of the aspect ratio.</remarks>
            <value>The aspect ratio of the dragged rectangle. The default value is <strong>0</strong>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.AspectRatioChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.AspectRatio"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.CanScroll">
            <summary>
            Indicates whether moving the mouse outside the diagram view during an interaction scrolls it.
            </summary>
            <value><see langword="true"/> if scrolling is allowed; <see langword="false"/> otherwise.</value>
            <remarks>The default behavior inherits from the <see cref="P:ILOG.Diagrammer.SelectionStyle.AutoScroll"/> value.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.StartPoint">
            <summary>
            Gets the starting point of the interaction.
            </summary>
            <remarks>The point is expressed in the grapher coordinate system.</remarks>
            <value>The starting point of the interaction in grapher coordinate.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.DragRectangle">
            <summary>
            Gets the dragged rectangle.
            </summary>
            <remarks>The rectangle is expressed in the view coordinate system.</remarks>
            <value>The dragged rectangle in view coordinate.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.DefPoints">
            <summary>
            Gets the rectangle definition points.
            </summary>
            <remarks>The point are expressed in the grapher coordinate system.<br>The first element in the array is the top-left corner, 
            the second element the top-right corner, the third element the bottom-left corner.</br></remarks>
            <value>The rectangle definition points.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.RectangleColor">
            <summary>
            Gets or sets the color of the dragged rectangle.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the color of the dragged rectangle.
            The default value is <see cref="P:System.Drawing.SystemColors.WindowText"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.RectangleColorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.RectangleColor"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.DashStyle">
            <summary>
            Gets or sets the dash style of the dragged rectangle.
            </summary>
            <value>A <see cref="T:System.Drawing.Drawing2D.DashStyle"/> that represents the dash style of the dragged rectangle.
            The default value is <see cref="F:System.Drawing.Drawing2D.DashStyle.Dot"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.DashStyleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.DashStyle"/> property is changed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.SelectInteractor._moveCursor">
            <summary>
            The cursor when the selection is moved
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.SelectInteractor._hoverCursor">
            <summary>
            The cursor when the mouse hovers the view.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.SelectInteractor._copyCursor">
            <summary>
            The cursor when the selection is copied.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.SelectInteractor._reparentCursor">
            <summary>
            The cursor when the selection is reparented.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.SelectInteractor._copyReparentCursor">
            <summary>
            The cursor when the selection is copied and reparented.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.SelectInteractor.DragSelRectFlag">
            <summary>
            internal flag indicating a selection-by-rectangle is performed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.SelectInteractor.DeselectSelFlag">
            <summary>
            internal flag indicating to deselect the current sel.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ReselectFlag">
            <summary>
            internal flag indicating to deselect the current sel.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.SelectInteractor.MoveStartedFlag">
            <summary>
            internal flag indicating that moving has started.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.SelectInteractor._flag">
            <summary>
            the flag
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.SelectInteractor._hitTestObj">
            <summary>
            The current GraphicObject that has been hit by the interaction.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.SelectInteractor._mouseDownLocation">
            <summary>
            The starting point of the drag in view location.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.SelectInteractor._ghostObjs">
            <summary>
            The ghost objects
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.SelectInteractor._ghostBounds">
            <summary>
            The ghost bounds (cached)
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.SelectInteractor"/> class.
            </summary>
            <remarks>The default button to start interactions is the left button.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.#ctor(System.Windows.Forms.MouseButtons)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.SelectInteractor"/> class.
            </summary>
            <param name="buttons">The mouse button that starts the interaction.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.SetFlag(System.Int32,System.Boolean)">
            <summary>
            Sets the specified flag to the specified value.
            </summary>
            <param name="flag">The flag constant.</param>
            <param name="value">The value of the flag.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.GetFlag(System.Int32)">
            <summary>
            Gets the value of the given flag.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ShouldSerializeCopyCursor">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CopyCursor"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ResetCopyCursor">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CopyCursor"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.OnCopyCursorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CopyCursor"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>CopyCursor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ShouldSerializeReparentCursor">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ReparentCursor"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ResetReparentCursor">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ReparentCursor"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.OnReparentCursorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ReparentCursor"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>ReparentCursor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ShouldSerializeCopyReparentCursor">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CopyReparentCursor"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ResetCopyReparentCursor">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CopyReparentCursor"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.OnCopyReparentCursorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CopyReparentCursor"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>CopyReparentCursor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ShouldSerializeHoverCursor">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.HoverCursor"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ResetHoverCursor">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.HoverCursor"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.OnHoverCursorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.HoverCursor"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>HoverCursor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ShouldSerializeMoveCursor">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.MoveCursor"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ResetMoveCursor">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.MoveCursor"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.OnMoveCursorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.MoveCursor"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>MoveCursor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ShouldDispatchMouseEvents(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.ShouldDispatchMouseEvents(ILOG.Diagrammer.GraphicObject)">ViewInteractor.ShouldDispatchMouseEvents</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CreateGhostGraphic(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Is called to create the ghost graphic that will be used to render selection interactions
            when the view is not in selection instant editing mode.
            </summary>
            <remarks>
            <para>when the view is not in selection instant editing mode, the
            modifications made on the selected objects are not
            instantaneous. Instead, a ghost graphic is created on which modifications will be performed. At the end of
            the interaction, the modifications made on the ghost graphic will be applied to the real graphic objects.
            </para>
            <para>The default implemetation of this method creates of clone of <param name="obj"/> with
            a transparency of 50%.
            </para>
            </remarks>
            <returns>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference.</returns>
            <seealso cref="P:ILOG.Diagrammer.SelectionStyle.InstantEditing"/>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.DoCopyObject(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.GraphicContainer,ILOG.Diagrammer.Point2D)">
            <summary>
            Is called to copy the specified objects.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <param name="clone">The clone of the graphic object.</param>
            <param name="target">The target container for the graphic object.</param>
            <param name="point">The <see cref="T:ILOG.Diagrammer.Point2D"/> at which the obj object should be placed in view coordinates.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.DoMoveObject(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Point2D)">
            <summary>
            Is called to move the specified object.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.DoReparentObject(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.GraphicContainer,ILOG.Diagrammer.Point2D)">
            <summary>
            Is called to reparent the specified object
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <param name="target">The new parent for the graphic object.</param>
            <param name="point">The <see cref="T:ILOG.Diagrammer.Point2D"/> at which the obj object should be placed in view coordinates.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseDoubleClick</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.StartEditText(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Starts the editing of the specified <see cref="T:ILOG.Diagrammer.GraphicObject"/> text.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/>.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.StopEditText(System.Boolean)">
            <summary>
            stops the current text editing.
            </summary>
            <param name="validate"><see langword="true"/> to validate the text editing; Otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CreateEditControl(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Is called to create the control that will be used for editing the object text.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> whose text is going to be edited.</param>
            <remarks>The default implementation returns a <see cref="T:System.Windows.Forms.TextBox"/> control.</remarks>
            <returns>A <see cref="T:System.Windows.Forms.Control"/> instance.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.AllowTextEditing(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Indicates whether or not text editing is allowed for the specfied object.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <returns><see langword="true"/> if text editing is allowed for the specified object; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CancelTextEditing(ILOG.Diagrammer.GraphicObject,System.Windows.Forms.Control)">
            <summary>
            Is called to cancel the text editing of the specified object.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> that was used to edit the text object.</param>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ValidateTextEditing(ILOG.Diagrammer.GraphicObject,System.Windows.Forms.Control)">
            <summary>
            Is called to validate the text editing of the specified object.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> that was used to edit the text object.</param>
            <remarks>The default behavior sets the graphic object text to the <see cref="P:System.Windows.Forms.Control.Text"/> property.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseDown</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseMove</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseUp(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseUp</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">ViewInteractor.OnKeyDown</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseEnter(System.EventArgs)">ViewInteractor.OnMouseEnter</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.DrawGhost(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.DrawGhost(ILOG.Diagrammer.DrawingContext)">ViewInteractor.DrawGhost</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.GetInvalidateRect">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.GetInvalidateRect">DragRectangleInteractor.GetInvalidateRect</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.UpdateStatusBarText">
            <summary>
            This method overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.UpdateStatusBarText">ViewInteractor.UpdateStatusBarText</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.StartInteraction">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.StartInteraction">ViewInteractor.StartInteraction</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.StopInteraction(System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.StopInteraction(System.Boolean)">ViewInteractor.StopInteraction</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.DoIt">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.DoIt">DragRectangleInteractor.DoIt</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.GetSelectableObject(System.Drawing.Point)">
            <summary>
            Returns the selectable object located at the specified position.
            </summary>
            <param name="p">A <see cref="T:System.Drawing.Point"/> structure.</param>
            <returns>The <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance at the specified location.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.GetSelectableObject(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Returns the first selectable object in the specified <see cref="T:ILOG.Diagrammer.GraphicObject"/> hierarchy.
            </summary>
            <param name="obj">A graphic object.</param>
            <returns>The first selectable object in the specified object hierarchy.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.SelectInteractor.GetDropTarget(System.Drawing.Point)">
            <summary>
            Returns the <see cref="T:ILOG.Diagrammer.GraphicContainer"/> that can be used as a target for a reparent operation.
            </summary>
            <param name="loc">A <see cref="T:System.Drawing.Point"/> structure.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.</returns>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.SelectionStyle">
            <summary>
            Gets the style for the selection.
            </summary>
            <value>A <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.SelectionStyle"/> instance.</value>
            <remarks>The value returned it the selection style set on the interactor view.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.Selection">
            <summary>
            Gets the selection service.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.SelectionService"/> instance.</value>
            <remarks>The value returned it the selection service set on the interactor view.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.DrawsGhostOnTop">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Windows.Forms.ViewInteractor.DrawsGhostOnTop">ViewInteractor.DrawsGhostOnTop</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.SnapToGrid">
            <summary>
            Indicates whether the selected object should snap to the grid points during an interaction.
            </summary>
            <value><see langword="true"/> if the selected object should snap to the grid points; <see langword="false"/> otherwise.</value>
            <remarks>The default behavior inherits from the <see cref="P:ILOG.Diagrammer.SelectionStyle.SnapToGrid"/> value.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.InstantEditing">
            <summary>
            Indicates whether the editing is instantaneous.
            </summary>
            <value><see langword="true"/> if the editing is instantaneous; otherwise,
            <see langword="false"/>.</value>
            <remarks>The default behavior inherits from the <see cref="P:ILOG.Diagrammer.SelectionStyle.InstantEditing"/> value.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.MultipleSelection">
            <summary>
            Indicates whether multiple selection is allowed.
            </summary>
            <value><see langword="true"/> if multiple selection is allowed; otherwise,
            <see langword="false"/>.</value>
            <remarks>The default behavior inherits from the <see cref="P:ILOG.Diagrammer.SelectionStyle.MultipleSelection"/> value.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.RectangleSelection">
            <summary>
            Indicates whether multiple selection is allowed by dragging a rectangle around objects.
            </summary>
            <value><see langword="true"/> if multiple selection is allowed by dragging a rectangle around objects; otherwise,
            <see langword="false"/>.</value>
            <remarks>The default behavior inherits from the <see cref="P:ILOG.Diagrammer.SelectionStyle.RectangleSelection"/> value.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CanCopy">
            <summary>
            Indicates whether copy of selected objects is allowed during an interaction.
            </summary>
            <value><see langword="true"/> if copy of selected objects is allowed; <see langword="false"/> otherwise.</value>
            <remarks>The default behavior inherits from the <see cref="P:ILOG.Diagrammer.SelectionStyle.CanCopy"/> value.
            Copying selected objects is performed by pressing the Control key while dragging the selection.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CanMove">
            <summary>
            Indicates whether moving selected objects is allowed during an interaction.
            </summary>
            <value><see langword="true"/> if moving selected objects is allowed; <see langword="false"/> otherwise.</value>
            <remarks>The default behavior inherits from the <see cref="P:ILOG.Diagrammer.SelectionStyle.CanMove"/> value.
            Moving selected objects is performed by dragging them using the mouse.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CanReparent">
            <summary>
            Indicates whether reparent of selected objects is allowed during an interaction.
            </summary>
            <value><see langword="true"/> if reparent of selected objects is allowed; <see langword="false"/> otherwise.</value>
            <remarks>The default behavior inherits from the <see cref="P:ILOG.Diagrammer.SelectionStyle.CanReparent"/> value.
            Copying selected objects is performed by pressing the Shift key while dragging the selection.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CanEditText">
            <summary>
            Indicates whether editing the text of selected objects is allowed.
            </summary>
            <value><see langword="true"/> if editing the text of selected objects is allowed; <see langword="false"/> otherwise.</value>
            <remarks>The default behavior inherits from the <see cref="P:ILOG.Diagrammer.SelectionStyle.CanEditText"/> value.
            To edit the text property of a <see cref="T:ILOG.Diagrammer.GraphicObject"/>, double click it.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CanDispatchEvents">
            <summary>
            Indicates whether the interactor can dispatch mouse events to <see cref="T:ILOG.Diagrammer.GraphicObject"/>'s.
            </summary>
            <value><see langword="true"/> if the interactor can dispatch mouse events to the <see cref="T:ILOG.Diagrammer.GraphicObject"/>,
            <see langword="false"/> otherwise.</value>
            <remarks>The default behavior inherits from the <see cref="P:ILOG.Diagrammer.SelectionStyle.CanDispatchEvents"/> value.
            When this property returns <see langword="true"/>, mouse events will be dispatched to objects 
            that accepts selection events. See the <see cref="M:ILOG.Diagrammer.GraphicContainer.ShouldDispatchSelectionEvents(ILOG.Diagrammer.GraphicObject)"/> method for details.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.PrimarySelectionPolicy">
            <summary>
            Gets or sets the policy for the primary selection.
            </summary>
            <value>One of the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.PrimarySelectionPolicy"/> values.</value>
            <remarks>The default behavior inherits from the <see cref="P:ILOG.Diagrammer.SelectionStyle.PrimarySelectionPolicy"/> value.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CopyCursor">
            <summary>
            Gets or sets the mouse cursor when the selection should be copied.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Cursor"/> to use when the selection should be copied.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CopyCursorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CopyCursor"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ReparentCursor">
            <summary>
            Gets or sets the mouse cursor when changing the parent of the selected objects.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Cursor"/> to use when changing the parent of the selected objects.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ReparentCursorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.ReparentCursor"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CopyReparentCursor">
            <summary>
            Gets or sets the mouse cursor when changing the parent of the selected objects and copy the selection.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Cursor"/> to use when changing the parent of the selected objects and copy the selection.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CopyReparentCursorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.CopyReparentCursor"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.HoverCursor">
            <summary>
            Gets or sets the mouse cursor when the pointer moves over an object.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Cursor"/> to use when the pointer moves over an object.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.SelectInteractor.HoverCursorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.HoverCursor"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.MoveCursor">
            <summary>
            Gets or sets the mouse cursor when the selection is moved.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Cursor"/> to use when the selection is moved.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.SelectInteractor.MoveCursorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.MoveCursor"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SelectInteractor.AllowsToolTips">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Windows.Forms.ViewInteractor.AllowsToolTips">ViewInteractor.AllowsToolTips</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditGradientInteractor.GradientSelectionGraphic.ApplyFill">
            <summary>
            This method changes the Fill of the selected object with _fill. It is needed
            to make undo/redo available.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditGradientInteractor.GradientSelectionGraphic.OnInteractionStarted">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.ReshapeSelectionGraphic.OnInteractionStarted">ReshapeSelectionGraphic.OnInteractionStarted</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditGradientInteractor.GradientSelectionGraphic.OnInteractionValidated">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnInteractionValidated">DefaultSelectionGraphic.OnInteractionValidated</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditGradientInteractor.LinearGradientSelectionGraphic.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This method overrides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditGradientInteractor.LinearGradientSelectionGraphic.SnapHandlePoint(System.Int32,ILOG.Diagrammer.Point2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.SnapHandlePoint(System.Int32,ILOG.Diagrammer.Point2D)">DefaultSelectionGraphic.SnapHandlePoint</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditGradientInteractor.PathGradientSelectionGraphic.OnInteractionStarted">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnInteractionStarted">DefaultSelectionGraphic.OnInteractionStarted</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditGradientInteractor.PathGradientSelectionGraphic.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This method overrides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.EditGradientInteractor.PathGradientSelectionGraphic.SnapHandlePoint(System.Int32,ILOG.Diagrammer.Point2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.SnapHandlePoint(System.Int32,ILOG.Diagrammer.Point2D)">DefaultSelectionGraphic.SnapHandlePoint</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Internal.CustomLicenseProvider">
            <summary>
            A Custom LicenseProvider that needs to be subclassed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Internal.ILOGLicense">
            <summary>
            A License for ILOG Products...
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Internal.ILOGLicenseProvider">
            <summary>
            The ILOG License Provider
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Internal.ILOGLicenseProvider.GetDesignTimeLicenseKey(System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Returned key is crypted.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Internal.ILOGLicenseProvider.ValidateLicenseKey(System.Type,System.String,System.Boolean)">
            <summary>
            The param licenseKey is crypted...
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Internal.ILOGLicenseProvider.CreateLicense(System.Type,System.String,System.Boolean)">
            <summary>
            Create the License itself.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.JavaStyleEnumerator">
            <summary>
            An adapter for IEnumerator to the Java style enumerator.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.IJavaStyleEnumerator">
            <summary>
            An enumerator in Java style.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.IJavaStyleEnumerator.HasMoreElements">
            <summary>
            Gets whether there are more elements.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.IJavaStyleEnumerator.NextElement">
            <summary>
            Gets the next element.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.JavaStyleEnumerator.#ctor(System.Collections.ICollection)">
            <summary>
            Constuctor.       
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.JavaStyleEnumerator.#ctor(System.Collections.IEnumerator)">
            <summary>
            Constuctor.       
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.JavaStyleEnumerator.IsCreatedFromCollection">
            <summary>
            Gets true if created from collection.         
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.JavaStyleEnumerator.GetCollection">
            <summary>
            Returns the underlying instance of ICollection, if any, or null otherwise.       
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.JavaStyleEnumerator.HasMoreElements">
            <summary>
            Gets whether there are more elements.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.JavaStyleEnumerator.NextElement">
            <summary>
            Gets the next element.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ContentControl">
            <summary>
            Provides the <see langword="abstract"/> base class for controls that contain one child.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.ContentControl"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ContentControl.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.Dispose(System.Boolean)">GraphicObject.Dispose</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ContentControl.PaintChildren(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.PaintContent(ILOG.Diagrammer.DrawingContext)">GraphicContainer.PaintContent</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ContentControl.HitTestChildren(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.HitTestContent(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicContainer.HitTestContent</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ContentControl.IntersectsChildren(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.IntersectsContent(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">GraphicContainer.IntersectsContent</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ContentControl.OnContentChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.GraphicObject)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.ContentControl.Content"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ContentControl.OnContentMarginsChanged(ILOG.Diagrammer.Margins,ILOG.Diagrammer.Margins)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.ContentControl.ContentMargins"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ContentControl.CanMoveChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanMoveChild(ILOG.Diagrammer.GraphicObject)">GraphicContainer.CanMoveChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ContentControl.CanRotateChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanRotateChild(ILOG.Diagrammer.GraphicObject)">GraphicContainer.CanRotateChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ContentControl.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">GraphicContainer.CanResizeChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ContentControl.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">GraphicObject.GetPreferredSizeCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ContentControl.DoLayout(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Is called to layout the <see cref="P:ILOG.Diagrammer.Graphic.ContentControl.Content"/> of this control.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ContentControl.CanDropChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanDropChild(ILOG.Diagrammer.GraphicObject)">GraphicContainer.CanDropChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ContentControl.AddChildren(ILOG.Diagrammer.GraphicObject[])">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.AddChildren(ILOG.Diagrammer.GraphicObject[])">GraphicContainer.AddChildren</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ContentControl.InsertChildren(System.Int32,ILOG.Diagrammer.GraphicObject[])">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.InsertChildren(System.Int32,ILOG.Diagrammer.GraphicObject[])">GraphicContainer.InsertChildren</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ContentControl.RemoveChildren(ILOG.Diagrammer.GraphicObject[])">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.RemoveChildren(ILOG.Diagrammer.GraphicObject[])">GraphicContainer.RemoveChildren</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ContentControl.GetChildZOrder(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.GetChildZOrder(ILOG.Diagrammer.GraphicObject)">GraphicContainer.GetChildZOrder</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ContentControl.SetChildZOrder(ILOG.Diagrammer.GraphicObject,System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.SetChildZOrder(ILOG.Diagrammer.GraphicObject,System.Int32)">GraphicContainer.SetChildZOrder</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ContentControl.Content">
            <summary>
            Gets or sets the content of this control.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ContentControl.ContentChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ContentControl.Content"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ContentControl.ContentMargins">
            <summary>
            Gets or sets the margins of the content.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Margins"/> structure.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ContentControl.ContentMarginsChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ContentControl.ContentMargins"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ContentControl.HasPreferredHeight">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight">GraphicObject.HasPreferredHeight</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ContentControl.HasPreferredWidth">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth">GraphicObject.HasPreferredWidth</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ContentControl.Children">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.Children">GraphicContainer.Children</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ContentControl.SupportsChildManagement">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.SupportsChildManagement">GraphicContainer.SupportsChildManagement</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ContentControl.SupportsChildReparenting">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.SupportsChildReparenting">GraphicContainer.SupportsChildReparenting</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Design.CustomLineCapConverter">
            <summary>
            A type converter for CustomLineCaps to string.
            </summary>
            <remarks>
            Returns a string of the form "2x4 Arrow" or "2x4 Non-filled Arrow".
            Does not handle conversion from string.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.HierarchicalRelativeLevelConstraint">
             <summary>
             The class <strong>HierarchicalRelativeLevelConstraint</strong> is a
             constraint to place a node relative to another node.
             </summary>
             <remarks>
             It forces a node to be placed at a level with higher index than
             another node. The constraint can also be applied to groups of nodes. 
             
             <p>
             Nodes are organized in horizontal or vertical levels numbered from 0
             to "n". If the link flow direction is from top to bottom, the nodes
             with level index 0 are placed in the topmost level, and the nodes
             with higher level indices are placed in the levels below. If the link
             flow direction is from left to right, the nodes with level index 0
             are placed in the leftmost level, and the nodes with higher level
             indices are placed in the levels farther to the right. 
             </p>
             <p>
             The constraint is evaluated, if the incremental mode is disabled. If
             the incremental mode is enabled, the constraint is only evaluated for
             those nodes that are marked for incremental recalculation, because
             otherwise, the incremental positions of the nodes are dominant. 
             </p>
             <p>
             Among the constraints, this kind is dominated by level range
             constraints, that is, if the level range for node A is below the
             level range of node B, then A cannot be forced to be placed in a
             higher level than B. This kind of constraint is also dominated by the
             same level constraints, that is, if both nodes A and B are forced to
             be at the same level, then  A cannot be forced to be placed in a
             higher level than B. 
             </p>
             <p>
             The relative constraints have priorities. Conflicting relative level
             constraints are resolved by removing the constraint with the smallest
             priority. Relative level constraints also compete with the links of
             the graph. Each link acts like a constraint (with the same priority
             as the link) that forces that the target node is placed in a higher
             level than the source node. 
             </p>
             <p>
             The automatic conflict resolution can handle conflicting constraints.
             However, to speedup the layout, it is recommended to specify
             constraints in a way such that there are no conflicts.  
             </p>
             <p>
             </p>
             </remarks>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MarkForIncremental(System.Object)"/>
             <example>
             <para lang="cs,vbnet">The following example shows how to use
             the constraint to place one node in a higher level than another node.
             </para>
             <code lang="cs">
             using System;
             using ILOG.Diagrammer;
             using ILOG.Diagrammer.Graphic;
             using ILOG.Diagrammer.GraphLayout;
            
             // node1 and node2 are part of group
             Group group = ...;
             GraphicObject node1 = ...;
             GraphicObject node2 = ...;
            
             HierarchicalLayout layout = new HierarchicalLayout();
             group.GraphLayout = layout;
            
             layout.Constraints.Add(
                 new HierarchicalRelativeLevelConstraint(node1, node2, 1.0f))
             group.PerformGraphLayout();
             </code>
             <code lang="vbnet">
             Imports System
             Imports ILOG.Diagrammer
             Imports ILOG.Diagrammer.Graphic
             Imports ILOG.Diagrammer.GraphLayout
            
             ' node1 and node2 are part of group
             Dim group As Group = ...
             Dim node1 As GraphicObject = ...
             Dim node2 As GraphicObject = ...
            
             Dim layout As HierarchicalLayout = New HierarchicalLayout
             group.GraphLayout = layout
            
             layout.Constraints.Add(
                 New HierarchicalRelativeLevelConstraint(node1, node2, 1.0f))
             group.PerformGraphLayout
             </code>
             </example>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.HierarchicalRelativeConstraint">
            <summary>
            The class <strong>HierarchicalRelativeConstraint</strong> is the base
            class of the classes
            <strong>HierarchicalRelativeLevelConstraint</strong> and
            <strong>HierarchicalRelativePositionConstraint</strong>.
            </summary>
            <remarks>
            Both classes happen to have some common internal functionality. 
            <p>
            </p>
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.HierarchicalConstraint">
            <summary>
            The abstract class <strong>HierarchicalConstraint</strong> is the
            base class for constraints of the Hierarchical Layout.
            </summary>
            <remarks>
            Constraints can be used to influence the way how the layout
            algorithms partitions the nodes into levels and orders the nodes
            within the levels. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.IGraphLayoutConstraint">
            <summary>
            The <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphLayoutConstraint"/> interface defines constraints between objects
            for graph layout algorithms.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphLayoutConstraint.Add(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Adds the constraint to the graph layout algorithm.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphLayoutConstraint.Remove(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Removes the constraint from the graph layout algorithm.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphLayoutConstraint.SupportsNodeGroups">
            <summary>
            Returns <see langword="true"/> if the subjects of the constraint can be node groups (i.e., can contain several nodes),
            or <see langword="false"/> if the subjects of the constraint can only contain a single node.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.IGraphLayoutConstraint.FirstSubject">
            <summary>
            Gets the first subject of the constraint.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.IGraphLayoutConstraint.SecondSubject">
            <summary>
            Gets the second subject of the constraint.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.IGraphLayoutConstraint.SubjectDescriptions">
            <summary>
            Returns human-readable descriptions of the first and (optionally) second subject(s) of the constraint.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.IGraphLayoutConstraint.Priority">
            <summary>
            Gets or sets the priority of the constraint.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalConstraint.Unspecificed">
            <summary>
            Indicates an unspecified integer value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalConstraint.#ctor(System.Single)">
            <summary>
            Creates a new <strong>HierarchicalConstraint</strong>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalConstraint.#ctor(ILOG.Diagrammer.GraphLayout.HierarchicalConstraint)">
            <summary>
            Creates a new <strong>HierarchicalConstraint</strong> by copying an
            existing one.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name='source'> The origin of the copy.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalConstraint.Copy">
            <summary>
            Copies the constraint.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalConstraint.FirstSubject">
            <summary>
            Gets the first group of objects to which this constraint applies.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalConstraint.SecondSubject">
            <summary>
            Gets the second group of objects to which this constraint applies.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalConstraint.Priority">
            <summary>
            Gets or sets the priority of the constraint.
            </summary>
            <remarks>
            If there are conflicts between constraints, the constraint with the
            highest priority wins.  
            </remarks>
            <value>The priority of the constraint.
            </value>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalRelativeConstraint.#ctor(System.Object,System.Object,System.Single)">
            <summary>
            Creates a new <strong>HierarchicalRelativeConstraint</strong>.
            </summary>
            <remarks>
            See the documentation of
            <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalRelativeLevelConstraint"/> and
            <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalRelativePositionConstraint"/> for detailed
            description of the purpose. 
            <p>
            </p>
            </remarks>
            <param name="lowerNodeOrGroup"> A node, or a group of type
            <strong>HierarchicalNodeGroup</strong> that is placed at lower
            positions than the second node or group.
            </param>
            <param name="higherNodeOrGroup"> A node, or a group of type
            <strong>HierarchicalNodeGroup</strong> that is placed at higher
            positions than the first node or group.
            </param>
            <param name="priority"> The priority of the constraint.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalRelativeConstraint.#ctor(ILOG.Diagrammer.GraphLayout.HierarchicalRelativeConstraint)">
            <summary>
            Creates a new <strong>RelativeConstraint</strong> by copying an
            existing one.
            </summary>
            <param name='source'> The origin of the copy.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalRelativeConstraint.Copy">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalRelativeLevelConstraint.#ctor(System.Object,System.Object,System.Single)">
            <summary>
            Creates a new <strong>HierarchicalRelativeLevelConstraint</strong>.
            </summary>
            <param name="lowerNodeOrGroup"> A node, or a group of type
            <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup"/> that is placed in levels below
            the second node or group.
            </param>
            <param name="higherNodeOrGroup"> A node, or a group of type
            <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup"/> that is placed in levels above
            the first node or group.
            </param>
            <param name="priority"> The priority of the constraint.
            </param>
            <example>
            <para lang="cs,vbnet">The following examples shows how to use
            the constraint.
            The first statement applies it to individual nodes and forces
            <strong>node2</strong> to be placed at a level
            with higher index than <strong>node1</strong>.
            The second statement applies it to groups or nodes and forces
            the nodes of <strong>listOfNodes2</strong> to
            be placed at a level with higher index than the nodes of
            <strong>listOfNodes1</strong>.
            </para>
            <code lang="cs">
            layout.Constraints.Add(
                new HierarchicalRelativeLevelConstraint(node1, node2, priority));
            layout.Constraints.Add(
                new HierarchicalRelativeLevelConstraint(
                     new HierarchicalNodeGroup(listOfNodes1),
                     new HierarchicalNodeGroup(listOfNodes2),
                     priority));
            </code>
            <code lang="vbnet">
            layout.Constraints.Add(
                New HierarchicalRelativeLevelConstraint(node1, node2, priority))
            layout.Constraints.Add(
                New HierarchicalRelativeLevelConstraint(
                     New HierarchicalNodeGroup(listOfNodes1),
                     New HierarchicalNodeGroup(listOfNodes2),
                     priority))
            </code>
            </example>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalRelativeLevelConstraint.#ctor(ILOG.Diagrammer.GraphLayout.HierarchicalRelativeLevelConstraint)">
            <summary>
            Creates a new <strong>HierarchicalRelativeLevelConstraint</strong>
            by copying an existing one.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name='source'> The origin of the copy.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalRelativeLevelConstraint.Copy">
            <summary>
            Copies the constraint.
            </summary>
            <remarks>  
            <p>
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalRelativeLevelConstraint.GetLowerSubject">
            <summary>
            Returns the subject of this constraint that is placed at the levels
            with lower index than the other subject.
            </summary>
            <remarks>
            The subject is  either the constraint node, or the instance of
            <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup"/> that describes a group of nodes.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalRelativeLevelConstraint.GetHigherSubject">
            <summary>
            Returns the subject of this constraint that is placed at the levels
            with higher index than the other subject.
            </summary>
            <remarks>
            The subject is  either the constraint node, or the instance of
            <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup"/> that describes a group of nodes.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalRelativeLevelConstraint.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalRelativeLevelConstraint"/> class.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphLayoutException">
            <summary>
            The base class of the exceptions that can be thrown by the graph 
            layout algorithms.
            </summary>
             
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.ExceptionDuringLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutException.#ctor">
            <summary>
            Creates a new <strong>GraphLayoutException</strong> with no
            specified detail message.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutException.#ctor(System.String)">
            <summary>
            Creates a new <strong>GraphLayoutException</strong> with a specified
            detail message.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayoutException.Next">
            <summary>
            Gets or sets the next exception in an exception chain.
            </summary>
            <remarks>
            This allows you to build chains of exceptions for internal purposes.
            
            </remarks>
            <value>The next exception in an exception chain.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventHandler">
            <summary>
            Represents the method that will handle the
            <see cref="E:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutStepPerformed"/>event
            of the <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayout"/> class.
            </summary>
            <param name="source">The source of the event.
            </param>
            <param name="e">A <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs"/>
            that contains the event data.
            </param>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphLayoutPropertyChangedEventHandler">
            <summary>
            Represents the method that will handle the
            <see cref="E:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutPropertyChanged"/>event
            of the <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayout"/> class.
            </summary>
            <param name="source">The source of the event.
            </param>
            <param name="e">A <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayoutPropertyChangedEventArgs"/>
            that contains the event data.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.DrawUtil.CropRectangle(System.Drawing.RectangleF)">
            <summary>
            Transforms a RectangleF into the smallest Rectangle object that
            includes the specified rect.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.CSS2Processor.DefaultCSSValue(System.String)">
            Returns the default <c>CSSValue</c> for the given property.
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.CSS2Processor.GetCSSValue(System.String,System.String)">
            If the token is legal for the property, return the corresponding CSSValue.
        </member>
        <member name="T:ILOG.Diagrammer.TextAppearance">
            <summary>
            Regroups the properties that controls text appearance in a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
            <remarks>
            The <see cref="T:ILOG.Diagrammer.TextAppearance"/> object regroups the information such as font and colors for displaying text
            in a graphic object. Each graphic object holds a <see cref="T:ILOG.Diagrammer.TextAppearance"/> instance in 
            its <see cref="P:ILOG.Diagrammer.GraphicObject.TextAppearance"/> property, this instance is used to display the text specified 
            by the <see cref="P:ILOG.Diagrammer.GraphicObject.Text"/> property inside the graphic object.
            Through the text appearance object, you may for example specify the font of the text through the <see cref="P:ILOG.Diagrammer.TextAppearance.Font"/>
            property or the way the text is painted through the <see cref="P:ILOG.Diagrammer.TextAppearance.Foreground"/> property.
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample creates an ellipse with some blue text displayed inside.</para>
            <code lang="cs">
            public Ellipse CreateEllipseWithText()
            {
                Ellipse ellipse = new Ellipse(520F, 160F, 140F, 120F);
                ellipse.Fill = new SolidFill(Color.WhiteSmoke);
                ellipse.Text = "Welcome to IBM ILOG Diagram for .NET";
            
                TextAppearance appearance = new TextAppearance();
                appearance.Font = new Font("Arial", 12F);
                appearance.Foreground = new SolidFill(Color.Blue);
                appearance.Margins = new Margins(5f);
                appearance.VerticalAlignment = VerticalTextAlignment.Center;
                appearance.HorizontalAlignment = HorizontalTextAlignment.Center;
            
                ellipse.TextAppearance = appearance;
                return ellipse;
            }
            </code>
            <code lang="vbnet">
            Public Function CreateEllipseWithText() As Ellipse 
            
               Dim ellipse As Ellipse = New Ellipse(520F, 160F, 140F, 120F) 
               ellipse.Fill = New SolidFill(Color.WhiteSmoke) 
               ellipse.Text = "Welcome to IBM ILOG Diagram for .NET" 
            
               Dim appearance As TextAppearance = New TextAppearance 
               appearance.Font = New Font("Arial", 12F) 
               appearance.Foreground = New SolidFill(Color.Blue) 
               appearance.Margins = New Margins(5F) 
               appearance.VerticalAlignment = VerticalTextAlignment.Center 
               appearance.HorizontalAlignment = HorizontalTextAlignment.Center 
            
               ellipse.TextAppearance = appearance 
               Return ellipse 
            End Function
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Fill"/>
            <seealso cref="T:ILOG.Diagrammer.Stroke"/>
        </member>
        <member name="M:ILOG.Diagrammer.TextAppearance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.TextAppearance"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.TextAppearance.#ctor(ILOG.Diagrammer.TextAppearance,System.Drawing.Font)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.TextAppearance"/> class from an existing text appearance and a specified font.
            </summary>
            <param name="appearance"> A <see cref="T:ILOG.Diagrammer.TextAppearance"/> to clone.</param>
            <param name="font">The <see cref="P:ILOG.Diagrammer.TextAppearance.Font"/> of the new text appearance.</param>
        </member>
        <member name="M:ILOG.Diagrammer.TextAppearance.#ctor(ILOG.Diagrammer.TextAppearance,System.Drawing.Font,ILOG.Diagrammer.Fill)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.TextAppearance"/> class from an existing text appearance and a specified font and foreground.
            </summary>
            <param name="appearance">A <see cref="T:ILOG.Diagrammer.TextAppearance"/> to clone.</param>
            <param name="font">The <see cref="P:ILOG.Diagrammer.TextAppearance.Font"/> of the new text appearance.</param>
            <param name="foreground">A <see cref="T:ILOG.Diagrammer.Fill"/> object that represents the foreground color of the text.</param>
        </member>
        <member name="M:ILOG.Diagrammer.TextAppearance.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.TextAppearance.Freeze">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.StyleBase.Freeze">StyleBase.Freeze</see>.
            </summary>      
        </member>
        <member name="M:ILOG.Diagrammer.TextAppearance.GetHashCode">
            <summary>
            Computes the hashcode for the object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.TextAppearance.Equals(System.Object)">
            <summary>
            Tests if two <see cref="T:ILOG.Diagrammer.Stroke"/> are equals.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.TextAppearance.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.TextAppearance.GetStringFormat(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to create a <see cref="T:System.Drawing.StringFormat"/> that represents this object.
            </summary>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> instance.</param>
            <returns>A new <see cref="T:System.Drawing.StringFormat"/> instance.</returns>
        </member>
        <member name="P:ILOG.Diagrammer.TextAppearance.ClockWiseRotation">
            <summary>
            Indicates whether vertical texts are rotated clockwise.
            </summary>
            <value><see langword="true"/> if vertical texts should be rotated clockwise; Otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
            <remarks>To use vertical texts, use the <see cref="P:ILOG.Diagrammer.TextAppearance.Format"/> property.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.TextAppearance.Font">
            <summary>
            Gets or sets the font used to draw the text.
            </summary>
            <value>A <see cref="T:System.Drawing.Font"/> instance that represents the font used to display the text.</value>
        </member>
        <member name="P:ILOG.Diagrammer.TextAppearance.Foreground">
            <summary>
            Gets or sets the style used to fill text.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Fill"/> object that represents the style used to fill
            text.</value>
            <seealso cref="P:ILOG.Diagrammer.TextAppearance.Background"/>
        </member>
        <member name="P:ILOG.Diagrammer.TextAppearance.Background">
            <summary>
            Gets or sets the style used to fill the background of the text.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Fill"/> object that represents the 
            style used to fill the background of the text. The default value is <see langword="null"/>.
            </value>
            <seealso cref="P:ILOG.Diagrammer.TextAppearance.Foreground"/>
        </member>
        <member name="P:ILOG.Diagrammer.TextAppearance.Format">
            <summary>
            Gets or sets the format for the text.
            </summary>
            <value>A <see cref="T:System.Drawing.StringFormatFlags"/> that specifies how the text is formatted.</value>
        </member>
        <member name="P:ILOG.Diagrammer.TextAppearance.RenderingHint">
             <summary>
             Gets or sets the text rendering quality.
             </summary>
             <value>One of the <see cref="T:System.Drawing.Text.TextRenderingHint"/> values that specifies 
             the quality of text rendering. The default value is <see cref="F:System.Drawing.Text.TextRenderingHint.SystemDefault"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.TextAppearance.Trimming">
            <summary>
            Gets or sets the string trimming for the text.
            </summary>
            <value>A <see cref="T:System.Drawing.StringTrimming"/> that specify how to trim characters from a string that does not fit the layout space.
            The default value is <see cref="F:System.Drawing.StringTrimming.EllipsisCharacter"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.TextAppearance.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment for the text of this object.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.HorizontalTextAlignment"/> values. The default value is
            <see cref="F:ILOG.Diagrammer.HorizontalTextAlignment.Center"/>.</value>
            <seealso cref="P:ILOG.Diagrammer.TextAppearance.VerticalAlignment"/>
        </member>
        <member name="P:ILOG.Diagrammer.TextAppearance.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment for the text of this object.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.VerticalTextAlignment"/> values. The default value is
            <see cref="F:ILOG.Diagrammer.VerticalTextAlignment.Center"/>.</value>
            <seealso cref="P:ILOG.Diagrammer.TextAppearance.HorizontalAlignment"/>
        </member>
        <member name="P:ILOG.Diagrammer.TextAppearance.Margins">
            <summary>
            Gets or sets the margins for the text.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Margins"/> that represents the margins around the text. The default value is 0.</value>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.TwoColorsChooser.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TwoColorsChooser.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TwoColorsChooser.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ImageXmlSerializer.ShouldSerialize(System.Object,ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Xml.XmlDocument,ILOG.Diagrammer.Serialization.XmlSerializerContext)">
            <summary>
            overrided to bypass the missing default ctor.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeFlood">
            <summary>
            This filter effect creates a rectangle filled 
            with a color.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.FeFlood._color">
            <summary>
            Flood color.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeFlood.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeFlood"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeFlood.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeFlood"/> object with the specified color.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color"/> that represents the color
            used to flood the filter effect region.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeFlood.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeFlood"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeFlood.ToString">
            <summary>
            Returns a short description of this filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeFlood.Color">
            <summary>
            Gets or sets the color to flood the filter effect region.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the color
            used to flood the filter effect region. The default value is <see cref="P:System.Drawing.Color.Black"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeFlood.Inputs">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.FilterEffect.Inputs">FilterEffect.Inputs</see>
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.DocumentPageSetupDialog">
            <summary>
            Defines a dialog box that allows you to setup the parameters of a <see cref="T:ILOG.Diagrammer.Printing.ExtendedPrintDocument"/>.
            </summary>
            <remarks>
            This dialog box allows you to edit the page format, the header and the footer. 
            This dialog box is composed of a <see cref="T:System.Windows.Forms.TabControl"/>
            with two tab pages: one to edit the page format and one to edit the header and footer. 
            You may add a new tab if you need to edit additional parameters for a specialized class of document. 
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.Printing.ExtendedPrintDocument"/>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DocumentPageSetupDialog.tabControl">
            <summary>
            The tab control of the dialog box.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DocumentPageSetupDialog.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DocumentPageSetupDialog"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DocumentPageSetupDialog.Dispose(System.Boolean)">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DocumentPageSetupDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DocumentPageSetupDialog.Initialize">
            <summary>
            Initializes the dialog box fields according to the current document.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DocumentPageSetupDialog.UpdateFields">
            <summary>
            Updates the value of the fields of the dialog box.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DocumentPageSetupDialog.SetUpDocument">
            <summary>
            Updates the document properties when validating the dialog box.
            </summary>
            <remarks>
            This function is called when the "OK" button is pressed. 
            If you have overwritten this class to edit properties specific to your document, 
            you have to overwrite this method to set the new properties in the document.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DocumentPageSetupDialog.PageSettingsChanged">
            <summary>
            Is called when the pages settings have been changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DocumentPageSetupDialog.HeaderPanel_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the header preview panel.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DocumentPageSetupDialog.FooterPanel_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the footer preview panel.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DocumentPageSetupDialog.Document">
            <summary>
            Gets or sets the document.
            </summary>
            <value>An <see cref="T:ILOG.Diagrammer.Printing.ExtendedPrintDocument"/> object that represents the
            document that is edited by the dialog box.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DocumentPageSetupDialog.CanSpecifyPageOrder">
            <summary>
            Gets or sets a value that indicates whether the user can specify
            the page order of the document.
            </summary>
            <value><see langword="true"/> if the user can specify the page order
            of the document; <see langword="false"/> otherwise. The default value 
            is <see langword="true"/>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.CustomizeHeaderFooter">
            <summary>
            Represents a dialog box to customize header or footer settings of a <see cref="T:ILOG.Diagrammer.Printing.ExtendedPrintDocument"/>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CustomizeHeaderFooter.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CustomizeHeaderFooter.#ctor">
            <summary>
            The constructor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CustomizeHeaderFooter.Dispose(System.Boolean)">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CustomizeHeaderFooter.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CustomizeHeaderFooter.LeftSection">
            <summary>
            Gets or sets the text for the left section.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CustomizeHeaderFooter.CenterSection">
            <summary>
            Gets or sets the text for the center section.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CustomizeHeaderFooter.RightSection">
            <summary>
            Gets or sets the text for the right section.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CustomizeHeaderFooter.LeftFont">
            <summary>
            Gets or sets the font for the left section.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CustomizeHeaderFooter.CenterFont">
            <summary>
            Gets or sets the font for the center section.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CustomizeHeaderFooter.RightFont">
            <summary>
            Gets or sets the font for the right section.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.TreeLayoutFlowDirection">
            <summary>
            The flow directions for the Tree layout algorithm.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.FlowDirection"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutFlowDirection.Left">
            <summary>
            Left direction.        
            </summary>
            <remarks>
            When used as an argument of <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.FlowDirection"/>,
            the root of the tree is on the left and the links flow to the right.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutFlowDirection.Right">
            <summary>
            Right direction.        
            </summary>
            <remarks>
            When used as an argument of <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.FlowDirection"/>,
            the root of the tree is on the right and the links flow to the left.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutFlowDirection.Top">
            <summary>
            Top direction.        
            </summary>
            <remarks>
            When used as an argument of <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.FlowDirection"/>,
            the root of the tree is at the bottom and the links flow to the top.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutFlowDirection.Bottom">
            <summary>
            Bottom direction.        
            </summary>
            <remarks>
            When used as an argument of <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.FlowDirection"/>,
            the root of the tree is at the top and the links flow to the bottom.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment">
            <summary>
            The alignment options for the Tree layout algorithm.    
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.Alignment"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetAlignment(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment)"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.Center">
            <summary>
            Center alignment.
            </summary>
            <remarks>
            With this alignment, 
            a parent is centered above its children, taking the center of the children
            into account.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.BorderCenter">
            <summary>
            Border center alignment.
            </summary>
            <remarks>
            With this alignment, 
            a parent is centered above its children, taking the border of the children
            into account. This differs from the alignment <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.Center"/> 
            if the respect node sizes option is enabled.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.East">
            <summary>
            East alignment.
            </summary>
            <remarks>
            With this alignment, 
            a parent is aligned to the border of its easternmost child.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.West">
            <summary>
            West alignment.
            </summary>
            <remarks>
            With this alignment, 
            a parent is aligned to the border of its westernmost child.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.TipOver">
            <summary>
            Tip over alignment.
            </summary>
            <remarks>
            With this alignment, 
            a parent is outside the border of the children, while the children are
            placed sequentially instead of in parallel.
            This alignment option is not possible in the radial or level layout modes.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.TipOverBothSides">
            <summary>
            Tip over both sides alignment.
            </summary>
            <remarks>
            With this alignment, 
            the alignment is similar to <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.TipOver"/>,
            but the children are arranged in pairs at both sides of the link segment
            that starts at the parent node.
            This alignment option is not possible in the radial or level layout modes.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.Mixed">
            <summary>
            Mixed alignment.
            </summary>
            <remarks>
            With this alignment, 
            each node can have a different alignment option.
            The alignment of each individual node can be set by the
            method <see cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetAlignment(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment)"/> so that different
            alignments can occur in the same graph.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.TreeLayoutLevelAlignment">
            <summary>
            The level alignment options for the Tree layout algorithm.    
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LevelAlignment"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLevelAlignment.Center">
            <summary>
            Center alignment.        
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLevelAlignment.North">
            <summary>
            North alignment.        
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLevelAlignment.South">
            <summary>
            South alignment.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.TreeLayoutConnectorStyle">
            <summary>
            The connector style options for the Tree layout algorithm.    
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LevelAlignment"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutConnectorStyle.Automatic">
            <summary>
            Automatic pins connector style.
            </summary>
            <remarks>
            When set as value of <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.ConnectorStyle"/>,
            the connector style is selected depending on the link style.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutConnectorStyle.Centered">
            <summary>
            Centered connector style.
            </summary>
            <remarks>
            When set as value of <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.ConnectorStyle"/>,
            the link connector pins are placed in the center of the border of the
            node bounding box to which the link is attached.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutConnectorStyle.Clipped">
            <summary>
            Clipped connector style.
            </summary>
            <remarks>
            When set as value of <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.ConnectorStyle"/>,
            each link pointing to the center of the node is clipped at the bounding
            box of the node.
            This style affects straight links; it behaves like centered connector
            pins for orthogonal links.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutConnectorStyle.EvenlySpaced">
            <summary>
            Evenly spaced connector style.
            </summary>
            <remarks>
            When set as value of <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.ConnectorStyle"/>,
            the link connector pins are evenly spaced along the border of the
            node bounding box.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle">
            <summary>
            The link style options for the Tree layout algorithm.    
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LinkStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle)"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle.Orthogonal">
            <summary>
            Orthogonal link style.
            </summary>
            <remarks>
            With this link style, 
            the link has an orthogonal shape, that is, a shape consisting of a
            sequence of orthogonal line segments. This option is not available for the
            radial layout modes.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle.Straight">
            <summary>
            Straight line link style.
            </summary>
            <remarks>
            With this link style, the link has a straight-line shape.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle.Mixed">
            <summary>
            Mixed link style.
            </summary>
            <remarks>
            With this link style, each link can have a different link style.
            The style of each individual link can be set by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle)"/> 
            so that different link shapes can occur in the same graph.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle.NoReshape">
            <summary>
            No reshape link style.
            </summary>
            <remarks>
            With this link style, 
            no reshape is performed on the links.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.TreeLayoutMode">
            <summary>
            The layout modes for the Tree layout algorithm.    
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipOver">
            <summary>
            Tip over layout mode.
            </summary>
            <remarks>
            When used as an argument of <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>,
            all links flow roughly in the flow direction. In this layout mode,
            the algorithm tries to optimize the layout to automatically fit best to
            the specified aspect ratio by calculating which individual nodes need
            tip-over alignment and which nodes can use the specified alignment. The
            layout algorithm uses a fast heuristic.        
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipLeavesOver">
            <summary>
            Tip leaves over layout mode.
            </summary>
            <remarks>
            When used as an argument of <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>,
            all links flow roughly in the flow direction.
            The algorithm tries to optimize the layout to automatically fit
            best to the specified aspect ratio.
            This slow heuristic tries to tip over beginning with the leaves and then
            chooses the best layout. It checks the alignment mode        
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipOver"/>, but not <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.TipOverBothSides"/>.
            It keeps the alignment of all nodes close to the root as specified.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipRootsOver">
            <summary>
            Tip over layout mode.
            </summary>
            <remarks>
            When used as an argument of <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>,
            all links flow roughly in the flow direction.
            The algorithm tries to optimize the layout to automatically fit
            best to the specified aspect ratio.
            This slow heuristic tries to tip over beginning with the roots and then
            chooses the best layout. It checks the alignment mode
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipOver"/>, but not <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.TipOverBothSides"/>.
            It keeps the alignment of all nodes close to the leaves as specified.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipRootsAndLeavesOver">
            <summary>
            Tip roots and leaves over layout mode.
            </summary>
            <remarks>
            When used as an argument of <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>,
            all links flow roughly in the flow direction.
            The algorithm tries to optimize the layout to automatically fit
            best to the specified aspect ratio.
            This slow heuristic tries to tip over beginning with the roots and
            with the leaves, and then chooses the best layout. It checks the alignment
            mode <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipOver"/>, but not <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.TipOverBothSides"/>.        
            It keeps the alignment of all nodes in the middle between roots and leaves
            as specified.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.Free">
            <summary>
            Free layout mode.
            </summary>
            <remarks>
            When used as an argument of <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>,
            all links flow roughly in the flow direction.
            Nodes of different tree branches (that is, nodes with a different parent
            node) are not justified to each other; therefore, the level alignment
            parameter is ignored.
            Tip-over alignment is possible if specified as alignment.
            All link styles are possible.
            The aspect ratio is ignored.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.Level">
            <summary>
            Level layout mode.
            </summary>
            <remarks>
            When used as an argument of <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>,
            all links flow roughly in the flow direction.
            Nodes are organized in levels and are justified to their borders or
            centered according to the level alignment parameter.
            Tip-over alignment is not possible, but all link styles are possible.
            The aspect ratio is ignored.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.Radial">
            <summary>
            Radial layout mode.
            </summary>
            <remarks>
            When used as an argument of <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>,
            the root node is in the center, the links flow radially away from the
            center, and the nodes are placed in circular layers around the root node
            according to the level alignment. Tip-over alignment and orthogonal link
            styles are not possible. Clipped connector pins are used as the connector
            style. If an aspect ratio is specified, the layers are ellipses around
            the center.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.AlternatingRadial">
            <summary>
            Alternating radial layout mode.
            </summary>
            <remarks>
            When used as an argument of <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>,
            this is the same as mode <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.Radial"/>, with the exception that
            children of the same node are placed alternating in different circular
            layers when this results in a smaller radius and better usage of the
            space. Tip-over alignment and orthogonal link styles are not possible.
            Clipped connector pins are used as the connector style.
            If an aspect ratio is specified, the layers are ellipses around the center.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Design.IDiagrammerEditorService">
            <summary>
            Provides an interface for a diagram designer to access some editor properties.
            </summary>
            <remarks>This interface allows to access the status bar using the <see cref="M:ILOG.Diagrammer.Design.IDiagrammerEditorService.SetStatusBarText(System.String)"/> 
            method.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Design.IDiagrammerEditorService.SetStatusBarText(System.String)">
            <summary>
            Sets the text of the status bar of the diagram editor
            </summary>
            <param name="text">A <see cref="T:System.String"/> object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Design.IDiagrammerEditorService.UpdateUI">
            <summary>
            Updates the user interface of the editor explicitly.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.IDiagrammerEditorService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
            <summary>
            Shows the contextual menu associated with the specified command.
            </summary>
            <param name="command">A <see cref="T:System.ComponentModel.Design.CommandID"/> reference.</param>
            <param name="x">The x coordinate where the menu should be displayed.</param>
            <param name="y">The y coordinate where the menu should be displayed.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Design.IDiagrammerEditorService.IsReadOnly">
            <summary>
            Indicates whether the editor is in read-only mode.
            </summary>
            <value><see langword="true"/> if the editor is in read-only mode; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Design.IDiagrammerEditorService.AreCommandsEnabled">
            <summary>
            Indicates whether the editor commands are enabled.
            </summary>
            <value><see langword="true"/> if the editor commands are enabled; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Design.IDiagrammerEditorService.ActiveHost">
            <summary>
            Gets the active designer host.
            </summary>
            <value>A <see cref="T:System.ComponentModel.Design.IDesignerHost"/> reference.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Design.GraphicObjectDesigner">
            <summary>
            Extends the design mode behavior of a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Design.GraphicObjectDesigner._visibility">
            <summary>
            Shadows the GraphicObject Visibility.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Design.GraphicObjectDesigner"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.Design.ComponentDesigner.Initialize(System.ComponentModel.IComponent)">ComponentDesigner.Initialize</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.OnGraphicObjectChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            Is called when the object designed by this designer has changed.
            </summary>
            <param name="e">A <see cref="T:ILOG.Diagrammer.GraphicChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.Design.ComponentDesigner.Dispose(System.Boolean)">ComponentDesigner.Dispose</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.InitializeNewComponent(System.Collections.IDictionary)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.Design.ComponentDesigner.InitializeNewComponent(System.Collections.IDictionary)">ComponentDesigner.InitializeNewComponent</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.OnComponentRemoving(System.Object,System.ComponentModel.Design.ComponentEventArgs)">
            <summary>
            Called when a component is being removed by the designer host.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.OnComponentRemoved(System.Object,System.ComponentModel.Design.ComponentEventArgs)">
            <summary>
            Called when a component is removed by the designer host.
            If the component is a graphic object, removes the object from the canvas.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.RaiseLocationChanging">
            <summary>
            Must be called before changing the component location.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.RaiseLocationChanged">
            <summary>
            Must be called after changing the component location.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.RaiseGeometryChanging">
            <summary>
            Must be called before changing the component geometry.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.RaiseGeometryChanged">
            <summary>
            Must be called after changing the component geometry.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.RaiseBoundsChanging">
            <summary>
            Must be called before changing the component bounds.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.RaiseBoundsChanged">
            <summary>
            Must be called after changing the component bounds.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.PreFilterProperties(System.Collections.IDictionary)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.Design.ComponentDesigner.PreFilterProperties(System.Collections.IDictionary)">ComponentDesigner.PreFilterProperties</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.PostFilterProperties(System.Collections.IDictionary)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.Design.ComponentDesigner.PostFilterProperties(System.Collections.IDictionary)">ComponentDesigner.PostFilterProperties</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.RecordObjectSize">
            <summary>
            Stores the current component size so that it can be restored by calling <see cref="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.ResetObjectSize"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.ResetObjectSize">
            <summary>
            Restores the component size saved by calling <see cref="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.RecordObjectSize"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.DisplayError(System.Exception)">
            <summary>
            Display an error message given by the specified exception.
            </summary>
            <param name="e">The error source.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.CreateActionList">
            <summary>
            Creates a <see cref="T:System.ComponentModel.Design.DesignerActionList"/> instance containing the <see cref="T:System.ComponentModel.Design.DesignerActionItem"/>
            for this designer.
            </summary>
            <remarks>This method is called by the <see cref="P:ILOG.Diagrammer.Design.GraphicObjectDesigner.ActionLists"/> property to get the action list
            corresponding to this designer. Thus, if you override this method, you need not to override the
            <see cref="P:ILOG.Diagrammer.Design.GraphicObjectDesigner.ActionLists"/> property anymore to add your own list.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.SetProperty(System.ComponentModel.Design.IDesignerHost,System.Object,System.Object,System.String,System.String)">
            <summary>
            Sets the specified property by means of the PropertyDescriptor using a transaction.
            </summary>
            <param name="host">a <see cref="T:System.ComponentModel.Design.IDesignerHost"/> instance.</param>
            <param name="instance">the instance to set.</param>
            <param name="value">the property value.</param>
            <param name="property">the property name.</param>
            <param name="transactionMessage">the transaction message.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Design.GraphicObjectDesigner.View">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> where the component is being displayed.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Design.GraphicObjectDesigner.ComponentChangeService">
            <summary>
            Gets the <see cref="T:System.ComponentModel.Design.IComponentChangeService"/> associated with this designer.
            </summary>
            <value>A <see cref="T:System.ComponentModel.Design.IComponentChangeService"/> reference.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Design.GraphicObjectDesigner.DesignerHost">
            <summary>
            Gets the <see cref="T:System.ComponentModel.Design.IDesignerHost"/> associated with this designer.
            </summary>
            <value>A <see cref="T:System.ComponentModel.Design.IDesignerHost"/> reference.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Design.GraphicObjectDesigner.GraphicObject">
            <summary>
            Gets the graphic object this designer is designing.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Design.GraphicObjectDesigner.ParentComponent">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Design.ControlDesigner.ParentComponent">ControlDesigner.ParentComponent</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Design.GraphicObjectDesigner.Name">
            <summary>
            Overrides the Name property so that the name is not set until
            the designer is loade. otherwise the name will be stored in the
            properties of the graphic object and de-synchonized with the name of the Site.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Design.GraphicObjectDesigner.Locked">
            <summary>
            Indicates whether the component geometry is locked.
            </summary>
            <value><see langword="true"/> if the component geometry is locked, otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Design.GraphicObjectDesigner.AssociatedComponents">
            <summary>
            This member overrides <see cref="P:System.ComponentModel.Design.ComponentDesigner.AssociatedComponents">ComponentDesigner.AssociatedComponents</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Design.GraphicObjectDesigner.ShowSmartTag">
            <summary>
            Gets a value that indicates whether the designer should show a smart tag. 
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Design.GraphicObjectDesigner.SmartTagMenuTitle">
            <summary>
            Gets the title that appears in the Smart Tag menu when the object is selected.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Design.GraphicObjectDesigner.SmartTagMenuSubTitle">
            <summary>
            Gets the subtitle that appears in the Smart Tag menu when the object is selected.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Design.GraphicObjectDesigner.System#ComponentModel#Design#ITreeDesigner#Children">
            <summary>
            We implement this property explicitly to hide the anchors
            from the document outline.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Design.GraphicObjectDesigner.ActionLists">
            <summary>
            This member overrides <see cref="P:System.ComponentModel.Design.ComponentDesigner.ActionLists">ComponentDesigner.ActionLists</see>
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Design.GraphicObjectCodeDomSerializer">
            <summary>
            This Code DOM serializer ensures that the layout node/link parameters are
            set after the layout has been attached to its graphic container.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.RecursiveLayoutReport">
            <summary>
             The class used to store information about the behavior of the
            Recursive Layout algorithm.
            </summary>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.RecursiveLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayoutReport.#ctor">
            <summary>
            Creates a new instance of the report object.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RecursiveLayoutReport.CurrentlyRunningLayout">
            <summary>
            Gets the layout instance of the subgraph that is currently laid out,
            when the layout is running.
            </summary>
            <remarks>
            Typically you use this information inside layout event handlers. 
            After the layout is finished, it returns <see langword="null"/>. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs.LayoutReport"/>
            <value>The layout instance of the subgraph that is currently laid
            out, when the layout is running.
            </value>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.RLayout.GraphLayoutRecUtil.ApplyLayoutToSubgraph(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object,ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.ILayoutProvider,ILOG.Diagrammer.GraphLayout.GraphLayout,ILOG.Diagrammer.GraphLayout.IGraphModel,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies the layout on <strong>subGraphModel</strong>, which is
            a direct subgraph of <strong>model</strong>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.RLayout.GraphLayoutRecUtil.SetDuringRecursiveLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Boolean)">
            <summary>
            Marks that we are during recursive layout.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.RLayout.GraphLayoutRecUtil.SetContentsAdjusting(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Boolean,System.Boolean)">
            <summary>
            Starts or end the adjusting session.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.HierarchicalRelativePositionConstraint">
             <summary>
             The class <strong>HierarchicalRelativePositionConstraint</strong> is
             a constraint to place a node relative to another node that belongs to
             the same level.
             </summary>
             <remarks>
             It does not affect the order of nodes that belong to different
             levels. It forces a node to be placed after another node within the
             same level. The constraint can also be applied to groups of nodes.  
             <p>
             Nodes are organized in horizontal or vertical levels.  Within each
             level, the nodes are placed sequentially at relative positions
             numbered from 0 to "n". If the link flow direction is from top to
             bottom, the node with position index 0 is placed leftmost within its
             level, and the nodes with higher position indices are placed farther
             to the right. If the link flow direction is from right to left, the
             node with position index 0 is placed topmost within its level, and
             the nodes with higher position indices are placed below. The
             constraint specifies that a node is placed at a higher position index
             than another node. The constraint is ignored, if both nodes do not
             belong to the same level. 
             </p>
             <p>
             The constraint is evaluated, if the incremental mode is disabled. If
             the incremental mode is enabled, the constraint is only evaluated for
             those nodes that are marked for incremental recalculation, because
             otherwise, the incremental positions of the nodes are dominant. 
             </p>
             <p>
             Among the constraints, this kind is dominated by side by side
             constraints, that is, if a node A and B must be placed side by side,
             then a node C cannot be forced to be at a higher position than A but
             at a lower position than B at the same time. The node C cannot be
             forced to be placed in between A and B. The constraint is also
             dominated by specified position indices, i.e. it does not change the
             order of nodes that have specified position indices, and by swim lane
             constraints, that is, it is not able to break swim lanes  apart. 
             </p>
             <p>
             The relative constraints have priorities. Conflicting relative
             position constraints are resolved by removing the constraint with the
             smallest priority. 
             </p>
             <p>
             The automatic conflict resolution can handle conflicting constraints.
             However, to speed up the layout, it is recommended to specify
             constraints in a way such that there are no conflicts.  
             </p>
             <p>
             </p>
             </remarks>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MarkForIncremental(System.Object)"/>
             <example>
             <para lang="cs,vbnet">The following example shows how to use
             the constraint to specify the order of two nodes that belong to the
             same level.
             </para>
             <code lang="cs">
             using System;
             using ILOG.Diagrammer;
             using ILOG.Diagrammer.Graphic;
             using ILOG.Diagrammer.GraphLayout;
            
             // node1 and node2 are part of group
             Group group = ...;
             GraphicObject node1 = ...;
             GraphicObject node2 = ...;
            
             HierarchicalLayout layout = new HierarchicalLayout();
             group.GraphLayout = layout;
            
             // node1 and node2 must be on the same level
             layout.SetSpecNodeLevelIndex(node1, 2);
             layout.SetSpecNodeLevelIndex(node2, 2);
            
             layout.Constraints.Add(
                 new HierarchicalRelativePositionConstraint(node1, node2, 1.0f))
             group.PerformGraphLayout();
             </code>
             <code lang="vbnet">
             Imports System
             Imports ILOG.Diagrammer
             Imports ILOG.Diagrammer.Graphic
             Imports ILOG.Diagrammer.GraphLayout
            
             ' node1 and node2 are part of group
             Dim group As Group = ...
             Dim node1 As GraphicObject = ...
             Dim node2 As GraphicObject = ...
            
             Dim layout As HierarchicalLayout = New HierarchicalLayout
             group.GraphLayout = layout
            
             ' node1 and node2 must be on the same level
             layout.SetSpecNodeLevelIndex(node1, 2)
             layout.SetSpecNodeLevelIndex(node2, 2)
            
             layout.Constraints.Add(
                 New HierarchicalRelativePositionConstraint(node1, node2, 1.0f))
             group.PerformGraphLayout
             </code>
             </example>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalRelativePositionConstraint.#ctor(System.Object,System.Object,System.Single)">
            <summary>
            Creates a new <strong>HierarchicalRelativePositionConstraint</strong>.
            </summary>
            <param name="lowerNodeOrGroup"> A node, or a group of type
            <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup"/> that is placed at lower
            positions than the second node or group.
            </param>
            <param name="higherNodeOrGroup"> A node, or a group of type
            <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup"/> that is placed at higher
            positions than the first node or group.
            </param>
            <param name="priority"> The priority of the constraint.
            </param>
            <example>
            <para lang="cs,vbnet">The following examples shows how to use
            the constraint.
            The first statement applies it to individual nodes.
            If <strong>node1</strong> and <strong>node2</strong> are
            placed at the same level, then this forces <strong>node2</strong> to
            be placed at a higher position index than <strong>node1</strong>.
            If the flow direction is top down, this means that
            <strong>node2</strong> is placed to the right of
            <strong>node1</strong>.
            The second statement applies it to groups or nodes.
            This forces the nodes of <strong>listOfNodes2</strong> to
            be placed at a higher position index than the nodes of
            <strong>listOfNodes1</strong> that belong to the same level.
            </para>
            <code lang="cs">
            layout.Constraints.Add(
                new HierarchicalRelativePositionConstraint(node1, node2, priority));
            layout.Constraints.Add(
                new HierarchicalRelativePositionConstraint(
                     new HierarchicalNodeGroup(listOfNodes1),
                     new HierarchicalNodeGroup(listOfNodes2),
                     priority));
            </code>
            <code lang="vbnet">
            layout.Constraints.Add(
                New HierarchicalRelativePositionConstraint(node1, node2, priority))
            layout.Constraints.Add(
                New HierarchicalRelativePositionConstraint(
                     New HierarchicalNodeGroup(listOfNodes1),
                     New HierarchicalNodeGroup(listOfNodes2),
                     priority))
            </code>
            </example>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalRelativePositionConstraint.#ctor(ILOG.Diagrammer.GraphLayout.HierarchicalRelativePositionConstraint)">
            <summary>
            Creates a new
            <strong>HierarchicalRelativePositionConstraint</strong> by copying
            an existing one.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name='source'> The origin of the copy.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalRelativePositionConstraint.Copy">
            <summary>
            Copies the constraint.
            </summary>
            <remarks>  
            <p>
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalRelativePositionConstraint.GetLowerSubject">
            <summary>
            Returns the subject of this constraint that is placed at the levels
            with lower index than the other subject.
            </summary>
            <remarks>
            The subject is  either the constraint node, or the instance of
            <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup"/> that describes a group of nodes.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalRelativePositionConstraint.GetHigherSubject">
            <summary>
            Returns the subject of this constraint that is placed at the levels
            with higher index than the other subject.
            </summary>
            <remarks>
            The subject is  either the constraint node, or the instance of
            <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup"/> that describes a group of nodes.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalRelativePositionConstraint.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalRelativePositionConstraint"/> class.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout">
            <summary>
            The main class for the Force-Directed Layout algorithm.
            </summary>
            <remarks> 
            <p>
            The Force-Directed Layout algorithm can be used to lay out any type
            of graph. It often provides a drawing with no, or only a few, edge
            crossings and with approximately equal-length edges for small- and
            medium-size graphs having a small number of cycles. 
            </p>
            <p>
            This layout algorithm iteratively searches for a configuration of the
            graph such that the lengths of the edges are close to a desired
            value. 
            </p>
            <p>
            Here are sample drawings produced with the Force-Directed Layout
            algorithm:
            <CENTER><IMG SRC="images/GraphLayout/layout-Uniform-3cyc-after.gif" BORDER="0" ALIGN="BOTTOM"/></CENTER>
            <CENTER><IMG SRC="images/GraphLayout/layout-Uniform-cycles-tree.gif" BORDER="0" ALIGN="BOTTOM"/></CENTER>
            <CENTER><IMG SRC="images/GraphLayout/layout-Uniform-huge.gif" BORDER="0" ALIGN="BOTTOM"/></CENTER>
            
            </p>
            <p>
            <b>Performance hints</b> 
            </p>
            <p>
            Several parameters have an impact on speed. In some extent, the
            performance can be improved by modifying these parameters. 
            <UL>
            <LI>Parameters that allow to reduce the number of iterations that are
            executed: 
            <UL>
            <LI><see cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.PreferredLinksLength"/>. The
            algorithm stops iterating when the length of all links is close to
            the specified "preferredLinksLength" parameter. If the preferred
            length is very high while the initial length of the links is small,
            reducing the preferred length is an indirect way to reduce the
            necessary number of iterations, hence to speed up.</LI> 
            <LI><see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/>.
            Reducing the allowed time is a way to force the completion of the
            layout quicker. However, the quality gets of course worst.</LI> 
            <LI><see cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.AllowedNumberOfIterations"/>.
            Similar as for
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/>.</LI>
            
            </UL>
            </LI>   
            <LI>Parameters that allow to reduce the time spent at each iteration:
            
            <UL>
            <LI><see cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.RespectNodeSizes"/>. If disabled,
            the algorithm is a bit quicker because it does not try to avoid
            overlaps between nodes. This is in particular possible, without
            quality degradation, when all the nodes have approximately the same
            size and have more or less a square shape. In such cases, specifying
            a "preferredLinksLength" high enough usually avoids overlaps even if
            "respectNodeSizes" is not enabled.</LI>  
            <LI><see cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.MaxAllowedMovePerIteration"/>.
            This indicates the maximum distance the algorithm is allowed to move
            a node at each iteration. The higher the value, quicker the optimum
            may be reached, but also the algorithm may fail to converge (no
            "crash", just that the quality may be worst).</LI> 
            </UL>
            </LI>   
            </UL> 
            </p>
            <p>
            See the corresponding chapter of the IBM ILOG Diagram for .NET Graph
            Layout User's Manual for details on the algorithm, the types of
            graphs for which this algorithm can be used, the features and
            limitations, code samples, parameters, and so on. 
            </p>
            <p>
            You can specify a preferred length for the links globally
            (<see cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.PreferredLinksLength"/> or for
            specific links
            (<see cref="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.SetPreferredLength(System.Object,System.Single)"/>). 
            </p>
            <p>
            You can request that the real size of the nodes is taken into account
            (<see cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.RespectNodeSizes"/>). This is
            especially recommended when the nodes are not square (have a larger
            or smaller width than height), or have different sizes. In such a
            case, the layout quality can be often further improved by increasing
            the weight of the node repulsion force (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.AdditionalNodeRepulsionWeight"/>; the
            default is zero). 
            </p>
            <p>
            While the layout algorithm optionally restricts the region where the
            nodes are placed (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.ForceFitToLayoutRegion"/>), the layout
            quality is usually much better if this option is not used (this is
            the default behavior). 
            </p>
            <p>
            If this option is not set, the nodes are considered to be points
            located in the center of the bounding box of the nodes. Using the
            layout algorithm without setting this option is recommended when the
            width of the nodes is close to their height and there are no
            significant size differences among the nodes. 
            </p>
            <p>
            Note that the initial position of the nodes (at the moment you start
            the layout) is taken into account by the layout algorithm, so you may
            get different results depending on the initial position. 
            </p>
            </remarks>
            <example>
            <para lang="cs,vbnet">The following example shows how to apply 
            the Force-Directed Layout.</para>
            <code lang="cs">
            using System;
            using ILOG.Diagrammer;
            using ILOG.Diagrammer.Graphic;
            using ILOG.Diagrammer.GraphLayout; 
            
            Group group = new Group();
            
            // Fill the group with nodes and links here
            
            ForceDirectedLayout layout = new ForceDirectedLayout();
            group.GraphLayout = layout;
            group.PerformGraphLayout(); 
            </code>
            <code lang="vbnet">
            Imports System
            Imports ILOG.Diagrammer
            Imports ILOG.Diagrammer.Graphic
            Imports ILOG.Diagrammer.GraphLayout
            
            Dim group As Group = New Group 
            
            ' Fill the group with nodes and links here
            
            Dim layout As ForceDirectedLayout = New ForceDirectedLayout
            group.GraphLayout = layout
            group.PerformGraphLayout
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.#ctor">
            <summary>
            Creates a new instance of the Force-Directed Layout algorithm.
            </summary>
            <remarks>
            <br/>To indicate the graphic container you want to lay out, use the
            method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>.
            <br/>To indicate the graph model you want to lay out, use the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            <br/>To perform the layout, use the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            <br/>To modify the layout parameters, use the different methods
            provided in this class and its superclass. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Filter"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.Init">
            <summary>
            Initializes instance variables.
            </summary>
            <remarks> 
            <p>
            You should not call this method directly. The method is called
            internally by the constructor without arguments and by the copy
            constructor. The method must be overridden by subclasses that need
            to initialize additional instance variables. 
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.#ctor(ILOG.Diagrammer.GraphLayout.ForceDirectedLayout)">
            <summary>
            Creates a new layout instance by copying an existing one.
            </summary>
            <remarks>
            This constructor is used by the
            <see cref="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.Copy"/> method. Any subclass should
            provide a copy constructor. 
            <p>
            The parameters of the <strong>source</strong> layout are copied
            using the method <see cref="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.Copy"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            <param name="source"> The layout instance that is copied.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.Copy">
            <summary>
            Copies the layout instance.
            </summary>
            <remarks> 
            <p>
            This method copies the layout instance by calling the copy
            constructor. 
            </p>
            <p>
            When performing a recursive layout of a nested graph, this method is
            used by <see cref="T:ILOG.Diagrammer.GraphLayout.ILayoutProvider"/> to
            "clone" the layout instance of a parent graph. 
            </p>
            <p>
            Note that the parameters which are specific to a node or a link are
            not copied. The other parameters, including the layout region
            specification and the customization interfaces, are also copied. A
            copy of the layout instance used for laying out the connected
            components is set on the new instance. 
            </p>
            <p>
            If a method of the type <strong>SupportsXXX</strong> is associated
            with a parameter, the parameter is copied only if the corresponding
            method returns <see langword="true"/>. 
            </p>
            </remarks>
            <returns>A copy of the layout instance.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Copies the parameters from a given layout instance.
            </summary>
            <remarks> 
            <p>
            Note that the parameters which are specific to a node or a link are
            not copied. The other parameters, including the layout region
            specification and the customization interfaces, are also copied. A
            copy of the layout instance used for laying out the connected
            components is set on this layout instance. 
            </p>
            <p>
            If a method of the type <strong>SupportsXXX</strong> is associated
            with a parameter, the parameter is copied only if the corresponding
            method returns <see langword="true"/>. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.Copy"/>
            <param name="source"> The layout instance from which the parameters
            are copied.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.Detach">
            <summary>
            Detaches the graph model from the layout instance.
            </summary>
            <remarks>
            When you attach a new graph model to the layout instance, you do not
            need to detach the old graph model because this is done
            automatically when you call
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            
            <p>
            The method performs cleaning operations on the graph model. 
            </p>
            <p>
            Note that you must call this method when you no longer need the
            layout instance. Otherwise, some objects may not be garbage
            collected. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.CreateLayoutReport">
            <summary>
            Creates the graph layout report instance.
            </summary>
            <remarks>
            The current implementation creates an instance of
            <see cref="T:ILOG.Diagrammer.GraphLayout.ForceDirectedLayoutReport"/>. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.CreateLayoutReport"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.IsLayoutOfConnectedComponentsEnabledByDefault">
            <summary>
            Overridden version of the method from the superclass that always
            returns <see langword="true"/>.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.SupportsPreserveFixedNodes">
            <summary>
            Indicates that this layout class allows the user to specify fixed
            nodes.
            </summary>
            <remarks>
            Fixed nodes are not moved during the layout if the  parameter
            <strong>preserveFixedNodes</strong> is <see langword="true"/>. 
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/>
            '/&gt;
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.SupportsLayoutRegion">
            <summary>
            Indicates that this layout class can control the size of the graph
            drawing to fit (approximately) a user-defined region (a rectangle)
            or a user-defined view.
            </summary>
            <remarks>
            By default, this feature is disabled. To enable it, use the method
            <see cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.ForceFitToLayoutRegion"/>. 
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.ForceFitToLayoutRegion"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetSpecLayoutRegion"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetCalcLayoutRegion"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.SupportsAllowedTime">
            <summary>
            Indicates that this layout class can stop the layout computation
            when the user-defined allowed time is exceeded.
            </summary>
            <remarks>
            The result code in the layout report is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/> in this case. 
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/>
            '/&gt;
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.SupportsStopImmediately">
            <summary>
            Indicates that this layout class can interrupt the current run of
            the layout immediately in a controlled way.
            </summary>
            <remarks>
            The result code in the layout report is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/> in this case. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.StopImmediately"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsStoppedImmediately"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.SupportsLayoutOfConnectedComponents">
            <summary>
            Indicates that this layout class can cut the attached graph into
            connected components, apply itself to each connected component
            separately, and then use the layout instance returned by the
            property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents"/>
            to position the connected components.
            </summary>
            <remarks>
            By default, this layout is an instance of 
            <see cref="T:ILOG.Diagrammer.GraphLayout.GridLayout"/> that can be
            customized as needed. 
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean)"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.SupportsLinkConnectionBox">
            <summary>
            Indicates that this layout class can use a link connection box
            interface to calculate the end points of a link.
            </summary>
            <remarks>
            The link connection box interface is an object that provides the
            rectangle to which the links are connected for each node and the
            tangential shift offset at each side for the connection points. 
            <p>
            The connection box interface is used only if link clipping is
            enabled by setting a link clip interface, and if the link style is
            straight line. In this case, the layout algorithm calculates the
            virtual center of the end nodes of each link by the link connection
            box interface and obtains the final connection points by clipping
            with the link clip interface. The virtual center is defined as the
            center of the connection box shifted by the average of the
            tangential "top" and "bottom" offsets in the horizontal direction,
            and by the average of the tangential "left" and "right" offsets in
            the vertical direction. For instance, if the tangential offset is 20
            at the top side and 10 at all other sides, the average shift offset
            is <strong>(20 + 10)/2 = 15</strong> in the horizontal direction and
            <strong>(10 + 10)/2 = 10</strong> in the vertical direction; hence,
            the virtual center is at <strong>connectionBox.center() + (15,
            10)</strong>. 
            </p>
            <p>
            If no link clipping is performed, the layout algorithms does not
            actively place the end points of links. It relies on the link
            connectors that are attached to the nodes to find appropriate
            connection points for the links. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.LinkStyle"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.Layout">
            <summary>
            Computes the layout using the Force-Directed Layout algorithm.
            </summary>
            <remarks>
            To start the layout, call the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            Note that this class overrides the
            <see cref="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.CreateLayoutReport"/> and creates an
            instance of <see cref="T:ILOG.Diagrammer.GraphLayout.ForceDirectedLayoutReport"/>. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.CreateLayoutReport"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.ForceDirectedLayoutReport"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetCalcLayoutRegion"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.SetPreferredLength(System.Object,System.Single)">
            <summary>
            Sets the preferred length of a link.
            </summary>
            <remarks>
            The layout algorithm tries to compute a layout where the link has
            the specified length. If a preferred length is set for a link, this
            overrides the global preferred length for this link. 
            <p>
            After having specified a length for a link, you can call the method
            with a strictly negative value to indicate that the global preferred
            length must be used again for this link. 
            </p>
            <p>
            By default, no length is specified for the individual links. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.GetPreferredLength(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.PreferredLinksLength"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.NodeDistanceThreshold"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.GetPreferredLength(System.Object)">
            <summary>
            Returns the preferred length of a link.
            </summary>
            <remarks>
            It returns <strong>-1</strong> if the length is unspecified (in this
            case, the layout uses the global length; see
            <see cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.PreferredLinksLength"/>). 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.SetPreferredLength(System.Object,System.Single)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.PreferredLinksLength"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.NodeDistanceThreshold"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.ConvergenceThreshold">
            <summary>
            Gets or sets the threshold value for the convergence detection
            mechanism.
            </summary>
            <remarks>
            The iterative algorithm is stopped if the greatest movement of a
            node at an iteration
            <see cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.MaxAllowedMovePerIteration"/> is
            smaller than <paramref name="value"/> during several successive
            iterations. 
            <p>
            The default value is <strong>1</strong>. The units are in the same
            coordinate space as the coordinates and size of the nodes.
            Increasing this value may speed up the layout because the iterations
            may be stopped earlier. However, this may produce a nonoptimal
            layout. Decreasing this value in some cases improves the quality of
            the layout but needs more time because more iterations are
            performed. Note that if the specified value is too small, the
            iterations cannot be stopped until the allowed time or the allowed
            number of iterations is reached. 
            </p>
            </remarks>
            <value>The threshold value for the convergence detection mechanism.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.MaxAllowedMovePerIteration">
            <summary>
            Gets or sets the maximum authorized node move at each iteration of
            the layout algorithm.
            </summary>
            <remarks>
            The default value is <strong>5</strong>. 
            <p>
            Increasing this parameter may speed up the layout, but the algorithm
            may fail to converge. Decreasing this parameter slows down the
            layout but in some cases improves the convergence. You should not
            specify a zero value, because in this case the layout cannot move
            the nodes at all. 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.ConvergenceThreshold"/>
            <value>The maximum authorized node move at each iteration of the
            layout algorithm.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.ForceFitToLayoutRegion">
            <summary>
            Gets or sets whether the layout algorithm must force the graph
            drawing to fit the layout region.
            </summary>
            <remarks>
            If the argument is <see langword="false"/> (which is the default),
            the layout algorithm is free to move nodes outside the layout
            region. Note that the layout may not be optimal if the size of the
            layout region is too small. It is recommended to avoid forcing the
            use of a layout region anytime this is possible. 
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetCalcLayoutRegion"/>
            <value>Whether the layout algorithm must force the graph drawing to
            fit the layout region.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.PreferredLinksLength">
            <summary>
            Gets or sets the global preferred length of the links.
            </summary>
            <remarks>
            The layout algorithm tries to compute a layout where the links have
            the specified length. The preferred length can also be specified
            individually for each link (or for some links). If an individual
            length is not specified for a particular link, the global length
            specified by this property is used for this link. 
            <p>
            The default value is <strong>60</strong>. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.SetPreferredLength(System.Object,System.Single)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.NodeDistanceThreshold"/>
            <value>The global preferred length of the links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.NodeDistanceThreshold">
            <summary>
            Gets or sets the node distance threshold.
            </summary>
            <remarks>
            The additional repulsion force (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.AdditionalNodeRepulsionWeight"/>) is
            applied only for nodes that are not connected by a link and are at a
            distance smaller than this threshold. 
            <p>
            The default value is <strong>30</strong>. 
            </p>
            <p>
            Note that the additional repulsion force is applied only if the
            corresponding weight (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.AdditionalNodeRepulsionWeight"/>) is
            larger than 0. The default weight is 0; therefore, the node distance
            threshold has no effect if the weight is not modified. 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.PreferredLinksLength"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.SetPreferredLength(System.Object,System.Single)"/>
            <value>The node distance threshold.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.RespectNodeSizes">
            <summary>
            Gets or sets whether the algorithm must try to respect the size of
            the nodes.
            </summary>
            <remarks>
            If the argument is <see langword='true'/>, the preferred length
            parameter is interpreted as a minimum distance between the bounding
            boxes of the end nodes. Otherwise, the preferred length parameter is
            considered as the center-to-center distance between the end nodes. 
            </remarks>
            <value>Whether the algorithm must try to respect the size of the
            nodes.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.LinkLengthWeight">
            <summary>
            Gets or sets the link length weight.
            </summary>
            <remarks>
            This weight is a multiplier that is applied when two nodes connected
            by a link are moved in order to obtain a link length close to the
            preferred value (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.PreferredLinksLength"/> and
            <see cref="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.SetPreferredLength(System.Object,System.Single)"/>). The default
            value is <strong>1</strong>. Increasing (or decreasing) this value
            increases (or decreases) the priority that is given to the link
            length criteria with respect to the minimum distance between nodes
            not connected by a link. 
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.AdditionalNodeRepulsionWeight"/>
            <value>The link length weight.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.AdditionalNodeRepulsionWeight">
            <summary>
            Gets or sets the weight of the additional node repulsion force.
            </summary>
            <remarks>
            This weight is a multiplier which is applied to the repulsion force
            between two nodes that are not connected by a link. The additional
            repulsion force is applied only if the distance between the nodes is
            smaller than the node distance threshold (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.NodeDistanceThreshold"/>). 
            <p>
            The default value is <strong>0.2</strong>. Increasing the weight
            increases the priority that is given to maintaining the nodes at a
            distance larger than the node distance threshold. On the other side,
            increasing the  weight decreases the ability of the algorithm to
            reach convergence quickly.  
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.NodeDistanceThreshold"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.LinkLengthWeight"/>
            <value>The weight of the additional node repulsion force.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.AllowedNumberOfIterations">
            <summary>
            Gets or sets the maximum number of iterations of the layout
            algorithm.
            </summary>
            <remarks>
             The default value is <strong>1000</strong>. 
            </remarks>
            <value>The maximum number of iterations of the layout algorithm.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.LinkStyle">
            <summary>
            Gets or sets the style of the shape of the links.
            </summary>
            <remarks>
            Valid values are <see cref="F:ILOG.Diagrammer.GraphLayout.ForceDirectedLayoutLinkStyle.Straight"/>
            (the links are given a straight-line shape) and
            <see cref="F:ILOG.Diagrammer.GraphLayout.ForceDirectedLayoutLinkStyle.NoReshape"/> (no reshape is
            performed on the links). 
            <p>
            This feature can be useful if the graph contains links that have
            intermediate points and are not straight-line links, for instance,
            <see cref="T:ILOG.Diagrammer.Graphic.Link"/> links with shape type
            <see cref="F:ILOG.Diagrammer.Graphic.LinkShapeType.Free"/> with
            intermediate points. 
            </p>
            <p>
            The default value is
            <see cref="F:ILOG.Diagrammer.GraphLayout.ForceDirectedLayoutLinkStyle.Straight"/>. 
            </p>
            <p>
             
            </p>
            </remarks>
            <value>The style of the shape of the links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.PreserveFixedNodes">
            <summary>
            Gets or sets whether the layout avoids movement of fixed nodes.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/> for details.
            </remarks>
            <value>Whether the layout avoids movement of fixed nodes.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.AllowedTime">
            <summary>
            Gets or sets the upper limit for the duration of the layout
            algorithm.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/> for details.
            </remarks>
            <value>The upper limit for the duration of the layout algorithm.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.LayoutOfConnectedComponentsEnabled">
            <summary>
            Gets or sets whether the generic connected component layout
            mechanism is enabled.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/> for
            details.
            </remarks>
            <value>Whether the generic connected component layout mechanism is
            enabled.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.LinkConnectionBoxProvider">
            <summary>
            Gets or sets the link connection box interface for the connection
            points of links.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/> for details.
            </remarks>
            <value>The link connection box interface for the connection points
            of links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.LayoutRegion">
            <summary>
            Gets or sets the layout region.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/> for details.
            </remarks>
            <value>The layout region.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.LayoutRegionMode">
            <summary>
            Gets or sets the layout region mode.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegionMode"/> for details.
            </remarks>
            <value>The layout region mode.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.ForceDirectedLayoutLinkStyle">
            <summary>
            The styles that define the shape for the links when using the
            Force-Directed layout algorithm.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.LinkStyle"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ForceDirectedLayoutLinkStyle.Straight">
            <summary>
            Straight-line links shape option.
            </summary>
            <remarks>
            When used as an argument of
            <see cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.LinkStyle"/>, the links are given a
            straight-line shape. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ForceDirectedLayoutLinkStyle.NoReshape">
            <summary>
            No links reshape option.
            </summary>
            <remarks>
            When used as an argument of
            <see cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.LinkStyle"/>, the links are not
            reshaped. 
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage">
            <summary>
            A class that represents a specific editor for a type of Fill.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage._name">
            <summary>
            The display name of the Fill type.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage._fillType">
            <summary>
            The fill type handled by this page.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage._fill">
            <summary>
            The edited fill.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage"/> FillEditorPage instance.
            </summary>
            <param name="name">The display name of the fill type handled by this page.</param>
            <param name="fillType">The type of the <see cref="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage.Fill"/> handled by this page.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage.#ctor(System.String,ILOG.Diagrammer.Fill)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage"/> FillEditorPage instance.
            </summary>
            <param name="name">The display name of the fill type handled by this page.</param>
            <param name="fill">The <see cref="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage.Fill"/> instance to edit.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage.OnFillChanged(System.EventArgs)">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage.Fill"/> property changes.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains data about the event.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage.FillName">
            <summary>
            Gets the display name of the fill handled by this page.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage.FillType">
            <summary>
            Gets the type of <see cref="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage.Fill"/> handled by this page.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage.Fill">
            <summary>
            Gets or sets the <see cref="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.FillEditorPage.Fill"/> to edit.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Point2D">
            <summary>
            Represents an ordered pair of floating point x- and 
            y-coordinates that defines a point in a two-dimensional plane.
            </summary>
            <seealso cref="T:ILOG.Diagrammer.Size2D"/>
            <seealso cref="T:ILOG.Diagrammer.Rectangle2D"/>
        </member>
        <member name="M:ILOG.Diagrammer.Point2D.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Point2D"/> class with the specified coordinates.
            </summary>
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The vertical position of the point.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Point2D.Equals(System.Object)">
            <summary>
            Specifies whether this <see cref="T:ILOG.Diagrammer.Point2D"/> contains the same coordinates as the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test</param>
        </member>
        <member name="M:ILOG.Diagrammer.Point2D.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:ILOG.Diagrammer.Point2D"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Point2D.ToString">
            <summary>
            Converts this <see cref="T:ILOG.Diagrammer.Point2D"/> to a human readable string.
            </summary>
            <returns>A string that represents this <see cref="T:ILOG.Diagrammer.Point2D"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Point2D.op_Equality(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            Compares two <see cref="T:ILOG.Diagrammer.Point2D"/> structures. The result specifies whether the values 
            of the X and Y properties of the two <see cref="T:ILOG.Diagrammer.Point2D"/> objects are equal.
            </summary>
            <param name="left">A <see cref="T:ILOG.Diagrammer.Point2D"/> to compare. </param>
            <param name="right">A <see cref="T:ILOG.Diagrammer.Point2D"/> to compare. </param>
            <returns>Returns <see langword="true"/> if the X and Y values of the left and right <see cref="T:ILOG.Diagrammer.Point2D"/> objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Point2D.op_Inequality(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            Compares two <see cref="T:ILOG.Diagrammer.Point2D"/> objects. The result specifies whether 
            the values of the X or Y properties of the two <see cref="T:ILOG.Diagrammer.Point2D"/> objects are unequal.
            </summary>
            <param name="left">A <see cref="T:ILOG.Diagrammer.Point2D"/> to compare.</param>
            <param name="right">A <see cref="T:ILOG.Diagrammer.Point2D"/> to compare.</param>
            <returns><see langword="true"/> if the values of either the X properties 
            or the Y properties of left and right differ; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.Point2D.op_Implicit(System.Drawing.Point)~ILOG.Diagrammer.Point2D">
            <summary>
            Converts the specified <see cref="T:System.Drawing.Point"/> to a <see cref="T:ILOG.Diagrammer.Point2D"/>.
            </summary>
            <param name="p">The <see cref="T:System.Drawing.Point"/> to convert.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Point2D.op_Implicit(System.Drawing.PointF)~ILOG.Diagrammer.Point2D">
            <summary>
            Converts the specified <see cref="T:System.Drawing.PointF"/> to a <see cref="T:ILOG.Diagrammer.Point2D"/>.
            </summary>
            <param name="p">The <see cref="T:System.Drawing.PointF"/> to convert.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Point2D.op_Implicit(ILOG.Diagrammer.Point2D)~System.Drawing.PointF">
            <summary>
            Converts the specified <see cref="T:ILOG.Diagrammer.Point2D"/> to a <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <param name="p">The <see cref="T:ILOG.Diagrammer.Point2D"/> to convert.</param>
        </member>
        <member name="F:ILOG.Diagrammer.Point2D.Empty">
            <summary>
            Represents a new instance of the <see cref="T:ILOG.Diagrammer.Point2D"/> class with member data left uninitialized.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Point2D.Invalid">
            <summary>
            A new instance of the <see cref="T:ILOG.Diagrammer.Point2D"/> class that can be used
            to represent an invalid point.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Point2D.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref="T:ILOG.Diagrammer.Point2D"/> is empty.
            </summary>
            <value>
            This property returns <see langword="true"/> if both X and Y are zero; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Point2D.X">
            <summary>
            Gets the x-coordinate of this <see cref="T:ILOG.Diagrammer.Point2D"/>.
            </summary>
            <value>
            The x-coordinate of this <see cref="T:ILOG.Diagrammer.Point2D"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Point2D.Y">
            <summary>
            Gets the y-coordinate of this <see cref="T:ILOG.Diagrammer.Point2D"/>.
            </summary>
            <value>
            The y-coordinate of this <see cref="T:ILOG.Diagrammer.Point2D"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Point2D.IsInvalid">
            <summary>
            Gets a value indicating whether this <see cref="T:ILOG.Diagrammer.Point2D"/> is invalid (that is, is equal to the
            <see cref="F:ILOG.Diagrammer.Point2D.Invalid"/> member).
            </summary>
            <value>
            This property returns <see langword="true"/> if X is the negative infinity and Y is the positive infinity; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.Point2DCollection">
            <summary>
            Defines a collection of <see cref="T:ILOG.Diagrammer.Point2D"/> objects.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Util.Collection`1">
            <summary>
            Extends the <see cref="T:System.Collections.ObjectModel.Collection`1"/> class by adding additional features.
            </summary>
            <typeparam name="T">The type of elements in the collection</typeparam>
            <remarks>This class adds methods to add or remove ranges of elements, to move an element, and to sort the collection.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Util.Collection`1.ToArray">
            <summary>
            Copies the elements of the collection to a new array. 
            </summary>
            <returns>An array containing copies of the elements of the collection.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Util.Collection`1.AsReadOnly">
            <summary>
            Returns a read-only wrapper for the current collection. 
            </summary>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> that acts as a read-only wrapper around the current collection.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Util.Collection`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the collection to a compatible
            one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="index">The starting index in this collection.</param>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The starting index in the destination array.</param>
            <param name="count">The number of items to copy.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.Collection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the collection. 
            </summary>
            <param name="collection">The collection whose elements should be added to the end of this collection.
            The collection itself cannot be a <see langword="null"/> reference, but it can contain elements that are a
            <see langword="null"/> reference, if type <strong>T</strong> is a reference type.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.Collection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into this collection at the specified index. 
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be added to the end of this collection.
            The collection itself cannot be a <see langword="null"/> reference, but it can contain elements that are a
            <see langword="null"/> reference, if type <strong>T</strong> is a reference type.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.Collection`1.InsertItems(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts elements into the collection at the specified index. 
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be added to the end of this collection.
            The collection itself cannot be a <see langword="null"/> reference, but it can contain elements that are a
            <see langword="null"/> reference, if type <strong>T</strong> is a reference type.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.Collection`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the collection. 
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.Collection`1.RemoveItems(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the collection. 
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.Collection`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection. 
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the item.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.Collection`1.Move(`0,System.Int32)">
            <summary>
            Moves the specified item to a new location in the collection. 
            </summary>
            <param name="value">The item to move.</param>
            <param name="newIndex">The zero-based index specifying the new location of the item.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.Collection`1.MoveItem(System.Int32,System.Int32)">
            <summary>
            Moves the item at the specified index to a new location in the collection. 
            </summary>
            <param name="oldIndex">The zero-based index specifying the location of the item to be moved.</param>
            <param name="newIndex">The zero-based index specifying the new location of the item.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.Collection`1.Sort">
            <summary>
            Sorts the elements in the entire collection using the default comparer. 
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Util.Collection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire collection using the specified comparer. 
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements, 
            or a <see langword="null"/> reference to use the default comparer.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.Collection`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire collection using the specified <see cref="T:System.Comparison`1"/>. 
            </summary>
            <param name="comparison">The <see cref="T:System.Comparison`1"/> to use when comparing elements.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.Collection`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in collection using the specified comparer. 
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing elements, 
            or a <see langword="null"/> reference to use the default comparer.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.Collection`1.SortItems(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in collection using the specified comparer. 
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use when comparing elements, 
            or a <see langword="null"/> reference to use the default comparer.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.Collection`1.RemoveItem(System.Int32)">
            <summary>
            This member overrides <see cref="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">Collection.RemoveItem</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Util.Collection`1.InsertItem(System.Int32,`0)">
            <summary>
            This member overrides <see cref="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">Collection.InsertItem</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Point2DCollection.#ctor(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.Point2D})">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Point2DCollection"/> object with the specified points.
            </summary>
            <param name="points">The initial points in the collections.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Point2DCollection.Set(System.Collections.Generic.ICollection{ILOG.Diagrammer.Point2D})">
            <summary>
            Changes all the points in the collection with a new set of points.
            </summary>
            <param name="points">An array of points to set in the collection.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Point2DCollection.OnCollectionChanged(System.EventArgs)">
            <summary>
            Invoked when the collection changes.
            </summary>
            <param name="args">A <see cref="T:System.EventArgs"/> the containts the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Point2DCollection.OnCollectionChanging(System.EventArgs)">
            <summary>
            Invoked when the collection changes.
            </summary>
            <param name="args">A <see cref="T:System.EventArgs"/> the containts the event data.</param>
        </member>
        <member name="E:ILOG.Diagrammer.Point2DCollection.CollectionChanged">
            <summary>
            Event fired when the collection changes.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Point2DCollection.CollectionChanging">
            <summary>
            Event fired when the collection changes.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.OpacityRenderer">
            <summary>
            A utility class that can render a graphic object
            with an opacity different than 1.
            The graphic object is rendered in a bitmap, then
            the bitmap is rendered with a color matrix that 
            specifies the alpha to apply.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.OpacityRenderer._opacityMatrix">
            <summary>
            Color matrix used to set the alpha.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.OpacityRenderer.Draw(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Draws the specified graphic object.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Group">
            <summary>
            Groups <see cref="T:ILOG.Diagrammer.GraphicObject"/> elements in a group.
            </summary>
            <remarks>A <see cref="T:ILOG.Diagrammer.Graphic.Group"/> allows to group graphic objects together. A <see cref="T:ILOG.Diagrammer.Graphic.Group"/> does not
            have any graphical representation and the size of the group is automatically computed from the size
            of its children. Use the <see cref="P:ILOG.Diagrammer.Graphic.Composite.Objects"/> property to add objects in a group.</remarks>
            <example>
            <para lang="cs,vbnet">
            The following example adds a triangle and a rectangle in a group.
            </para>
            <code lang="cs"> 
            Group CreateGroup()
            {
                Group group = new Group();
                Basic2DShape triangle = new Basic2DShape(0f, 0F, 80F, 70F);
                triangle.ShapeType = Basic2DShapeType.Triangle;
                triangle.ControlValue = 0.5F;
                triangle.Fill = new SolidFill(Color.Blue);
            
                Rect rectangle = new Rect(0f, 50F, 130F, 40F);
                rectangle.Fill = new SolidFill(Color.Gray);
                rectangle.Stroke = new Stroke(Color.Red);
            
                group.Objects.AddRange(new GraphicObject[] { rectangle, triangle });
                return group;
            }
            </code>
            <code lang="vbnet">
            Function CreateGroup() As Group 
                Dim group As Group = New Group 
                Dim triangle As Basic2DShape = New Basic2DShape(0F, 0F, 80F, 70F) 
                triangle.ShapeType = Basic2DShapeType.Triangle 
                triangle.ControlValue = 0.5F 
                triangle.Fill = New SolidFill(Color.Blue) 
            
                Dim rectangle As Rect = New Rect(0F, 50F, 130F, 40F) 
                rectangle.Fill = New SolidFill(Color.Gray) 
                rectangle.Stroke = New Stroke(Color.Red) 
            
                group.Objects.AddRange(New GraphicObject() {rectangle, triangle}) 
                Return group 
            End Function
            </code>
            </example>
            <see cref="T:ILOG.Diagrammer.Graphic.GraphicSymbol"/>
            <see cref="T:ILOG.Diagrammer.Graphic.UserSymbol"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Group.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Group"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Group.GetDefaultAnchors">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetDefaultAnchors">GraphicObject.GetDefaultAnchors</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Group.SupportsGraphLayout">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.SupportsGraphLayout">GraphicContainer.SupportsGraphLayout</see>.
            </summary>
            <remarks>
            As implemented in this class, this method returns always <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Group.SupportsLinkReparenting">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.SupportsLinkReparenting">GraphicContainer.SupportsLinkReparenting</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.GroupSelectionGraphic">
            <summary>
            Represents the selection graphic object dedicated to <see cref="T:ILOG.Diagrammer.Graphic.Group"/> objects.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GroupSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.GroupSelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.GroupSelectionGraphic.ShowMoveHandle">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.DefaultSelectionGraphic.ShowMoveHandle">DefaultSelectionGraphic.ShowMoveHandle</see>.
            </summary> 
        </member>
        <member name="T:ILOG.Diagrammer.Filters.TurbulenceType">
            <summary>
            Defines the type of turbulence for the <see cref="T:ILOG.Diagrammer.Filters.FeTurbulence"/> filter effect.
            </summary>
            <remarks>Use the value of this enumeration to define the type of turbulence in the
            <see cref="P:ILOG.Diagrammer.Filters.FeTurbulence.Type"/> property of 
            the <see cref="T:ILOG.Diagrammer.Filters.FeTurbulence"/> class.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.TurbulenceType.FractalNoise">
            <summary>
            The fractal noise type.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.TurbulenceType.Turbulence">
            <summary>
            The turbulence type.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeTurbulence">
            <summary>
            This filter effect creates an image using the Perlin turbulence function. 
            </summary>
            <remarks>
            This filter effect creates an image using the Perlin turbulence function. 
            It allows the synthesis of artificial textures like clouds or marble. 
            For a detailed description of the Perlin turbulence function, 
            see "Texturing and Modeling", Ebert et al, AP Professional, 1994.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeTurbulence.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeTurbulence"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeTurbulence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeTurbulence"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeTurbulence.Setup_seed(System.Int32)">
            <summary>
            Produces results in the range [1, 2**31 - 2].
            Algorithm is: r = (a * r) mod m
            where a = 16807 and m = 2**31 - 1 = 2147483647
            See [Park  Miller], CACM vol. 31 no. 10 p. 1195, Oct. 1988
            To test: the algorithm should produce the result 1043618065
            as the 10,000th generated number if the original seed is 1.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeTurbulence.ToString">
            <summary>
            Returns a short description of this filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeTurbulence.Type">
            <summary>
            Gets and sets the type of turbulence.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Filters.TurbulenceType"/> values. The default value is
            <see cref="F:ILOG.Diagrammer.Filters.TurbulenceType.Turbulence"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeTurbulence.BaseFrequencyX">
            <summary>
            Gets and sets the frequency for the noise function in the X axis.
            </summary>
            <value>
            The frequency for the noise function in the X axis. The default value is <strong>0</strong>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeTurbulence.BaseFrequencyY">
            <summary>
            Gets and sets the frequency for the noise function in the Y axis.
            </summary>
            <value>
            The frequency for the noise function in the Y axis. The default value is <strong>0</strong>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeTurbulence.NumOctaves">
            <summary>
            Gets and sets the number of octave for the noise function.
            </summary>
            <value>
            The number of octave for the noise function. The default value is <strong>1</strong>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeTurbulence.Inputs">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.FilterEffect.Inputs">FilterEffect.Inputs</see>
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.BlendMode">
            <summary>
            Defines the blending mode for the <see cref="T:ILOG.Diagrammer.Filters.FeBlend"/> filter effect.
            </summary>
            <remarks>Use the value of this enumeration to define the blending mode in the
            <see cref="P:ILOG.Diagrammer.Filters.FeBlend.Mode"/> property of 
            the <see cref="T:ILOG.Diagrammer.Filters.FeBlend"/> class.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.BlendMode.Normal">
            <summary>
            The normal blending mode.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.BlendMode.Lighten">
            <summary>
            The lighten blending mode.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.BlendMode.Darken">
            <summary>
            The darken blending mode.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.BlendMode.Multiply">
            <summary>
            The multiply blending mode.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.BlendMode.Screen">
            <summary>
            The screen blending mode.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeBlend">
            <summary>
            Defines the blend filter effect.
            </summary>
            <remarks>
            This filter combines two objects together 
            using imaging software blending modes commonly used. 
            It performs a pixel-wise combination of two
            input images. The blending modes are defined by the <see cref="T:ILOG.Diagrammer.Filters.BlendMode"/>
            enumeration.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.FeBlend._mode">
            <summary>
            The blending mode.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeBlend.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeBlend"/> filter effect.
            </summary>
            <overloads>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeBlend"/> filter effect.
            </overloads>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeBlend.#ctor(ILOG.Diagrammer.Filters.BlendMode)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeBlend"/> filter effect with the specified blending mode.
            </summary>
            <param name="mode">One of the <see cref="T:ILOG.Diagrammer.Filters.BlendMode"/> values defining the blending mode.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeBlend.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeBlend"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeBlend.ToString">
            <summary>
            Returns a short description of this filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeBlend.Mode">
            <summary>
            Gets or sets the blending mode of this filter.
            </summary>
            <value>
            One of the <see cref="T:ILOG.Diagrammer.Filters.BlendMode"/> values defining the blending mode.
            The default value is <see cref="F:ILOG.Diagrammer.Filters.BlendMode.Normal"/>.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.DiagramPrintPreviewDialog">
            <summary>
            Represents a common dialog box that displays a preview of a <see cref="T:ILOG.Diagrammer.Printing.DiagramPrintDocument"/>.
            </summary>
            <remarks>Use the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramPrintPreviewDialog.Document"/> property to get or set the document to preview.
            <p/>
            <img src="images/Windows/Forms/DiagramPrintPreviewDialog.png"/>
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample shows how to preview a <see cref="T:ILOG.Diagrammer.Printing.DiagramPrintDocument"/>.</para>
            <code lang="cs">
            Group container = new Group();
            Ellipse ellipse = new Ellipse(0, 0, 100, 100);
            container.Objects.Add(ellipse);
            DiagramPrintDocument document = new DiagramPrintDocument(container);
            DiagramPrintPreviewDialog dialog = new DiagramPrintPreviewDialog();
            dialog.Document = document;
            dialog.ShowDialog();
            </code>
            <code lang="vbnet">
            Dim container As Group = New Group
            Dim ellipse As Ellipse = New Ellipse(0, 0, 100, 100)
            container.Objects.Add(ellipse)
            Dim document As DiagramPrintDocument = New DiagramPrintDocument(container)
            Dim dialog As DiagramPrintPreviewDialog = New DiagramPrintPreviewDialog
            dialog.Document = document
            dialog.ShowDialog()
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.DiagramPageSetupDialog"/>
            <seealso cref="T:ILOG.Diagrammer.Printing.DiagramPrintDocument"/>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramPrintPreviewDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramPrintPreviewDialog"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramPrintPreviewDialog.#ctor(ILOG.Diagrammer.Printing.DiagramPrintDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramPrintPreviewDialog"/> class.
            </summary>
            <param name="document">The document to preview.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramPrintPreviewDialog.CreateHandle">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.CreateHandle">Control.CreateHandle</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramPrintPreviewDialog.InvalidatePreview">
            <summary>
            Refreshes the preview of the document.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramPrintPreviewDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramPrintPreviewDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramPrintPreviewDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramPrintPreviewDialog.SetupDialog">
            <summary>
            Gets or sets the dialog used to edit the page setup.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramPageSetupDialog"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramPrintPreviewDialog.Document">
            <summary>
            Gets or set the <see cref="T:ILOG.Diagrammer.Printing.DiagramPrintDocument"/> displayed by this dialog.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Printing.DiagramPrintDocument"/> instance.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog">
            <summary>
            Defines a dialog box that allows to select a <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayout"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog"/>
            to edit a graph layout.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog"/> with a flag
            that indicates if the dialog edits a graph layout or a link layout.
            </summary>
            <param name="linkLayout">
            If this parameter is <see langword="true"/>, the editor is configured to
            edit a link layout instead of a node layout.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog.GetLocalizedString(System.String,System.String)">
            <summary>
            Gets the name or the description of a node.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog.Duplicate(ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Duplicates a container, and saves the node/link parameters
            into properties of the graphic objects.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog.SaveNodeLinkProperties(ILOG.Diagrammer.GraphLayout.GraphLayout,ILOG.Diagrammer.GraphicObject)">
            <summary>
            Saves the node/link properties for a graphic object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog.RestoreNodeLinkProperties(ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Restores the node/link properties for a container.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog.RestoreNodeLinkProperties(ILOG.Diagrammer.GraphLayout.GraphLayout,ILOG.Diagrammer.GraphicObject)">
            <summary>
            Restores the node/link properties for a graphic object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog.AllowNullLayout">
            <summary>
            Gets or sets a value indicating whether a button is visible to specify a null layout.
            </summary>
            <value><see langword="true"/> to show the button; Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog.GraphLayout">
            <summary>
            Gets or sets the graph layout selected in the dialog box.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog.ShowAdvancedPage">
            <summary>
            Gets or sets a value indicating whether to show the advanced tab page.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog.PreviewContainer">
            <summary>
            Gets or sets the graphic container that will be used to preview the graph layout.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog.UseSampleGraph">
            <summary>
            Indicates whether the preview uses a predefined sample graph, or the current edited graph.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog.Execute">
            <summary>
            Indicates that the user pressed the "Set And Execute" button,
            and that the graph layout should be applied immediately.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GraphLayoutDialog.PropertyEditorMode">
            <summary>
            Determines whether the buttons displayed by the dialog.
            </summary>
            <remarks>
            In property editor mode, the dialog has four buttons:
            "No Layout", "Set Graph Layout", "Set and Perform", and "Cancel",
            otherwise the dialog has only three buttons: "No Layout", "OK" and "Cancel".
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Util.ImageUtil.Quantizer">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.Quantizer.#ctor(System.Boolean)">
            <summary>
            Construct the quantizer
            </summary>
            <param name="singlePass">If true, the quantization only needs to loop through the source pixels once</param>
            <remarks>
            If you construct this class with a true value for singlePass, then the code will, when quantizing your image,
            only call the 'QuantizeImage' function. If two passes are required, the code will call 'InitialQuantizeImage'
            and then 'QuantizeImage'.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.Quantizer.Quantize(System.Drawing.Image)">
            <summary>
            Quantize an image and return the resulting output bitmap
            </summary>
            <param name="source">The image to quantize</param>
            <returns>A quantized version of the image</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.Quantizer.FirstPass(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <summary>
            Execute the first pass through the pixels in the image
            </summary>
            <param name="sourceData">The source data</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.Quantizer.SecondPass(System.Drawing.Imaging.BitmapData,System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Execute a second pass through the bitmap
            </summary>
            <param name="sourceData">The source bitmap, locked into memory</param>
            <param name="output">The output bitmap</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
            <param name="bounds">The bounding rectangle</param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.Quantizer.InitialQuantizePixel(ILOG.Diagrammer.Util.ImageUtil.Quantizer.Color32*)">
            <summary>
            Override this to process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.Quantizer.QuantizePixel(ILOG.Diagrammer.Util.ImageUtil.Quantizer.Color32*)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.Quantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.Quantizer._singlePass">
            <summary>
            Flag used to indicate whether a single pass or two passes are needed for quantization.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Util.ImageUtil.Quantizer.Color32">
            <summary>
            Struct that defines a 32 bpp colour
            </summary>
            <remarks>
            This struct is used to read data from a 32 bits per pixel image
            in memory, and is ordered in this manner as this is the way that
            the data is layed out in memory
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.Quantizer.Color32.Blue">
            <summary>
            Holds the blue component of the colour
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.Quantizer.Color32.Green">
            <summary>
            Holds the green component of the colour
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.Quantizer.Color32.Red">
            <summary>
            Holds the red component of the colour
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.Quantizer.Color32.Alpha">
            <summary>
            Holds the alpha component of the colour
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.Quantizer.Color32.ARGB">
            <summary>
            Permits the color32 to be treated as an int32
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Util.ImageUtil.Quantizer.Color32.Color">
            <summary>
            Return the color for this Color32 object
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer">
            <summary>
            Quantize using an Octree
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct the octree quantizer
            </summary>
            <remarks>
            The Octree quantizer is a two pass algorithm. The initial pass sets up the octree,
            the second pass quantizes a color based on the nodes in the tree
            </remarks>
            <param name="maxColors">The maximum number of colors to return</param>
            <param name="maxColorBits">The number of significant bits</param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.InitialQuantizePixel(ILOG.Diagrammer.Util.ImageUtil.Quantizer.Color32*)">
            <summary>
            Process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.QuantizePixel(ILOG.Diagrammer.Util.ImageUtil.Quantizer.Color32*)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer._octree">
            <summary>
            Stores the tree
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer._maxColors">
            <summary>
            Maximum allowed color depth
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree">
            <summary>
            Class which does the actual quantization
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.#ctor(System.Int32)">
            <summary>
            Construct the octree
            </summary>
            <param name="maxColorBits">The maximum number of significant bits in the image</param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.AddColor(ILOG.Diagrammer.Util.ImageUtil.Quantizer.Color32*)">
            <summary>
            Add a given color value to the octree
            </summary>
            <param name="pixel"></param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.Reduce">
            <summary>
            Reduce the depth of the tree
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.TrackPrevious(ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.OctreeNode)">
            <summary>
            Keep track of the previous node that was quantized
            </summary>
            <param name="node">The node last quantized</param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.Palletize(System.Int32)">
            <summary>
            Convert the nodes in the octree to a palette with a maximum of colorCount colors
            </summary>
            <param name="colorCount">The maximum number of colors</param>
            <returns>An arraylist with the palettized colors</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.GetPaletteIndex(ILOG.Diagrammer.Util.ImageUtil.Quantizer.Color32*)">
            <summary>
            Get the palette index for the passed color
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.mask">
            <summary>
            Mask used when getting the appropriate pixels for a given node
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree._root">
            <summary>
            The root of the octree
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree._leafCount">
            <summary>
            Number of leaves in the tree
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree._reducibleNodes">
            <summary>
            Array of reducible nodes
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree._maxColorBits">
            <summary>
            Maximum number of significant bits in the image
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree._previousNode">
            <summary>
            Store the last node quantized
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree._previousColor">
            <summary>
            Cache the previous color quantized
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.Leaves">
            <summary>
            Get/Set the number of leaves in the tree
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.ReducibleNodes">
            <summary>
            Return the array of reducible nodes
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.OctreeNode">
            <summary>
            Class which encapsulates each node in the tree
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.OctreeNode.#ctor(System.Int32,System.Int32,ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree)">
            <summary>
            Construct the node
            </summary>
            <param name="level">The level in the tree = 0 - 7</param>
            <param name="colorBits">The number of significant color bits in the image</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.OctreeNode.AddColor(ILOG.Diagrammer.Util.ImageUtil.Quantizer.Color32*,System.Int32,System.Int32,ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree)">
            <summary>
            Add a color into the tree
            </summary>
            <param name="pixel">The color</param>
            <param name="colorBits">The number of significant color bits</param>
            <param name="level">The level in the tree</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.OctreeNode.Reduce">
            <summary>
            Reduce this node by removing all of its children
            </summary>
            <returns>The number of leaves removed</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.OctreeNode.ConstructPalette(System.Collections.ArrayList,System.Int32@)">
            <summary>
            Traverse the tree, building up the color palette
            </summary>
            <param name="palette">The palette</param>
            <param name="paletteIndex">The current palette index</param>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.OctreeNode.GetPaletteIndex(ILOG.Diagrammer.Util.ImageUtil.Quantizer.Color32*,System.Int32)">
            <summary>
            Return the palette index for the passed color
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.OctreeNode.Increment(ILOG.Diagrammer.Util.ImageUtil.Quantizer.Color32*)">
            <summary>
            Increment the pixel count and add to the color information
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.OctreeNode._leaf">
            <summary>
            Flag indicating that this is a leaf node
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.OctreeNode._pixelCount">
            <summary>
            Number of pixels in this node
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.OctreeNode._red">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.OctreeNode._green">
            <summary>
            Green Component
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.OctreeNode._blue">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.OctreeNode._children">
            <summary>
            Pointers to any child nodes
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.OctreeNode._nextReducible">
            <summary>
            Pointer to next reducible node
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.OctreeNode._paletteIndex">
            <summary>
            The index of this node in the palette
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.OctreeNode.NextReducible">
            <summary>
            Get/Set the next reducible node
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Util.ImageUtil.OctreeQuantizer.Octree.OctreeNode.Children">
            <summary>
            Return the child nodes
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.CursorSerializer.ShouldSerialize(System.Object,ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Xml.XmlDocument,ILOG.Diagrammer.Serialization.XmlSerializerContext)">
            <summary>
            overrided to bypass the missing default ctor.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint">
            <summary>
            The <strong>InternalPoint</strong> class defines a point specified in float
            precision representing a location in (x,y) coordinate space.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.X">
            <summary>
            The X coordinate of this <strong>InternalPoint</strong>
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.Y">
            <summary>
            The Y coordinate of this <strong>InternalPoint</strong>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.#ctor">
            <summary>
            Creates a new <strong>InternalPoint</strong> at coordinates (0,0).
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new <strong>InternalPoint</strong> at the specified coordinates.
            </summary>
            <param name='x'> The x coordinate.
            </param>
            <param name='y'> The y coordinate.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.#ctor(ILOG.Diagrammer.GraphLayout.Internal.InternalPoint)">
            <summary>
            Creates a new <strong>InternalPoint</strong> by copying the specified point.
            </summary>
            <param name='p'> The point to copy.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.#ctor(ILOG.Diagrammer.Point2D)">
            <summary>
            Creates a new <strong>InternalPoint</strong> by copying the specified point.
            </summary>
            <param name="p"> The point to copy.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.GetX">
            <summary>
            Returns the X coordinate of this <strong>InternalPoint</strong> in 
            <strong>double</strong> precision.
            </summary>
            <returns>The X coordinate of this <strong>InternalPoint</strong></returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.GetY">
            <summary>
            Returns the Y coordinate of this <strong>InternalPoint</strong> in 
            <strong>double</strong> precision.
            </summary>
            <returns>the Y coordinate of this <strong>InternalPoint</strong></returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.SetLocation(System.Double,System.Double)">
            <summary>
            Sets the location of this <strong>InternalPoint</strong> to the specified
            <strong>double</strong> coordinates.
            </summary>
            <param name='x'> The X coordinate to which to set this
            <strong>InternalPoint</strong></param>
            <param name='y'> The Y coordinate to which to set this
            <strong>InternalPoint</strong></param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.SetLocation(System.Single,System.Single)">
            <summary>
            Sets the location of this <strong>InternalPoint</strong> to the specified
            <strong>float</strong> coordinates.
            </summary>
            <param name='x'> The X coordinate to which to set this
            <strong>InternalPoint</strong></param>
            <param name='y'> The Y coordinate to which to set this
            <strong>InternalPoint</strong></param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.SetLocation(ILOG.Diagrammer.GraphLayout.Internal.InternalPoint)">
            <summary>
            Sets the location of this <strong>InternalPoint</strong> to the 
            coordinates of the specified point.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.Translate(System.Single,System.Single)">
            <summary>
            Translates the point.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.Move(System.Single,System.Single)">
            <summary>
            Changes the point location.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.Floor">
            <summary>
            Modifies the point so that the coordinates becomes mathematical integers.
            This is useful when you need to use a point to draw on a view.
            </summary>            
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.XFloor">
            <summary>
            Returns the x coordinate of the point as a mathematical integer.
            This is useful when you need to use a point to draw on a view.       
            </summary>         
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.YFloor">
            <summary>
            Returns the y coordinate of the point as a mathematical integer.
            This is useful when you need to use a point to draw on a view.         
            </summary>         
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.ToString">
            <summary>
            Returns a <strong>String</strong> that represents the value  of this
            <strong>InternalPoint</strong></summary> 
            <returns>A string representation of this
            <strong>InternalPoint</strong></returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.Equals(System.Object)">
            <summary>
            Determines whether or not two points are equal.
            </summary>
            <remarks>
            Determines whether or not two points are equal. Two instances of
            <strong>InternalPoint</strong> are equal if the values of their 
            <strong>X</strong> and <strong>Y</strong> member fields, representing their
            position in the coordinate space, are the same. 
            </remarks>
            <param name='obj'> An object to be compared with this
            <strong>InternalPoint</strong></param>
            <returns><see langword='true'/> if the object to be compared is an
            instance of <strong>InternalPoint</strong> and has the same values;
            <see langword='false'/> otherwise.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.GetPoints2D(ILOG.Diagrammer.GraphLayout.Internal.InternalPoint[])">
            <summary>
            Translates an array of internal points into an array of Point2D.       
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalPoint.GetInternalPoints(ILOG.Diagrammer.Point2D[])">
            <summary>
            Translates an array of Point2D into an array of internal points.       
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLevelJustification">
            <summary>
            The justification options of nodes within the levels of a hierarchical
            layout.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LevelJustification"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLevelJustification.Top">
            <summary>
            Nodes are justified at their top border.
            </summary>
            <remarks>
            This option can be specified when the flow direction is to the top
            or to the bottom.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLevelJustification.Bottom">
            <summary>
            Nodes are justified at their bottom border.
            </summary>
            <remarks>
            This option can be specified when the flow direction is to the top
            or to the bottom.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLevelJustification.Left">
            <summary>
            Nodes are justified at their left border.
            </summary>
            <remarks>
            This option can be specified when the flow direction is to the left
            or to the right.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLevelJustification.Right">
            <summary>
            Nodes are justified at their right border.
            </summary>
            <remarks>
            This option can be specified when the flow direction is to the left
            or to the right.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLevelJustification.Center">
            <summary>
            Nodes are justified at their center.
            </summary>
            <remarks>
            This option can be specified with all flow directions.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode">
            <summary>
            The modes how nodes can be moved by the Hierarchical layout
            algorithm.
            </summary>
            <remarks>
            Node movement modes only have an effect if the incremental mode
            is switched on. In incremental mode, the layout is able to
            restrict the movement of nodes in x direction or in y direction.
            <p>
            Node movement modes can be specified globally for all nodes by
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalNodeMovementMode"/>,
            or locally for individual nodes by
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetIncrementalNodeMovementMode(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode)"/>.
            If you want to specify the mode for individual nodes, you need to set
            the global mode to <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.Mixed"/>.
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalNodeMovementMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetIncrementalNodeMovementMode(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode)"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.Free">
            <summary>
            Free movement mode.
            </summary>
            <remarks>
            When used as an argument of
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalNodeMovementMode"/>,
            the incremental layout is free to move the nodes. Depending on the
            various parameters of the incremental mode, the layout shifts the
            nodes to optimize the space usage, but the shifting does not change
            the relative order of the nodes and links, so that the diagram after
            an incremental layout looks very similar to the previous diagram.
            <p>
            To specify the mode of an individual node, use this mode as the
            argument of the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetIncrementalNodeMovementMode(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode)"/>.
            </p>
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.Fixed">
            <summary>
            Fixed movement mode.
            </summary>
            <remarks>
            When used as an argument of
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalNodeMovementMode"/>,
            the incremental layout keeps all nodes fixed. Only nodes that are
            marked for incremental repositioning will be moved, and links are
            rerouted.
            <p>
            To specify the mode of an individual node, use this mode as the
            argument of the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetIncrementalNodeMovementMode(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode)"/>.
            </p>
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.FixedInX">
            <summary>
            Fixed movement mode for the x direction.
            </summary>
            <remarks>
            When used as an argument of
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalNodeMovementMode"/>,
            the incremental layout is free to move the nodes in the y direction
            but keeps the nodes fixed in the x direction.
            <p>
            To specify the mode of an individual node, use this mode as the
            argument of the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetIncrementalNodeMovementMode(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode)"/>.
            </p>
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.FixedInY">
            <summary>
            Fixed movement mode for the y direction.
            </summary>
            <remarks>
            When used as an argument of
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalNodeMovementMode"/>,
            the incremental layout is free to move the nodes in the x direction
            but keeps the nodes fixed in the y direction.
            <p>
            To specify the mode of an individual node, use this mode as the
            argument of the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetIncrementalNodeMovementMode(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode)"/>.
            </p>
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.Mixed">
            <summary>
            Mixed movement mode.
            </summary>
            <remarks>
            When is used as the argument of
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalNodeMovementMode"/>,
            each node can have a different movement mode during incremental
            layout. The mode for an individual node can be set by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetIncrementalNodeMovementMode(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode)"/>.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Animations.TimerAnimation">
            <summary>
            An animation that behaves like a timer.
            </summary>
            <remarks>The <see cref="T:ILOG.Diagrammer.Animations.TimerAnimation"/> is an infinite animation that triggers an event at regular intervals.
            Use <see cref="P:ILOG.Diagrammer.Animations.TimerAnimation.Interval"/> property to specify the period at which the animation will
            trigger the <see cref="E:ILOG.Diagrammer.Animations.TimerAnimation.Tick"/> event.
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample creates a <strong>TimerAnimation</strong>.</para>
            <code lang="cs"> 
            TimerAnimation timer = new TimerAnimation(TimeSpan.FromSeconds(0.1f));
            timer.Tick += new EventHandler(TimerTick);
            timer.Start();
            
            private void TimerTick(object sender, EventArgs args)
            {
                ...
            }
            </code>
            <code lang="vbnet">
            Dim timer As TimerAnimation = New TimerAnimation(TimeSpan.FromSeconds(0.1!))
            AddHandler timer.Tick, AddressOf Me.TimerTick
            timer.Start()
               
            Private Sub TimerTick(ByVal sender As Object, ByVal args As EventArgs)
                ...        
            End Sub
            </code>
            </example>
        </member>
        <member name="T:ILOG.Diagrammer.Animation">
            <summary>
            The <see langword="abstract"/> base class for animations.
            </summary>
            <remarks><p>An animation is the representation of a change that occurs over time.</p> 
            <p>To control the animation execution, use the <see cref="M:ILOG.Diagrammer.Animation.Start"/>, <see cref="M:ILOG.Diagrammer.Animation.Suspend"/>, or <see cref="M:ILOG.Diagrammer.Animation.Stop"/> methods.</p>
            <p>After the animation has been started, the animation engine will call the <see cref="M:ILOG.Diagrammer.Animation.Animate(System.TimeSpan)"/> method to
            perform the animation.</p>
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Animation._parent">
            <summary>
            The parent animation.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Animation._status">
            <summary>
            The status.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Animation._startTime">
            <summary>
            The time at which the animation was started.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Animation._elapsedDuration">
            <summary>
            The time elapsed since the animation was started.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Animation._begin">
            <summary>
            the time before the animation will start
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Animation"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animation.Start">
            <summary>
            Starts the animation.
            </summary>
            <remarks>This animation does nothing if the animation is already running. If the animation
            was suspended, it will re-start from where it was suspended.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Animation.Suspend">
            <summary>
            Suspends the animation.
            </summary>
            <remarks>A suspended animation can be continued by calling <see cref="M:ILOG.Diagrammer.Animation.Start"/>.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Animation.Stop">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animation.Animate(System.TimeSpan)">
            <summary>
            Is called to animate the animation.
            </summary>
            <param name="duration">A <see cref="T:System.TimeSpan"/> structure that represents the duration elapsed since the animation
            was started.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Animation.IsOver(System.TimeSpan)">
            <summary>
            Is called to know if the animation is over.
            </summary>
            <param name="duration">A <see cref="T:System.TimeSpan"/> structure that represents the duration elapsed since the animation
            was started.</param>
            <returns><see langword="true"/> if the animation is over at the specified duration; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Animation.GetActualDuration">
            <summary>
            Returns the actual duration of the animation
            </summary>
            <returns>A <see cref="T:System.TimeSpan"/> structure that represents the duration of the animation.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Animation.OnStarted">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Animation.Started"/> event.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animation.OnStopped">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Animation.Stopped"/> event.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animation.OnSuspended">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Animation.Suspended"/> event.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animation.OnResumed">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Animation.Resumed"/> event.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animation.OnFinished">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Animation.Finished"/> event.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animation.OnBeforeAnimating">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Animation.BeforeAnimating"/> event.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animation.OnAfterAnimating">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Animation.AfterAnimating"/> event.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Animation.Started">
            <summary>
            Occurs when the animation gets started.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Animation.Stopped">
            <summary>
            Occurs when the animation gets stopped.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Animation.Resumed">
            <summary>
            Occurs when the animation gets resumed.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Animation.Suspended">
            <summary>
            Occurs when the animation gets suspended.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Animation.AfterAnimating">
            <summary>
            Occurs each time the animation has been animated.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Animation.BeforeAnimating">
            <summary>
            Occurs each time the animation is going to be animated.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Animation.Finished">
            <summary>
            Occurs when the animation gets finished.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Animation.Begin">
            <summary>
            Gets or sets the delay before the animation really starts.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> structure that represents the delay before which the animation will really start after
            calling <see cref="M:ILOG.Diagrammer.Animation.Start"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Animation.Parent">
            <summary>
            Gets the parent of this animation.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.AnimationGroup"/> object, or <see langword="null"/> if the animation has no parent.</value>
            <remarks>An <see cref="T:ILOG.Diagrammer.AnimationGroup"/> allows to group <see cref="T:ILOG.Diagrammer.Animation"/> objects.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Animation.Status">
            <summary>
            Gets the running status of this animation.
            </summary>
            <values>One of the <see cref="T:ILOG.Diagrammer.AnimationStatus"/> values.</values>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.TimerAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Animations.TimerAnimation"/> class.
            </summary>
            <remarks>The default time interval is <strong>1</strong> second.</remarks>
            <example>
            <para lang="cs,vbnet">The following sample creates a <strong>TimerAnimation</strong>.</para>
            <code lang="cs"> 
            TimerAnimation timer = new TimerAnimation(TimeSpan.FromSeconds(0.1f));
            timer.Tick += new EventHandler(TimerTick);
            
            private void TimerTick(object sender, EventArgs args)
            {
                ...
            }
            </code>
            <code lang="vbnet">
            Dim timer As TimerAnimation = New TimerAnimation(TimeSpan.FromSeconds(0.1!))
            AddHandler timer.Tick, AddressOf Me.TimerTick
               
            Private Sub TimerTick(ByVal sender As Object, ByVal args As EventArgs)
                ...        
            End Sub
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.TimerAnimation.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Animations.TimerAnimation"/> class.
            </summary>
            <example>
            <para lang="cs,vbnet">The following sample creates a <strong>TimerAnimation</strong>.</para>
            <code lang="cs"> 
            TimerAnimation timer = new TimerAnimation(TimeSpan.FromSeconds(0.1f));
            timer.Tick += new EventHandler(TimerTick);
            
            private void TimerTick(object sender, EventArgs args)
            {
                ...
            }
            </code>
            <code lang="vbnet">
            Dim timer As TimerAnimation = New TimerAnimation(TimeSpan.FromSeconds(0.1!))
            AddHandler timer.Tick, AddressOf Me.TimerTick
               
            Private Sub TimerTick(ByVal sender As Object, ByVal args As EventArgs)
                ...        
            End Sub
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.TimerAnimation.Animate(System.TimeSpan)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.Animate(System.TimeSpan)">Animation.Animate(TimeSpan)</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.TimerAnimation.OnStarted">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.OnStarted">Animation.OnStarted</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.TimerAnimation.IsOver(System.TimeSpan)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.IsOver(System.TimeSpan)">Animation.IsOver</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.TimerAnimation.GetActualDuration">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.GetActualDuration">Animation.GetActualDuration</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.TimerAnimation.OnTick">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Animations.TimerAnimation.Tick"/> event.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Animations.TimerAnimation.Tick">
            <summary>
            Occurs at each animation period.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.TimerAnimation.Interval">
            <summary>
            Gets or sets the period at which the animation will trigger the <see cref="E:ILOG.Diagrammer.Animations.TimerAnimation.Tick"/> event.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> structure.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Animations.BoundedAnimation">
            <summary>
            An animation that has a known duration.
            </summary>
            <remarks><p>A <strong>BoundedAnimation</strong> has its duration defined by the <see cref="P:ILOG.Diagrammer.Animations.BoundedAnimation.Duration"/> property.
            The <see cref="P:ILOG.Diagrammer.Animations.BoundedAnimation.AutoReverse"/> property indicates whether the animation plays in reverse after it completes a forward
            iteration. The <see cref="P:ILOG.Diagrammer.Animations.BoundedAnimation.RepeatCount"/> property allows to repeat the animation.</p>
            <p>The <see cref="M:ILOG.Diagrammer.Animations.BoundedAnimation.Animate(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)"/> is called to play the animation.
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.BoundedAnimation.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Animations.BoundedAnimation"/> class.
            </summary>
            <param name="duration">The duration of the animation.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.BoundedAnimation.GetActualDuration">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.GetActualDuration">Animation.GetActualDuration</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.BoundedAnimation.IsOver(System.TimeSpan)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.IsOver(System.TimeSpan)">Animation.IsOver</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.BoundedAnimation.GetCompletionAt(System.TimeSpan)">
            <summary>
            Computes the animation completion after playing the specified duration.
            </summary>
            <param name="duration">A <see cref="T:System.TimeSpan"/> structure.</param>
            <remarks>The <paramref name="duration"/> is a duration between <strong>0</strong> and <see cref="P:ILOG.Diagrammer.Animations.BoundedAnimation.Duration"/>.</remarks>
            <returns>A <see cref="T:System.Single"/> value in the range <strong>[0..1]</strong> that represents the animation completion.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.BoundedAnimation.Animate(System.TimeSpan)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.Animate(System.TimeSpan)">Animation.Animate(TimeSpan)</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.BoundedAnimation.Animate(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Is called to play the animation.
            </summary>
            <param name="duration">The duration from the animation has started.</param>
            <param name="relativeDuration">The duration expressed in the interval <strong>[0..Duration]</strong>, that is, taking
            into account the <see cref="P:ILOG.Diagrammer.Animations.BoundedAnimation.AutoReverse"/> and <see cref="P:ILOG.Diagrammer.Animations.BoundedAnimation.RepeatCount"/> properties.</param>
            <param name="completion">A <see cref="T:System.Single"/> value in the range <strong>[0..1]</strong> that represents the animation completion.</param>
            <param name="reversing"><see langword="true"/> if the animation is reverting; otherwise, <see langword="false"/>.</param>
            <param name="repeating"><see langword="true"/> if the animation is repeating; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.BoundedAnimation.OnFinished">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.OnFinished">Animation.OnFinished</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.BoundedAnimation.OnStopped">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.OnStopped">Animation.OnStopped</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.BoundedAnimation.Rewind">
            <summary>
            Is called to rewind the animation.
            </summary>
            <remarks>This method is called at the end of an animation if the <see cref="P:ILOG.Diagrammer.Animations.BoundedAnimation.HoldEnd"/> property is set
            to <see langword="false"/>. It is also called if the animation is stopped by calling <see cref="M:ILOG.Diagrammer.Animation.Stop"/>.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.BoundedAnimation.InterpolationPoint">
            <summary>
            Gets or sets the interpolation point for this animation.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</value>
            <remarks>The interpolation point determines how the completion of the animation will evolve during time.
            The <strong>X</strong> value of the point represents the time axis, and the <strong>Y</strong> value the
            animation completion. Both values must be in the range <strong>]0..1[</strong>. The interpolation of the animation completion
            is done so that at <strong>X</strong> percent of the duration, the animation completion should be <strong>Y</strong>.
            The default value for this property is the point <strong>0.5, 0.5</strong>, which corresponds to a linear interpolation
            over time.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.BoundedAnimation.Duration">
            <summary>
            Gets or sets the duration for this animation.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> structure.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"> if the duration is negative or null.</exception>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.BoundedAnimation.RepeatCount">
            <summary>
            Gets or sets the number of repetition of this animation.
            </summary>
            <value>An <see cref="T:System.Int32"/> that represents the number of times the animation will be run before ending.
            A negative value can be used to specify that the animation will never end.
            The default value is <strong>0</strong>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.BoundedAnimation.AutoReverse">
            <summary>
            Gets or sets a value that indicates whether the animation plays in reverse after it completes a forward iteration.
            </summary>
            <value><see langword="true"/> if the animation plays in reverse at the end of each iteration; otherwise,
            <see langword="false"/>. The default value is <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.BoundedAnimation.HoldEnd">
            <summary>
            Gets or sets a value that indicates whether the animation should go back to the state before playing the animation.
            </summary>
            <value><see langword="false"/> if the animation should go back to the state before playing the animation; otherwise,
            <see langword="true"/>. The default value is <see langword="true"/>.</value>     
        </member>
        <member name="T:ILOG.Diagrammer.Animations.PropertyAnimation">
            <summary>
            An animation that animates an object's property.
            </summary>
            <remarks>
            A <see cref="T:ILOG.Diagrammer.Animations.PropertyAnimation"/> is a bounded animation that animates an object's property.
            The object's property being animated is set in the constructor, and can be retrieved through
            the <see cref="P:ILOG.Diagrammer.Animations.PropertyAnimation.PropertyName"/> and <see cref="P:ILOG.Diagrammer.Animations.PropertyAnimation.Instance"/> properties.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.PropertyAnimation.#ctor(System.Object,System.String,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Animations.PropertyAnimation"/> class.
            </summary>
            <param name="instance">The object to animate.</param>
            <param name="propertyName">The name of the property to animate.</param>
            <param name="duration">The animation duration.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.PropertyAnimation.GetCurrentValue">
            <summary>
            Gets the current value of the property being animated.
            </summary>
            <returns>An <see cref="T:System.Object"/> that represents the current property value.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.PropertyAnimation.SetCurrentValue(System.Object)">
            <summary>
            Sets the current property value.
            </summary>
            <param name="value">The new value for the property being animated.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.PropertyAnimation.OnStarted">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.OnStarted">Animation.OnStarted</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.PropertyAnimation.Rewind">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animations.BoundedAnimation.Rewind">BoundedAnimation.Rewind</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.PropertyAnimation.Animate(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animations.BoundedAnimation.Animate(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">BoundedAnimation.Animate</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.PropertyAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">
            <summary>
            Is called to get the value of the animated property at the specified duration.
            </summary>
            <param name="duration">The duration from the animation has started.</param>
            <param name="relativeDuration">The duration expressed in the interval <strong>[0..Duration]</strong>, that is, taking
            into account the <see cref="P:ILOG.Diagrammer.Animations.BoundedAnimation.AutoReverse"/> and <see cref="P:ILOG.Diagrammer.Animations.BoundedAnimation.RepeatCount"/> properties.</param>
            <param name="completion">A <see cref="T:System.Single"/> value in the range <strong>[0..1]</strong> that represents the animation completion.</param>
            <param name="reversing"><see langword="true"/> if the animation is reverting; otherwise, <see langword="false"/>.</param>
            <param name="repeating"><see langword="true"/> if the animation is repeating; otherwise, <see langword="false"/>.</param>
            <returns>The value of the animated property at the specified duration.</returns>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.PropertyAnimation.Instance">
            <summary>
            Gets the instance whose property is animated.
            </summary>
            <value>An <see cref="T:System.Object"/> reference.</value>
            <seealso cref="P:ILOG.Diagrammer.Animations.PropertyAnimation.PropertyDescriptor"/>
            <seealso cref="P:ILOG.Diagrammer.Animations.PropertyAnimation.PropertyName"/>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.PropertyAnimation.PropertyName">
            <summary>
            Gets the name of the property that is animated.
            </summary>
            <value>A <see cref="T:System.String"/> that correspond to the name of the property that
            is animated.</value>
            <seealso cref="P:ILOG.Diagrammer.Animations.PropertyAnimation.PropertyDescriptor"/>
            <seealso cref="P:ILOG.Diagrammer.Animations.PropertyAnimation.Instance"/>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.PropertyAnimation.PropertyDescriptor">
            <summary>
            Gets the <see cref="T:System.ComponentModel.PropertyDescriptor"/> of the property that is animated.
            </summary>
            <value>A <see cref="T:System.ComponentModel.PropertyDescriptor"/> reference.</value>
            <seealso cref="P:ILOG.Diagrammer.Animations.PropertyAnimation.PropertyName"/>
            <seealso cref="P:ILOG.Diagrammer.Animations.PropertyAnimation.Instance"/>
        </member>
        <member name="T:ILOG.Diagrammer.Animations.IntAnimation">
            <summary>
            An animation that animates a property of type <see cref="T:System.Int32"/>.
            </summary>
            <example>
            <para lang="cs,vbnet">The following sample creates an <strong>IntAnimation</strong> that
            animates the <strong>Value</strong> property of a <see cref="T:ILOG.Diagrammer.Graphic.ScrollBar"/> from <strong>0</strong>
            to <strong>100</strong>.</para>
            <code lang="cs"> 
            HScrollBar sb = new HScrollBar();
            IntAnimation animation = new IntAnimation(sb, "Value", 0, 100, TimeSpan.FromSeconds(1f));
            animation.Start();
            </code>
            <code lang="vbnet">
            Dim sb As HScrollBar = New HScrollBar
            Dim animation As IntAnimation = New IntAnimation(sb, "Value", 0, 100, TimeSpan.FromSeconds(1!))
            animation.Start()
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Animations.DoubleAnimation"/>
            <seealso cref="T:ILOG.Diagrammer.Animations.FloatAnimation"/>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.IntAnimation.#ctor(System.Object,System.String,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Animations.IntAnimation"/> class.
            </summary>
            <param name="instance">The object to animate.</param>
            <param name="propertyName">The name of the property to animate.</param>
            <param name="duration">The animation duration.</param>
            <param name="from">The starting value for the animated property.</param>
            <param name="to">The ending value for the animated property.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.IntAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animations.PropertyAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">PropertyAnimation.GetValueAt</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.IntAnimation.From">
            <summary>
            Gets or sets the starting value for the animated property.
            </summary>
            <value>An <see cref="T:System.Int32"/> value.</value>
            <seealso cref="P:ILOG.Diagrammer.Animations.IntAnimation.To"/>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.IntAnimation.To">
            <summary>
            Gets or sets the ending value for the animated property.
            </summary>
            <value>An <see cref="T:System.Int32"/> value.</value>
            <seealso cref="P:ILOG.Diagrammer.Animations.IntAnimation.From"/>
        </member>
        <member name="T:ILOG.Diagrammer.Animations.FloatAnimation">
            <summary>
            An animation that animates a property of type <see cref="T:System.Single"/>.
            </summary>
            <example>
            <para lang="cs,vbnet">The following sample creates a <strong>FloatAnimation</strong> that
            animates the <strong>X</strong> property of a <see cref="T:ILOG.Diagrammer.Graphic.Rect"/> from <strong>0</strong>
            to <strong>100</strong>.</para>
            <code lang="cs"> 
            Rect obj = new Rect(0, 0, 100, 100);
            FloatAnimation animation = new FloatAnimation(obj, "X", 0, 100, TimeSpan.FromSeconds(1f));
            animation.Start();
            </code>
            <code lang="vbnet">
            Dim obj As Rect = New Rect
            Dim animation As FloatAnimation = New FloatAnimation(obj, "X", 0, 100, TimeSpan.FromSeconds(1!))
            animation.Start()
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Animations.DoubleAnimation"/>
            <seealso cref="T:ILOG.Diagrammer.Animations.IntAnimation"/>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.FloatAnimation.#ctor(System.Object,System.String,System.Single,System.Single,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Animations.FloatAnimation"/> class.
            </summary>
            <param name="instance">The object to animate.</param>
            <param name="propertyName">The name of the property to animate.</param>
            <param name="duration">The animation duration.</param>
            <param name="from">The starting value for the animated property.</param>
            <param name="to">The ending value for the animated property.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.FloatAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animations.PropertyAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">PropertyAnimation.GetValueAt</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.FloatAnimation.From">
            <summary>
            Gets or sets the starting value for the animated property.
            </summary>
            <value>A <see cref="T:System.Single"/> value.</value>
            <seealso cref="P:ILOG.Diagrammer.Animations.FloatAnimation.To"/>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.FloatAnimation.To">
            <summary>
            Gets or sets the ending value for the animated property.
            </summary>
            <value>A <see cref="T:System.Single"/> value.</value>
            <seealso cref="P:ILOG.Diagrammer.Animations.FloatAnimation.From"/>
        </member>
        <member name="T:ILOG.Diagrammer.Animations.DoubleAnimation">
            <summary>
            An animation that animates a property of type <see cref="T:System.Double"/>.
            </summary>
            <example>
            <para lang="cs,vbnet">The following sample creates a <strong>DoubleAnimation</strong> that
            animates the <strong>Value</strong> property of an object from <strong>0</strong>
            to <strong>100</strong>.</para>
            <code lang="cs"> 
            object obj = ...;
            DoubleAnimation animation = new DoubleAnimation(obj, "Value", 0, 100, TimeSpan.FromSeconds(1f));
            animation.Start();
            </code>
            <code lang="vbnet">
            Dim obj As Object = ...
            Dim animation As DoubleAnimation = New DoubleAnimation(obj, "Value", 0, 100, TimeSpan.FromSeconds(1!))
            animation.Start()
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Animations.FloatAnimation"/>
            <seealso cref="T:ILOG.Diagrammer.Animations.IntAnimation"/>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.DoubleAnimation.#ctor(System.Object,System.String,System.Double,System.Double,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Animations.DoubleAnimation"/> class.
            </summary>
            <param name="instance">The object to animate.</param>
            <param name="propertyName">The name of the property to animate.</param>
            <param name="duration">The animation duration.</param>
            <param name="from">The starting value for the animated property.</param>
            <param name="to">The ending value for the animated property.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.DoubleAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animations.PropertyAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">PropertyAnimation.GetValueAt</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.DoubleAnimation.From">
            <summary>
            Gets or sets the starting value for the animated property.
            </summary>
            <value>A <see cref="T:System.Double"/> value.</value>
            <seealso cref="P:ILOG.Diagrammer.Animations.DoubleAnimation.To"/>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.DoubleAnimation.To">
            <summary>
            Gets or sets the ending value for the animated property.
            </summary>
            <value>A <see cref="T:System.Double"/> value.</value>        
            <seealso cref="P:ILOG.Diagrammer.Animations.DoubleAnimation.From"/>
        </member>
        <member name="T:ILOG.Diagrammer.Animations.ColorAnimationType">
            <summary>
            Describes the type of transition between two colors.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Animations.ColorAnimationType.HSL">
            <summary>
            Transition using the <strong>HSL</strong> color model.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Animations.ColorAnimationType.HSB">
            <summary>
            Transition using the <strong>HSB</strong> color model.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Animations.ColorAnimationType.RGB">
            <summary>
            Transition using the <strong>RGB</strong> color model.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Animations.ColorAnimation">
            <summary>
            An animation that animates a property of type <see cref="T:System.Drawing.Color"/>.
            </summary>
            <example>
            <remarks>The <see cref="P:ILOG.Diagrammer.Animations.ColorAnimation.AnimationType"/> controls the transition from the start color
            to the end color.
            </remarks>
            <para lang="cs,vbnet">The following sample creates a <strong>ColorAnimation</strong> that
            animates the <strong>Color</strong> property of a <see cref="T:ILOG.Diagrammer.SolidFill"/> object from <strong>Yellow</strong>
            to <strong>Red</strong>, then from <strong>Red</strong> to <strong>Yellow</strong>. The animation plays indefinitely.</para>
            <code lang="cs"> 
            Rect obj = new Rect(0, 0, 100, 100);
            obj.Fill = new SolidFill();
            ColorAnimation animation = new ColorAnimation(obj.Fill, "Color", Color.Yellow, Color.Red, TimeSpan.FromSeconds(1f));
            animation.AutoReverse = true;
            animation.RepeatCount = -1;
            animation.Start();
            </code>
            <code lang="vbnet">
            Dim obj As Rect = New Rect(0, 0, 100, 100)
            obj.Fill = new SolidFill()
            Dim animation As ColorAnimation = New ColorAnimation(obj.Fill, "Color", Color.Yellow, Color.Red, TimeSpan.FromSeconds(1!))
            animation.AutoReverse = true
            animation.RepeatCount = -1
            animation.Start()
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Animations.TransformAnimation"/>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.ColorAnimation.#ctor(System.Object,System.String,System.Drawing.Color,System.Drawing.Color,ILOG.Diagrammer.Animations.ColorAnimationType,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Animations.ColorAnimation"/> class.
            </summary>
            <param name="instance">The object to animate.</param>
            <param name="propertyName">The name of the property to animate.</param>
            <param name="duration">The animation duration.</param>
            <param name="from">The starting value for the animated property.</param>
            <param name="to">The ending value for the animated property.</param>
            <param name="type">One of the <see cref="T:ILOG.Diagrammer.Animations.ColorAnimationType"/> values.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.ColorAnimation.#ctor(System.Object,System.String,System.Drawing.Color,System.Drawing.Color,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Animations.ColorAnimation"/> class.
            </summary>
            <param name="instance">The object to animate.</param>
            <param name="propertyName">The name of the property to animate.</param>
            <param name="duration">The animation duration.</param>
            <param name="from">The starting value for the animated property.</param>
            <param name="to">The ending value for the animated property.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.ColorAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animations.PropertyAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">PropertyAnimation.GetValueAt</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.ColorAnimation.From">
            <summary>
            Gets or sets the starting value for the animated property.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
            <seealso cref="P:ILOG.Diagrammer.Animations.ColorAnimation.To"/>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.ColorAnimation.To">
            <summary>
            Gets or sets the ending value for the animated property.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>               
            <seealso cref="P:ILOG.Diagrammer.Animations.ColorAnimation.From"/>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.ColorAnimation.AnimationType">
            <summary>
            Gets or sets the type of conversion used to convert a color to another color.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Animations.ColorAnimationType"/> values. The default value is
            <see cref="F:ILOG.Diagrammer.Animations.ColorAnimationType.HSB">ColorAnimationType.HSB</see>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Animations.TransformAnimation">
            <summary>
            An animation that animates a property of type <see cref="T:ILOG.Diagrammer.Transform"/>.
            </summary>
            <example>
            <remarks>Two constructors are available: One to create an animation from a transformation to another transformation, and
            the other one to create a rotation animation.
            </remarks>
            <para lang="cs,vbnet">The following sample creates a <strong>TransformAnimation</strong> that
            animates the <strong>Transform</strong> property of a <see cref="T:ILOG.Diagrammer.Graphic.Rect"/> object to rotate it.</para>
            <code lang="cs"> 
            Rect obj = new Rect(0, 0, 100, 100);
            TransformAnimation animation = new TransformAnimation(obj, "Transform", obj.Transform, 360f, Point2D.Empty, TimeSpan.FromSeconds(1f));
            animation.Start();
            </code>
            <code lang="vbnet">
            Dim obj As Rect = New Rect(0, 0, 100, 100)
            Dim animation As TransformAnimation = New TransformAnimation(obj, "Transform", obj.Transform, 360!, Point2D.Empty, TimeSpan.FromSeconds(1!))
            animation.Start
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.TransformAnimation.#ctor(System.Object,System.String,ILOG.Diagrammer.Transform,ILOG.Diagrammer.Transform,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Animations.TransformAnimation"/> class.
            </summary>
            <param name="instance">The object to animate.</param>
            <param name="propertyName">The name of the property to animate.</param>
            <param name="duration">The animation duration.</param>
            <param name="from">The starting value for the animated property.</param>
            <param name="to">The ending value for the animated property.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.TransformAnimation.#ctor(System.Object,System.String,ILOG.Diagrammer.Transform,System.Single,ILOG.Diagrammer.Point2D,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Animations.TransformAnimation"/> class.
            </summary>
            <param name="instance">The object to animate.</param>
            <param name="propertyName">The name of the property to animate.</param>
            <param name="duration">The animation duration.</param>
            <param name="from">The starting value for the animated property.</param>
            <param name="angle">The ending value for the angle of the animated property.</param>
            <param name="center">The rotation center.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.TransformAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animations.PropertyAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">PropertyAnimation.GetValueAt</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.TransformAnimation.From">
            <summary>
            Gets or sets the starting value for the animated property.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Transform"/> value.</value>
            <seealso cref="P:ILOG.Diagrammer.Animations.TransformAnimation.To"/>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.TransformAnimation.To">
            <summary>
            Gets or sets the ending value for the animated property.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Transform"/> value.</value>        
            <seealso cref="P:ILOG.Diagrammer.Animations.TransformAnimation.From"/>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.TransformAnimation.RotationAngle">
            <summary>
            Gets or sets the rotation angle for the animated property.
            </summary>
            <value>A <see cref="T:System.Single"/> value.</value>        
            <remarks>This property is only used when the <see cref="T:ILOG.Diagrammer.Animations.TransformAnimation"/> was created using the constructor that
            takes an angle to perform the animation.</remarks>
            <seealso cref="P:ILOG.Diagrammer.Animations.TransformAnimation.RotationCenter"/>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.TransformAnimation.RotationCenter">
            <summary>
            Gets or sets the rotation center for the animated property.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> value.</value>        
            <remarks>This property is only used when the <see cref="T:ILOG.Diagrammer.Animations.TransformAnimation"/> was created using the constructor that
            takes an angle to perform the animation.</remarks>
            <seealso cref="P:ILOG.Diagrammer.Animations.TransformAnimation.RotationAngle"/>
        </member>
        <member name="T:ILOG.Diagrammer.Animations.Point2DAnimation">
            <summary>
            An animation that animates a property of type <see cref="T:ILOG.Diagrammer.Point2D"/>.
            </summary>
            <example>
            <para lang="cs,vbnet">The following sample creates a <strong>Point2DAnimation</strong> that
            animates the <strong>Location</strong> property of a <see cref="T:ILOG.Diagrammer.Graphic.Rect"/> object to move it.</para>
            <code lang="cs"> 
            Rect obj = new Rect(0, 0, 100, 100);
            Point2D from = obj.Location;
            Point2D to = new Point2D(300, 300);
            Point2DAnimation animation = new Point2DAnimation(obj, "Location", from, to, TimeSpan.FromSeconds(1f));
            animation.Start();
            </code>
            <code lang="vbnet">
            Dim obj As Rect = New Rect(0, 0, 100, 100)
            Dim from As Point2D = obj.Location
            Dim to As Point2D = New Point2D(300, 300)
            Dim animation As Point2DAnimation = New Point2DAnimation(obj, "Location", from, to, TimeSpan.FromSeconds(1!))
            animation.Start()
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Animations.Size2DAnimation"/>
            <seealso cref="T:ILOG.Diagrammer.Animations.Rectangle2DAnimation"/>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.Point2DAnimation.#ctor(System.Object,System.String,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Animations.Point2DAnimation"/> class.
            </summary>
            <param name="instance">The object to animate.</param>
            <param name="propertyName">The name of the property to animate.</param>
            <param name="duration">The animation duration.</param>
            <param name="from">The starting value for the animated property.</param>
            <param name="to">The ending value for the animated property.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.Point2DAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animations.PropertyAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">PropertyAnimation.GetValueAt</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.Point2DAnimation.From">
            <summary>
            Gets or sets the starting value for the animated property.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> value.</value>
            <seealso cref="P:ILOG.Diagrammer.Animations.Point2DAnimation.To"/>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.Point2DAnimation.To">
            <summary>
            Gets or sets the ending value for the animated property.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> value.</value>                
            <seealso cref="P:ILOG.Diagrammer.Animations.Point2DAnimation.From"/>
        </member>
        <member name="T:ILOG.Diagrammer.Animations.Size2DAnimation">
            <summary>
            An animation that animates a property of type <see cref="T:ILOG.Diagrammer.Size2D"/>.
            </summary>
            <example>
            <para lang="cs,vbnet">The following sample creates a <strong>Size2DAnimation</strong> that
            animates the <strong>Size</strong> property of a <see cref="T:ILOG.Diagrammer.Graphic.Rect"/> object to resize it.</para>
            <code lang="cs"> 
            Rect obj = new Rect(0, 0, 100, 100);
            Size2D from = obj.Size;
            Size2D to = new Size2D(300, 300);
            Size2DAnimation animation = new Size2DAnimation(obj, "Size", from, to, TimeSpan.FromSeconds(1f));
            animation.Start();
            </code>
            <code lang="vbnet">
            Dim obj As Rect = New Rect(0, 0, 100, 100)
            Dim from As Size2D = obj.Size
            Dim to As Size2D = New Size2D(300, 300)
            Dim animation As Size2DAnimation = New Size2DAnimation(obj, "Size", from, to, TimeSpan.FromSeconds(1!))
            animation.Start()
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Animations.Point2DAnimation"/>
            <seealso cref="T:ILOG.Diagrammer.Animations.Rectangle2DAnimation"/>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.Size2DAnimation.#ctor(System.Object,System.String,ILOG.Diagrammer.Size2D,ILOG.Diagrammer.Size2D,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Animations.Size2DAnimation"/> class.
            </summary>
            <param name="instance">The object to animate.</param>
            <param name="propertyName">The name of the property to animate.</param>
            <param name="duration">The animation duration.</param>
            <param name="from">The starting value for the animated property.</param>
            <param name="to">The ending value for the animated property.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.Size2DAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animations.PropertyAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">PropertyAnimation.GetValueAt</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.Size2DAnimation.From">
            <summary>
            Gets or sets the starting value for the animated property.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Size2D"/> value.</value>
            <seealso cref="P:ILOG.Diagrammer.Animations.Size2DAnimation.To"/>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.Size2DAnimation.To">
            <summary>
            Gets or sets the ending value for the animated property.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Size2D"/> value.</value>                
            <seealso cref="P:ILOG.Diagrammer.Animations.Size2DAnimation.From"/>
        </member>
        <member name="T:ILOG.Diagrammer.Animations.Rectangle2DAnimation">
            <summary>
            An animation that animates a property of type <see cref="T:ILOG.Diagrammer.Rectangle2D"/>.
            </summary>
            <example>
            <para lang="cs,vbnet">The following sample creates a <strong>Rectangle2DAnimation</strong> that
            animates the <strong>Bounds</strong> property of a <see cref="T:ILOG.Diagrammer.Graphic.Rect"/> object to resize it.</para>
            <code lang="cs"> 
            Rect obj = new Rect(0, 0, 100, 100);
            Rectangle2D from = obj.Bounds;
            Rectangle2D to = Rectangle2D.Inflate(from, 100, 100);
            Rectangle2DAnimation animation = new Rectangle2DAnimation(obj, "Bounds", from, to, TimeSpan.FromSeconds(1f));
            animation.Start();
            </code>
            <code lang="vbnet">
            Dim obj As Rect = New Rect(0, 0, 100, 100)
            Dim from As Rectangle2D = obj.Bounds
            Dim to As Rectangle2D = Rectangle2D.Inflate(from, 100, 100)
            Dim animation As Rectangle2DAnimation = New Rectangle2DAnimation(obj, "Bounds", from, to, TimeSpan.FromSeconds(1!))
            animation.Start()
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Animations.Point2DAnimation"/>
            <seealso cref="T:ILOG.Diagrammer.Animations.Size2DAnimation"/>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.Rectangle2DAnimation.#ctor(System.Object,System.String,ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Animations.Rectangle2DAnimation"/> class.
            </summary>
            <param name="instance">The object to animate.</param>
            <param name="propertyName">The name of the property to animate.</param>
            <param name="duration">The animation duration.</param>
            <param name="from">The starting value for the animated property.</param>
            <param name="to">The ending value for the animated property.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.Rectangle2DAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animations.PropertyAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">PropertyAnimation.GetValueAt</see>.
            </summary>       
        </member>
        <member name="P:ILOG.Diagrammer.Animations.Rectangle2DAnimation.From">
            <summary>
            Gets or sets the starting value for the animated property.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> value.</value>        
            <seealso cref="P:ILOG.Diagrammer.Animations.Rectangle2DAnimation.To"/>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.Rectangle2DAnimation.To">
            <summary>
            Gets or sets the ending value for the animated property.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> value.</value>                
            <seealso cref="P:ILOG.Diagrammer.Animations.Rectangle2DAnimation.From"/>
        </member>
        <member name="T:ILOG.Diagrammer.Animations.AnimationFrame">
            <summary>
            Represents an animation frame in a <see cref="T:ILOG.Diagrammer.Animations.SetAnimation"/>.
            </summary>
            <remarks>An <see cref="T:ILOG.Diagrammer.Animations.AnimationFrame"/> is a pair <strong>time, value</strong>. It is in a <see cref="T:ILOG.Diagrammer.Animations.SetAnimation"/> to
            specify which value should be set at the specified time during the animation.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.AnimationFrame.#ctor(System.TimeSpan,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Animations.AnimationFrame"/> class.
            </summary>
            <param name="time">A <see cref="T:System.TimeSpan"/> structure.</param>
            <param name="value">An <see cref="T:System.Object"/>.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.AnimationFrame.Time">
            <summary>
            Gets the time at which the <see cref="P:ILOG.Diagrammer.Animations.AnimationFrame.Value"/> should be set during the animation.
            </summary>
            <value>A <see cref="T:System.TimeSpan"/> structure.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.AnimationFrame.Value">
            <summary>
            Gets the value that should be set at the time specified by the <see cref="P:ILOG.Diagrammer.Animations.AnimationFrame.Time"/> property during the animation.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Animations.SetAnimation">
            <summary>
            An animation that animates a property using an array of <see cref="T:ILOG.Diagrammer.Animations.AnimationFrame"/>.
            </summary>
            <remarks>Unlike other animations that use interpolation to animate a property between two values, the <see cref="T:ILOG.Diagrammer.Animations.SetAnimation"/>
            uses an array of <see cref="T:ILOG.Diagrammer.Animations.AnimationFrame"/>. Each frame defines a duration and a value that should be set after the 
            animation frame duration has been elapsed.
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample creates a <strong>SetAnimation</strong> that
            animates the <strong>Color</strong> property of a <see cref="T:ILOG.Diagrammer.SolidFill"/> object.</para>
            <code lang="cs"> 
            Rect obj = new Rect(0, 0, 100, 100);
            obj.Fill = new SolidFill();
            AnimationFrame[] frames = new AnimationFrame[] {
                new AnimationFrame(TimeSpan.FromSeconds(0f, Color.Red)),
                new AnimationFrame(TimeSpan.FromSeconds(1f, Color.Blue)),
                new AnimationFrame(TimeSpan.FromSeconds(2f, Color.Yellow))
            };
            SetAnimation animation = new SetAnimation(obj.Fill, "Color", frames);
            animation.Start();
            </code>
            <code lang="vbnet">
            Dim obj As Rect = New Rect(0, 0, 100, 100)
            obj.Fill = New SolidFill
            Dim frames() As AnimationFrame = New AnimationFrame() {
                New AnimationFrame(TimeSpan.FromSeconds(0!, Color.Red)), 
                New AnimationFrame(TimeSpan.FromSeconds(1!, Color.Blue)), 
                New AnimationFrame(TimeSpan.FromSeconds(2!, Color.Yellow))
            }
            Dim animation As SetAnimation = New SetAnimation(obj.Fill, "Color", frames)
            animation.Start()
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.SetAnimation.#ctor(System.Object,System.String,ILOG.Diagrammer.Animations.AnimationFrame[])">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Animations.SetAnimation"/> class.
            </summary>
            <param name="instance">The object to animate.</param>
            <param name="propertyName">The name of the property to animate.</param>
            <param name="frames">An array of <see cref="T:ILOG.Diagrammer.Animations.AnimationFrame"/>.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.SetAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animations.PropertyAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">PropertyAnimation.GetValueAt</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.SetAnimation.Frames">
            <summary>
            Gets or sets the frames that compose the animation.
            </summary>
            <value>An array of <see cref="T:ILOG.Diagrammer.Animations.AnimationFrame"/>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Animations.MotionPathAnimation">
            <summary>
            An animation that animates a <see cref="T:ILOG.Diagrammer.GraphicObject"/> along a <see cref="T:ILOG.Diagrammer.PathData"/>.
            </summary>
            <example>
            <para lang="cs,vbnet">The following sample creates a <strong>Rectangle2DAnimation</strong> that
            animates a <see cref="T:ILOG.Diagrammer.Graphic.Rect"/> along a <see cref="T:ILOG.Diagrammer.PathData"/>.</para>
            <code lang="cs"> 
            Rect obj = new Rect(0, 0, 10, 10);
            PathData path = new PathData();
            path.AddEllipse(new Rectangle2D(0, 0, 200, 200));
            TimeSpan duration = TimeSpan.FromSeconds(10f);
            MotionPathAnimation animation = new MotionPathAnimation(obj, path, duration);
            animation.RepeatCount = -1;
            animation.Start();
            </code>
            <code lang="vbnet">
            Dim obj As Rect = New Rect(0, 0, 10, 10)
            Dim path As PathData = New PathData
            path.AddEllipse(New Rectangle2D(0, 0, 200, 200))
            Dim duration As TimeSpan = TimeSpan.FromSeconds(10!)
            Dim animation As MotionPathAnimation = New MotionPathAnimation(obj, path, duration)
            animation.RepeatCount = -1
            animation.Start()
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.MotionPathAnimation.#ctor(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.PathData,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Animations.MotionPathAnimation"/> class.
            </summary>
            <param name="obj">The <see cref="P:ILOG.Diagrammer.Animations.MotionPathAnimation.GraphicObject"/> to animate.</param>
            <param name="pathData">The <see cref="T:ILOG.Diagrammer.PathData"/> along which the object will be animated.</param>
            <param name="duration">The animation duration.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.MotionPathAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animations.PropertyAnimation.GetValueAt(System.TimeSpan,System.TimeSpan,System.Single,System.Boolean,System.Boolean)">PropertyAnimation.GetValueAt</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animations.MotionPathAnimation.OnStarted">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.OnStarted">Animation.OnStarted</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.MotionPathAnimation.Rotate">
            <summary>
            Gets or sets a value that indicates whether or not the graphic object will be rotated to follow the path.
            </summary>
            <value><see langword="true"/> if the graphic object will be rotated to follow the path; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
            <seealso cref="P:ILOG.Diagrammer.Animations.MotionPathAnimation.Offset"/>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.MotionPathAnimation.Offset">
            <summary>
            Gets or sets the offset between the graphic object and the path.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> structure that represents the offset between the graphic object and the path.
            The default value is the point <strong>(0,0)</strong>.</value>
            <seealso cref="P:ILOG.Diagrammer.Animations.MotionPathAnimation.Rotate"/>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.MotionPathAnimation.Alignment">
            <summary>
            Gets or sets the alignment used to place the graphic object on the path.
            </summary>
            <value>One of the <see cref="T:System.Drawing.ContentAlignment"/> values. The default value is <see cref="T:System.Drawing.ContentAlignment">ContentAlignment.MiddleCenter</see>.</value>
            <remarks>This property indicates which point of the graphic object bounding box will be placed on the path.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Animations.MotionPathAnimation.GraphicObject">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.GraphicObject"/> that will be animated.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.ILongLinkTerminationPointFilter">
            <summary>
            An interface used to define complex requirements concerning the
            connection of the links to specific point at the nodes.
            </summary>
            <remarks> 
            <p>
            The filter can be used instead of <see cref="T:ILOG.Diagrammer.GraphLayout.INodeSideFilter"/>  to
            allow more precisely which termination points can be used when
            routing a link. For each link, the layout algorithm proposes certain
            termination points that are on the grid at any of the four sides of
            the corresponding end node. The termination point filter allows you
            to assign a penalty to the termination points. The termination point
            with the lowest penalty is most likely to be used. Termination points
            with penalty <strong>Int32.MaxValue</strong> are never chosen for the
            link routing. 
            </p>
            <p>
            The penalty affects which termination point is used, but this also
            depends whether a route from the "start" termination point to the
            "end" termination point of the link is possible at all without
            overlapping obstacles. 
            </p>
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.INodeSideFilter"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.TerminationPointFilter"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ILongLinkTerminationPointFilter.GetPenalty(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object,System.Boolean,System.Object,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.NodeSide,System.Int32)">
            <summary>
            Allows you to assign a penalty to the termination point of
            <paramref name="link"/> at a given start point which is on the given
            side of the node <paramref name="node"/>.
            </summary>
            <remarks> 
            <p>
            Returns a number between 0 and <strong>Int32.MaxValue</strong>. As
            smaller the number, as more likely the termination point will be
            chosen for the link routing. Termination points with penalty
            <strong>Int32.MaxValue</strong> are never chosen for the link
            routing. 
            </p>
            <p>
            The values for <paramref name="side"/> are defined in the class 
            <strong>ilog.views.Direction</strong>. Valid values are
            <strong>Top</strong>, <strong>Bottom</strong>,
            <strong>Left</strong>, and <strong>Right</strong>. 
            </p>
            <p>
            This method is called by <see cref="T:ILOG.Diagrammer.GraphLayout.LongLinkLayout"/> if a
            termination point filter is installed. You can implement this method
            in order to define complex requirements concerning the connection of
            the links to the different sides of nodes. For example, if you want
            all links to be connected to any side except  the top side of the
            nodes, you could use: <br/> <strong>return (side != NodeSide.Top ?
            proposedPenalty : Int32.MaxValue);</strong> 
            </p>
            <p>
            </p>
            </remarks>
            <param name="graphModel"> The graph model to which the node belongs.
            </param>
            <param name="link"> The link to be connected to the node.
            </param>
            <param name="origin"> If <paramref name="origin"/> is
            <see langword="true"/>, the method determines whether the link
            origin can be connected. Otherwise, the method determines whether
            the link destination can be connected.
            </param>
            <param name="node"> The node.
            </param>
            <param name="point"> The proposed termination point for the link.
            </param>
            <param name="side"> The side of the node where the proposed
            termination point is placed. The values are defined in the class
            <strong>ilog.views.Direction</strong>. Valid values are
            <strong>Top</strong>, <strong>Bottom</strong>,
            <strong>Left</strong>, and <strong>Right</strong>.
            </param>
            <param name="proposedPenalty"> The proposed penalty for the
            termination point.
            </param>
            <returns>The new penalty.
            </returns>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.ForceDirectedLayoutReport">
            <summary>
             The class used to store information about the behavior of the
            <see cref="T:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout"/>.
            </summary>
             
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayoutReport.#ctor">
            <summary>
            Creates a new instance of the report object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ForceDirectedLayoutReport.GetNumberOfIterations">
            <summary>
             Returns the number of performed iterations.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.AllowedNumberOfIterations"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayoutReport.MaxMovePerIteration">
            <summary>
            Gets the maximum displacement of the nodes at the last  performed
            iteration of the layout algorithm.
            </summary>
             
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ForceDirectedLayout.MaxAllowedMovePerIteration"/>
            <value>The maximum displacement of the nodes at the last performed
            iteration of the layout algorithm.
            </value>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramScrollBarHelper._view">
            <summary>
            The time scrollable object connected to this scrollbar.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramScrollBarHelper._infiniteScroll">
            <summary>
            Indicates whether the scroll bar allows infinite scrolling.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramScrollBarHelper._internalBounds">
            <summary>
            Caches the bounds that contains time margins.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramScrollBarHelper._margins">
            <summary>
            The margin in pixels.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramScrollBarHelper._smallIncrement">
            <summary>
            The small increment.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramScrollBarHelper._instantScrolling">
            <summary>
            Indicates whether scrolling is done for each thumb move.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramScrollBarHelper._transform">
            <summary>
            Used to store the transform in !instantScrolling mode
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar">
            <summary>
            Defines a horizontal scrollbar that allows you to scroll horizontally a <see cref="T:ILOG.Diagrammer.IDiagramView"/> object.
            </summary>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar"/>
            <seealso cref="T:ILOG.Diagrammer.IDiagramView"/>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.#ctor(ILOG.Diagrammer.IDiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar"/> class.
            </summary>
            <param name="view">An <see cref="T:ILOG.Diagrammer.IDiagramView"/> object that defines the
            object that will be scrolled when moving the scrollbar.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.Component.Dispose(System.Boolean)">Component.Dispose</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.OnRecomputeScrollBarValues">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.DiagramView"/> connected the scrollbar 
            has changed.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.DiagramView"/> property is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.ScrollBar.OnScroll(System.Windows.Forms.ScrollEventArgs)">ScrollBar.OnScroll</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.OnValueChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.ScrollBar.OnValueChanged(System.EventArgs)">ScrollBar.OnValueChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">Control.WndProc</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.InfiniteScroll">
            <summary>
            Gets or sets a value indicating whether scrolling using the arrow buttons is infinite.
            </summary>
            <value><see langword="true"/> if the scrolling is infinite; Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.DiagramView">
            <summary>
            Gets or sets the object that scrolls accordingly to the scrollbar.
            </summary>
            <value>
            An <see cref="T:ILOG.Diagrammer.IDiagramView"/> object that represents the object to scroll
            when moving the scrollbar. The value may be <see langword="null"/> if
            no scrollable object is connected to the scrollbar.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.Margins">
            <summary>
            Gets or sets the margins added to the scrollable bounds.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Margins"/> structure.</value>
            <remarks>Margins are expressed in pixels, in view coordinate.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.SmallIncrement">
            <summary>
            Gets or sets the value in pixels added or removed to the current scrollbar value when
            the arrows are pressed.
            </summary>
            <value>The value in pixels added or removed to the current scrollbar value when
            the arrows are pressed.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The property value is negative.</exception>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.InstantScroll">
            <summary>
            Gets or sets a value that indicates whether scrolling is instantaneous or delayed 
            until the user stops the interaction.
            </summary>
            <value>
            A value that indicates whether scrolling is instantaneous or delayed 
            until the user stops the interaction.
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.Minimum">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.ScrollBar.Minimum">ScrollBar.Minimum</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.Maximum">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.ScrollBar.Maximum">ScrollBar.Maximum</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.Value">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.ScrollBar.Value">ScrollBar.Value</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.SmallChange">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.ScrollBar.SmallChange">ScrollBar.SmallChange</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramHScrollBar.LargeChange">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.ScrollBar.LargeChange">ScrollBar.LargeChange</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar">
            <summary>
            Defines a vertical scrollbar that allows you to scroll vertically a <see cref="T:ILOG.Diagrammer.IDiagramView"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.#ctor(ILOG.Diagrammer.IDiagramView)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar"/> class.
            </summary>
            <param name="view">An <see cref="T:ILOG.Diagrammer.IDiagramView"/> object that defines the
            object that will be scrolled when moving the scrollbar.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.Component.Dispose(System.Boolean)">Component.Dispose</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.OnRecomputeScrollBarValues">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.DiagramView"/> connected the scrollbar 
            has changed.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.DiagramView"/> property is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.ScrollBar.OnScroll(System.Windows.Forms.ScrollEventArgs)">ScrollBar.OnScroll</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.OnValueChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.ScrollBar.OnValueChanged(System.EventArgs)">ScrollBar.OnValueChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">Control.WndProc</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.InfiniteScroll">
            <summary>
            Gets or sets a value indicating whether scrolling using the arrow buttons is infinite.
            </summary>
            <value><see langword="true"/> if the scrolling is infinite; Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.DiagramView">
            <summary>
            Gets or sets the object that scrolls accordingly to the scrollbar.
            </summary>
            <value>
            An <see cref="T:ILOG.Diagrammer.IDiagramView"/> object that represents the object to scroll
            when moving the scrollbar. The value may be <see langword="null"/> if
            no scrollable object is connected to the scrollbar.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.Margins">
            <summary>
            Gets or sets the margins added to the scrollable bounds.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Margins"/> structure.</value>
            <remarks>Margins are expressed in pixels, in view coordinate.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.SmallIncrement">
            <summary>
            Gets or sets the value in pixels added or removed to the current scrollbar value when
            the arrows are pressed.
            </summary>
            <value>The value in pixels added or removed to the current scrollbar value when
            the arrows are pressed.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The property value is negative.</exception>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.InstantScroll">
            <summary>
            Gets or sets a value that indicates whether scrolling is instantaneous or delayed 
            until the user stops the interaction.
            </summary>
            <value>
            A value that indicates whether scrolling is instantaneous or delayed 
            until the user stops the interaction.
            The default value is <see langword="true"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.Minimum">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.ScrollBar.Minimum">ScrollBar.Minimum</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.Maximum">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.ScrollBar.Maximum">ScrollBar.Maximum</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.Value">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.ScrollBar.Value">ScrollBar.Value</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.SmallChange">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.ScrollBar.SmallChange">ScrollBar.SmallChange</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramVScrollBar.LargeChange">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.ScrollBar.LargeChange">ScrollBar.LargeChange</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Stroke">
            <summary>
            Represents an object used to paint the outline of graphic objects.
            </summary>
            <remarks>
            A <see cref="T:ILOG.Diagrammer.Stroke"/> is used to paint the outline of a graphic object with a specified
            width an style. Use the <see cref="P:ILOG.Diagrammer.Stroke.DashStyle"/> property to draw several varieties of dashed lines.
            The line drawn by a <see cref="T:ILOG.Diagrammer.Stroke"/> can be filled in a variety of fill styles, 
            including solid colors, gradients and textures.
            The fill style depends on color, gradient or texture that is used as the fill object.
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.Fill">ILOG.Diagrammer.Fill</seealso>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Shape.Stroke">ILOG.Diagrammer.Graphic.Shape.Stroke</seealso>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Stroke"/> class.
            </summary>
            <remarks>The default stroke color is black and the default width is <strong>1</strong>.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Stroke"/> class.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color"/> that represents the color of the stroke.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.#ctor(ILOG.Diagrammer.Fill)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Stroke"/> class.
            </summary>
            <param name="fill">A <see cref="P:ILOG.Diagrammer.Stroke.Fill"/> object that represents how lines are filled.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.#ctor(System.Drawing.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Stroke"/> class.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color"/> that represents the color of the stroke.</param>
            <param name="width">The width of the stroke.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.#ctor(ILOG.Diagrammer.Fill,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Stroke"/> class.
            </summary>
            <param name="fill">A <see cref="P:ILOG.Diagrammer.Stroke.Fill"/> object that represents how lines are filled.</param>
            <param name="width">The width of the stroke.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.#ctor(System.Drawing.Color,System.Single,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Stroke"/> class.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color"/> that represents the color of the stroke.</param>
            <param name="width">The width of the stroke.</param>
            <param name="dash">One of the <see cref="P:ILOG.Diagrammer.Stroke.DashStyle"/> values.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.#ctor(ILOG.Diagrammer.Fill,System.Single,System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Stroke"/> class.
            </summary>
            <param name="fill">A <see cref="P:ILOG.Diagrammer.Stroke.Fill"/> object that represents how lines are filled.</param>
            <param name="width">The width of the stroke.</param>
            <param name="dash">One of the <see cref="P:ILOG.Diagrammer.Stroke.DashStyle"/> values.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.#ctor(ILOG.Diagrammer.Stroke,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Stroke"/> class from an existing stroke with a specified color.
            </summary>
            <param name="baseStroke">A <see cref="T:ILOG.Diagrammer.Stroke"/> to copy information from.</param>
            <param name="color">The color of the stroke.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.#ctor(ILOG.Diagrammer.Stroke,ILOG.Diagrammer.Fill,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Stroke"/> class from an existing stroke with a specified fill and width.
            </summary>
            <param name="baseStroke">A <see cref="T:ILOG.Diagrammer.Stroke"/> to copy information from.</param>
            <param name="fill">A <see cref="T:ILOG.Diagrammer.Fill"/> object that represents the fill of the stroke.</param>
            <param name="width">The width of the stroke.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Stroke"/> from serialization.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.Clone">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.StyleBase.Clone">StyleBase.Clone</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.Freeze">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.StyleBase.Freeze">StyleBase.Freeze</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.GetBounds(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Returns a rectangle that bounds the specified path when the path
            is drawn using this <see cref="T:ILOG.Diagrammer.Stroke"/>.
            </summary>
            <param name="path">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> to compute the bounds.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> that bounds the specified path when the path
            is drawn using this <see cref="T:ILOG.Diagrammer.Stroke"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.GetBounds(System.Drawing.Drawing2D.GraphicsPath,ILOG.Diagrammer.Transform)">
            <summary>
            Returns a rectangle that bounds the specified path when the path
            is drawn using this <see cref="T:ILOG.Diagrammer.Stroke"/> with the specified <see cref="T:ILOG.Diagrammer.Transform"/>.
            </summary>
            <param name="path">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> to compute the bounds.</param>
            <param name="t">The <see cref="T:ILOG.Diagrammer.Transform"/> used to draw the path.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> that bounds the specified path when the path
            is drawn using this <see cref="T:ILOG.Diagrammer.Stroke"/> with the specified <see cref="T:ILOG.Diagrammer.Transform"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.GetPenForBounds(ILOG.Diagrammer.Transform)">
            <summary>
            Converts the <see cref="T:ILOG.Diagrammer.Stroke"/> into a <see cref="T:System.Drawing.Pen"/> object that can be used for computing the
            bounds of a shape.
            </summary>
            <param name="t">A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</param>
            <returns>
            The resulting pen should not be used for painting but only for computing the bounds of a shape. The
            resulting pen has a brush that is a solid black brush.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.GetWidth(ILOG.Diagrammer.Transform)">
            <summary>
            Gets the width of the pen when drawing using the specified transformation.
            </summary>
            <param name="t">A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</param>
            <returns>The width of the pen when drawing using the specified transformation.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.GetPen(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Transform)">
            <summary>
            Converts this <see cref="T:ILOG.Diagrammer.Stroke"/> into a <see cref="T:System.Drawing.Pen"/> object when drawing with the specified transformation.
            </summary>
            <param name="bbox">The bounding box of the shape for which the <see cref="T:ILOG.Diagrammer.Stroke"/>
            will be used.</param>
            <param name="t">A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</param>
            <returns>A new <see cref="T:System.Drawing.Pen"/> object.</returns>
            <remarks>The method converts the <see cref="T:ILOG.Diagrammer.Stroke"/>
            into a <see cref="T:System.Drawing.Pen"/> object assuming that the <see cref="T:ILOG.Diagrammer.Stroke"/>
            is used to draw of outline of a shape that as a bounding box of
            <paramref name="bbox"/>. The <paramref name="bbox"/> parameter is used to
            compute the <see cref="T:System.Drawing.Brush"/> associated with the <strong>Pen</strong>.
            For example is the <see cref="P:ILOG.Diagrammer.Stroke.Fill"/> property is a <see cref="T:ILOG.Diagrammer.LinearGradientFill"/>,
            with the <see cref="P:ILOG.Diagrammer.GradientFill.CoordinateSpace"/> property set to <see cref="F:ILOG.Diagrammer.CoordinateSpace.ObjectBBox"/>
            then <paramref name="bbox"/> parameter is used to determinate where the 
            the start and end colors of the gradient should be placed.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.GetPen(ILOG.Diagrammer.Rectangle2D,System.Drawing.Drawing2D.GraphicsPath,ILOG.Diagrammer.Transform)">
            <summary>
            Converts this <see cref="T:ILOG.Diagrammer.Stroke"/> into a <see cref="T:System.Drawing.Pen"/> object when drawing with the specified transformation.
            </summary>
            <param name="bbox">The bounding box of the shape for which the <see cref="T:ILOG.Diagrammer.Stroke"/>
            will be used.</param>
            <param name="path">The shape for which the <see cref="T:ILOG.Diagrammer.Stroke"/> will be used.</param>
            <param name="t">A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</param>
            <returns>A new <see cref="T:System.Drawing.Pen"/> object.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.OnChanged(ILOG.Diagrammer.StyleChangeEventArgs)">
            <summary>
            Invoked when the stroke changes in some way.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.GetHashCode">
            <summary>
            Computes the hashcode for the object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.Equals(System.Object)">
            <summary>
            Tests if two <see cref="T:ILOG.Diagrammer.Stroke"/> are equals.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Stroke.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Stroke.MinimumWidth">
            <summary>
            Gets or sets the minimum line width.
            </summary>
            <value>A <see cref="T:System.Single"/> object that represents the minimum line width.
            The default value is <strong>-1</strong>, which means that there is no minimum size.
            </value>
            <seealso cref="P:ILOG.Diagrammer.Stroke.MaximumWidth"/>
            <seealso cref="P:ILOG.Diagrammer.Stroke.Width"/>
        </member>
        <member name="P:ILOG.Diagrammer.Stroke.MaximumWidth">
            <summary>
            Gets or sets the maximum line width.
            </summary>
            <value>A <see cref="T:System.Single"/> object that represents the maximum line width.
            The default value is <strong>-1</strong>, which means that there is no maximum size.
            </value>
            <seealso cref="P:ILOG.Diagrammer.Stroke.MinimumWidth"/>
            <seealso cref="P:ILOG.Diagrammer.Stroke.Width"/>
        </member>
        <member name="P:ILOG.Diagrammer.Stroke.Fill">
            <summary>
            Gets or sets the style used to fill a line.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Fill"/> object that represents the style used to fill
            a line.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Stroke.Alignment">
            <summary>
            Gets or sets the alignment of the stroke.
            </summary>
            <value>One of the <see cref="T:System.Drawing.Drawing2D.PenAlignment"/> values. The default value is
            <see cref="F:System.Drawing.Drawing2D.PenAlignment.Center"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Stroke.DashCap">
            <summary>
            Gets or sets the cap style used at both ends of each dash of dashed lines.
            </summary>
            <value>One of the <see cref="T:System.Drawing.Drawing2D.DashCap"/> values. The
            default value is <see cref="F:System.Drawing.Drawing2D.DashCap.Flat"/>.
            </value> 
            <seealso cref="P:ILOG.Diagrammer.Stroke.StartCap"/>
            <seealso cref="P:ILOG.Diagrammer.Stroke.EndCap"/>
        </member>
        <member name="P:ILOG.Diagrammer.Stroke.EndCap">
            <summary>
            Gets or sets the cap style used at the end of a line.
            </summary>
            <value>One of the <see cref="T:System.Drawing.Drawing2D.LineCap"/> values. The
            default value is <see cref="F:System.Drawing.Drawing2D.LineCap.Flat"/>.
            </value> 
            <seealso cref="P:ILOG.Diagrammer.Stroke.StartCap"/>
            <seealso cref="P:ILOG.Diagrammer.Stroke.DashCap"/>
        </member>
        <member name="P:ILOG.Diagrammer.Stroke.DashStyle">
            <summary>
            Gets or sets the style of dashed lines.
            </summary>
            <value>One of the <see cref="T:System.Drawing.Drawing2D.DashStyle"/> values.
            The default value is <see cref="F:System.Drawing.Drawing2D.DashStyle.Solid"/>.</value>
            <seealso cref="P:ILOG.Diagrammer.Stroke.DashCap"/>
        </member>
        <member name="P:ILOG.Diagrammer.Stroke.DashOffset">
            <summary>
            Gets or sets the distance from the start of a line and the beginning of a dash pattern.
            </summary>
            <value>
            The distance from the start of a line and the beginning of a dash pattern. The
            default value is <strong>0</strong>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Stroke.DashPattern">
            <summary>
            Gets or sets an array of custom dashes and spaces.
            </summary>
            <value>
            An array of real numbers that specify the lengths of alternating dashes and spaces in dashed lines.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Stroke.StartCap">
            <summary>
            Gets or sets the style used at the beginning of a line.
            </summary>
            <value>One of the <see cref="T:System.Drawing.Drawing2D.LineCap"/> values. The
            default value is <see cref="F:System.Drawing.Drawing2D.LineCap.Flat"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Stroke.LineJoin">
            <summary>
            Gets or sets the style used to join consecutive segments of a line.
            </summary>
            <value>One of the <see cref="T:System.Drawing.Drawing2D.LineJoin"/> values. The
            default value is <see cref="F:System.Drawing.Drawing2D.LineJoin.Miter"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Stroke.MiterLimit">
            <summary>
            Gets or sets the limit of the thickness of the join on a mitered corner.
            </summary>
            <value>
            The limit of the thickness of the join on a mitered corner. The default value
            is 10.
            </value>
            <remarks>
            The miter length is the distance from the intersection of the line walls 
            on the inside of the join to the intersection of the line walls outside of the join. 
            The miter length can be large when the angle between two lines is small.
            The miter limit is the maximum allowed ratio of miter length to
            stroke width. The default value is <strong>10</strong>.
            If the miter length of the join of the intersection exceeds 
            the limit of the join, then the join will be beveled 
            to keep it within the limit of the join of the intersection.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Stroke.Width">
            <summary>
            Gets or sets the width of the stroke.
            </summary>
            <value>Represents the width of the stroke. The default value is 0.</value>
            <seealso cref="P:ILOG.Diagrammer.Stroke.MinimumWidth"/>
            <seealso cref="P:ILOG.Diagrammer.Stroke.MaximumWidth"/>
        </member>
        <member name="P:ILOG.Diagrammer.Stroke.CustomStartCap">
            <summary>
            Gets or sets a custom cap to use at the beginning of lines drawn with this <see cref="T:ILOG.Diagrammer.Stroke"/> object.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> object that represents the cap used 
            at the beginning of lines drawn with this <see cref="T:ILOG.Diagrammer.Stroke"/> object.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Stroke.CustomEndCap">
            <summary>
            Gets or sets a custom cap to use at the end of lines drawn with this <see cref="T:ILOG.Diagrammer.Stroke"/> object.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Drawing2D.CustomLineCap"/> object that represents the cap used 
            at the end of lines drawn with this <see cref="T:ILOG.Diagrammer.Stroke"/> object.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Stroke.CompoundArray">
            <summary>
            Gets or sets an array values that specify a compound <see cref="T:ILOG.Diagrammer.Stroke"/>. 
            A compound <see cref="T:ILOG.Diagrammer.Stroke"/> draws a compound line made up of parallel lines and spaces.
            </summary>
            <value>
            An array of real numbers that specifies the compound array. The elements in the array 
            must be in increasing order, not less than 0, and not greater than 1.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.StrokeSerializer">
            <summary>
            XML Serializer for <see cref="T:ILOG.Diagrammer.Stroke"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.StyleBaseSerializer">
            <summary>
            Represents a XML custom serializer for StyleBase objects.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.StrokeCodeDomSerializer">
            <summary>
            Code-DOM serializer for Stroke.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser._fill">
            <summary>
            The edited GradientFill.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser._delegate">
            <summary>
            The delegate that handles the current gradient family.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser._delegates">
            <summary>
            Holds the delegates.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser._linearConfigs">
            <summary>
            Holds the GradientConfig instances.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser._pathConfigs">
            <summary>
            Holds the GradientPath-based config.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.OnGradientChanged(System.EventArgs)">
            <summary>
            Invoked when the gradient definition of the edited <see cref="T:ILOG.Diagrammer.GradientFill"/> is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the gradient definition of the edited <strong>Fill</strong> is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.FireEvent(System.Object,System.EventArgs)">
            <summary>
            Fires an event based on key in the Events list.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.selectGradientTypeItem">
            <summary>
            Select the gradient type in the list corresponding to the current Fill.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.updateControls">
            <summary>
            Updates UI controls.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.DrawTemplatePreview(System.Object,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Draws the predefined settings view.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.GradientTypeChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when a Gradient type has been selected.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser._fill_Changed(System.Object,ILOG.Diagrammer.StyleChangeEventArgs)">
            <summary>
            Invoked when the edited fill is changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">A <see cref="T:ILOG.Diagrammer.StyleChangeEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.OnOpacityChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the value of the opacity control is changed.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.OnSelectedTemplateChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when a gradient template is chosen.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.GetDelegate(ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.GradientType)">
            <summary>
            Gets the delegate matching the specified GradientType.
            </summary>
            <param name="type">The type of the gradient.</param>
            <returns>The <see cref="T:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.GradientDelegate"/> matching the specified GradientType</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.isLinearGradientFill(ILOG.Diagrammer.GradientFill)">
            <summary>
            Returns whether the specified GradientFill is a LinearGradientFill.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.isCircleGradientFill(ILOG.Diagrammer.GradientFill)">
            <summary>
            Returns whether the specfied GradientFill is of the Circle gradient family.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.isRectangularGradientFill(ILOG.Diagrammer.GradientFill)">
            <summary>
            Returns whether the specfied GradientFill is of the Rectangular gradient family.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.isEllipseGradientFill(ILOG.Diagrammer.GradientFill)">
            <summary>
            Returns whether the specfied GradientFill is of the Ellipse gradient family.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.isShapeGradientFill(ILOG.Diagrammer.GradientFill)">
            <summary>
            Returns whether the specfied GradientFill is of the Shape gradient family.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.Fill">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.GradientFill"/> to edit.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GradientFill"/> instance to edit the properties.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.GradientChanged">
            <summary>
            Occurs when the gradient definition of the edited <see cref="T:ILOG.Diagrammer.GradientFill"/> is changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.GradientType">
            <summary>
            Specifies the type of available gradient.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.GradientTypeItem">
            <summary>
            A class that represents a predefined setting.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.GradientConfig">
            <summary>
            A class that represents a gradient configurator. Instance of
            this class perform atomic configurations on a gradient. It is based on
            a composite pattern.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.RotationConfig">
            <summary>
            A class that configure the rotation factor of a LinearGradientFill.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.CenterPointConfig">
            <summary>
            A class that configure the center point of a PathGradientFill.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactGradientChooser.GradientDelegate">
            <summary>
            A class that handle various operations depending on the family of the GradientFill.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.SelectionGraphicAttribute">
            <summary>
            Specifies the type of <see cref="T:ILOG.Diagrammer.SelectionGraphic"/> object used to select a graphic object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionGraphicAttribute._typeName">
            <summary>
            The type of the selection graphic
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphicAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.SelectionGraphicAttribute"/> with the type name
            of the selection graphic object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphicAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.SelectionGraphicAttribute"/> with the type
            of the selection graphic object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphicAttribute.Equals(System.Object)">
            <summary>
            This member overrides <see cref="M:System.Attribute.Equals(System.Object)">Attribute.Equals</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionGraphicAttribute.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionGraphicAttribute.SelectionGraphicType">
            <summary>
            Gets the name of the selection graphic object 
            class in the <see cref="P:System.Type.AssemblyQualifiedName"/> format. 
            </summary>
            <value></value>
        </member>
        <member name="T:ILOG.Diagrammer.SelectionHandleType">
            <summary>
            Specifies the type of handles for <see cref="T:ILOG.Diagrammer.DefaultSelectionGraphic"/> objects.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionHandleType.Circle">
            <summary>
            Circular handle.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionHandleType.Square">
            <summary>
            Square handle.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionHandleType.Diamond">
            <summary>
            Diamond handle.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionHandleType.SmallCircle">
            <summary>
            Small Circular handle.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionHandleType.SmallSquare">
            <summary>
            Small Square handle.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionHandleType.SmallDiamond">
            <summary>
            Small Diamond handle.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionHandleType.LargeCircle">
            <summary>
            Large Circular handle.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionHandleType.LargeSquare">
            <summary>
            Large Square handle.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionHandleType.LargeDiamond">
            <summary>
            Large Diamond handle.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ScrollBarVisibility">
            <summary>
            Specifies how scrollbars will be displayed in a <see cref="T:ILOG.Diagrammer.Graphic.ScrollViewer"/> control.
            </summary>
            <remarks>Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.Graphic.ScrollViewer.HScrollBar"/> and
            <see cref="P:ILOG.Diagrammer.Graphic.ScrollViewer.VScrollBar"/> properties of a <see cref="T:ILOG.Diagrammer.Graphic.ScrollViewer"/>.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ScrollBarVisibility.Visible">
            <summary>
            The scrollbar is always visible.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ScrollBarVisibility.Hidden">
            <summary>
            The scrollbar is always hidden.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ScrollBarVisibility.AsNeeded">
            <summary>
            The scrollbar is visible only when needed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ScrollViewer">
             <summary>
             Define an object that can scroll any <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
             </summary>
             <remarks>
             The <see cref="T:ILOG.Diagrammer.Graphic.ScrollViewer"/> displays a rectangular area with two scroll bars and allows
             to scroll a graphic object specified through the <see cref="P:ILOG.Diagrammer.Graphic.ContentControl.Content"/> property. The
             visibility of the scroll bars are controlled through 
             the <see cref="P:ILOG.Diagrammer.Graphic.ScrollViewer.HScrollBar"/> and <see cref="P:ILOG.Diagrammer.Graphic.ScrollViewer.VScrollBar"/> properties.
             </remarks>
             <example>
             <para lang="cs,vbnet">
             The following example creates a ScrollViewer that allows to scroll over a group containing
             2 ellipses and a rectangle.</para>
             <code lang="cs">
             ScrollViewer CreateScrollViewer()
             {
                 ScrollViewer scrollview = new ScrollViewer();
                 scrollview.Rectangle = new Rectangle2D(0, 0, 200, 200);
            
                 scrollview.HScrollBar = ScrollBarVisibility.AsNeeded;
                 scrollview.VScrollBar = ScrollBarVisibility.AsNeeded;
                 scrollview.Background = new SolidFill(Color.White);
            
                 Group group = new Group();
                 group.Objects.Add(new Ellipse(0,0,100,100));
                 group.Objects.Add(new Ellipse(120, 0, 100, 100));
                 group.Objects.Add(new Rect(0, 120, 100, 100));
                        
                 scrollview.Content = group;
            
                 return scrollview;
             }
             </code>
             <code lang="vbnet">
             Function CreateScrollViewer() As ScrollViewer 
                 Dim scrollview As ScrollViewer = New ScrollViewer 
                 scrollview.Rectangle = New Rectangle2D(0, 0, 200, 200)
             
                 scrollview.HScrollBar = ScrollBarVisibility.AsNeeded 
                 scrollview.VScrollBar = ScrollBarVisibility.AsNeeded 
                 scrollview.Background = New SolidFill(Color.White)
             
                 Dim group As Group = New Group 
                 group.Objects.Add(New Ellipse(0, 0, 100, 100)) 
                 group.Objects.Add(New Ellipse(120, 0, 100, 100)) 
                 group.Objects.Add(New Rect(0, 120, 100, 100)) 
             
                 scrollview.Content = group
             
                 Return scrollview 
             End Function
             </code>
             </example>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.ScrollViewer"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.Dispose(System.Boolean)">GraphicObject.Dispose</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.OnHScrollBarChanged(ILOG.Diagrammer.Graphic.ScrollBarVisibility,ILOG.Diagrammer.Graphic.ScrollBarVisibility)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.ScrollViewer.HScrollBar"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.OnVScrollBarChanged(ILOG.Diagrammer.Graphic.ScrollBarVisibility,ILOG.Diagrammer.Graphic.ScrollBarVisibility)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.ScrollViewer.VScrollBar"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.CanSelectChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanSelectChild(ILOG.Diagrammer.GraphicObject)">GraphicContainer.CanSelectChild</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.CanConnectChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.ILink,System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanConnectChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.ILink,System.Boolean)">GraphicContainer.CanConnectChild</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.OnEnabledChanged(System.Boolean,System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnEnabledChanged(System.Boolean,System.Boolean)">GraphicObject.OnEnabledChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.PaintChildren(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.PaintContent(ILOG.Diagrammer.DrawingContext)">GraphicContainer.PaintContent</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.HitTestChildren(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.HitTestContent(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicContainer.HitTestContent</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.IntersectsChildren(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.HitTestContent(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicContainer.HitTestContent</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.DoLayout(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.ContentControl.DoLayout(ILOG.Diagrammer.Rectangle2D)">ContentControl.DoLayout</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.OnScrollBarVisibilityChanged">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Graphic.ScrollViewer.ScrollBarVisibilityChanged"/> event.
            </summary>
            <remarks>Called when the scrollbars visibility is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">GraphicObject.GetPreferredSizeCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.IsVerticalScrollBarNeeded">
            <summary>
            Checks if the vertical scrollbar is needed.
            </summary>
            <remarks>The computation takes into account the visibility status
            of the other scrollbar.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.IsHorizontalScrollBarNeeded">
            <summary>
            Checks if the horizontal scrollbar is needed.
            </summary>
            <remarks>The computation takes into account the visibility status
            of the other scrollbar.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.UpdateScrollBarVisibility">
            <summary>
            Updates the visibility of scrollbar.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.UpdateScroll">
            <summary>
            Updates the scrolling status of the component.
            <para>The method also updates the visibility of scrollbars.</para>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.ScrollTo(System.Single,System.Single)">
            <summary>
            Scrolls the viewer to the specified offsets.
            </summary>
            <param name="x">The horizontal offset.</param>
            <param name="y">The vertical offset.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.HandleHorizontalScroll(System.Object,System.EventArgs)">
            <summary>
            Invoked when the horizontal <strong>scrollBar</strong> value changes.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewer.HandleVerticalScroll(System.Object,System.EventArgs)">
            <summary>
            Invoked when the horizontal <strong>scrollBar</strong> value changes.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollViewer.HorizontalOffset">
            <summary>
            Gets or sets the horizontal scrolling offset of the <see cref="T:ILOG.Diagrammer.Graphic.ScrollViewer"/>.
            </summary>
            <value>The horizontal scrolling offset of the scroll viewer.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollViewer.VerticalOffset"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollViewer.VerticalOffset">
            <summary>
            Gets or sets the vertical scrolling offset of the <see cref="T:ILOG.Diagrammer.Graphic.ScrollViewer"/>.
            </summary>
            <value>The vertical scrolling offset of the scroll viewer.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollViewer.HorizontalOffset"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollViewer.HScrollBar">
            <summary>
            Gets or sets the visibility of the horizontal scrollbar.
            </summary>
            <value>
            One of the <see cref="T:ILOG.Diagrammer.Graphic.ScrollBarVisibility"/> values.
            The default value is <see cref="F:ILOG.Diagrammer.Graphic.ScrollBarVisibility.AsNeeded"/>.
            </value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollViewer.VScrollBar"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScrollViewer.HScrollBarChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScrollViewer.HScrollBar"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollViewer.VScrollBar">
            <summary>
            Gets or sets the visibility of the vertical scrollbar.
            </summary>
            <value>
            One of the <see cref="T:ILOG.Diagrammer.Graphic.ScrollBarVisibility"/> values.
            The default value is <see cref="F:ILOG.Diagrammer.Graphic.ScrollBarVisibility.AsNeeded"/>.
            </value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollViewer.HScrollBar"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScrollViewer.VScrollBarChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScrollViewer.VScrollBar"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollViewer.HorizontalScrollBar">
            <summary>
            Gets the horizontal scrollbar.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Graphic.HScrollBar"/> instance that represents the horizontal scrollbar.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollViewer.VerticalScrollBar">
            <summary>
            Gets the vertical scrollbar.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Graphic.VScrollBar"/> instance that represents the vertical scrollbar.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollViewer.LogicalChildren">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.LogicalChildren">GraphicContainer.LogicalChildren</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollViewer.Children">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.Children">GraphicContainer.Children</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollViewer.ViewRectangle">
            <summary>
            Gets the rectangle in which the <see cref="T:ILOG.Diagrammer.Graphic.ScrollViewer"/> can scroll its contents.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScrollViewer.ScrollBarVisibilityChanged">
            <summary>
            Occurs when the visibility of scrollbars is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollViewer.HasPreferredHeight">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight">GraphicObject.HasPreferredHeight</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollViewer.HasPreferredWidth">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth">GraphicObject.HasPreferredWidth</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollViewer.VScrollBarWidth">
            <summary>
            Gets the displayed width of the vertical scrollbar.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollViewer.HScrollBarHeight">
            <summary>
            Gets the displayed height of the horizontal scrollbar.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollViewer.IsHScrollBarVisible">
            <summary>
            Gets a value indicating whether the horizontal scrollbar is visible.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollViewer.IsVScrollBarVisible">
            <summary>
            Gets a value indicating whether the vertical scrollbar is visible.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ScrollViewerSelectionGraphic">
            <summary>
            The selection class dedicated to <see cref="T:ILOG.Diagrammer.Graphic.ScrollViewer"/> objects.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewerSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.ScrollViewerSelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollViewerSelectionGraphic.ShouldDispatchEvents(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.GraphicObject)">
            <summary>
            Is called to know whether input events should be dispatched to the specified target object
            when using the <see cref="T:ILOG.Diagrammer.Windows.Forms.SelectInteractor"/>.
            </summary>
            <param name="target">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <param name="selectable">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <returns><see langword="true"/> if events should be dispatched to <paramref name="target"/>; Otherwise,
            <see langword="false"/>.</returns>
            <remarks>This method is called by the <see cref="T:ILOG.Diagrammer.Windows.Forms.SelectInteractor"/> to know whether input events
            should be dispatched to the selected object or one of its descendants.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollViewerSelectionGraphic.ShowMoveHandle">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.DefaultSelectionGraphic.ShowMoveHandle">DefaultSelectionGraphic.ShowMoveHandle</see>.
            </summary> 
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Polyline">
            <summary>
            Defines a graphic object that draws a polyline.
            </summary>
            <remarks>
            <see cref="T:ILOG.Diagrammer.Graphic.Polyline"/> is a graphic object that displays a polyline. The points of the 
            polyline are defined by the <see cref="P:ILOG.Diagrammer.Graphic.PolyPoints.Points"/> property.
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample shows how to create a dashed polyline.</para>
            <code lang="cs">
            Polyline CreatePolyline()
            {
               Polyline polyline = new Polyline();
               polyline.Points.AddRange(new Point2D[] {
                   new Point2D(0,0),
                   new Point2D(100, 10),
                   new Point2D(200,0),
                   new Point2D(300,10)
               });
               polyline.Stroke = new Stroke(Color.Black, 2, DashStyle.Dash);
               return polyline;
            }
            </code>
            <code lang="vbnet">
            Function CreatePolyline() As Polyline 
               Dim polyline As Polyline = New Polyline 
               polyline.Points.AddRange(New Point2D() { _
                       New Point2D(0, 0), _
                       New Point2D(100, 10), _
                       New Point2D(200, 0), _
                       New Point2D(300, 10)}) 
               polyline.Stroke = New Stroke(Color.Black, 2, DashStyle.Dash) 
               Return polyline 
            End Function
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Graphic.Polygon"/>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.PolyPoints">
            <summary>
            Defines the <see langword="abstract"/> base class for 
            graphic objects that have a shape defined by several points.
            </summary>
            <remarks>To add or remove points, use the <see cref="P:ILOG.Diagrammer.Graphic.PolyPoints.Points"/> property.</remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.IPolyPointsShape">
            <summary>
            Defines an interface implemented by graphic objects that are defined by 
            a collection of points.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.IPolyPointsShape.Points">
            <summary>
            Gets the collection of points that define the shape of the object.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.IPolyPointsShape.IsClosed">
            <summary>
            Indicates whether the shape is closed or open.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.IPolyPointsShape.HasFixedNumberOfPoints">
            <summary>
            Indicates whether the shape has a fixed number of points.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.PolyPoints._boundsCache">
            <summary>
            A cache for the bounds of this composite at different transformers
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPoints.#ctor(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.PolyPoints"/> class using the
            specified parameters.
            </summary>
            <param name="points">An array of <see cref="T:ILOG.Diagrammer.Point2D"/> that 
            defines the points of the object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPoints.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.Dispose(System.Boolean)">GraphicObject.Dispose</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPoints.OnCanEditPointsChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.PolyPoints.CanEditPoints"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPoints.OnTransformChanged(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnTransformChanged(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Transform)">GraphicObject.OnTransformChanged</see>.
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPoints.OnPointsChanged">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.PolyPoints.Points"/> collection has changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPoints.GetGeometryBounds">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetGeometryBounds">GraphicObject.GetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPoints.GetBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetBounds</see>
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPoints.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPoints.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetBounds</see>
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPoints.GetDefaultAnchors">
            <summary>
            If this <see cref="T:ILOG.Diagrammer.Graphic.PolyPoints"/> is not closed,
            this method returns an empty collection of <see cref="T:ILOG.Diagrammer.Anchor"/>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolyPoints.HasFixedNumberOfPoints">
            <summary>
            Indicates whether the polypoints has a fixed number of points.
            </summary>
            <value><see langword="true"/> if the polypoint has a fixed number of points; otherwise, <see langword="false"/>. The default implementation
            returns <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolyPoints.IsVisible">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.IsVisible">GraphicObject.IsVisible</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolyPoints.IsCollapsed">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.IsCollapsed">GraphicObject.IsCollapsed</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolyPoints.CanEditPoints">
            <summary>
            Gets or sets a value that indicates whether or not the object can be reshaped
            during an interaction.
            </summary>
            <value>if the object can be reshaped; Otherwise, <see langword="false"/>. The default
            value is <see langword="true"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.PolyPoints.CanEditPointsChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.PolyPoints.CanEditPoints"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolyPoints.Points">
            <summary>
            Gets the collection of points of the object.
            </summary>
            <value>A collection of <see cref="T:ILOG.Diagrammer.Point2D"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.PolyPoints.PointsChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.PolyPoints.Points"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolyPoints.IsClosed">
            <summary>
            Indicates whether the shape is closed or open.
            </summary>
            <value>The default implementation returns <see langword="false"/>.</value>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Polyline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Polyline"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Polyline.#ctor(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Polyline"/> class using the
            specified parameters.
            </summary>
            <param name="points">An array of <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the points of the polyline.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Polyline.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Shape.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">Shape.UpdateGraphicsPath</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Polyline.GetDefaultAnchors">
            <summary>
            If this <see cref="T:ILOG.Diagrammer.Graphic.PolyPoints"/> is not closed,
            this method returns an empty collection of <see cref="T:ILOG.Diagrammer.Anchor"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Polyline.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestCore</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.PolylineAnchor">
            <summary>
            Represents an anchor along the path of a <see cref="T:ILOG.Diagrammer.Graphic.Polyline"/>
            graphic object. The position of the point along the polyline is defined by the <see cref="P:ILOG.Diagrammer.Graphic.PolylineAnchor.Position"/>,
            <see cref="P:ILOG.Diagrammer.Graphic.PolylineAnchor.StartVertex"/> and <see cref="P:ILOG.Diagrammer.Graphic.PolylineAnchor.EndVertex"/> properties.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolylineAnchor.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.PolylineAnchor"/> class using
            the specified <see paramref="position"/>
            on the path of the polyline.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolylineAnchor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.PolylineAnchor"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolylineAnchor.GetPoint(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)">
            <summary>
            Sets both the <paramref name="connectionPoint"/> and <paramref name="originPoint"/>
            out parameters to the point defined by the <see cref="P:ILOG.Diagrammer.Graphic.PolylineAnchor.Position"/> property on the polyline.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolylineAnchor.NeedsReferencePoint">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolylineAnchor.ValidFor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Anchor.ValidFor(ILOG.Diagrammer.GraphicObject)">Anchor.ValidFor</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolylineAnchor.ToString">
            <summary>
            Returns s short description of this <see cref="T:ILOG.Diagrammer.Graphic.PolylineAnchor"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolylineAnchor.IsSame(ILOG.Diagrammer.Anchor)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Anchor.IsSame(ILOG.Diagrammer.Anchor)">Anchor.IsSame</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolylineAnchor.SupportsMove">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Anchor.SupportsMove">Anchor.SupportsMove</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolylineAnchor.Move(ILOG.Diagrammer.Point2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Anchor.Move(ILOG.Diagrammer.Point2D)">Anchor.Move</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolylineAnchor.Position">
            <summary>
            The position of the connection point along the path of the polyline.
            </summary>
            <value>
            The value of this property is a floating point value between
            <strong>0</strong> and <strong>1</strong>. A value of <strong>0</strong>
            means the first point of the polyline, a value of <strong>1</strong>
            means the last point of the polyline, and an intermediate value means
            a point whose linear distance along the polyline path is equal to the
            total length of the path multiplied by the position.
            </value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.PolylineAnchor.StartVertex"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.PolylineAnchor.EndVertex"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolylineAnchor.StartEdge">
            <summary>
            This property is obsolete. Please use the <see cref="P:ILOG.Diagrammer.Graphic.PolylineAnchor.StartVertex"/> property instead.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolylineAnchor.StartVertex">
            <summary>
            Gets or sets the index of the starting vertex for the anchor.
            </summary>
            <value>A zero-based index. The default value is <strong>0</strong>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.PolylineAnchor.Position"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.PolylineAnchor.EndVertex"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolylineAnchor.EndEdge">
            <summary>
            This property is obsolete. Please use the <see cref="P:ILOG.Diagrammer.Graphic.PolylineAnchor.EndVertex"/> property instead.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolylineAnchor.EndVertex">
            <summary>
            Gets or sets the index of the ending vertex for the anchor.
            </summary>
            <value>A zero-based index. The default value is <strong>-1</strong>, meaning that the whole polyline will
            be used.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.PolylineAnchor.StartVertex"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.PolylineAnchor.Position"/>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.MorphologyOperator">
            <summary>
            Represents the morphology operator of a <see cref="T:ILOG.Diagrammer.Filters.FeMorphology"/> filter effect.
            </summary>
            <remarks>Use the value of this enumeration to define the morphology operator in the
            <see cref="P:ILOG.Diagrammer.Filters.FeMorphology.Operator"/> property of 
            the <see cref="T:ILOG.Diagrammer.Filters.FeMorphology"/> class.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.MorphologyOperator.Erode">
            <summary>
            Erosion operator.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.MorphologyOperator.Dilate">
            <summary>
            Dilation operator.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeMorphology">
            <summary>
            This filter effect performs "fattening" or "thinning" of artwork. 
            </summary>
            <remarks>
            It is particularly useful for fattening or thinning an alpha channel.
            The dilation (or erosion) kernel is a rectangle with a width of 2*x-radius 
            and a height of 2*y-radius. In dilation, the output pixel is the individual
            component-wise maximum of the corresponding R,G,B,A values in the 
            input image kernel rectangle. In erosion, the output pixel is the individual
            component-wise minimum of the corresponding R,G,B,A values in 
            the input image kernel rectangle.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeMorphology.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeMorphology"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeMorphology.#ctor(ILOG.Diagrammer.Filters.MorphologyOperator,System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeMorphology"/> object.
            </summary>
            <param name="operation">The morphology operation.</param>
            <param name="radiusX">The x radius for the operation.</param>
            <param name="radiusY">The y radius for the operation.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeMorphology.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeMorphology"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeMorphology.ToString">
            <summary>
            Returns a short description of this filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeMorphology.Operator">
            <summary>
            Gets or sets the morphology operator.
            </summary>
            <value>
            One of the <see cref="T:ILOG.Diagrammer.Filters.MorphologyOperator"/> values the default value is
            <see cref="F:ILOG.Diagrammer.Filters.MorphologyOperator.Erode"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeMorphology.RadiusX">
            <summary>
            Gets and sets the x-radius.
            </summary>
            <value>
            The x-radius for the morphology operation. The default value is zero.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeMorphology.RadiusY">
            <summary>
            Gets and sets the y-radius.
            </summary>
            <value>
            The y-radius for the morphology operation. The default value is zero.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeMorphology.Inputs">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.FilterEffect.Inputs">FilterEffect.Inputs</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeMorphology.In">
            <summary>
            Gets or sets the source of this filter effect.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Util.GeometryUtil.GetAngleFromTransform(ILOG.Diagrammer.Transform)">
            <summary>
            This method doesn't handle the case where t is not a rotation (symetry for ex)
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Util.GeometryUtil.GetAngleFromVector(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            Returns the exact angle of a vector in degrees (using the Math.atan2 method).
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter">
            <summary>
            An adapter for laying out a graph whose nodes are instances 
            of <see cref="T:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter"/>.
            </summary>
            <remarks>
            There is no link in this graph model.
            The adapter only stores the list of nodes (of type
            <see cref="T:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter"/>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.#ctor">
            <summary>
            Creates a new connected component collection graph model.
            </summary> 
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.AddNode(ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter)">
            <summary>
            Adds a new node to the model.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.Dispose">
            <summary>
            Disposes of this <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/> and releases any
            resources that it is using.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.GetLinksFrom(System.Object)">
            <summary>
            Returns all the links that have <strong>node</strong>
            as their origin.
            </summary>
            <param name="node">The origin node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.GetLinksTo(System.Object)">
            <summary>
            Returns all the links that have <strong>node</strong>
            as their destination.
            </summary>
            <param name="node">The origin node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.GetFrom(System.Object)">
            <summary>
            Returns the origin node of a link.
            </summary>
            <param name="link">The link.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.GetTo(System.Object)">
            <summary>
            Returns the destination node of a link.
            </summary>
            <param name="link">The link.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.IsNode(System.Object)">
            <summary>
            Returns <see langword="true"/> if an object is a valid node, and
            <see langword="false"/> otherwise.
            </summary>
            <param name="obj">The object to test.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.IsLink(System.Object)">
            <summary>
            Returns <see langword="true"/> if the object is a valid normal link,        /// and <see langword="false"/> otherwise.
            </summary>
            <param name="obj">The object to test.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a property for a node or a link.
            </summary>
            <remarks>
            If <strong>val</strong> is <see langword="null"/>, the property is
            removed.
            Otherwise, the property value is set to <strong>val</strong>.
            </remarks>
            <param name="nodeOrLink">The node or link for which the property
            is to be set.
            </param>
            <param name="key">The key string for the property.
            </param>
            <param name="val">The new value of the property.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.GetProperty(System.Object,System.String)">
            <summary>
            Returns the value of a property.
            </summary>
            <remarks>
            The method returns <see langword="null"/> if the property does
            not exist.
            </remarks>
            <param name="nodeOrLink">The node or link for which the property
            is to be retrieved.
            </param>
            <param name="key">The key string for the property.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.SetProperty(System.String,System.Object)">
            <summary>
            Sets the value of a property for the graph model.
            </summary>
            <remarks>
            If <strong>val</strong> is <see langword="null"/>, the property is
            removed.
            Otherwise, the property value is set to <strong>val</strong>.
            </remarks>
            <param name="key">The key string for the property.
            </param>
            <param name="val">The new value of the property.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.GetProperty(System.String)">
            <summary>
            Returns the value of a property of the graph model.
            </summary>
            <remarks>
            The method returns <see langword="null"/> if the property does
            not exist.
            </remarks>
            <param name="key">The key string for the property.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.MoveNode(System.Object,System.Single,System.Single)">
            <summary>
            Changes the position of the specified node.
            Not needed for link routing.
            </summary>
            <param name="node">The node.
            </param>
            <param name="x">The new <strong>x</strong> position of the node.
            </param>
            <param name="y">The new <strong>y</strong> position of the node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.BoundingBox(System.Object)">
            <summary>
            Returns the bounding rectangle of a node or a link.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.GetLinkPoints(System.Object)">
            <summary>
            Returns the points that define a link.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)">
             <summary>
             Reshapes a link.
             </summary>
             <remarks>
             The method must work for normal links and intergraph links.
             <p>
             The link style represents the style of the shape of the
             link. The details of the shape of the link are given by
             the further arguments of the method.
             If the new shape of the link must be a straight-line link without
             any intermediate points, call the method with an empty array      
             for the <strong>points</strong> argument, or with the value 
             <strong>0</strong> for the <strong>length</strong> argument.
             In this case, the values of the arguments <strong>startIndex</strong>
             and <strong>length</strong> are ignored.
             </p><p>
             The mode parameters determine how the <paramref name="fromPoint"/>
             and <paramref name="toPoint"/> should be used:
             <ul>
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Ignore"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout does not
             specify how the corresponding origin or destination point of 
             the link should be determined.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Move"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains a meaningful value. The layout wants to
             move the corresponding origin or destination point of the link
             to the specified point.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Fix"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout wants to
             keep the previous corresponding origin or destination point of
             the link fixed, relative to the node position.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Clip"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout wants to
             clip the corresponding origin or destination point of
             the link against the border of the node.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.MoveAndClip"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains a meaningful value. The layout wants to
             clip the corresponding origin or destination point of
             the link against the border of the node, but the link should
             go though the specified point.</li>
            
             </ul>
             </p>
             </remarks>
             <param name="link">The link to be reshaped.
             </param>
             <param name="style">The style of the shape of the link.
             </param>
             <param name="fromPoint">The connection point of the link on the
             origin node.
             </param>
             <param name="fromPointMode">The mode that indicates how the
             <paramref name="fromPoint"/> should be used.
             </param>
             <param name="points">The array of intermediate points. Ignored
             if <strong>length</strong> is <strong>0</strong>."/&gt;
             </param>
             <param name="startIndex">The starting position in the array of
             points.
             </param>
             <param name="length">The number of intermediate points.
             </param>
             <param name="toPoint">The connection point of the link on the
             destination node.
             </param>
             <param name="toPointMode">The mode that indicates how the
             <paramref name="toPoint"/> should be used.
             </param>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.IsLink(System.Object)">
             </seealso>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)">
             </seealso>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.Nodes">
            <summary> Gets the nodes.</summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentCollectionAdapter.Links">
            <summary>
            Gets the normal links.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.InternalRect">
            <summary>
            The <strong>InternalRect</strong> class defines a rectangle specified in float
            precision.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.X">
            <summary>
            The <strong>InternalRect</strong> class defines a rectangle specified in float
            precision.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.Y">
            <summary>
            X coord.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.Width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.Height">
            <summary>
            The height.
            coord.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.#ctor">
            <summary>
            Constructs a new <strong>Rect</strong>, initialized to location 
            (0.0, 0.0) and size (0.0, 0.0).
            </summary>   
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs and initializes an <strong>Rect</strong>  from the
            specified coordinates.
            </summary>
            <param name='x'> the x coordinate of the upper left corner of the
            newly constructed <strong>Rect</strong>
            </param>
            <param name='y'> the y coordinate of the upper left corner of the
            newly constructed <strong>Rect</strong>
            </param>
            <param name='width'> the width of the newly constructed
            <strong>Rect</strong>
            </param>
            <param name='height'> the height of the newly constructed
            <strong>Rect</strong>
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.#ctor(ILOG.Diagrammer.GraphLayout.Internal.InternalRect)">
            <summary>
            Creates a new <strong>Rect</strong> by copying the specified one.
            </summary>
            <param name='rect'> The copied rectangle.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.#ctor(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Creates a new <strong>Rect</strong> by copying the specified one.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.SetRect(ILOG.Diagrammer.GraphLayout.Internal.InternalRect)">
            <summary>
            Sets the geometry of this <strong>InternalRect</strong> to the 
            geometry of the specified rect.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.Add(System.Single,System.Single)">
            <summary>
            Adds a point, specified by the arguments <paramref name='px'/> and
            <paramref name='py'/>, to this  <strong>Rect</strong>.
            </summary>
            <remarks>   
            The resulting <strong>Rect</strong>  is the smallest
            <strong>Rect</strong> that contains both the original
            <strong>Rect</strong> and the specified point.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.Add(ILOG.Diagrammer.GraphLayout.Internal.InternalRect)">
            <summary>
            Adds an <strong>InternalRect</strong> object to this <strong>InternalRect</strong>.
            </summary>
            <remarks>   
            The resulting <strong>InternalRect</strong> is the union of the two
            <strong>InternalRect</strong> objects.  
            </remarks>
            <param name='rect'> the <strong>InternalRect</strong> to add to this
            <strong>InternalRect</strong>.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.Add(ILOG.Diagrammer.GraphLayout.Internal.InternalPoint)">
            <summary>
            Adds a <strong>InternalPoint</strong> object to this <strong>InternalRect</strong>.
            </summary>
            <remarks>    
            The resulting <strong>Rect</strong> is the smallest rect that contains both
            the original rect and the specified point.     
            </remarks>
            <param name='point'> the <strong>InternalPoint</strong> to add to this
            <strong>InternalRect</strong>.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.Inside(System.Single,System.Single)">
            <summary>
            Tests if a particular point lies inside the rectangle.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.Move(System.Single,System.Single)">
            <summary>
            Changes the position of the rectangle.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.Translate(System.Single,System.Single)">
            <summary>
            Translates the rectangle.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.Resize(System.Single,System.Single)">
            <summary>
            Changes the width and height of the rectangle.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.Reshape(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Reshapes the rectangle.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.Expand(System.Single)">
            <summary>
             Expands current rectangle by <paramref name='delta'/> in x and y.
            </summary>
            <remarks>    
            If <paramref name='delta'/> is negative, and
            2*<paramref name='delta'/> is bigger than the current width, the new
            width is set to 0. If <paramref name='delta'/> is negative, and
            2*<paramref name='delta'/> is bigger than the current height, the
            new height is set to 0.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.Expand(System.Single,System.Single)">
            <summary>
             Expands current rectangle by <paramref name='dx'/> in x and
            <paramref name='dy'/> in y.
            </summary>
            <remarks>
            If <paramref name='dx'/> is negative,
            and 2*<paramref name='dx'/> is bigger than the current width, the
            new width is set to 0. If <paramref name='dy'/> is negative, and
            2*<paramref name='dy'/> is bigger than the current height, the new
            height is set to 0.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.Contains(ILOG.Diagrammer.GraphLayout.Internal.InternalRect)">
            <summary>
            Tests if the rectangle contains the specified one.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.IsEmpty">
            <summary>
            Tests if the rectangle is empty.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.Intersects(ILOG.Diagrammer.GraphLayout.Internal.InternalRect)">
            <summary>
            Tests if the rectangle intersects another one.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.Intersection(ILOG.Diagrammer.GraphLayout.Internal.InternalRect)">
            <summary>
            Computes the intersection of the rectangle with the specified
            rectangle.
            </summary>
            <remarks>
            The result of the intersection is stored in
            <strong>this</strong>, the rectangle passed as a parameter is not
            modified.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.Floor">
            <summary>
            Modifies the rectangle so that the values becomes mathematical
            integers.
            </summary>
            <remarks>
            This is useful when you need to use a rectangle to draw on
            a view. 
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.XFloor">
            <summary>
            Returns the x coordinate of the rectangle as a mathematical integer.
            </summary>
            <remarks>
            This is useful when you need to use a rectangle to draw on a view. 
            </remarks>   
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.YFloor">
            <summary>
            Returns the y coordinate of the rectangle as a mathematical integer.
            </summary>
            <remarks>
            Returns the y coordinate of the rectangle as a mathematical integer.
            This is useful when you need to use a rectangle to draw on a view. 
            </remarks>  
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.WidthFloor">
            <summary>
            Returns the width of the rectangle as a mathematical integer.
            </summary>
            <remarks>
            This is useful when you need to use a rectangle to draw on a view. 
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.HeightFloor">
            <summary>
            Returns the height of the rectangle as a mathematical integer.
            </summary>
            <remarks>    
            This is useful when you need to use a rectangle to draw on a view. 
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.ToString">
            <summary>
            Returns a <strong>String</strong> that represents the value  of this
            <strong>Rect</strong>.
            </summary>
            <returns>a string representation of this <strong>Rect</strong>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.Equals(System.Object)">
            <summary>
            Checks for equality.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.InternalRect.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:ILOG.Diagrammer.GraphLayout.Internal.InternalRect"/> object.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode">
            <summary>
            The incremental link reshape modes for the Short Link layout algorithm.    
            Incremental link reshape modes can be specified globally for all links,
            using <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalUnmodifiedLinkReshapeMode"/> 
            and <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalModifiedLinkReshapeMode"/>,
            or locally for individual links, using 
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetIncrementalUnmodifiedLinkReshapeMode(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode)"/> 
            and
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetIncrementalModifiedLinkReshapeMode(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode)"/>.
            If you want to specify the mode for individual links, you need to
            set the global mode to <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode.Mixed"/>.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalUnmodifiedLinkReshapeMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalModifiedLinkReshapeMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetIncrementalUnmodifiedLinkReshapeMode(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetIncrementalModifiedLinkReshapeMode(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode)"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode.Free">
            <summary>
            Free mode.
            </summary>
            <remarks>
            When using this link reshape mode in incremental layout mode, 
            the layout is allowed to freely reshape the unmodified links.
            Of course, settings that may have been done using 
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetFixed(System.Object,System.Boolean)"/>,
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.OriginPointMode"/>, or
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.DestinationPointMode"/>
            are still obeyed.             
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode.Fixed">
            <summary>
            Fixed mode.
            </summary>
            <remarks>
            When using this link reshape mode in incremental layout mode, 
            the layout is not allowed to reshape the unmodified links in any way.   
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode.FixedShapeType">
            <summary>
            Fixed shape type mode.
            </summary>
            <remarks>
            When using this link reshape mode in incremental layout mode, 
            the layout preserves the shape type of the unmodified links.
            This means that both the number of bends and the node sides to which
            the links are connected are preserved.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode.FixedNodeSides">
            <summary>
            Fixed node sides mode.
            </summary>
            <remarks>
            When using this link reshape mode in incremental layout mode, 
            the layout preserves the node sides to which
            the links are connected.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode.FixedConnectionPoints">
            <summary>
            Fixed connection points mode.
            </summary>
            <remarks>
            When using this link reshape mode in incremental layout mode, 
            the layout preserves the connection points of the links.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode.Mixed">
            <summary>
            Mixed mode.
            </summary>
            <remarks>
            When using this link reshape mode in incremental layout mode, 
            each link can have a different incremental reshape mode.
            The mode of each individual link can be set by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetIncrementalUnmodifiedLinkReshapeMode(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode)"/>
            and
            <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetIncrementalModifiedLinkReshapeMode(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode)"/>.       .       
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkBundlesMode">
            <summary>
            The link bundle modes for the Short Link layout algorithm.  
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkBundlesMode"/>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkBundlesMode.NoBundle">
            <summary>
            No bundle mode.
            </summary>
            <remarks>
            When used as value of <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkBundlesMode"/>,
            no link bundles are computed.        
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkBundlesMode.FirstLastSegment">
            <summary>
            First and last segment mode.
            </summary>
            <remarks>
            When used as value of <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkBundlesMode"/>,
            only the first and the last segments of the links are bundled.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkBundlesMode.ImprovedFirstLastSegment">
            <summary>
            Improved first and last segment mode.
            </summary>
            <remarks>
            When used as value of <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkBundlesMode"/>,
            the first and the last segments of the links are bundled in an improved manner.        
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutSelfLinkStyle">
            <summary>
            The self-link styles for the Short Link layout algorithm.    
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SelfLinkStyle"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutSelfLinkStyle.TwoBendsOrthogonal">
            <summary>
            Two bends orthogonal style.
            </summary>
            <remarks>
            When used as value of <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SelfLinkStyle"/>,
            a two-bend shape is given to the self-links, that is, links with the same
            origin and destination node. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutSelfLinkStyle.ThreeBendsOrthogonal">
            <summary>
            Three bends orthogonal style.
            </summary>
            <remarks>
            When used as value of <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SelfLinkStyle"/>,
            a three-bend shape is given to the self-links, that is, links with the same
            origin and destination node. 
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle">
            <summary>
            The connector styles for the Short Link layout algorithm.   
            The connector style can be specified globally for all nodes,
            using <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.ConnectorStyle"/>,
            or locally for individual nodes, using 
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetConnectorStyle(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle)"/>.
            If you want to specify the style for individual nodes, you need to
            set the global style to <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.Mixed"/>.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.ConnectorStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetConnectorStyle(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle)"/>
            
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.Automatic">
            <summary>
            Automatic connectors.
            </summary>
            <remarks>
            In this mode, 
            the connector style of all nodes is automatically selected as follows: 
            The connection points are dispatched in the mode 
            <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.FixedOffset"/>
            if doing so no connection point goes outside the border the link is
            attached to. Otherwise, the connection points are dispatched using 
            the style <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.EvenlySpaced"/>.       
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.FixedOffset">
            <summary>
            Fixed offset connection points.
            </summary>
            <remarks>
            In this mode,
            the connection points of all the links are placed at a fixed distance, given
            by the value of the property <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkOffset"/>.        
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.EvenlySpaced">
            <summary>
            Evenly spaced connection points.
            </summary>
            <remarks>
            In this mode,
            the connection points of all the links are evenly spaced along the node border
            the link is attached to.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.Mixed">
            <summary>
            Mixed connection points.
            </summary>
            <remarks>
            In this mode,
            each node can have a different connector style.
            The style of each individual node can be set by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetConnectorStyle(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle)"/> so that 
            different link shapes can occur in the same graph.        
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GridLayoutMode">
            <summary>
            The modes of the Grid Layout.
            </summary>    
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedWidth">
            <summary>
            In this mode, the nodes are placed in the cells of a grid (matrix) that has
            a fixed maximum number of columns. 
            </summary>
            <remarks>
            The number of columns is equal to the width of the layout region
            parameter divided by the horizontal grid offset (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.HorizontalGridOffset"/>.    
            </remarks>      
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedHeight">
            <summary>
            In this mode, the nodes are placed in the cells of a grid (matrix) that has
            a fixed maximum number of rows. 
            </summary>
            <remarks>
            The number of rows is equal to the width of the layout region
            parameter divided by the vertical grid offset (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.VerticalGridOffset"/>.    
            </remarks>      
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToRows">
            <summary>
            In this mode, the nodes are placed in rows. 
            </summary>
            <remarks>
            The maximum width of the rows is equal to the width of the layout region
            parameter. The height of each row is the maximum height of the nodes
            contained in the row (plus margins).
            </remarks>        
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToColumns">
            <summary>
            In this mode, the nodes are placed in columns. 
            </summary>
            <remarks>
            The maximum height of the columns is equal to the height of the layout region
            parameter. The width of each column is the maximum width of the nodes
            contained in the column (plus margins).
            </remarks>        
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GridLayoutHorizontalAlignment">
            <summary>
            The horizontal alignment style.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            This parameter controls the horizontal and vertical alignment of nodes either
            inside their grid cell if the layout mode 
            (see <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode"/>) is 
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedWidth"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedHeight"/>, or
            inside the columns if the layout mode is 
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToColumns"/>.
            </item>
            <item>
            This parameter is not used if the layout mode is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToRows"/>.               
            </item>
            </list>
            </remarks>      
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.HorizontalAlignment"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetHorizontalAlignment(System.Object,ILOG.Diagrammer.GraphLayout.GridLayoutHorizontalAlignment)"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayoutHorizontalAlignment.Center">
            <summary>
            The node is centered in its grid cell or column.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayoutHorizontalAlignment.Left">
            <summary>
            The node is aligned to the left border of the cell or column.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayoutHorizontalAlignment.Right">
            <summary>
            The node is aligned to the right border of the cell or column.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayoutHorizontalAlignment.Mixed">
            <summary>
            Each node can have a different alignment option.
            </summary>        
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GridLayoutVerticalAlignment">
            <summary>
            The vertical alignment style.
            </summary>
            <remarks>
            <list type="bullet">
            <item>
            This parameter controls the vertical alignment of nodes either
            inside their grid cell if the layout mode 
            (see <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode"/>) is 
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedWidth"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedHeight"/>, or
            inside the columns if the layout mode is 
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToRows"/>.
            </item>
            <item>
            This parameter is not used if the layout mode is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToColumns"/>.               
            </item>
            </list>
            </remarks>      
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.VerticalAlignment"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetVerticalAlignment(System.Object,ILOG.Diagrammer.GraphLayout.GridLayoutVerticalAlignment)"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayoutVerticalAlignment.Center">
            <summary>
            The node is centered in its grid cell or column.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayoutVerticalAlignment.Top">
            <summary>
            The node is aligned to the top border of the cell or column.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayoutVerticalAlignment.Bottom">
            <summary>
            The node is aligned to the bottom border of the cell or column.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayoutVerticalAlignment.Mixed">
            <summary>
            Each node can have a different alignment option.
            </summary>        
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.IGraphLayoutFilter">
            <summary>
            Determines whether a graphic object is taken into account for graph layout.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphLayoutFilter.Accept(ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter,ILOG.Diagrammer.GraphicObject)">
            <summary>
            Called by graph layout algorithms to determine whether a graphic object
            is taken into account for graph layout.
            </summary>
            <remarks>
            <para>
            If the start or end nodes of a link are ignored, then the link is automatically
            ignored. The implementations of the <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphLayoutFilter"/> interface
            do not need to check this case, as it is already checked by the <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>.
            </para>
            </remarks>
            <param name="model">The <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/> attached to the
            <see cref="T:ILOG.Diagrammer.GraphicContainer"/> that contains the specified graphic object.</param>
            <param name="obj">The graphic object.</param>
            <returns><see langword="true"/> if the graphic object is accepted for graph layout,
            or <see langword="false"/> if the graphic object must be ignored.</returns>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.NestedGraphMode">
            <summary>
            The mode that determines how sub-containers are handled by <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayout"/> algorithms.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.NestedGraphMode.Node">
            <summary>
            The sub-container is just considered as a node of the graph, and its contents
            are ignored by the <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayout"/> algorithm performed on its parent
            container.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.NestedGraphMode.Transparent">
            <summary>
            The children of the sub-container are considered as belonging to the same graph
            as the children of the parent container, as if the graph was flat.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.NestedGraphMode.Subgraph">
            <summary>
            The sub-container is considered as a nested graph by the graph layout algorithms.
            The layout algorithms will be performed recursively on the sub-container first, then on
            the parent container.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.IGraphLayoutBoundsProvider">
            <summary>
            Provides custom bounds for a node of a graph when a <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayout"/> algorithm is performed.
            When a graphic object implements this interface, the layout uses the bounds provider for computing
            the bounds of the graphic object.  
            </summary>
            <remarks>
            Graph layout algorithms normally use the bounds returned by <see cref="M:ILOG.Diagrammer.GraphicObject.GetStyledBounds(ILOG.Diagrammer.Transform)"/>
            to place the nodes of a graph. If a graphic object needs to supply different bounds, it must implement
            the <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphLayoutBoundsProvider"/> interface and override the
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphLayoutBoundsProvider.GetGraphLayoutBounds(ILOG.Diagrammer.Transform)"/> method to return the custom bounds.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.IGraphLayoutBoundsProvider.GetGraphLayoutBounds(ILOG.Diagrammer.Transform)">
            <summary>
            Returns the bounds that the <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayout"/> algorithm
            must use when placing this graphic object, instead of the result of <see cref="M:ILOG.Diagrammer.GraphicObject.GetStyledBounds(ILOG.Diagrammer.Transform)"/>.
            </summary>
            <remarks>
            Graph layout algorithms normally use the bounds returned by <see cref="M:ILOG.Diagrammer.GraphicObject.GetStyledBounds(ILOG.Diagrammer.Transform)"/>
            to place the nodes of a graph. If a graphic object needs to supply different bounds, it must implement
            the <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphLayoutBoundsProvider"/> interface and override the
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphLayoutBoundsProvider.GetGraphLayoutBounds(ILOG.Diagrammer.Transform)"/> method to return the custom bounds.
            </remarks>
            <param name="t">The transformation to use when computing the bounds of the node.</param>
        </member>
        <member name="T:ILOG.Diagrammer.ObjectEventArgs">
            <summary>
            Provides data for the input events of a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
            <remarks>When a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> raises an input event, the event is dispatched 
            to the target graphic object itself and to its parents in the hierarchy. 
            <para>The event dispatching is performed in two phases that determine the notification 
            order in the hierarchy and occurs in the following order:
            <ul><li>The first phase notifies the targeted object and its parents, starting from the root of the
            hierarchy (the top-level parent) down to the targeted graphic object. This is the tunneling routing
            phase. The <see cref="T:ILOG.Diagrammer.GraphicObject"/> events corresponding to this phase are prefixed with the word <i>Preview</i>.</li>
            <li>"The second phase is the opposite process: the targeted object and its parents are notified
            starting from the targeted graphic object up to the root of the hierarchy (the top-level parent).
            This is the bubbling phase.</li></ul>
            </para> 
            The event propagation occurs as long as the event is not marked as <see cref="P:ILOG.Diagrammer.ObjectEventArgs.Consumed"/>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.ObjectEventArgs.#ctor(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.GraphicLayer)">
            <summary>
            Creates and initializes a new <see cref="T:ILOG.Diagrammer.ObjectEventArgs"/> object.
            </summary>
            <param name="target">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that received the event.</param>
            <param name="layer">The <see cref="T:ILOG.Diagrammer.GraphicLayer"/> that raised the event.</param>
        </member>
        <member name="M:ILOG.Diagrammer.ObjectEventArgs.CaptureMouse">
            <summary>
            Sets the mouse capture on the event current target.
            </summary>
            <remarks>When a graphic object has captured the mouse, it receives mouse input whether or not the cursor is within its borders.
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.CaptureMouse(ILOG.Diagrammer.GraphicObject)"/>
            <seealso cref="P:ILOG.Diagrammer.ObjectEventArgs.CurrentTarget"/>
        </member>
        <member name="M:ILOG.Diagrammer.ObjectEventArgs.ReleaseMouseCapture">
            <summary>
            Release the mouse capture.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ReleaseMouseCapture"/>
            <seealso cref="M:ILOG.Diagrammer.ObjectEventArgs.CaptureMouse"/>
        </member>
        <member name="M:ILOG.Diagrammer.ObjectEventArgs.CaptureKey">
            <summary>
            Sets the keyboard capture on the event current target.
            </summary>
            <remarks>When a graphic object has captured the keyboard, it receives keyboard input.</remarks>
            <seealso cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.CaptureMouse(ILOG.Diagrammer.GraphicObject)"/>
            <seealso cref="P:ILOG.Diagrammer.ObjectEventArgs.CurrentTarget"/>
        </member>
        <member name="M:ILOG.Diagrammer.ObjectEventArgs.ReleaseKeyCapture">
            <summary>
            Release the keyboard capture.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ReleaseMouseCapture"/>
            <seealso cref="M:ILOG.Diagrammer.ObjectEventArgs.CaptureMouse"/>
        </member>
        <member name="M:ILOG.Diagrammer.ObjectEventArgs.SetViewCursor(System.Windows.Forms.Cursor)">
            <summary>
            Sets the cursor on the view that triggered the event.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ObjectEventArgs.RestoreViewCursor">
            <summary>
            Restores the cursor on the view to the view cursor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.ObjectEventArgs.Target">
            <summary>
            Gets the event target.
            </summary>
            <value>The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that received the event.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ObjectEventArgs.View">
            <summary>
            Gets the view that raised the event.
            </summary>
            <value>The <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> that raised the event.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ObjectEventArgs.Layer">
            <summary>
            Gets the layer that raised the event.
            </summary>
            <value>The <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> that raised the event.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ObjectEventArgs.Consumed">
            <summary>
            Indicates whether the event was consumed.
            </summary>
            <remarks>Setting this property to <see langword='true'/> stops the propagation of this event.</remarks>
            <value><see langword='true'/> if the event was consumed, <see langword='false'/> otherwise.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ObjectEventArgs.CursorChanged">
            <summary>
            Indicates whether the event has changed the cursor.
            </summary>
            <value><see langword='true'/> if the event has changed the cursor, <see langword='false'/> otherwise.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ObjectEventArgs.CurrentTarget">
            <summary>
            Gets or sets the current event target.
            </summary>
            <value>The <see cref="T:ILOG.Diagrammer.GraphicObject"/> whose EventHandlers are currently being processed.</value>
        </member>
        <member name="T:ILOG.Diagrammer.ObjectEventHandler">
            <summary>
            Represents the method that handles one of the various Mouse events of a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
            <seealso cref="E:ILOG.Diagrammer.GraphicObject.MouseEnter"/>
            <seealso cref="E:ILOG.Diagrammer.GraphicObject.MouseLeave"/>
        </member>
        <member name="T:ILOG.Diagrammer.ObjectKeyEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.GraphicObject.KeyUp"/>,<see cref="E:ILOG.Diagrammer.GraphicObject.PreviewKeyUp"/>,
            <see cref="E:ILOG.Diagrammer.GraphicObject.KeyDown"/> and <see cref="E:ILOG.Diagrammer.GraphicObject.PreviewKeyDown"/> events of a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ObjectKeyEventArgs.#ctor(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.GraphicLayer,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys)">
            <summary>
            Creates and initializes a new <see cref="T:ILOG.Diagrammer.ObjectKeyEventArgs"/> object.
            </summary>
            <param name="target">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that received the event.</param>
            <param name="layer">The <see cref="T:ILOG.Diagrammer.GraphicLayer"/> that raised the event.</param>
            <param name="keyCode">A <see cref="T:System.Windows.Forms.Keys"/> value that is the key code for the event.</param>
            <param name="keyData">A <see cref="T:System.Windows.Forms.Keys"/> representing the key that was pressed, combined with any modifier flags.</param>
            <param name="modifiers">A <see cref="T:System.Windows.Forms.Keys"/> value representing one or more modifier flags.</param>
        </member>
        <member name="P:ILOG.Diagrammer.ObjectKeyEventArgs.KeyData">
            <summary>
            Gets the key data for this event.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Keys"/> representing the key code for the key that was pressed, combined with modifier flags.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ObjectKeyEventArgs.KeyCode">
            <summary>
            Gets the keyboard code for this event.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Keys"/> value that is the key code for the event.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ObjectKeyEventArgs.Modifiers">
            <summary>
            Gets the modifiers flag for this event.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Keys"/> value representing one or more modifier flags.</value>
        </member>
        <member name="T:ILOG.Diagrammer.ObjectKeyEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.GraphicObject.KeyUp"/>,<see cref="E:ILOG.Diagrammer.GraphicObject.PreviewKeyUp"/>,
            <see cref="E:ILOG.Diagrammer.GraphicObject.KeyDown"/>, <see cref="E:ILOG.Diagrammer.GraphicObject.PreviewKeyDown"/> events of a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.ObjectKeyPressEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.GraphicObject.KeyPress"/> or <see cref="E:ILOG.Diagrammer.GraphicObject.PreviewKeyPress"/>
            events of a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ObjectKeyPressEventArgs.#ctor(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.GraphicLayer,System.Char)">
            <summary>
            Creates and initializes a new <see cref="T:ILOG.Diagrammer.ObjectKeyPressEventArgs"/> object.
            </summary>
            <param name="target">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that received the event.</param>
            <param name="layer">The <see cref="T:ILOG.Diagrammer.GraphicLayer"/> that raised the event.</param>
            <param name="key">The character corresponding to the key pressed.</param>
        </member>
        <member name="P:ILOG.Diagrammer.ObjectKeyPressEventArgs.KeyChar">
            <summary>
            Gets the character corresponding to the key pressed.
            </summary>
            <value>The ASCII character that is composed.</value>
        </member>
        <member name="T:ILOG.Diagrammer.ObjectKeyPressEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.GraphicObject.KeyPress"/> and <see cref="E:ILOG.Diagrammer.GraphicObject.PreviewKeyPress"/>
            events of a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.ObjectMouseEventArgs">
            <summary>
            Provides data for the various mouse events of a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ObjectMouseEventArgs.#ctor(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.GraphicLayer,System.Windows.Forms.MouseButtons,ILOG.Diagrammer.Point2D,System.Int32)">
            <summary>
            Creates and initializes a new <see cref="T:ILOG.Diagrammer.ObjectMouseEventArgs"/> object.
            </summary>
            <param name="target">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that received the event.</param>
            <param name="layer">The <see cref="T:ILOG.Diagrammer.GraphicLayer"/> that raised the event.</param>
            <param name="button">One of the <see cref="T:System.Windows.Forms.MouseButtons"/> values indicating which mouse button was pressed.</param>
            <param name="loc">The coordinates of the mouse event.</param>
            <param name="clicks">The number of times a mouse button was pressed or released.</param>
        </member>
        <member name="M:ILOG.Diagrammer.ObjectMouseEventArgs.GetTransformToView(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Gets the transformation to convert from the specified object coordinate system to the view coordinate system.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</returns>
        </member>
        <member name="P:ILOG.Diagrammer.ObjectMouseEventArgs.Button">
            <summary>
            Gets which mouse button was pressed.
            </summary>
            <value>One of the <see cref="T:System.Windows.Forms.MouseButtons"/> values indicating which mouse button was pressed.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ObjectMouseEventArgs.Location">
            <summary>
            Gets the coordinates of the mouse.
            </summary>
            <value>The coordinates of the mouse, in the view coordinate system.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ObjectMouseEventArgs.Clicks">
            <summary>
            Gets the number of times a mouse button was pressed or released.
            </summary>
            <value>The number of times a mouse button was pressed or released.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ObjectMouseEventArgs.CurrentTargetLocation">
            <summary>
            Gets the coordinates of the mouse in the <see cref="P:ILOG.Diagrammer.ObjectEventArgs.CurrentTarget"/>  coordinate system.
            </summary>
            <value>The coordinates of the mouse, in the <see cref="P:ILOG.Diagrammer.ObjectEventArgs.CurrentTarget"/> coordinate system.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ObjectMouseEventArgs.TargetLocation">
            <summary>
            Gets the coordinates of the mouse in the <see cref="P:ILOG.Diagrammer.ObjectEventArgs.Target"/>  coordinate system.
            </summary>
            <value>The coordinates of the mouse, in the <see cref="P:ILOG.Diagrammer.ObjectEventArgs.Target"/> coordinate system.</value>
        </member>
        <member name="T:ILOG.Diagrammer.ObjectMouseEventHandler">
            <summary>
            Represents the method that handles one of the various Mouse events of a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
            <seealso cref="E:ILOG.Diagrammer.GraphicObject.MouseDown"/>
            <seealso cref="E:ILOG.Diagrammer.GraphicObject.PreviewMouseDown"/>
            <seealso cref="E:ILOG.Diagrammer.GraphicObject.MouseUp"/>
            <seealso cref="E:ILOG.Diagrammer.GraphicObject.PreviewMouseUp"/>
            <seealso cref="E:ILOG.Diagrammer.GraphicObject.MouseMove"/>
            <seealso cref="E:ILOG.Diagrammer.GraphicObject.PreviewMouseMove"/>
            <seealso cref="E:ILOG.Diagrammer.GraphicObject.MouseEnter"/>
            <seealso cref="E:ILOG.Diagrammer.GraphicObject.MouseLeave"/>
            <seealso cref="E:ILOG.Diagrammer.GraphicObject.MouseClick"/>
            <seealso cref="E:ILOG.Diagrammer.GraphicObject.PreviewMouseClick"/>
        </member>
        <member name="T:ILOG.Diagrammer.Design.TransformConverter">
            <summary>
            Defines a <see cref="T:System.ComponentModel.TypeConverter"/> for the <see cref="T:ILOG.Diagrammer.Transform"/> class.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Design.SubDiagramIconConverter">
            <summary>
            A custom converter for the properties of type <see cref="T:ILOG.Diagrammer.Graphic.SubDiagramIcon"/> in a <see cref="T:ILOG.Diagrammer.Graphic.SubDiagram"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Design.SubDiagramIconImageConverter">
            <summary>
            Custom converter for the <see cref="P:ILOG.Diagrammer.Graphic.SubDiagramIcon.Image"/> property.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Design.SubDiagramIconXmlSerializer">
            <summary>
            Custom XML serializer to serialize <see cref="T:ILOG.Diagrammer.Graphic.SubDiagramIcon"/> image definitions as base64 strings.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvDirectLinkShapeType.GetToNodeSide(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvDirectLinkShapeType.GetFromNodeSide(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvDirectLinkShapeType.GetReversedShapeType">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvOrthogonalLinkShapeType.ComputeIntermediatePoints(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData,ILOG.Diagrammer.GraphLayout.Internal.InternalRect,ILOG.Diagrammer.GraphLayout.Internal.InternalRect,ILOG.Diagrammer.GraphLayout.Internal.SLLayout.SLNodeSide,ILOG.Diagrammer.GraphLayout.Internal.SLLayout.SLNodeSide,ILOG.Diagrammer.GraphLayout.Internal.InternalPoint,ILOG.Diagrammer.GraphLayout.Internal.InternalPoint,System.Single)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvOrthogonalLinkShapeType.GetToNodeSide(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvOrthogonalLinkShapeType.GetFromNodeSide(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvOrthogonalLinkShapeType.GetReversedShapeType">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvOrthogonalLinkShapeType.GetNumberOfBends">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvOneBendLinkShapeType.GetToNodeSide(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvOneBendLinkShapeType.GetFromNodeSide(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvOneBendLinkShapeType.GetReversedShapeType">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvTwoBendLinkShapeType.GetToNodeSide(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvTwoBendLinkShapeType.GetFromNodeSide(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvTwoBendLinkShapeType.GetReversedShapeType">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvTwoBendSameSide.GetToNodeSide(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvTwoBendSameSide.GetFromNodeSide(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvTwoBendDifferentSide.GetToNodeSide(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvTwoBendDifferentSide.GetFromNodeSide(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvTwoBendDifferentSide.GetReversedShapeType">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvThreeBendLinkShapeType.GetToNodeSide(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvThreeBendLinkShapeType.GetFromNodeSide(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvThreeBendLinkShapeType.GetReversedShapeType">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvFourBendLinkShapeType.GetToNodeSide(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvFourBendLinkShapeType.GetFromNodeSide(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvFourBendLinkShapeType.GetReversedShapeType">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvFourBendSameSide.GetToNodeSide(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkShapeType.IlvFourBendSameSide.GetFromNodeSide(ILOG.Diagrammer.GraphLayout.Internal.SLLayout.LinkData)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.HierarchicalLevelRangeConstraint">
             <summary>
             The class <strong>HierarchicalLevelRangeConstraint</strong> is a
             constraint that forces the node to be placed at a level with index
             within the specified range.
             </summary>
             <remarks>
              Nodes are organized in horizontal or vertical levels numbered from 0
             to "n". If the link flow direction is from top to bottom, the nodes
             with level index 0 are placed in the topmost level, and the nodes
             with higher level indices are placed in the levels below. If the link
             flow direction is from left to right, the nodes with level index 0
             are placed in the leftmost level, and the nodes with higher level
             indices are placed in the levels farther to the right. 
             <p>
             For instance, a level range constraint with minimal index 5 and
             maximal index 7 causes the node to be placed at level with index 5,
             6, or 7. A level range with minimal index 6 and maximal index 6
             causes the node to be placed exactly at level 6. This has the same
             effect as specifying the node level index 6 by
             <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetSpecNodeLevelIndex(System.Object,System.Int32)"/>.  
             </p>
             <p>
             The constraint is evaluated, if the incremental mode is disabled. If
             the incremental mode is enabled, the constraint is only evaluated if
             the constraint node is marked for incremental recalculation, because
             otherwise, the incremental positions of the nodes are dominant. 
             </p>
             <p>
             This kind of constraint is dominated by same level constraints and
             group spread constraints, that is, two nodes cannot have different
             level ranges while being forced to the same level. The constraint has
             higher priority than any relative level constraints. 
             </p>
             <p>
             The automatic conflict resolution can handle conflicting constraints.
             However, to speedup the layout, it is recommended to specify
             constraints in a way such that there are no conflicts.  
             </p>
             <p>
             Note that empty levels are invisible after layout. For instance a
             node with level range constraint to be placed at level 2 may appear
             to be placed in the topmost level, if level 0 and 1
             don't contain any other nodes. 
             </p>
             <p>
             </p>
             </remarks>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MarkForIncremental(System.Object)"/>
             <example>
             <para lang="cs,vbnet">The following example shows how to use
             the constraint to place the node in a level 5, 6, or 7.
             </para>
             <code lang="cs">
             using System;
             using ILOG.Diagrammer;
             using ILOG.Diagrammer.Graphic;
             using ILOG.Diagrammer.GraphLayout;
            
             // node is part of group
             Group group = ...;
             GraphicObject node = ...;
            
             HierarchicalLayout layout = new HierarchicalLayout();
             group.GraphLayout = layout;
            
             layout.Constraints.Add(
                 new HierarchicalLevelRangeConstraint(node, 5, 7));
             group.PerformGraphLayout();
             </code>
             <code lang="vbnet">
             Imports System
             Imports ILOG.Diagrammer
             Imports ILOG.Diagrammer.Graphic
             Imports ILOG.Diagrammer.GraphLayout
            
             ' node is part of group
             Dim group As Group = ...
             Dim node As GraphicObject = ...
            
             Dim layout As HierarchicalLayout = New HierarchicalLayout
             group.GraphLayout = layout
            
             layout.Constraints.Add(
                 New HierarchicalLevelRangeConstraint(node, 5, 7))
             group.PerformGraphLayout
             </code>
             </example>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLevelRangeConstraint.#ctor(System.Object,System.Int32,System.Int32)">
            <summary>
            Creates a new <strong>HierarchicalLevelRangeConstraint</strong>.
            </summary>
            <param name="nodeOrGroup"> A node, or a group of type
            <strong>HierarchicalNodeGroup</strong>, that should be placed in the
            specified level range.
            </param>
            <param name="minLevel"> The lower bound of the level range, or
            <strong>HierarchicalConstraint.Unspecified</strong> if no lower bound is
            needed.
            </param>
            <param name="maxLevel"> The upper bound of the level range, or
            <strong>HierarchicalConstraint.Unspecified</strong> if no upper bound is
            needed.
            </param>
            <example>
            <para lang="cs,vbnet">The following examples shows how to use
            the constraint.
            It forces <strong>node1</strong> to be in level 5, 6, or
            7, and <strong>node2</strong>  to be in a level with index greater
            or equal to 5, and <strong>node3</strong> to be in a level with
            index smaller or equal to 7.
            </para>
            <code lang="cs">
            layout.Constraints.Add(new HierarchicalLevelRangeConstraint(node1, 5, 7));
            layout.Constraints.Add(new HierarchicalLevelRangeConstraint(node2,
                                        5, HierarchicalConstraint.Unspecified));
            layout.Constraints.Add(new HierarchicalLevelRangeConstraint(node3,
                                        HierarchicalConstraint.Unspecified, 7));
            </code>
            <code lang="vbnet">
            layout.Constraints.Add(New HierarchicalLevelRangeConstraint(node1, 5, 7))
            layout.Constraints.Add(New HierarchicalLevelRangeConstraint(node2,
                                        5, HierarchicalConstraint.Unspecified))
            layout.Constraints.Add(New HierarchicalLevelRangeConstraint(node3,
                                        HierarchicalConstraint.Unspecified, 7))
            </code>
            </example>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLevelRangeConstraint.SetLevelRange(System.Int32,System.Int32)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLevelRangeConstraint.#ctor(ILOG.Diagrammer.GraphLayout.HierarchicalLevelRangeConstraint)">
            <summary>
            Creates a new <strong>HierarchicalLevelRangeConstraint</strong> by
            copying an existing one.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name='source'> The origin of the copy.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLevelRangeConstraint.Copy">
            <summary>
            Copies the constraint.
            </summary>
            <remarks>  
            <p>
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLevelRangeConstraint.GetSubject">
            <summary>
            Returns the subject of this constraint.
            </summary>
            <remarks>
            This is either the constraint node, or the instance of
            <strong>HierarchicalNodeGroup</strong> that describes a group of
            nodes. 
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLevelRangeConstraint.SetLevelRange(System.Int32,System.Int32)">
            <summary>
            Sets the level range suitable for the subject of this constraint
            (that is, for the node or the group of nodes).
            </summary>
            <param name="minLevel"> The lower bound of the level range, or
            <strong>HierarchicalConstraint.Unspecified</strong> if no lower bound is
            needed.
            </param>
            <param name="maxLevel"> The upper bound of the level range, or
            <strong>HierarchicalConstraint.Unspecified</strong> if no upper bound is
            needed.
            </param>
            <example>
            <para lang="cs,vbnet">The following examples shows how to set
            the level range.
            The first statement forces the node or node group to be
            level 5, 6, or 7. The second statement forces the node or node group
            to be in a level with index greater or equal to 5. The third
            statement forces the node or node group to be in a level with index
            smaller or equal to 7.
            </para>
            <code lang="cs">
            constraint1.SetLevelRange(5, 7);
            constraint2.SetLevelRange(5, HierarchicalConstraint.Unspecified);
            constraint3.SetLevelRange(HierarchicalConstraint.Unspecified, 7);
            </code>
            <code lang="vbnet">
            constraint1.SetLevelRange(5, 7)
            constraint2.SetLevelRange(5, HierarchicalConstraint.Unspecified)
            constraint3.SetLevelRange(HierarchicalConstraint.Unspecified, 7)
            </code>
            </example>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLevelRangeConstraint.MinLevel"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLevelRangeConstraint.MaxLevel"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLevelRangeConstraint.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalLevelRangeConstraint"/> class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLevelRangeConstraint.MinLevel">
            <summary>
            Gets or sets the minimal level index suitable for the subject of
            this constraint (that is, for the node or the group of nodes).
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLevelRangeConstraint.SetLevelRange(System.Int32,System.Int32)"/>
            <value>The minimal level index suitable for the subject of this
            constraint (that is, for the node or the group of nodes).
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLevelRangeConstraint.MaxLevel">
            <summary>
            Gets or sets the maximal level index suitable for the subject of
            this constraint (that is, for the node or the group of nodes).
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLevelRangeConstraint.SetLevelRange(System.Int32,System.Int32)"/>
            <value>The maximal level index suitable for the subject of this
            constraint (that is, for the node or the group of nodes).
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.Overview">
            <summary>
            Represents an overview of a <see cref="T:ILOG.Diagrammer.IDiagramView"/>.
            </summary>
            <remarks>The <see cref="T:ILOG.Diagrammer.Windows.Forms.Overview"/> class is a Windows Forms control that displays the overview of a
            <see cref="T:ILOG.Diagrammer.IDiagramView"/>. Use the <see cref="P:ILOG.Diagrammer.Windows.Forms.Overview.ControlView"/> property to connect this overview to a
            <strong>IDiagramView</strong>.</remarks>
            <example>
            <para lang="cs,vbnet">The following sample shows how to display a <see cref="T:ILOG.Diagrammer.Graphic.Group"/> in a
            <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> controlled by an <see cref="T:ILOG.Diagrammer.Windows.Forms.Overview"/>.</para>
            <code lang="cs">
            Group container = new Group();
            Ellipse ellipse = new Ellipse(0, 0, 100, 100);
            container.Objects.Add(ellipse);
            DiagramView view = new DiagramView();
            view.AutoSizeContent = true;
            view.Content = container;
            Overview oview = new Overview();
            oview.ControlView = view;
            </code>
            <code lang="vbnet">
            Dim container As Group = New Group
            Dim ellipse As Ellipse = New Ellipse(0, 0, 100, 100)
            container.Objects.Add(ellipse)
            Dim view As DiagramView = New DiagramView
            view.AutoSizeContent = true
            view.Content = container
            Dim oview As Overview = New Overview
            oview.ControlView = view
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.GraphicContainer"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.DiagramView">
            <summary>
            Represents a Windows Form control that displays the content of a diagram.
            </summary>
            <remarks><p>The <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> is the Windows Form control that displays the content of a
            <see cref="T:ILOG.Diagrammer.GraphicContainer"/>. Use the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Content"/> property to specify the container to
            display.</p>
            <p>The diagram view uses an affine transformation to allow zooming, panning and rotating the
            view. Use the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Transform"/> property to change this affine transformation.</p>
            <p>The diagram view has scrolling capabilites. Use the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.HScrollBar"/> and
            <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.VScrollBar"/> properties to specify the scrollbars visibility. You can also use
            the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.ContentBounds"/> and <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.ContentMargins"/> property to configure the
            scrollable area. By default, scrolling is enabled into the whole diagram view content.</p>
            <p>The <strong>DiagramView</strong> has a specific mode to display the whole diagram view
            content whatever its size is. Use the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.AutoSizeContent"/> property to switch to this mode.
            The <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.AutoSizeContentMode"/> is used to specify which policy to apply to make the
            view content always fully visible.</p>
            <p>The diagram view dispatches input events to the graphic objects its displays, or to a view interactor.
            A view interactor is a subclass of the <see cref="T:ILOG.Diagrammer.Windows.Forms.ViewInteractor"/> class. When a view interactor has
            been set using the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Interactor"/> property, the input events are no more sent to graphic objects.
            </p>
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample shows how to display a <see cref="T:ILOG.Diagrammer.Graphic.Group"/> in a
            <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.</para>
            <code lang="cs">
            Group container = new Group();
            Ellipse ellipse = new Ellipse(0, 0, 100, 100);
            container.Objects.Add(ellipse);
            DiagramView view = new DiagramView();
            view.AutoSizeContent = true;
            view.Content = container;
            </code>
            <code lang="vbnet">
            Dim container As Group = New Group
            Dim ellipse As Ellipse = New Ellipse(0, 0, 100, 100)
            container.Objects.Add(ellipse)
            Dim view As DiagramView = New DiagramView
            view.AutoSizeContent = true
            view.Content = container
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.ViewInteractor"/>
            <seealso cref="T:ILOG.Diagrammer.GraphicContainer"/>
        </member>
        <member name="T:ILOG.Diagrammer.IDiagramView">
            <summary>
            Describes the interface of a view that displays a <see cref="T:ILOG.Diagrammer.GraphicContainer"/>
            inside a rectangular area using an affine transformation.
            </summary>
            <remarks>
            A diagram view displays its <see cref="P:ILOG.Diagrammer.IDiagramView.Content"/> in a rectangular area whose size is defined by
            the <see cref="P:ILOG.Diagrammer.IDiagramView.ViewSize"/> property. The <see cref="P:ILOG.Diagrammer.IDiagramView.Transform"/> property can be used to change the 
            affine transformation applied by the view to its <strong>Content</strong>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.IDiagramView.Invalidate(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Invalidates the specified area in the view.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</param>
        </member>
        <member name="E:ILOG.Diagrammer.IDiagramView.ContentChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.IDiagramView.Content"/> property is changed on the host.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.IDiagramView.Content">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.GraphicContainer"/> displayed by this host.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> instance.</value>
        </member>
        <member name="E:ILOG.Diagrammer.IDiagramView.TransformChanging">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.IDiagramView.Transform"/> property is changing on the <see cref="T:ILOG.Diagrammer.IDiagramView"/>.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.IDiagramView.TransformChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.IDiagramView.Transform"/> property is changed on the <see cref="T:ILOG.Diagrammer.IDiagramView"/>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.IDiagramView.Transform">
            <summary>
            Gets the affine transformation of the <see cref="T:ILOG.Diagrammer.IDiagramView"/>.
            </summary>
            <value>A <see cref="P:ILOG.Diagrammer.IDiagramView.Transform"/> structure.</value>
        </member>
        <member name="P:ILOG.Diagrammer.IDiagramView.AdjustingTransform">
            <summary>
            Indicates whether the affine transformation of the view is being changed.
            </summary>
            <value><see langword="true"/> if the affine transformation of the view is being changed;
            otherwise, <see langword="false"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.IDiagramView.ViewSizeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.IDiagramView.ViewSize"/> property is changed on the view.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.IDiagramView.ViewSize">
            <summary>
            Gets the size of the view where the diagram is displayed.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Size2D"/> structure.</value>
        </member>
        <member name="P:ILOG.Diagrammer.IDiagramView.ContentBounds">
            <summary>
            Gets the bounds of the view content.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</value>
        </member>
        <member name="E:ILOG.Diagrammer.IDiagramView.ContentBoundsChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.IDiagramView.ContentBounds"/> property is changed on the view.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView.FlagScrollAdjustingTransform">
            <summary>
            Indicates that we are currently adjusting scrolling values.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView.FlagAntialiasing">
            <summary>
            Indicates whether the view uses antialiasing
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView.FlagKeepAspectRatio">
            <summary>
            Indicates whether the view maintains the aspect ratio
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView.FlagUpdatingScroll">
            <summary>
            Indicates whether we are in <strong>UpdateScroll</strong> method.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView.FlagWheelZoom">
            <summary>
            Flag indicating whether the view zoom in response to a movement of the mouse wheel.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView.FlagRecenterZoom">
            <summary>
            Flag indicating whether the view contents is recentered on a zoom out
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView.FlagInitializing">
            <summary>
            Flag indicating whether the view is in BeginInit/EndInit session
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView.FlagVScrollBarVisible">
            <summary>
            Flag indicating whether the vertical scrollbar is visible.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView.FlagHScrollBarVisible">
            <summary>
            Flag indicating whether the horizontal scrollbar is visible.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView.FlagAutoSizeContent">
            <summary>
            Flag indicating whether the horizontal scrollbar is visible.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView.FlagDispatchEvents">
            <summary>
            Flag indicating whether the input events are dispatched to objects.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView.FlagWheelScroll">
            <summary>
            Flag indicating whether the view scroll in response to a movement of the mouse wheel.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView.FlagAutoGrid">
            <summary>
            Flag indicating whether the grid is synchronized with the rulers
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView.FlagEvalMsg">
            <summary>
            Flag indicating whether the eval msg is displayed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._layers">
            <summary>
            The layers displayed by the view
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._contentLayer">
            <summary>
            Default layer for Contents
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._selectionLayer">
            <summary>
            Default layer for selection
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._interactionLayer">
            <summary>
            Default layer for selection
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._toolLayer">
            <summary>
            Default layer for selection
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._grid">
            <summary>
            Default layer for grid
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._hScrollBar">
            <summary>
            Horizontal scrollbar.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._vScrollBar">
            <summary>
            Vertical scrollbar.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._rectangleBetweenScrollBars">
            <summary>
            The control between the hor/ver scrollbars.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._vScrollBarVisibility">
            <summary>
            Visibility of vertical scrollbar.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._hScrollBarVisibility">
            <summary>
            Visibility of horizontal scrollbar.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._hRuler">
            <summary>
            Horizontal ruler.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._vRuler">
            <summary>
            Vertical ruler.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._rectangleBetweenRulers">
            <summary>
            The control between the hor/ver scrollbars.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._transform">
            <summary>
             The view transformer
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._borderStyle">
            <summary>
            The border style of the control.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._defaultZoomFactor">
            <summary>
            The default zoom factor
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._defaultWheelZoomFactor">
            <summary>
            The default zoom factor for mouse wheel
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._minZoom">
            <summary>
            The minimum zoom factor
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._maxZoom">
            <summary>
            The maximum zoom factor
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._cursor">
            <summary>
            Cursor of the view
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._updating">
            <summary>
            A counter indicating whether invalidation is disabled.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._tooltip">
            <summary>
            The tooltip manager.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._currentTooltipArea">
            <summary>
            The object that is currently holding the tooltip.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._interactor">
            <summary>
            The interactor on the view.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._contentBounds">
            <summary>
            The bounds of the scrollable area.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._showTooltip">
            <summary>
            Whether the objects tooltips should be displayed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._license">
            <summary>
            The license...
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramView._flags">
            <summary>
            Contains flag indicators.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)">Control.Dispose</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.SetFlag(System.UInt16,System.Boolean)">
            <summary>
            Sets or unsets the value of a flag.
            </summary>
            <param name="flag">The flag value.</param>
            <param name="value">The value of the flag</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.GetFlag(System.UInt16)">
            <summary>
            Gets the value of a flag.
            </summary>
            <param name="flag">The flag.</param>
            <returns>The value of a flag.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.UpdateRulers">
            <summary>
            Updates the vertical and horizontal rulers.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnRulerTickColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerTickColorChanged"/> event.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerTickColor"/> property is changed on the control.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnRulerTextColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerTextColorChanged"/> event.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerTextColor"/> property is changed on the control.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnRulerBackColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerBackColorChanged"/> event.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerBackColor"/> property is changed on the control.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnRulerUnitChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerUnitChanged"/> event.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerUnit"/> property is changed on the control.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnAutoGridChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.AutoGridChanged"/> event.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.AutoGrid"/> property is changed on the control.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnRulerVisibilityChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerVisibilityChanged"/> event.
            </summary>
            <remarks>Called when the rulers visibility is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnRulerSelectionColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerSelectionColorChanged"/> event.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerSelectionColor"/> property is changed on the control.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnRulerMarkerColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerMarkerColorChanged"/> event.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerMarkerColor"/> property is changed on the control.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnRulerSelectionVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerSelectionVisibleChanged"/> event.
            </summary>
            <remarks>Called when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerSelectionVisible"/> property is changed on the control.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnConvertRulerUnit(ILOG.Diagrammer.Windows.Forms.ConvertRulerUnitEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.ConvertRulerUnit"/> event.
            </summary>
            <remarks>This method is called only if the property <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerUnit"/> is <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerUnit">RulerUnit.Custom</see>.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.CreateScrollBars">
            <summary>
            Creates vertical and horizontal scrollbars.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">Control.SetBoundsCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnSizeChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)">Control.OnSizeChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.UpdateScrollBarForcedVisibility(ILOG.Diagrammer.Windows.Forms.ScrollBarVisibility,System.UInt16)">
            <summary>
            Sets the visibility of a scrollbar to visible or invisible.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.IsVerticalScrollBarNeeded">
            <summary>
            Checks if the vertical scrollbar is needed.
            </summary>
            <remarks>The computation takes into account the visibility status
            of the other scrollbar.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.IsHorizontalScrollBarNeeded">
            <summary>
            Checks if the horizontal scrollbar is needed.
            </summary>
            <remarks>The computation takes into account the visibility status
            of the other scrollbar.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.UpdateScrollBarVisibility(System.Boolean)">
            <summary>
            Updates the visibility of scrollbar.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnScrollBarVisibilityChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.ScrollBarVisibilityChanged"/> event.
            </summary>
            <remarks>Called when the scrollbars visibility is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnViewSizeChanged(System.EventArgs)">
            <summary>
            Invoked when the size of the view is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.UpdateScroll">
            <summary>
            Updates the scrolling status of the component.
            <para>The method also updates the visibility of scrollbars.</para>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.UpdateScroll(System.Boolean)">
            <summary>
            Updates the scrolling status of the component.
            <para>The method also updates the visibility of scrollbars.</para>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.LayoutScrollBars">
            <summary>
            Places the scrollbars depending on the orientation.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnFontChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)">Control.OnFontChanged</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnParentFontChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)">Control.OnParentFontChanged</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnHandleCreated(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">Control.OnHandleCreated</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.FireEvent(System.Object,System.EventArgs)">
            <summary>
            Fires an event based on key in the Events list.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnCreateControl">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnCreateControl">Control.OnCreateControl</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnDispatchEventsToObjectsChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.DispatchEventsToObjects"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnShowObjectToolTipsChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.ShowObjectToolTips"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnAutoSizeContentModeChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.AutoSizeContentMode"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>UpdateOnInputEvent</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnAutoSizeContentChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.AutoSizeContent"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>UpdateOnInputEvent</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnTransformChanging(ILOG.Diagrammer.TransformChangeEventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Transform"/> property is changing on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>Transform</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnTransformChanged(ILOG.Diagrammer.TransformChangeEventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Transform"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>Transform</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnKeepAspectRatioChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.KeepAspectRatio"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>KeepAspectRatio</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnMinimumZoomChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.MinimumZoom"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>MinimumZoom</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnMaximumZoomChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.MaximumZoom"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>MaximumZoom</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnRecenterZoomChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RecenterZoom"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>RecenterZoom</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnDefaultZoomFactorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.DefaultZoomFactor"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>DefaultZoomFactor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnWheelZoomChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.WheelZoom"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>WheelZoom</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnWheelScrollChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.WheelScroll"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>WheelScroll</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnDefaultMouseWheelZoomFactorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.DefaultMouseWheelZoomFactor"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>DefaultMouseWheelZoomFactor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnInteractorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Interactor"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>Interactor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnInfiniteScrollChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.InfiniteScroll"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>InfiniteScroll</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnInstantScrollChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.InstantScroll"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>InstantScroll</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ResetBackColor">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.BackColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ResetForeColor">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.ForeColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnBorderStyleChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.BorderStyle"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>BorderStyle</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnAntialiasingChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Antialiasing"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>Antialiasing</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnContentChanged(ILOG.Diagrammer.ContentChangeEventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Content"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>Content</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnContentBoundChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.ContentBoundsChanged"/> event.
            </summary>
            <param name="args">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ToBitmap(System.Int32,System.Int32)">
            <summary>
            Returns a Bitmap rendering of the view overall content.
            </summary>
            <param name="width"> An int value that represents the bitmap width.</param>
            <param name="height">An int value that represents the bitmap height.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> rendering of the view content.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ToBitmap(System.Int32,System.Int32,System.Boolean,System.Drawing.Color,System.Boolean)">
            <summary>
            Returns a Bitmap rendering of the view content.
            </summary>
            <param name="width"> An int value that represents the bitmap width.</param>
            <param name="height">An int value that represents the bitmap height.</param>
            <param name="keepAspectRatio"><see langword="true"/> if the rendering should keep the content aspect ratio,
            <see langword="false"/> otherwise.</param>
            <param name="background">A <see cref="T:System.Drawing.Color"/> instance that represents the image background color. A value <see cref="F:System.Drawing.Color.Empty"/> specifies a transparent background.</param>
            <param name="visibleArea"><see langword="true"/> to render only the visible area of the view 
            content, <see langword="false"/> to render the overall content.</param>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> rendering of the view content.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ToBitmap(System.Drawing.Bitmap,System.Boolean,System.Boolean)">
            <summary>
            Renders the view content in the specified Bitmap.
            </summary>
            <param name="bitmap"> A <see cref="T:System.Drawing.Bitmap"/> instance into which the view is rendered.</param>
            <param name="keepAspectRatio"><see langword="true"/> if the rendering should keep the content aspect ratio,
            <see langword="false"/> otherwise.</param>
            <param name="visibleArea"><see langword="true"/> to render only the visible area of the view 
            content, <see langword="false"/> to render the overall content.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ToBitmap(System.Drawing.Bitmap,ILOG.Diagrammer.Rectangle2D,System.Boolean)">
            <summary>
            Renders the specified area of the view content in the specified Bitmap.
            </summary>
            <param name="bitmap"> A <see cref="T:System.Drawing.Bitmap"/> instance into which the view is rendered.</param>
            <param name="keepAspectRatio"><see langword="true"/> if the rendering should keep the content aspect ratio,
            <see langword="false"/> otherwise.</param>
            <param name="contentArea">A Rectangle2D structure expressed in the view content coordinate system that
            indicates the content area to render.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">Control.OnPaint</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnGridChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Grid"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>Grid</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.SnapToPoint(ILOG.Diagrammer.Point2D)">
            <summary>
            Snaps the specified point onto the nearest point of the grid view.
            </summary>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</param>
            <returns>The nearest <see cref="T:ILOG.Diagrammer.Point2D"/> located on the grid view.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.StartAutoScroll(System.Drawing.Point)">
            <summary>
            Starts an automatic scrolling of the view.
            </summary>
            <param name="p">The point used to compute the scrolling direction and speed.</param>
            <remarks>The <paramref name="p"/> parameter must be outside the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.ViewRectangle"/> bounds to start the automatic scrolling.
            The view will be scrolled to make <paramref name="p"/> visible.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.StopAutoScroll">
            <summary>
            Stops the automatic scrolling initiated by calling <see cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.StartAutoScroll(System.Drawing.Point)"/>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnOptimizedScrollingChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.OptimizedScrolling"/> property has changed
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.InternalSetTransform(ILOG.Diagrammer.Transform)">
            <summary>
            Sets the transform of the view, whithout testing equality with current
            transform.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.CheckMinMaxZoom(ILOG.Diagrammer.Transform)">
            <summary>
            Verifies that transform is within the min/max zoom range.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.Zoom(System.Drawing.Point,System.Single,System.Single)">
            <summary>
            Zooms the view around the specified point.
            </summary>
            <param name="point">The point that stays fixed.</param>
            <param name="sx">The scaling along the x-axis.</param>
            <param name="sy">The scaling along the y-axis.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ZoomOut(System.Drawing.Point)">
            <summary>
            Zooms the view out around the specified point.
            </summary>
            <param name="p">The point that stays fixed.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ZoomIn(System.Drawing.Point)">
            <summary>
            Zooms the view in around the specified point.
            </summary>
            <param name="p">The point that stays fixed.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ZoomOut">
            <summary>
            Zooms the view out around the center of this view.
            </summary>
            <remarks> The method zooms the view out and leaves the center of the view unchanged.
            The zoom level is changed according to the value of the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.DefaultZoomFactor"/>
            property. Note that if the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RecenterZoom"/> is <see langword="true"/> and
            all the content can be displayed, the content will be recentered in the middle of the view. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ZoomIn(System.Drawing.Point)"/>
            <seealso cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.DefaultZoomFactor"/>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ZoomIn">
            <summary>
            Zooms the view in around the center of this view.
            </summary>
            <remarks> The method zooms the view in and leaves the center of the view unchanged.
            The zoom level is changed according to the value of the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.DefaultZoomFactor"/>
            property. 
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.DefaultZoomFactor"/>
            <seealso cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ZoomIn(System.Drawing.Point)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ShowAll">
            <summary>
            Zooms the view so that all the view content becomes visible.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ShowAllInRectangle(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Zooms the view so that all the view content becomes visible in the specified
            rectangle.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.EnsureVisible(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Scrolls the view to make sure that the specified object is visible.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <returns><see langword="true"/> if the view was scrolled; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.EnsureVisible(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Scrolls the view to make sure that the specified rectangle is visible.
            </summary>
            <param name="r">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</param>
            <returns><see langword="true"/> if the view was scrolled; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.EnsureVisible(ILOG.Diagrammer.Point2D)">
            <summary>
            Scrolls the view so that the specified point becomes visible.
            </summary>
            <param name="point">The point to make visible.</param>
            <returns><see langword="true"/> if the view was scrolled; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.Translate(System.Single,System.Single)">
            <summary>
            Translates the view.
            </summary>
            <remarks>This method translates the transform of the view.</remarks>
            <param name="dx">The x translation in the view coordinate system.</param>
            <param name="dy">The y translation in the view coordinate system.</param>
            <returns><see langword="true"/> if the view was scrolled; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.GetSelectedObjects">
            <summary>
            Returns an array containing the <see cref="T:ILOG.Diagrammer.GraphicObject"/> selected in this view.
            </summary>
            <returns>An array containing the <see cref="T:ILOG.Diagrammer.GraphicObject"/> selected in this view.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnSelectionChanged(ILOG.Diagrammer.SelectionChangedEventArgs)">
            <summary>
            Invoked when graphic objects are selected or de-selected.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.SelectionChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.RemoveSelection">
            <summary>
            Removes the selected objects from their container.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.BeginUpdate">
            <summary>
            Disables any redrawing of the control.
            </summary>
            <remarks>
            To maintain performance while several modifications are occuring,
            call the <strong>BeginUpdate</strong> method. The <strong>BeginUpdate</strong> method
            prevents the control from painting until the <see cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.EndUpdate"/> method is called.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.EndUpdate">
            <summary>
            Enables the redrawing of the control.
            </summary>
            <remarks>
            To maintain performance while several modifications are occuring,
            call the <strong>BeginUpdate</strong> method. The <strong>BeginUpdate</strong> method
            prevents the control from painting until the <see cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.EndUpdate"/> method is called.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.RestoreCursor">
            <summary>
            Restores the current cursor displayed 
            by the view to the cursor of the view.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Cursor"/>
            <seealso cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.CurrentCursor"/>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.CaptureMouse(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Sets the mouse capture on the specified graphic object. 
            </summary>
            <remarks>When an object has captured the mouse, it receives all mouse events whether or not the cursor is within its borders until <c>ReleaseMouseCapture</c> is called.
            </remarks>
            <param name="target">The object that captures the mouse.</param>
            <seealso cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ReleaseMouseCapture"/>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ReleaseMouseCapture">
            <summary>
            Releases the mouse capture.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.CaptureMouse(ILOG.Diagrammer.GraphicObject)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.CaptureKey(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Sets the keyboard capture on the specified graphic object. 
            </summary>
            <remarks>When an object has captured the keyboard, it receives all key inputs whether or not the cursor is within its borders until <c>ReleaseMouseCapture</c> is called.
            </remarks>
            <param name="target">The object that captures the keyboard.</param>
            <seealso cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ReleaseMouseCapture"/>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ReleaseKeyCapture">
            <summary>
            Releases the keyboard capture.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.CaptureLayer(ILOG.Diagrammer.GraphicLayer)">
            <summary>
            Sets the layer capture on the specified layer.
            </summary>
            <param name="layer">A <see cref="T:ILOG.Diagrammer.GraphicLayer"/> instance.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ReleaseLayerCapture">
            <summary>
            Releases the layer capture.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnInteractionException(System.UnhandledExceptionEventArgs)">
            <summary>  
            Invoked when an exception has occurred during an interaction in the control.  
            </summary>  
            <param name="args">An <see cref="T:System.UnhandledExceptionEventArgs"/> that contains the event data.</param>  
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"/> event.
            </summary>
            <remarks>The event is dispatched to the graphic object that has the keyboard capture.</remarks>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
            <seealso cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.CaptureKey(ILOG.Diagrammer.GraphicObject)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyUp"/> event.
            </summary>
            <remarks>The event is dispatched to the graphic object that has the keyboard capture.</remarks>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
            <seealso cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.CaptureKey(ILOG.Diagrammer.GraphicObject)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyPress"/> event.
            </summary>
            <remarks>The event is dispatched to the graphic object that has the keyboard capture.</remarks>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyPressEventArgs"/> that contains the event data.</param>
            <seealso cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.CaptureKey(ILOG.Diagrammer.GraphicObject)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseClick"/> event.
            </summary>
            <remarks>The event is dispatched to the view interactor if one exists.</remarks>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseClick"/> event.
            </summary>
            <remarks>The event is dispatched to the view interactor if one exists.</remarks>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseUp"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseEnter"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">Control.ProcessCmdKey</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)">Control.ProcessDialogKey</see>
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">Control.IsInputKey</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ProcessKeyPreview(System.Windows.Forms.Message@)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)">Control.ProcessKeyPreview</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.CreateDrawingContext">
            <summary>
            Creates and returns a new <see cref="T:ILOG.Diagrammer.DrawingContext"/> that can be used to draw in this view.
            </summary>
            <returns>A new <see cref="T:ILOG.Diagrammer.DrawingContext"/> instance.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.HitTestSelection(System.Drawing.Point)">
            <summary>
            Returns the selection graphic object located at the specified point.
            </summary>
            <param name="point">A <see cref="T:System.Drawing.Point"/> structure.</param>
            <returns>The selection graphic object located at the specified point.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.HitTest(System.Drawing.Point)">
            <summary>
            Returns the graphic object located at the specified point.
            </summary>
            <param name="point">A <see cref="T:System.Drawing.Point"/> structure.</param>
            <returns>The graphic object located at the specified point.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.HitTestSelectable(System.Drawing.Point)">
            <summary>
            Returns the selectable graphic object located at the specified point.
            </summary>
            <param name="point">A <see cref="T:System.Drawing.Point"/> structure.</param>
            <returns>The selectable graphic object located at the specified point.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.GetIntersectObjects(System.Drawing.Region)">
            <summary>
            Returns the graphic objects intersecting the specified region.
            </summary>
            <param name="region">A <see cref="T:System.Drawing.Region"/> structure.</param>
            <returns>The graphic objects intersecting the specified region.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.GetIntersectObjects(System.Drawing.Region,ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Returns the graphic objects intersecting the specified region in the specified container.
            </summary>
            <param name="region">A <see cref="T:System.Drawing.Region"/> structure.</param>
            <param name="container">The <see cref="T:ILOG.Diagrammer.GraphicContainer"/> used to locate the objects.</param>
            <returns>The graphic objects intersecting the specified region.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)">Control.WndProc</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.CancelInteraction">
            <summary>
            Cancels any pending interaction.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.StartEditText(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Starts the editing of the specified <see cref="T:ILOG.Diagrammer.GraphicObject"/> text.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/>.</param>
            <remarks></remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.StopEditText(System.Boolean)">
            <summary>
            Stops the current text editing.
            </summary>
            <param name="validate"><see langword="true"/> to validate the text editing; Otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.ValidateTextEditing(ILOG.Diagrammer.GraphicObject,System.Windows.Forms.Control)">
            <summary>
            Is called to validate the text editing of the specified object.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <param name="control">The <see cref="T:System.Windows.Forms.Control"/> that was used to edit the text object.</param>
            <remarks>The default behavior sets the graphic object text to the <see cref="P:System.Windows.Forms.Control.Text"/> property.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.GetObjectRenderBounds(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Gets the bounds of the specified graphic object in view coordinate space.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.GetObjectToViewTransform(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Gets the transformation that converts coordinates expressed in the specified graphic object coordinate space 
            into view coordinate space.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.GetContainerToViewTransform(ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Gets the transformation that converts coordinates expressed in the specified graphic container children's coordinate space 
            into view coordinate space.
            </summary>
            <param name="container">A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> instance.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.GetViewToObjectTransform(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Gets the transformation that converts coordinates expressed in view coordinate space into the specified graphic
            object coordinate space.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.GetViewToContainerTransform(ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Gets the transformation that converts coordinates expressed in view coordinate space into the specified container
            children's object coordinate space.
            </summary>
            <param name="container">A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> instance.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.IsInitializing">
            <summary>
            Indicates whether we are in BeginInit/EndInit session.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.BeginInit">
            <summary>
            Begins the initialization of a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> that is used on a form or used
            by another component. The initialization occurs at run time.
            </summary>
            <remarks>The Visual Studio .NET design environment uses this method
            to start the initialization of a component that is used on a form
            or used by another component. The <see cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.EndInit"/> method ends the
            initialization. The use of <strong>BeginInit</strong> and <strong>EndInit</strong> methods prevents the
            control from being used before it is fully initialized.</remarks>	
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.EndInit">
            <summary>
            Ends the initialization of a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> that is used on a form or
            used by another component. The initialization occurs at run time.
            </summary>
            <remarks>
            The Visual Studio .NET design environment uses this method to end
            the initialization of a component that is used on a form or used by
            another component. The <see cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.BeginInit"/> method starts the initialization.
            The use of <strong>BeginInit</strong> and <strong>EndInit</strong> methods prevents the control
            from being used before it is fully initialized.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnFilterAnchors(ILOG.Diagrammer.FilterAnchorsEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.FilterAnchors"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.FilterAnchorsEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnGraphicObjectTextEditing(ILOG.Diagrammer.Windows.Forms.GraphicObjectEditTextEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.GraphicObjectTextEditing"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.GraphicObjectEditTextEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnGraphicObjectTextEdited(ILOG.Diagrammer.Windows.Forms.GraphicObjectEditTextEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.GraphicObjectTextEdited"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.GraphicObjectEditTextEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnCreateGhostGraphic(ILOG.Diagrammer.Windows.Forms.CreateGhostGraphicEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.CreateGhostGraphic"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateGhostGraphicEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnSelectedObjectMoving(ILOG.Diagrammer.Windows.Forms.ObjectMoveEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectMoving"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.ObjectMoveEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnSelectedObjectMoved(ILOG.Diagrammer.Windows.Forms.ObjectMoveEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectMoved"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.ObjectMoveEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnSelectedObjectResizing(ILOG.Diagrammer.Windows.Forms.ObjectResizeEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectResizing"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.ObjectResizeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnSelectedObjectResized(ILOG.Diagrammer.Windows.Forms.ObjectResizeEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectResized"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.ObjectResizeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnSelectedObjectReparenting(ILOG.Diagrammer.Windows.Forms.ObjectReparentEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectReparenting"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.ObjectReparentEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnSelectedObjectReparented(ILOG.Diagrammer.Windows.Forms.ObjectReparentEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectReparented"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.ObjectReparentEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnSelectedObjectCopying(ILOG.Diagrammer.Windows.Forms.ObjectCopyEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectCopying"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.ObjectCopyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnSelectedObjectCopied(ILOG.Diagrammer.Windows.Forms.ObjectCopyEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectCopied"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.ObjectCopyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnQueryLinkTarget(ILOG.Diagrammer.Windows.Forms.QueryLinkTargetEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.QueryLinkTarget"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.QueryLinkTargetEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnLinkCreated(ILOG.Diagrammer.Windows.Forms.LinkCreatedEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.LinkCreated"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.LinkCreatedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnLinkConnected(ILOG.Diagrammer.Windows.Forms.LinkConnectedEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.LinkConnected"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.LinkConnectedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnQueryDropTarget(ILOG.Diagrammer.Windows.Forms.QueryDropTargetEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.QueryDropTarget"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.QueryDropTargetEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnQuerySelectedObject(ILOG.Diagrammer.Windows.Forms.QuerySelectedObjectEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.QuerySelectedObject"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.QuerySelectedObjectEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnInteractionStarted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.InteractionStarted"/> event.
            </summary>
            <param name="args">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnInteractionValidated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.InteractionValidated"/> event.
            </summary>
            <param name="args">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnInteractionCanceled(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.InteractionCanceled"/> event.
            </summary>
            <param name="args">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.GetSelectionGraphic(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Returns the <see cref="T:ILOG.Diagrammer.SelectionGraphic"/> object used for the specific graphic object.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <returns>The <see cref="T:ILOG.Diagrammer.SelectionGraphic"/> object used for the specific graphic object, or <see langword="null"/>
            if <paramref name="obj"/> is not selected in this view.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnCreateSelectionGraphic(ILOG.Diagrammer.CreateSelectionGraphicEventArgs)">
            <summary>
            Invoked when a graphic object is selected to create a <see cref="T:ILOG.Diagrammer.SelectionGraphic"/>.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.CreateSelectionGraphicEventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.HRuler">
            <summary>
            Gets or sets the visibility of the horizontal ruler.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Windows.Forms.RulerVisibility"/> values.
            The default value is <strong>Hidden</strong>. </value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.VRuler">
            <summary>
            Gets or sets the visibility of the vertical ruler.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Windows.Forms.RulerVisibility"/> values.
            The default value is <strong>Hidden</strong>. </value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerTickColor">
            <summary>
            Gets or sets the color for the ruler ticks.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> structure.
            The default value is <strong>WindowText</strong>. </value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerTickColorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerTickColor"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerTextColor">
            <summary>
            Gets or sets the color for the ruler texts.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> structure.
            The default value is <strong>WindowText</strong>. </value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerTextColorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerTextColor"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerBackColor">
            <summary>
            Gets or sets the color for the ruler background.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> structure.
            The default value is <strong>Window</strong>. </value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerBackColorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerBackColor"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerUnit">
            <summary>
            Gets or sets the unit for the ruler background.
            </summary>
            <value>One of the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerUnit"/> values.
            The default value is <strong>RulerUnit.Pixels</strong>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerUnitChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerUnit"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.AutoGrid">
            <summary>
            Indicates whether the grid should be synchronized with the rulers.
            </summary>
            <value><see langword="true"/> if the grid is synchronized with the rulers. Otherwise, <see langword="false"/>.
            The default value is <strong>true</strong>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.AutoGridChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.AutoGrid"/> property is changed on the control.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerVisibilityChanged">
            <summary>
            Occurs when the visibility of rulers is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerSelectionColor">
            <summary>
            Gets or sets the color for the ruler selection area.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> structure.
            The default value is <strong>ControlDark</strong>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerSelectionColorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerSelectionColor"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerMarkerColor">
            <summary>
            Gets or sets the color for the ruler marker.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> structure.
            The default value is <strong>Red</strong>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerMarkerColorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerMarkerColor"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerSelectionVisible">
            <summary>
            Indicates whether the selection area of the rulers is visible.
            </summary>
            <value><see langword="true"/> if the selection area of the rulers is visible; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerSelectionVisibleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerSelectionVisible"/> property is changed on the control.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.ConvertRulerUnit">
            <summary>
            Occurs to convert values from ruler units to pixels, or vice versa.
            </summary>
            <remarks>This event is raised only if the property <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerUnit"/> is <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RulerUnit">RulerUnit.Custom</see>.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.ViewRectangle">
            <summary>
            Gets the rectangle that represents the area where the view contents is displayed.
            </summary>
            <value>A <see cref="T:System.Drawing.Rectangle"/> structure.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.VScrollBar">
            <summary>
            Gets or sets the visibility of the vertical scrollbar.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Windows.Forms.ScrollBarVisibility"/> values.
            The default value is <strong>AsNeeded</strong>. </value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.HScrollBar">
            <summary>
            Gets or sets the visibility of the horizontal scrollbar.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Windows.Forms.ScrollBarVisibility"/> values.
            The default value is <see cref="F:ILOG.Diagrammer.Windows.Forms.ScrollBarVisibility.AsNeeded"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.IsHScrollBarVisible">
            <summary>
            Gets a value indicating whether the horizontal scrollbar is visible.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.IsVScrollBarVisible">
            <summary>
            Gets a value indicating whether the vertical scrollbar is visible.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.ScrollBarVisibilityChanged">
            <summary>
            Occurs when the visibility of scrollbars is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.VScrollBarWidth">
            <summary>
            Gets the displayed width of the vertical scrollbar.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.HScrollBarHeight">
            <summary>
            Gets the displayed height of the horizontal scrollbar.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.VRulerWidth">
            <summary>
            Gets the displayed width of the vertical scrollbar.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.HRulerHeight">
            <summary>
            Gets the displayed height of the horizontal scrollbar.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.DefaultSize">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.DefaultSize">Control.DefaultSize</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RightToLeft">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.RightToLeft">Control.RightToLeft</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.CreateParams">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.CreateParams">Control.CreateParams</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.DispatchEventsToObjects">
            <summary>
            Gets or sets whether input events are dispatched to objects.
            </summary>
            <value>A boolean value that indicates whether input events are dispatched to objects.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.DispatchEventsToObjectsChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.DispatchEventsToObjects"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.ShowObjectToolTips">
            <summary>
            Gets or sets whether objects tooltips are displayed.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.ShowObjectToolTipsChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.ShowObjectToolTips"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.AutoSizeContentMode">
            <summary>
            Gets or sets the mode used to resize the content when the property <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.AutoSizeContent"/> is
            <see langword="true"/>.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.AutoSizeContentModeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.AutoSizeContentMode"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.AutoSizeContent">
            <summary>
            Indicates whether the view should scale its content to fit in it.
            </summary>
            <value><see langword="true"/> if the view should scale its content to fit in it;
            <see langword="false"/> otherwise.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.AutoSizeContentChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.AutoSizeContent"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Transform">
            <summary>
            Gets or sets the affine transformation of the view.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Transform"/> structure that represents the affine transformation
            used to draw the view content.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.TransformChanging">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Transform"/> property is changed on the control.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.TransformChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Transform"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.KeepAspectRatio">
            <summary>
            Indicates whether the view maintains the aspect ratio of the canvas.
            </summary>
            <value><see langword="true"/> if the aspect ration of the canvas is maintained;
            <see langword="false"/> otherwise.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.KeepAspectRatioChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.KeepAspectRatio"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.MinimumZoom">
            <summary>
            Gets or sets the minimum zoom for the view.
            </summary>
            <value>A float value that represents the minimum zoom for the view. The
            default value is 0.01.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.MinimumZoomChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.MinimumZoom"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.MaximumZoom">
            <summary>
            Gets or sets the maximum zoom for the view.
            </summary>
            <value>A float value that represents the maximum zoom for the view. The
            default value is <strong>1000</strong>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.MaximumZoomChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.MaximumZoom"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RecenterZoom">
            <summary>
            Indicates whether the view content is automatically recentered in the view when zooming in or out.
            </summary>
            <value>A boolean value that indicates whether the view content is automatically recentered
            in the view when the view is zoomed-in or zoomed-out so that all the content can be visible. The default value
            is <see langword="true"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.RecenterZoomChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.RecenterZoom"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.DefaultZoomFactor">
            <summary>
            Gets or sets the default zoom factor.
            </summary>
            <value>A float value that represents the zoom factor used by default when zooming in or out. The
            default value is 1.5. The value must be greater than 1.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.DefaultZoomFactorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.DefaultZoomFactor"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.WheelZoom">
            <summary>
            Indicates whether the view can be zoomed in and out using the mouse wheel.
            </summary>
            <value>A boolean value that indicated whether  the view can be zoomed in and out using the mouse wheel. 
            The default value is <see langword="true"/></value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.WheelZoomChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.WheelZoom"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.WheelScroll">
            <summary>
            Indicates whether the view can be scrolled using the mouse wheel.
            </summary>
            <value>A boolean value that indicated whether the view can be scrolled using the mouse wheel. 
            The default value is <see langword="true"/></value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.WheelScrollChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.WheelScroll"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.DefaultMouseWheelZoomFactor">
            <summary>
            Gets or sets the default zoom factor use for the mouse wheel zoom.
            </summary>
            <value>A float value that represents the zoom factor used by default when zooming in or out with the
            mouse wheel. The
            default value is 1.2. The value must be greater than 1.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.DefaultMouseWheelZoomFactorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.DefaultMouseWheelZoomFactor"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Interactor">
            <summary>
            Gets or sets the view interactor of the view.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Windows.Forms.ViewInteractor"/> that handles the input events on the view.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.InteractorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Interactor"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.InfiniteScroll">
            <summary>
            Indicates whether infinite scrolling is allowed using the scrollbar arrows.
            </summary>
            <value><see langword="true"/> if infinite scrolling is allowed; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.InfiniteScrollChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.InfiniteScroll"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.InstantScroll">
            <summary>
            Indicates whether scrolling the view using the scrollbars is instantaneous.
            </summary>
            <value><see langword="true"/> if the scrolling is instantaneous; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.InstantScrollChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.InstantScroll"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.BackColor">
            <summary>
            Gets or sets the background color of the view.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> that represents the color of rows in the grid.
            The default value is the system color for windows (<see cref="P:System.Drawing.SystemColors.Window">SystemColors.Window</see>).
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.ForeColor">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.ForeColor">Control.ForeColor</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Text">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.Text">Control.Text</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.BorderStyle">
            <summary>
            Gets or sets the border style of the control.
            </summary>
            <value>
            One of the <see cref="T:System.Windows.Forms.BorderStyle"/> values. The default value is <strong>Fixed3D</strong>.
            </value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.BorderStyleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.BorderStyle"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Antialiasing">
            <summary>
            Indicates whether the view content is displayed using antialiasing.
            </summary>
            <value><see langword="true"/> if the view content is displayed using antialiasing;
            otherwise <see langword="false"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.AntialiasingChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Antialiasing"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.ToolLayer">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.GraphicContainer"/> displayed by the view on top of the view content.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> object that represents the object displayed 
            by the view on top of the view content.</value>
            <remarks>This graphic container is not affected by the view transformation. It can be used to display
            static objects on top of the view. The graphic container is automatically resized to the size of the view.
            Note that if the graphic container has a background (such as <see cref="T:System.Windows.Forms.Panel"/> objects), you should set it to transparent, or you'll
            not be able to see the view content.<p>When this property is not <see langword="null"/>, optimized scrolling in the view is not
            possible, and thus the value of the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.OptimizedScrolling"/> property will be ignored.</p>
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Content">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.GraphicContainer"/> displayed by the view.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> object that represents the object displayed 
            by the view.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.ContentChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Content"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.ContentMargins">
            <summary>
            Gets or sets the margins used to enlarge the content bounds.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Margins"/> structure.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.ContentBounds">
            <summary>
            Gets or sets the bounds in which scrolling will be possible.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</value>
            <remarks>By default, the scrollable bounds the view are the bounds
            of the container stored in the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Content"/> property. You can change this behavior by
            setting this property to a non-empty rectangle, or go back to the 
            initial behavior by setting it to <see cref="F:ILOG.Diagrammer.Rectangle2D.Empty"/>.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.ContentBoundsChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.ContentBounds"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Grid">
            <summary>
            Gets or sets the grid displayed by this view.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Grid"/> instance that represents the grid displayed by this view.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.ILOG#Diagrammer#IDiagramView#AdjustingTransform">
            <summary>
            Implementation of IDiagramView.AdjustingTransform
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.OptimizedScrolling">
            <summary>
            Gets or sets a value that indicates whether the scrolling of the view is optimized using bitblt.
            </summary>
            <value>A boolean value that indicates whether the scrolling of the view is optimized using bitblt. The
            default value is <see langword="true"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.OptimizedScrollingChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.OptimizedScrolling"/> property has changed
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Selection">
            <summary>
            Gets or sets the collection of selected objects.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.SelectionService"/> object that represents the
            collection of objects that are selected in the view.
            </value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectionChanged">
            <summary>
            Occurs when the selected graphic objects are changing.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectionStyle">
            <summary>
            Gets the style for the selection objects in this control.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.SelectionStyle"/> instance that represents the style for the selection objects in this view .</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Cursor">
            <summary>
            Gets or sets the cursor that is displayed when the mouse pointer is over the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
            <value>
            A <see cref="T:System.Windows.Forms.Cursor"/> object that represents the cursor that is displayed when the mouse pointer is over the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.CurrentCursor">
            <summary>
            Gets or sets the current cursor displayed by the view.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Cursor"/> that represents the current cursor
            displayed by the view.</value>
            <remarks>Setting the value of the property will not change the value of the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Cursor"/>
            property. 
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.ToolTip">
            <summary>
            Gets the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.ToolTip"/> used internally by the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.InteractionException">
            <summary>  
            Occurs when an exception is being thrown during an interaction in the control.  
            </summary>  
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramView.EditedObject">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.GraphicObject"/> whose text is being edited in this view.
            </summary>
            <value>The <see cref="T:ILOG.Diagrammer.GraphicObject"/> whose text is being edited in this view.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.FilterAnchors">
            <summary>
            Occurs when trying to connect a link to a graphic object to filter its anchors.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.GraphicObjectTextEditing">
            <summary>
            Occurs when the editing of a graphic object text is starting.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.GraphicObjectTextEdited">
            <summary>
            Occurs when the editing of a graphic object text is ending.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.CreateGhostGraphic">
            <summary>
            Occurs when creating a ghost graphic is required during an interaction.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectMoving">
            <summary>
            Occurs when moving selected objects.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectMoved">
            <summary>
            Occurs when selected objects have been moved.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectResizing">
            <summary>
            Occurs when resizing selected objects.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectResized">
            <summary>
            Occurs when selected objects have been resized.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectReparenting">
            <summary>
            Occurs when reparenting selected objects.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectReparented">
            <summary>
            Occurs when selected objects have been reparented.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectCopying">
            <summary>
            Occurs when copying selected objects.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectCopied">
            <summary>
            Occurs when selected objects have been copied.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.QueryLinkTarget">
            <summary>
            Occurs when trying to connect a link.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.LinkCreated">
            <summary>
            Occurs after a <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor"/> created a new link.
            </summary>
            <remarks>
            This event can be used to prevent the creation of links under certain conditions.
            For example, you could decide to prevent the creation of a link that is not connected
            to an anchor.
            To cancel the creation of the link, set the <see cref="P:ILOG.Diagrammer.Windows.Forms.LinkCreatedEventArgs.Cancel"/>
            property of the event arguments to <see langword="false"/>.
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.LinkConnected">
            <summary>
            Occurs after connecting a link to a node.
            </summary>
            <remarks>
            This event can be used to prevent the connection of links under certain conditions.
            For example, you could decide to forbid deconnecting a link from its anchor.
            To cancel the connection of the link, set the <see cref="P:ILOG.Diagrammer.Windows.Forms.LinkConnectedEventArgs.Cancel"/>
            property of the event arguments to <see langword="false"/>.
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.QueryDropTarget">
            <summary>
            Occurs during a reparent interaction to find the target container.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.QuerySelectedObject">
            <summary>
            Occurs when an object is selected during an interaction to find the real selected object.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.InteractionStarted">
            <summary>
            Occurs when an interaction is started on the view.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.InteractionValidated">
            <summary>
            Occurs when an interaction is validated on the view.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.InteractionCanceled">
            <summary>
            Occurs when an interaction is canceled on the view.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramView.CreateSelectionGraphic">
            <summary>
            Occurs when a graphic object is selected and 
            a <see cref="T:ILOG.Diagrammer.SelectionGraphic"/> needs to be created
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphicLayer">
            <summary>
            Defines a graphical layer that a displays a <see cref="T:ILOG.Diagrammer.GraphicContainer"/> object in a <see cref="T:ILOG.Diagrammer.IDiagramView"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicLayer.OnContentChanged(ILOG.Diagrammer.ContentChangeEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.GraphicLayer.ContentChanged"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.ContentChangeEventArgs"/> that
            contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicLayer.Paint(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is called to paint the layer.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicLayer.HitTest(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Gives information on the layer contents at the specified point.
            </summary>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</param>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
            <returns>The <see cref="T:ILOG.Diagrammer.GraphicObject"/> located under the specified point.</returns>
        </member>
        <member name="E:ILOG.Diagrammer.GraphicLayer.ContentChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.GraphicLayer.Content"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicLayer.Content">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.GraphicContainer"/> displayed by this layer.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicLayer.View">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.IDiagramView"/> to which this layer belongs to.
            </summary>
            <value>An <see cref="T:ILOG.Diagrammer.IDiagramView"/> reference.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicLayer.Active">
            <summary>
            Gets or sets a value indicating whether the layer will react to events.
            </summary>
            <value><see langword="true"/> if the layer should react to event; otherwise,
            <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicLayer.Visible">
            <summary>
            Gets or sets a value indicating whether the layer is visible.
            </summary>
            <value><see langword="true"/> if the layer is visible; otherwise,
            <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicLayer.AllowOptimizedScrolling">
            <summary>
            Gets or sets a value indicating whether the layer is visible.
            </summary>
            <value><see langword="true"/> if the layer is visible; otherwise,
            <see langword="false"/>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphicLayer.HitTestInfo">
            <summary>
            Contains information about a part of a <see cref="P:ILOG.Diagrammer.GraphicLayer.HitTestInfo.GraphicLayer"/> at a specified coordinate.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicLayer.HitTestInfo.#ctor(ILOG.Diagrammer.GraphicLayer,ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.GraphicLayer.HitTestInfo"/> structure.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicLayer.HitTestInfo.GraphicLayer">
            <summary>
            Gets the part of the <see cref="P:ILOG.Diagrammer.GraphicLayer.HitTestInfo.GraphicLayer"/> control that was clicked.
            </summary>
            <value>A <see cref="P:ILOG.Diagrammer.GraphicLayer.HitTestInfo.GraphicLayer"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicLayer.HitTestInfo.GraphicObject">
            <summary>
            Gets the <see cref="P:ILOG.Diagrammer.GraphicLayer.HitTestInfo.GraphicObject"/> that was clicked.
            </summary>
            <value>An <see cref="P:ILOG.Diagrammer.GraphicLayer.HitTestInfo.GraphicObject"/> instance, or <see langword="null"/> if no graphic object
            was clicked.</value>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.Overview.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.Overview"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.Overview.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)">Control.Dispose</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.Overview.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">DiagramView.OnMouseDown</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.Overview.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">DiagramView.OnMouseMove</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.Overview.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.DiagramView.OnPaint(System.Windows.Forms.PaintEventArgs)">DiagramView.OnPaint</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.Overview.ControlView">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> that this overview is controlling.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.IDiagramView"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.Overview.Content">
            <summary>
            This member redefines <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.Content">DiagramView.Content</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Util.StringUtil">
            <summary>
            <strong>StringUtil</strong> regroups various utility methods for string.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Util.StringUtil.#ctor">
            <summary>
            Avoids creation of an instance.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.SVG.SVGReader">
             <summary>
             Allows importing SVG (Scalable Vector Graphics) files in a diagram.
             </summary>
             <remarks>
             The class allows to reads a SVG (Scalable Vector Graphics) file and creates a diagram that reflects the content of the
             SVG document. SVG is a two-dimensional structure graphics format defined by the World Wide Web Consortium (W3C). 
             The format is based on the eXtensible Markup Language (XML) which gives it a great interoperability. 
             </remarks>
             <example>
             <para lang="cs,vbnet">
              The following code sample shows how to import a SVG file.
             </para>
             <code lang="cs">
             void ReadSVGDocument(string fileName, DiagramView view)
             {
                // Create the Reader
                SVGReader svgReader = new SVGReader();
            
                // Specifies the initial viewport to the current size of the
                // diagram view
                Rectangle2D viewport = view.ViewRectangle;
                svgReader.InitialViewPort = new Rectangle2D(0, 0, viewport.Width, viewport.Height);
            
                try {
                   // read the document
                   GraphicObject svgResult = svgReader.Load(fileName);
                   Group top = new Group();
                   top.Objects.Add(svgResult);
                   // set the result in the view
                   view.Content = top;
                   view.Transform = Transform.Identity;
                }
                catch (Exception e)
                {
                   // error cannot open file
                }
             }
             </code>
             <code lang="vbnet">
             Sub ReadSVGDocument(ByVal fileName As String, ByVal view As DiagramView) 
               ' Create the Reader
               Dim svgReader As SVGReader = New SVGReader 
            
               ' Specifies the initial viewport to the current size of the
               ' diagram view
               Dim viewport As Rectangle2D = view.ViewRectangle 
               svgReader.InitialViewPort = New Rectangle2D(0, 0, viewport.Width, viewport.Height)
             
               Try 
                 ' read the file
                 Dim svgResult As GraphicObject = svgReader.Load(fileName) 
                 Dim top As Group = New Group 
                 top.Objects.Add(svgResult) 
                 ' set the result in the view
                 view.Content = top 
                 view.Transform = Transform.Identity 
            
               Catch e As Exception 
            
               ' error cannot open file
            
               End Try 
             End Sub
            </code>
             </example>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.SVGReader._notSupportedFonts">
            <summary>
            Hashtable containing font family names that
            are not supported.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGReader.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.SVG.SVGReader"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGReader.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.SVG.SVGReader"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGReader.Load(System.String)">
            <summary>
            Loads an SVG file.
            </summary>
            <param name="fileName">The name of the SVG file.</param>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGReader.Load(System.Uri)">
            <summary>
            Loads an SVG file form an URI.
            </summary>
            <param name="uri">The uri of the SVG file.</param>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGReader.Load(System.IO.Stream,System.String)">
            <summary>
            Loads an SVG file form a stream.
            </summary>
            <param name="stream">The stream of the SVG file.</param>
            <param name="baseUri">The base uri for the stream.</param>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGReader.ReadSVGRadialGradientElement(ILOG.Diagrammer.GraphicObject,System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            Reads SVG Radial Gradient Element
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGReader.ReadSVGPatternElement(ILOG.Diagrammer.GraphicObject,System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            Reads SVG Pattern Element
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGReader.ReadSVGLinearGradientElement(ILOG.Diagrammer.GraphicObject,System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            Reads SVG Linear Gradient Element
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGReader.GetStopColor(System.Xml.XmlElement)">
            <summary>
            Returns the color of a stop element.
            </summary>
            <param name="element">The stop element.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGReader.ParseIndirectAttribute(System.String,System.Xml.XmlElement)">
            <summary>
            Gets the attribute from another element (xlink:href indirection).
            </summary>
            <param name="attr">The attribute.</param>
            <param name="element">The element.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGReader.GetXHeight(System.Xml.XmlElement)">
            <summary>
               Gets the x-height value for the font of the given element.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGReader.ReadSVGPolylineElement(System.Xml.XmlElement)">
            <summary>
            Reads an SVG polyline element.
            </summary>
            <param name="element">The polyline element.</param>
            <returns>A polyline graphic object.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGReader.ParsePoints(System.String)">
            <summary>
            Parses a set of point building a polyline.
            </summary>
            <param name="pString">A string containting the polyline points.</param>
            <returns>The array of points.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGReader.ComputeTransformer(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D,System.String)">
            <summary>
             Computes the transformer to fit viewBox in viewPort.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGReader.ReadSVGFilterElement(System.Xml.XmlElement)">
            <summary>
            Reads a filter element.
            </summary>
            <param name="elmt">The element to read.</param>
            <returns>A filter object.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGReader.ParseURI(System.String)">
            <summary>
            Parses an URI to return the corresponding <strong>Element</strong>.
            </summary>
            <param name="uri">The URI to parse.</param>
            <returns>The referenced element.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGReader.IsVisible(System.Xml.XmlElement)">
            <summary>
            Returns <see langword="true"/> if the element is visible.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.SVG.SVGReader.InitialViewPort">
            <summary>
            Gets or sets the initial viewport where the document will be rendered.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> object that represents the location and
            size of the initial viewport. The initial viewport is the rectangle where
            the SVG document will be rendered.
            </value>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.DeclarationArray.GetPropertyCSSValue(System.String)">
            Returns the <strong>CSSValue</strong> corresponding to the given property.
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.BaseColorControl">
            <summary>
            Represents an abstract class that provides several services
            to help writing controls that display color components.
            The control contains two items : An image, and a marker.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.BaseColorControl"/> BaseColorControl class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.UpdateColorComponentFromModel">
            <summary>
            Updates the color component according to the current model color.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.ColorToPoint(ILOG.Diagrammer.GenericColor)">
            <summary>
            Computes the <see cref="T:System.Drawing.Point"/> on the control corresponding to the specified color.
            </summary>
            <param name="color">The color</param>
            <returns>A <see cref="T:System.Drawing.Point"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.PointToColor(System.Drawing.Point)">
            <summary>
            Computes the color corresponding to the specified <see cref="T:System.Drawing.Point"/>.
            </summary>
            <param name="point">The <see cref="T:System.Drawing.Point"/> structure</param>
            <returns>A <see cref="T:ILOG.Diagrammer.GenericColor"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.GetMarkerBBox(System.Drawing.Point)">
            <summary>
            Returns the bounding box of the marker. 
            </summary>
            <param name="point">The marker location</param>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.DrawMarker(System.Drawing.Graphics,System.Drawing.Size)">
            <summary>
            Is called to draw the marker of the control.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> context</param>
            <param name="size">The size of the drawing</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.GetValidPoint(System.Int32,System.Int32)">
            <summary>
            Returns a valid location for the marker.
            </summary>
            <param name="x">The X coordinate</param>
            <param name="y">The Y coordinate</param>
            <returns>A <see cref="T:System.Drawing.Point"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.GetImageBBox">
            <summary>
            Returns the bounding box of the image. 
            </summary>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.DrawImage(System.Drawing.Graphics,System.Drawing.Size)">
            <summary>
            Is called to draw the image of the control.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> context</param>
            <param name="size">The size of the drawing</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.UpdateComponent(ILOG.Diagrammer.GenericColor)">
            <summary>
            Updates the color component according to the specified color.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.OnColorSelectionModelChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when a change occurs on the ColorSelectionModel.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The event argument.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.SetMarkerLocation(System.Drawing.Point,System.Boolean)">
            <summary>
            Sets the marker location to the specified position.
            </summary>
            <param name="p">The new location of the marker.</param>
            <param name="notify"><see langword="true"/> if the model should be updated,
            <see langword="false"/>otherwise.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.ComputeSteps(System.Int32)">
            <summary>
            Computes the number of steps corresponding to the given size.
            </summary>
            <param name="size">The size from which the number of steps are computed.</param>
            <returns>The number of steps corresponding to the given size.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.OnColorChanged">
            <summary>
            Invokes when the color is changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.GetCurrentMarkerBBox">
            <summary>
            Gets the bounding box of the marker.
            </summary>
            <returns>The bounding box of the marker.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.InvalidateCachedBitmap">
            <summary>
            Invalidates the cached bitmap.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">Control.OnPaint</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.OnGotFocus(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)">Control.OnGotFocus</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.OnLostFocus(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)">Control.OnLostFocus</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">Control.OnKeyDown</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)">Control.OnMouseMove</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">Control.OnMouseDown</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)">Control.OnMouseUp</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.BaseColorControl.OnSizeChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)">Control.OnSizeChanged</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.BaseColorControl.ColorSelectionModel">
            <summary>
            Gets or sets the <see cref="P:ILOG.Diagrammer.Windows.Forms.BaseColorControl.ColorSelectionModel"/> object to which this control is bounded.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.BaseColorControl.UpdateBaseColor">
            <summary>
            Gets or sets a value indicating whether the base color is updated when the model changes.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.BaseColorControl.BaseColor">
            <summary>
            Gets or sets the base color for the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.BaseColorControl.RenderingQuality">
            <summary>
            Gets or sets a float value representing the quality of the rendering.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.BaseColorControl.MarkerColor">
            <summary>
            Gets or sets the color of the marker.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.BaseColorControl.FocusedMarkerColor">
            <summary>
            Gets or sets the color of the marker when the control has the focus.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.BaseColorControl.Dragging">
            <summary>
            Gets whether the control is in a drag interaction.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.BaseColorControl.MarkerLocation">
            <summary>
            Gets the marker location.
            </summary>
            <value>The marker location.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.BaseColorControl.ShowMarker">
            <summary>
            Gets whether the marker is visible.
            </summary>
            <value><see langword="true"/> if the marker is visible, <see langword="false"/> otherwise.</value>
        </member>
        <member name="T:ILOG.Diagrammer.MatrixUtil">
            <summary>
            <strong>MatrixUtil</strong> regroups various utility methods for Matrix.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.MatrixUtil.#ctor">
            <summary>
            Avoid the creation of an instance.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.MatrixUtil.IsTranslation(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Returns <see langword="true"/> if the specified matrix is a translation.
            </summary>
            <param name="transform">The matrix to test.</param>
            <returns>Returns <see langword="true"/> if the specified matrix is a translation.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.MatrixUtil.IsScaleTranslate(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Returns <see langword="true"/> if the specified matrix is a scaling matrix.
            </summary>
            <param name="transform">The matrix to test.</param>
            <returns>Returns <see langword="true"/> if the specified matrix is a scaling matrix.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.MatrixUtil.TransformRect(ILOG.Diagrammer.Rectangle2D,System.Drawing.Drawing2D.Matrix)">
            <summary>
            Computes the bounding area occupied by the specified rectangle when
            transformed by the specified transformation.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="transform">The transform matrix.</param>
            <returns>The bounding area.</returns>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.GraphicSymbol">
            <summary>
            Represents a graphic symbol.
            </summary>
            <remarks>A <see cref="T:ILOG.Diagrammer.Graphic.GraphicSymbol"/> is a graphic object made of
            several other objects. A <strong>GraphicSymbol</strong> can be selected by clicking it,
            but it's not possible to select its sub-objects.
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample create a <strong>GraphicSymbol</strong>
            made of a blue triangle and a gray rectangle.</para>
            <code lang="cs">        
            GraphicSymbol CreateGraphicSymbol()
            {
                GraphicSymbol symbol = new GraphicSymbol();
                Basic2DShape triangle = new Basic2DShape(15f, 0F, 80F, 70F);
                triangle.ShapeType = Basic2DShapeType.Triangle;
                triangle.ControlValue = 0.5F;
                triangle.Fill = new SolidFill(Color.Blue);
            
                Rect rectangle = new Rect(0f, 20F, 130F, 40F);
                rectangle.Fill = new SolidFill(Color.Gray);
                rectangle.Stroke = new Stroke(Color.Red);
            
                symbol.Objects.AddRange(new GraphicObject[] { rectangle, triangle });
                return symbol;
            }
            </code>
            <code lang="vbnet">
            Function CreateGraphicSymbol() As GraphicSymbol 
                Dim symbol As GraphicSymbol = New GraphicSymbol 
                Dim triangle As Basic2DShape = New Basic2DShape(15F, 0F, 80F, 70F) 
                triangle.ShapeType = Basic2DShapeType.Triangle 
                triangle.ControlValue = 0.5F 
                triangle.Fill = New SolidFill(Color.Blue) 
            
                Dim rectangle As Rect = New Rect(0F, 20F, 130F, 40F) 
                rectangle.Fill = New SolidFill(Color.Gray) 
                rectangle.Stroke = New Stroke(Color.Red) 
             
                symbol.Objects.AddRange(New GraphicObject() {rectangle, triangle}) 
                Return symbol 
            End Function
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GraphicSymbol.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.GraphicSymbol"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GraphicSymbol.CanConnectChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.ILink,System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanConnectChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.ILink,System.Boolean)">GraphicContainer.CanConnectChild</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.GraphicSymbol.SupportsChildSelection">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.SupportsChildSelection">GraphicContainer.SupportsChildSelection</see>
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.GraphicSymbolSelectionGraphic">
            <summary>
            Represents the selection graphic object dedicated to <see cref="T:ILOG.Diagrammer.Graphic.Group"/> objects.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GraphicSymbolSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.GraphicSymbolSelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.GraphicSymbolSelectionGraphic.KeepAspectRatio">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.ReshapeSelectionGraphic.KeepAspectRatio">ReshapeSelectionGraphic.KeepAspectRatio</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Button">
             <summary>
             Represents a button.
             </summary>
             <remarsk>
             The <see cref="T:ILOG.Diagrammer.Graphic.Button"/> class is a graphic object that represents a button.
             </remarsk>
             <example>
             <para lang="cs,vbnet">The following sample creates a button.</para>
             <code lang="cs">
             Button CreateButton()
             {
                 Button button = new Button();
                 button.Text = "Press Me";
                 button.Location = new Point2D(100, 100);
                 button.AutoSize = true;
                 return button;
             }
            </code>
             <code lang="vbnet">
             Function CreateButton() As Button 
                 Dim button As Button = New Button 
                 button.Text = "Press Me" 
                 button.Location = New Point2D(100, 100) 
                 button.AutoSize = True 
                 Return button 
             End Function
             </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Button.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Button"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Button.OnContentHorizontalAlignmentChanged(ILOG.Diagrammer.Graphic.HorizontalAlignment,ILOG.Diagrammer.Graphic.HorizontalAlignment)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Button.ContentHorizontalAlignment"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Button.OnContentVerticalAlignmentChanged(ILOG.Diagrammer.Graphic.VerticalAlignment,ILOG.Diagrammer.Graphic.VerticalAlignment)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Button.ContentVerticalAlignment"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Button.OnClick(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Graphic.Button.Click"/> event.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Button.PaintBackground(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Control.PaintBackground(ILOG.Diagrammer.DrawingContext)">Control.PaintBackground</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Button.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">GraphicContainer.CanResizeChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Button.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">GraphicObject.GetPreferredSizeCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Button.DoLayout(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.ContentControl.DoLayout(ILOG.Diagrammer.Rectangle2D)">ContentControl.DoLayout</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Button.OnMouseDown(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseDown(ILOG.Diagrammer.ObjectMouseEventArgs)">GraphicObject.OnMouseDown</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Button.OnMouseMove(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseMove(ILOG.Diagrammer.ObjectMouseEventArgs)">GraphicObject.OnMouseMove</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Button.OnMouseUp(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseUp(ILOG.Diagrammer.ObjectMouseEventArgs)">GraphicObject.OnMouseUp</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Button.OnMouseEnter(ILOG.Diagrammer.ObjectEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseEnter(ILOG.Diagrammer.ObjectEventArgs)">GraphicObject.OnMouseEnter</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Button.OnMouseLeave(ILOG.Diagrammer.ObjectEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseLeave(ILOG.Diagrammer.ObjectEventArgs)">GraphicObject.OnMouseLeave</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Button.Background">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Graphic.Control.Background">Control.Background</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Button.TextAppearance">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.TextAppearance">GraphicObject.TextAppearance</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Button.ContentHorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the button content.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Graphic.HorizontalAlignment"/> values.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Button.ContentVerticalAlignment"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Button.ContentHorizontalAlignmentChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Button.ContentHorizontalAlignment"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Button.ContentVerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the button content.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Graphic.VerticalAlignment"/> values.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Button.ContentHorizontalAlignment"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Button.ContentVerticalAlignmentChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Button.ContentVerticalAlignment"/> property has changed.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Button.Click">
            <summary>
            Occurs when the button is clicked.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Button.HasPreferredHeight">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight">GraphicObject.HasPreferredHeight</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Button.HasPreferredWidth">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth">GraphicObject.HasPreferredWidth</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.FormatLinkDialog">
            <summary>
            Represents a common dialog box that allows to edit <see cref="P:ILOG.Diagrammer.Windows.Forms.FormatLinkDialog.Link"/> objects.
            </summary>
            <remarks>Use the <see cref="P:ILOG.Diagrammer.Windows.Forms.FormatLinkDialog.Link"/> property to get and set the edited <see cref="P:ILOG.Diagrammer.Windows.Forms.FormatLinkDialog.Link"/>.</remarks>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.StrokeDialog"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.FilterDialog"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.FillDialog"/>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.FormatLinkDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.FormatLinkDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.FormatLinkDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.FormatLinkDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.StrokeDialog"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.FormatLinkDialog.CopyTo(ILOG.Diagrammer.Graphic.Link)">
            <summary>
            Copies the link properties edited by this dialog to the specified link.
            </summary>
            <param name="link">The target <see cref="T:ILOG.Diagrammer.Graphic.Link"/>.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.FormatLinkDialog.ShowAdvancedPage">
            <summary>
            Gets or sets a value indicating whether to show the advanced tab page.
            </summary>
            <value><see langword="true"/> to show the advanced page; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.FormatLinkDialog.Link">
            <summary>
            Gets or sets the <see cref="P:ILOG.Diagrammer.Windows.Forms.FormatLinkDialog.Link"/> edited by this dialog.
            </summary>
            <value>A <see cref="P:ILOG.Diagrammer.Windows.Forms.FormatLinkDialog.Link"/> object.</value>
            <remarks>When setting the property, the value is cloned.</remarks>
        </member>
        <member name="T:ILOG.Diagrammer.SVG.Css.StreamTokenizer">
            <summary>
            StreamTokenizer takes a stream and a set of tokens and parses them one at a
            time. The different types of tokens that can be found are numbers, 
            identifiers, quoted strings, and different comment styles.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.StreamTokenizer.TT_EOF">
            <summary>
            The constant representing end of stream.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.StreamTokenizer.TT_EOL">
            <summary>
            The constant representing end of line.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.StreamTokenizer.TT_NUMBER">
            <summary>
            The constant representing a number token.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.StreamTokenizer.TT_WORD">
            <summary>
            The constant representing a word token.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.StreamTokenizer.TT_UNKNOWN">
            <summary>
            Internal representation of unknown state.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.StreamTokenizer.nval">
            <summary>
            Contains a number if the current token is a number 
            (<code>ttype</code> is <code>TT_NUMBER</code>)
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.StreamTokenizer.sval">
            <summary>
            Contains a string if the current token is a word 
            <code>ttype</code> is <code>TT_WORD</code>)
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.StreamTokenizer.ttype">
            <summary>
            The token type
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.StreamTokenizer.tokenTypes">
            <summary>
            Internal character meanings, 0 implies TOKEN_ORDINARY
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.#ctor">
            <summary>
            Private constructor to initialize the default values according to the
            specification.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.#ctor(System.IO.Stream)">
            <summary>
            Construct a new StreamTokenizer on the Stream s. This usage of this
            method should be replaced with the constructor which takes a StreamReader.
            </summary>
            <param name="s"> The Stream to parse tokens on. </param>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            Construct a new StreamTokenizer on the StreamReader <code>r</code>.
            Initialize the default state per specification.
            <UL>
            <LI>All byte values 'A' through 'Z', 'a' through 'z', and '&#92;u00A0'
            through '&#92;u00FF' are considered to be alphabetic.</LI>
            <LI>All byte values '&#92;u0000' through '&#92;u0020' are considered to
            be white space. '/' is a comment character.</LI>
            <LI>Single quote '\'' and double quote '"' are string quote characters.</LI>
            <LI>Numbers are parsed.</LI>
            <LI>Ends of lines are considered to be white space rather than separate
            tokens.</LI>
            <LI>C-style and C++-style comments are not recognized.</LI>
            </UL>
            These are the defaults and are not needed in constructor.
            </summary>
            <param name="r"> The StreamReader to parse tokens on. </param>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.CommentChar(System.Int32)">
            <summary>
            Set the character <code>ch</code> to be regarded as a comment
            character.
            </summary>
            <param name="ch"> The character to be considered a comment character. </param>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.EolIsSignificant(System.Boolean)">
            <summary>
            Set a boolean indicating whether or not end of line is significant and
            should be returned as <code>TT_EOF</code> in <code>ttype</code>.
            </summary>
            <param name="flag"> <code>true</code> if EOL is significant, 
                                <code>false</code> otherwise. </param>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.LineNo">
            <summary>
            Answer the current line number.
            </summary>
            <returns> The current line number. </returns>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.LowerCaseMode(System.Boolean)">
            <summary>
            Set a boolean indicating whether or not tokens should be uppercased when
            present in <code>sval</code>.
            </summary>
            <param name="flag"> <code>true</code> if <code>sval</code> should be forced
                                uppercase, <code>false</code> otherwise. </param>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.NextToken">
            <summary>
            Answer the next token type.
            </summary>
            <returns>  The next token to be parsed. </returns>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.ReadUntil(System.Int32)">
            <summary>
            Read token until the end of specified character.
            </summary>
            <param name="ch"> The character to parse until. </param>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.OrdinaryChar(System.Int32)">
            <summary>
            Set the character <code>ch</code> to be regarded as an ordinary character.
            </summary>
            <param name="ch">  The character to be considered an ordinary comment character. </param>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.OrdinaryChars(System.Int32,System.Int32)">
            <summary>
            Set the characters ranging from <code>low</code> to <code>hi</code> to be regarded as ordinary characters.
            </summary>
            <param name="low">  The starting range for ordinary characters. </param>
            <param name="hi">  The ending range for ordinary characters. </param>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.ParseNumbers">
            <summary>
            Indicate that numbers should be parsed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.PushBack">
            <summary>
            Indicate that the current token should be pushed back and returned the
            next time <code>nextToken()</code> is called.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.QuoteChar(System.Int32)">
            <summary>
            Set the character <code>ch</code> to be regarded as a quote character.
            </summary>
            <param name="ch"> The character to be considered a quote comment character. </param>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.Read">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.ResetSyntax">
            <summary>
            Reset all characters so that they are ordinary.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.SlashSlashComments(System.Boolean)">
            <summary>
            Set a boolean indicating whether or not slash slash comments should be
            recognized. The comment ends at a new line.
            </summary>
            <param name="flag"> <code>true</code> if <code>//</code> should be recognized
                                as the start of a comment, <code>false</code> otherwise. </param>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.SlashStarComments(System.Boolean)">
            <summary>
            Set a boolean indicating whether or not slash star comments should be
            recognized. Slash-star comments cannot be nested and end when a
            star-slash combination is found.
            </summary>
            <param name="flag"> <code>true</code> if <code>/*</code> should be recognized
                                as the start of a comment, <code>false</code> otherwise.</param>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.ToString">
            <summary>
            Answer the state of this tokenizer in a readable format.
            </summary>
            <returns> The current state of this tokenizer. </returns>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.WhitespaceChars(System.Int32,System.Int32)">
            <summary>
            Set the characters ranging from <code>low</code> to <code>hi</code>
            to be regarded as whitespace characters.
            </summary>
            <param name="low"> The starting range for whitespace characters. </param>
            <param name="hi"> The ending range for whitespace characters. </param>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.StreamTokenizer.WordChars(System.Int32,System.Int32)">
            <summary>
            Set the characters ranging from <code>low</code> to <code>hi</code>
            to be regarded as word characters.
            </summary>
            <param name="low"> The starting range for word characters. </param>
            <param name="hi"> The ending range for word characters. </param>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.HierarchicalLayout">
            <summary>
            The main class for the Hierarchical Layout algorithm.
            </summary>
            <remarks> 
            <p>
            The Hierarchical Layout arranges the nodes in horizontal or vertical
            levels such that the majority of the links point in the same
            direction and the number of link crossings is small. 
            </p>
            <p>
            Here is a sample drawing produced by the Hierarchical Layout
            algorithm with two levels of nodes that are top-justified within each
            level: <CENTER>
            <A HREF="images/GraphLayout/layout-Hierarchical-2level.gif">
            <IMG SRC="images/GraphLayout/layout-Hierarchical-2level.gif" BORDER="0" ALIGN="BOTTOM" /></A>
            </CENTER> <FONT SIZE="-2">Click on the image to see it in normal
            size.</FONT> 
            </p>
            <p>
            Another sample drawing with eight levels follows. This graph contains
            a cycle and a self-loop. The direction of the flow is from top to
            bottom. The nodes are organized in horizontal levels. <CENTER>
            <A HREF="images/GraphLayout/layout-Hierarchical-topdown.gif">
            <IMG SRC="images/GraphLayout/layout-Hierarchical-topdown.gif" BORDER="0" ALIGN="BOTTOM" /></A>
            </CENTER> <FONT SIZE="-2">Click on the image to see it in normal
            size.</FONT> 
            </p>
            <p>
            The Hierarchical Layout algorithm supports different styles of links
            in the same drawing. The following sample drawing shows orthogonal,
            straight, and polyline links. The direction of the flow is to the
            right and the node levels are vertical. <CENTER>
            <A HREF="images/GraphLayout/layout-Hierarchical-mixedlinks.gif">
            <IMG SRC="images/GraphLayout/layout-Hierarchical-mixedlinks.gif" BORDER="0" ALIGN="BOTTOM" WIDTH="100%" /></A>
            </CENTER> <FONT SIZE="-2">Click on the image to see it in normal
            size.</FONT> 
            </p>
            <p>
            The Hierarchical Layout algorithm supports port specifications. The
            side and index of the port where a link connects to a node can be
            specified. The following sample drawing shows a drawing with port
            specifications and orthogonal link style. The direction of the flow
            is from top to bottom. <CENTER>
            <A HREF="images/GraphLayout/layout-Hierarchical-portsides.gif">
            <IMG SRC="images/GraphLayout/layout-Hierarchical-portsides.gif" BORDER="0" ALIGN="BOTTOM" WIDTH="60%" /></A>
            </CENTER> <FONT SIZE="-2">Click on the image to see it in normal
            size.</FONT> 
            </p>
            <p>
            To simplify the explanations of the layout parameters, we use the
            compass directions <I>north, south, east</I>, and <I>west</I>. The
            first level of the layout is the north pole. If the flow direction is
            top to bottom, north is always upwards, south towards the bottom,
            west towards the left, and east towards the right side of the layout.
            If the flow direction is left to right, north is left and south is
            right. 
            </p>
            <p>
            See the corresponding chapter of the User's Manual for details on the
            algorithm, the types of graphs for which this algorithm can be used,
            the features and limitations, code samples, and so on. 
            </p>
            <p>
            Note the following points: <br/>- The layout algorithm always takes
            into account the direction of links. <br/>- The initial position of
            the nodes (at the moment you start the layout) does not affect the
            resulting layout. <br/>- The algorithm supports self-links, cycles,
            and multiple links between the same pair of nodes. 
            </p>
            <p>
            </p>
            </remarks>
            <example>
            <para lang='cs,vbnet'>The following example shows how to apply 
            the Hierarchical Layout.</para>
            <code lang='cs'>
            using System;
            using ILOG.Diagrammer;
            using ILOG.Diagrammer.Graphic;
            using ILOG.Diagrammer.GraphLayout; 
            
            Group group = new Group();
            
            // Fill the group with nodes and links here
            
            HierarchicalLayout layout = new HierarchicalLayout();
            group.GraphLayout = layout;
            group.PerformGraphLayout(); 
            </code>
            <code lang='vbnet'>
            Imports System
            Imports ILOG.Diagrammer
            Imports ILOG.Diagrammer.Graphic
            Imports ILOG.Diagrammer.GraphLayout
            
            Dim group As Group = New Group 
            
            ' Fill the group with nodes and links here
            
            Dim layout As HierarchicalLayout = New HierarchicalLayout
            group.GraphLayout = layout
            group.PerformGraphLayout
            </code>
            </example>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Unspecificed">
            <summary>
            Indicates an unspecified integer value.
            Used in the constraint classes.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.OnConstraintsChanged">
            <summary>
            Invoked when the content of the <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/> property change.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.#ctor">
            <summary>
            Creates a new instance of the Hierarchical Layout algorithm.
            </summary>
            <remarks> 
            <p>
            To indicate the graphic container you want to lay out, use the
            method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>.
            
            </p>
            <p>
            To indicate the graph model you want to lay out, use the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            
            </p>
            <p>
            To perform the layout, use the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            
            </p>
            <p>
            To modify the layout parameters, use the different methods provided
            in this class and its superclass. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Filter"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.#ctor(ILOG.Diagrammer.GraphLayout.HierarchicalLayout)">
            <summary>
            Creates a new layout instance by copying an existing one.
            </summary>
            <remarks>
            This constructor is used by the
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Copy"/> method. Any subclass should
            provide a copy constructor. 
            <p>
            The parameters of the <strong>source</strong> layout are copied
            using the method <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="source"> The layout instance that is copied.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Copy"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Init">
            <summary>
            Initializes instance variables.
            </summary>
            <remarks> 
            <p>
            You should not call this method directly. The method is called
            internally by the constructor without arguments and by the copy
            constructor. The method must be overridden by subclasses that need
            to initialize additional instance variables. 
            </p>
            <p>
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Copy">
            <summary>
            Copies the layout instance.
            </summary>
            <remarks> 
            <p>
            This method copies the layout instance by calling the copy
            constructor. 
            </p>
            <p>
            When performing a recursive layout of a nested graph, this method is
            used by <see cref="T:ILOG.Diagrammer.GraphLayout.ILayoutProvider"/> to
            "clone" the layout instance of a parent graph. Note that the
            parameters which are specific to a node or a link are not copied.
            Hierarchical constraints are not copied. The layout position is not
            copied. Only the global parameters are copied. 
            </p>
            <p>
            </p>
            </remarks>
            <returns>A copy of the layout instance.
            </returns>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Position"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.AddConstraint(ILOG.Diagrammer.GraphLayout.HierarchicalConstraint)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Copies the parameters from a given layout instance.
            </summary>
            <remarks> 
            <p>
            Note that the parameters which are specific to a node or a link are
            not copied. Hierarchical constraints are not copied. The layout
            position is not copied. Only the global parameters are copied. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="source"> The layout instance from which the parameters
            are copied.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Copy"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Position"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.AddConstraint(ILOG.Diagrammer.GraphLayout.HierarchicalConstraint)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Layout">
            <summary>
            Computes the layout using the Hierarchical Layout algorithm.
            </summary>
            <remarks>
            To start the layout, call the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SupportsPreserveFixedNodes">
            <summary>
            Indicates that this layout class allows the user to specify fixed
            nodes.
            </summary>
            <remarks>
            Fixed nodes are not moved during the layout if the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/>
            is set to <see langword="true"/>. Links that are incident to fixed
            nodes are not reshaped during the layout. Fixed nodes are ignored by
            the Hierarchical Layout algorithm, which may lead to node overlaps. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/>
            '/&gt;
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SupportsPreserveFixedLinks">
            <summary>
            Indicates that this layout class allows the user to specify fixed
            links.
            </summary>
            <remarks>
            Fixed links are not reshaped during the layout if the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/>
            is set to <see langword="true"/>. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/>
            '/&gt;
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle)"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SupportsAllowedTime">
            <summary>
            Indicates that this layout class can stop the layout computation in
            a proper manner when the user-defined allowed time is exceeded.
            </summary>
            <remarks>
            If the allowed time elapses before termination of the Hierarchical
            Layout algorithm, the nodes and links are not moved and remain at
            the same position as before the start of the algorithm. The result
            code in the layout report is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/> in this case. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/>
            '/&gt;
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SupportsStopImmediately">
            <summary>
            Indicates that this layout class can interrupt the current run of
            layout immediately in a controlled way.
            </summary>
            <remarks>
            If the algorithm is stopped before termination of the Hierarchical
            Layout algorithm, the nodes and links are not moved and remain at
            the same position as before the start of the algorithm. The result
            code in the layout report is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/> in this case. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.StopImmediately"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsStoppedImmediately"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.StopImmediately">
            <summary>
            Stops the running layout algorithm as soon as possible.
            </summary>
            <remarks>
            The Hierarchical Layout algorithm has several steps. In the first
            steps, stopping the algorithm is possible and the method returns
            <see langword='true'/>. In the very last step, stopping the
            algorithm is no longer possible and the method returns
            <see langword='false'/>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SupportsPercentageComplete">
            <summary>
            Indicates that this layout class can estimate the percentage of
            completion during the run of layout.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IncreasePercentageComplete(System.Int32)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.PercentageComplete"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SupportsLayoutOfConnectedComponents">
            <summary>
            Indicates that this layout class can use the generic connected
            component layout mechanism of the <strong>GraphLayout</strong> base
            class.
            </summary>
            <remarks>
            This mechanism cuts the attached graph into connected components,
            applies itself on each connected component separately, and uses the
            layout instance returned by the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents"/>
            to place the connected components. By default, this layout is an
            instance of  <see cref="T:ILOG.Diagrammer.GraphLayout.GridLayout"/>
            that can be customized as needed. 
            <p>
            The generic connected component layout mechanism has the
            disadvantage that it moves connected components completely. Fixed
            nodes within a component do not preserve their previous positions.
            Nodes of different components with the same specified level index
            are no longer aligned in levels because each component has an
            individual level structure. 
            </p>
            <p>
            If the generic connected component layout mechanism is disabled, the
            algorithm uses its own specialized internal mechanism instead of the
            generic mechanism. All components are merged into the same global
            level structure. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean)"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SupportsLinkConnectionBox">
            <summary>
            Indicates that this layout class can use a link connection box
            provider to calculate the end points of links.
            </summary>
            <remarks>
            The link connection box provider is an object that provides the
            rectangle to which the links are connected for each node and the
            tangential shift offset at each side for the connection points. This
            is useful if the connection points of the links at a node should be
            relative to a rectangle that is smaller or larger than the real
            bounding box of the node. 
            <p>
            Link connection points are calculated for all links except those
            with the no-reshape link style and  fixed links. The tangential
            offsets provided by the link connection box provider are currently
            ignored. 
            </p>
            <p>
            If a connection box provider object is set at the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>,
            the layout algorithm uses this object together with the connector
            style to calculate the connection points for links. 
            </p>
            <p>
            If the link clip mode is set additionally, the layout algorithm
            calculates the initial connection points at the node boxes with the
            link connection box provider and the connector style and tells the
            graph model to obtain the final connection points by clipping
            against the shape of the nodes via the reshape mode of
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/>.
            This works well in particular if the node box obtained by the link
            connection box provider is smaller than the real bounding box of the
            node. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkClipping"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.ConnectorStyle"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle)">
            <summary>
            Sets the style of the shape of an individual link.
            </summary>
            <remarks>
            This link style is used only if the global link style is set to
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle.Mixed"/>. Otherwise, all
            links have the style that is specified as the global link style. 
            <p>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle.Polyline"/> - The link
            gets a polyline shape, that is, a shape consisting of a sequence of
            line segments. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle.Orthogonal"/> - The link
            gets an orthogonal shape, that is, a shape consisting of a sequence
            of orthogonal line segments. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle.Straight"/> - The link
            gets a straight-line shape. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle.NoReshape"/> - No
            reshape is performed on the link. </LI> 
            </UL> 
            </p>
            <p>
            The default value is
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle.Polyline"/>. 
            </p>
            <p>
             
            </p>
            <p>
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <param name="style"> The shape style.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetLinkStyle(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetLinkStyle(System.Object)">
            <summary>
            Returns the style of the shape of an individual link.
            </summary>
            <param name="link"> The link.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle)"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.UnspecifiedPosition">
            <summary>
            Represents the unspecified position.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Position"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetLinkPriority(System.Object,System.Single)">
            <summary>
            Sets the priority of a link.
            </summary>
            <remarks>
            The layout algorithm tries to place the links in such a way that the
            majority of the links are short and point in the same direction.
            However, this is not always possible for all links. Low priority
            links are more likely to be longer or point in the opposite
            direction than the high priority links. The link priority should be
            smaller than 10000. 
            </remarks>
            <param name="link"> The link.
            </param>
            <param name="priority"> The link priority value, a number up to
            10000.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetLinkPriority(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetLinkPriority(System.Object)">
            <summary>
            Returns the priority of a link.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetLinkPriority(System.Object,System.Single)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortIndex(System.Object,System.Int32)">
            <summary>
            Sets the port index of a link at the "from" side.
            </summary>
            <remarks>
            This allows you to specify the relative ports of the links on the
            node border. Using relative ports is a way to specify the relative
            order of how the links connect to the "from" node. The specification
            is only used if the free origin point mode is used for the link. 
            <p>
            Port numbers are between <strong>0</strong> and <strong>n -
            1</strong>, where <strong>n</strong> is the number of ports at the
            node side where the link is connected. Links with an unspecified or
            negative port index are connected on the node border according to
            the global connector style. A link with a specified port index
            <strong>i</strong> is connected at the <I>i</I>th relative port, and
            the connection points of ports are evenly spaced on the
            corresponding node border. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <param name="portIndex"> The relative port index starting from
            <strong>0</strong>.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetFromPortIndex(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortIndex(System.Object,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetNumberOfPorts(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide,System.Int32)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.ConnectorStyle"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.OriginPointMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetFromPortIndex(System.Object)">
            <summary>
            Returns the port index of a link at the "from" side.
            </summary>
            <remarks>
            Returns <strong>-1</strong> if the port index is unspecified. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortIndex(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortIndex(System.Object,System.Int32)">
            <summary>
            Sets the port index of a link at the "to" side.
            </summary>
            <remarks>
            This allows you to specify the relative ports of the links on the
            node border. Using the relative ports is a way to specify the
            relative order of how the links connect to the "to" node. The
            specification is only used if the free destination point mode is
            used for the link. 
            <p>
            Port numbers are between <strong>0</strong> and <strong>n -
            1</strong>, where <strong>n</strong> is the number of ports at the
            node side where the link is connected. Links with an unspecified or
            negative port index are connected on the node border according to
            the global connector style. A link with specified port index
            <strong>i</strong> is connected at the <I>i</I>th relative port, and
            the connection points of ports are evenly spaced on the
            corresponding node border. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <param name="portIndex"> The relative port index starting from
            <strong>0</strong>.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetToPortIndex(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortIndex(System.Object,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetNumberOfPorts(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide,System.Int32)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.ConnectorStyle"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.DestinationPointMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetToPortIndex(System.Object)">
            <summary>
            Returns the port index of a link at the "to" side.
            </summary>
            <remarks>
            Returns <strong>-1</strong> if the port index is unspecified. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortIndex(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)">
            <summary>
            Sets the port side of a link at the "from" side.
            </summary>
            <remarks>
            This allows you to specify at which side of the node the starting
            point of the link is connected. 
            <p>
            Possible values for the <paramref name="side"/> parameter are
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.East"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.West"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.North"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.South"/>, and the default
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.Unspecified"/>. 
            </p>
            <p>
            If a port side is unspecified, the link can connect to any border
            side of the node. Otherwise, the link connects only to the specified
            node border. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <param name="side"> The side of the node from which the link is
            connected.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetFromPortSide(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortIndex(System.Object,System.Int32)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.ConnectorStyle"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetFromPortSide(System.Object)">
            <summary>
            Returns the port side of a link at the "from" side.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)">
            <summary>
            Sets the port side of a link at the "to" side.
            </summary>
            <remarks>
            This allows you to specify at which side of the node the end point
            of the link is connected. 
            <p>
            Possible values for the <paramref name="side"/> parameter are
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.East"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.West"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.North"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.South"/>, and the default
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.Unspecified"/>. 
            </p>
            <p>
            If a port side is unspecified, the link can connect to any border
            side of the node. Otherwise, the link connects only to the specified
            node border. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <param name="side"> The side of the node to which the link is
            connected.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetToPortSide(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortIndex(System.Object,System.Int32)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.ConnectorStyle"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetToPortSide(System.Object)">
            <summary>
            Returns the port side of a link at the "to" side.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetNumberOfPorts(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide,System.Int32)">
            <summary>
            Sets the number of relative ports of a node on a given side.
            </summary>
            <remarks>
            Possible values for the <paramref name="side"/> parameter are
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.East"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.West"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.North"/>, and
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.South"/>. 
            <p>
            Using the relative ports is a way to specify the relative order of
            how the links connect to the node. The ports of a node side can be
            considered as connection points that are evenly spaced  on the node
            border. Links can connect to specific pins by setting the "from"
            port index or the "to" port index of the link. 
            </p>
            <p>
            If the "from" port index or the "to" port index of any link
            connecting to the node is greater than the specified number of ports
            of this node, the number of ports is automatically adjusted. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="node"> The node.
            </param>
            <param name="side"> The side of the node for the ports.
            </param>
            <param name="numberOfPorts"> The number of relative ports.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetNumberOfPorts(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortIndex(System.Object,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortIndex(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetNumberOfPorts(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)">
            <summary>
            Returns the specified number of relative ports of a node on the
            given side.
            </summary>
            <remarks>
            Possible values for the <paramref name="side"/> parameter are
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.East"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.West"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.North"/>, and
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.South"/>. Returns
            <strong>-1</strong> if the number of ports is unspecified. 
            <p>
            </p>
            </remarks>
            <param name="node"> The node.
            </param>
            <param name="side"> The side of the node.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetNumberOfPorts(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortIndex(System.Object,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortIndex(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetEastNumberOfPorts(System.Object,System.Int32)">
            <summary>
            Sets the number of relative ports on the east side of a node.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name="node"> The node.
            </param>
            <param name="numberOfPorts"> The number of relative ports.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetNumberOfPorts(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetEastNumberOfPorts(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetEastNumberOfPorts(System.Object)">
            <summary>
            Returns the number of relative ports on the east side of a node.
            </summary>
            <remarks>
            The method returns <strong>-1</strong> if the number of ports is
            unspecified. 
            <p>
            </p>
            </remarks>
            <param name="node"> The node.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetNumberOfPorts(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetEastNumberOfPorts(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetWestNumberOfPorts(System.Object,System.Int32)">
            <summary>
            Sets the number of relative ports on the west side of a node.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name="node"> The node.
            </param>
            <param name="numberOfPorts"> The number of relative ports.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetNumberOfPorts(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetWestNumberOfPorts(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetWestNumberOfPorts(System.Object)">
            <summary>
            Returns the number of relative ports on the west side of a node.
            </summary>
            <remarks>
            The method returns <strong>-1</strong> if the number of ports is
            unspecified. 
            <p>
            </p>
            </remarks>
            <param name="node"> The node.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetNumberOfPorts(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetWestNumberOfPorts(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetNorthNumberOfPorts(System.Object,System.Int32)">
            <summary>
            Sets the number of relative ports on the north side of a node.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name="node"> The node.
            </param>
            <param name="numberOfPorts"> The number of relative ports.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetNumberOfPorts(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetNorthNumberOfPorts(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetNorthNumberOfPorts(System.Object)">
            <summary>
            Returns the number of relative ports on the north side of a node.
            </summary>
            <remarks>
            The method returns <strong>-1</strong> if the number of ports is
            unspecified. 
            <p>
            </p>
            </remarks>
            <param name="node"> The node.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetNumberOfPorts(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetNorthNumberOfPorts(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetSouthNumberOfPorts(System.Object,System.Int32)">
            <summary>
            Sets the number of relative ports on the south side of a node.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name="node"> The node.
            </param>
            <param name="numberOfPorts"> The number of relative ports.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetNumberOfPorts(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetSouthNumberOfPorts(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetSouthNumberOfPorts(System.Object)">
            <summary>
            Returns the number of relative ports on the south side of a node.
            </summary>
            <remarks>
            The method returns <strong>-1</strong> if the number of ports is
            unspecified. 
            <p>
            </p>
            </remarks>
            <param name="node"> The node.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetNumberOfPorts(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetSouthNumberOfPorts(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetSpecNodeLevelIndex(System.Object,System.Int32)">
            <summary>
            Sets the index of the specified level for a node.
            </summary>
            <remarks>
            Nodes are organized in horizontal or vertical levels numbered from
            <strong>0</strong> to <strong>n</strong>. If the link flow direction
            is from top to bottom, the nodes with level index <strong>0</strong>
            are placed in the topmost level, and the nodes with higher level
            indices are placed in the levels below. If the link flow direction
            is from left to right, the nodes with level index <strong>0</strong>
            are placed in the leftmost level, and the nodes with higher level
            indices are placed in the levels farther to the right. 
            <p>
            This method allows you to specify the level where a node should be
            placed. If the level index of a node is set to a negative value, it
            means that there is no preference for the level of the node. In this
            case, the layout algorithm calculates an appropriate level index. 
            </p>
            <p>
            The default level index of a node is <strong>-1</strong>; that is,
            the layout algorithm determines the appropriate level automatically.
            
            </p>
            <p>
            Note that specified level indices can cause conflicts to constraints
            that are solved depending on the constraint priorities. The index
            specification or some of the constraints may be ignored in this
            case. Furthermore, note that if the generic connected component
            layout mechanism of the <strong>GraphLayout</strong> base class is
            enabled, each connected component uses its own level structure. If
            it is disabled, there is only one global level structure. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="node"> The node.
            </param>
            <param name="index"> The level index.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.FlowDirection"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetSpecNodeLevelIndex(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.AddConstraint(ILOG.Diagrammer.GraphLayout.HierarchicalConstraint)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SupportsLayoutOfConnectedComponents"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetSpecNodeLevelIndex(System.Object)">
            <summary>
            Returns the index of the specified level for a node.
            </summary>
            <remarks>
            If no level index is specified for the node, it returns a negative
            number. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetSpecNodeLevelIndex(System.Object,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetCalcNodeLevelIndex(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetCalcNodeLevelIndex(System.Object)">
            <summary>
            Returns the calculated level index of a node after performing a
            layout.
            </summary>
            <remarks>
            If there was no previous call of <strong>PerformLayout</strong>, it
            returns <strong>-1</strong>. Nodes are organized in horizontal or
            vertical levels numbered from <strong>0</strong> to
            <strong>n</strong>. If the link flow direction is from top to
            bottom, the nodes with level index <strong>0</strong> are placed in
            the topmost level, and the nodes with higher level indices are
            placed in the levels below. If the link flow direction is from left
            to right, the nodes with level index <strong>0</strong> are placed
            in the leftmost level, and the nodes with higher level indices are
            placed in the levels more to the right. 
            <p>
            Note the difference between calculated and specified level index:
            The layout algorithm assigns level indices to all nodes even if no
            level index is specified. Therefore, the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetSpecNodeLevelIndex(System.Object)"/> returns
            <strong>-1</strong> for nodes that have no level index specified,
            but the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetCalcNodeLevelIndex(System.Object)"/> returns a
            nonnegative number, that is, the real index of the level after
            layout. 
            </p>
            <p>
            Note that if the generic connected component layout mechanism of the
            <strong>GraphLayout</strong> base class is enabled, each connected
            component uses its own level structure. If it is disabled, there is
            only one global level structure. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="node"> The node.
            </param>
            <returns>The calculated level index of the node, or
            <strong>-1</strong> if no layout has been performed.
            </returns>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.FlowDirection"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetSpecNodeLevelIndex(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Detach"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SupportsLayoutOfConnectedComponents"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetSpecNodePositionIndex(System.Object,System.Int32)">
            <summary>
            Sets the index of the specified position of a node within a level.
            </summary>
            <remarks>
            Nodes are organized in horizontal or vertical levels. Within each
            level, the nodes are placed sequentially at relative positions
            numbered from <strong>0</strong> to <strong>n</strong>. If the link
            flow direction is from top to bottom, the node with position index
            <strong>0</strong> is placed leftmost within its level, and the
            nodes with higher position indices are placed farther to the right.
            If the link flow direction is from right to left, the node with
            position index <strong>0</strong> is placed topmost within its
            level, and the nodes with higher position indices are placed below. 
            <p>
            This method allows you to specify the relative position where a node
            should be placed within its level. If the position index of a node
            is set to a negative value, it means that there is no preference for
            the position of the node. In this case, the layout algorithm
            calculates an appropriate position index. If the position index is
            higher than the number of nodes in the level, the position index is
            ignored. If two nodes of the same level have the same position
            index, one of the indices is ignored. The layout algorithm
            calculates an appropriate position index for the nodes that have
            inappropriate or conflicting position indices. 
            </p>
            <p>
            The default position index of a node is <strong>-1</strong>; that
            is, the layout algorithm determines the appropriate position
            automatically. 
            </p>
            <p>
            Note that specified position indices can cause conflicts to
            constraints that are solved depending on the constraint priorities.
            The index specification or some of the constraints may be ignored in
            this case. Furthermore, note that if the generic connected component
            layout mechanism of the <strong>GraphLayout</strong> base class is
            enabled, each connected component uses its own level structure. If
            it is disabled, there is only one global level structure. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="node"> The node.
            </param>
            <param name="index"> The position index within a level, starting
            from <strong>0</strong>.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.FlowDirection"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetSpecNodePositionIndex(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.AddConstraint(ILOG.Diagrammer.GraphLayout.HierarchicalConstraint)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SupportsLayoutOfConnectedComponents"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetSpecNodePositionIndex(System.Object)">
            <summary>
            Returns the index of the specified position of a node within a
            level.
            </summary>
            <remarks>
            If no position index is specified for the node, it returns a
            negative number. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetSpecNodePositionIndex(System.Object,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetCalcNodePositionIndex(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetCalcNodePositionIndex(System.Object)">
            <summary>
            Returns the calculated index of the node position within a level
            after performing a layout.
            </summary>
            <remarks>
            If there was no previous call of <strong>PerformLayout</strong>, it
            returns <strong>-1</strong>. Nodes are organized in horizontal or
            vertical levels. Within each level, the nodes are placed
            sequentially at relative positions numbered from <strong>0</strong>
            to <strong>n</strong>. If the link flow direction is from top to
            bottom, the node with position index <strong>0</strong> is placed
            leftmost within its level, and the nodes with higher position
            indices are placed farther to the right. If the link flow direction
            is from right to left, the node with position index
            <strong>0</strong> is placed topmost within its level, and the nodes
            with higher position indices are placed below. 
            <p>
            Note the difference between calculated and specified position index:
            The layout algorithm assigns position indices to all nodes, even if
            no position index is specified. Therefore, the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetSpecNodePositionIndex(System.Object)"/> returns
            <strong>-1</strong> for nodes that have no position index specified,
            but the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetCalcNodePositionIndex(System.Object)"/> returns a
            nonnegative number, that is, the real index of the position within
            its level after layout. 
            </p>
            <p>
            Note, if the generic connected component layout mechanism of the
            <strong>GraphLayout</strong> base class is enabled, each connected
            component uses its own level structure. If it is disabled, there is
            only one global level structure. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="node"> The node.
            </param>
            <returns>The calculated position index of the node, or
            <strong>-1</strong> if no layout has been performed.
            </returns>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.FlowDirection"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetSpecNodePositionIndex(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Detach"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SupportsLayoutOfConnectedComponents"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)">
            <summary>
            Sets the mode for the connection point on an individual link on the
            origin node.
            </summary>
            <remarks>
            This mode is used only if the global "from" point mode is set to
            <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>. Otherwise, the connection
            points on the origin nodes have, for all the links, the mode that is
            specified as the global origin point mode. 
            <p>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/> - The layout is free to
            choose, for this link, the appropriate position of the connection
            point on the origin node, except for "pinned" connection points (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)"/>).
            The choice can further be influenced by specifying the side and the
            port index of the links. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Fixed"/> - The layout must keep,
            for this link, the current position of the connection point on the
            origin node. This can be useful, in particular, if the node has
            fixed pins where the link is attached and the connection points
            should not be moved by the layout algorithm. 
            <p>
            Note that if the mode is fixed, specifications of the port index of
            links at the "from" side are ignored. 
            </p>
            </LI> 
            </UL> 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <param name="mode"> The mode to set.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetOriginPointMode(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.OriginPointMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortIndex(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetOriginPointMode(System.Object)">
            <summary>
            Returns the origin point mode of an individual link.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.OriginPointMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)">
            <summary>
            Sets the mode for the connection point on an individual link on the
            destination node.
            </summary>
            <remarks>
            This mode is used only if the global "from" point mode is set to
            <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>. Otherwise, the connection
            points on the destination nodes have, for all the links, the mode
            that is specified as the global destination point mode. 
            <p>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/> - The layout is free to
            choose, for this link, the appropriate position of the connection
            point on the destination node, except for "pinned" connection points
            (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)"/>).
            The choice can further be influenced by specifying the side and the
            port index of the links. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Fixed"/> - The layout must keep,
            for this link, the current position of the connection point on the
            destination node. This can be useful, in particular, if the node has
            fixed pins where the link is attached and the connection points
            should not be moved by the layout algorithm. 
            <p>
            Note that if the mode is fixed, specifications of the port index of
            links at the "to" side are ignored. 
            </p>
            </LI> 
            </UL> 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <param name="mode"> The mode to set.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetDestinationPointMode(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.DestinationPointMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortIndex(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetDestinationPointMode(System.Object)">
            <summary>
            Returns the destination point mode of an individual link.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.DestinationPointMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MarkForIncremental(System.Object)">
            <summary>
            Marks the input node or link to be repositioned with the next call
            of
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            if incremental mode is enabled.
            </summary>
            <remarks>
            Normally, the incremental layout tries to preserve the relative
            order of nodes and links. By setting a mark on a node, the level
            assignment and relative position of this node will be calculated
            from scratch. By setting a mark on a link, this link will be
            rerouted completely by the next layout. The mark is transient, that
            is, it is automatically cleared after an incremental layout is done.
            
            </remarks>
            <param name="nodeOrLink"> The input node or link to mark.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetIncrementalNodeBoxForExpand(System.Object,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Sets the effective bounding rectangle of an expanded node during
            incremental layout.
            </summary>
            <remarks> 
            <p>
            In this context, we call <I>expand</I> any interactive operation
            that changes the size of the node to make it very large while
            preserving the center position of the node. The typical purpose of
            an expand operation is to change the graphical representation of the
            node to show more details in the inner of the node. For instance, an
            expand operation may show a subgraph in the inner of the node.
            Often, an incremental re-layout is desired after an expand
            operation. 
            </p>
            <p>
            The challenge of the re-layout after an expand operation consists of
            the fact that the node may become so large that it overlaps many
            nodes. This may yield undesired effects during incremental layout,
            because incremental layout is unable to determine the level
            structure from the coordinates of the nodes if some node overlaps
            many other nodes completely. 
            </p>
            <p>
            To facilitate the incremental layout, the old bounding box of the
            expanded node, as it was <I>before</I> the expand operation, must be
            specified as the effective bounding box. This helps the incremental
            layout determine the proper level structure. 
            </p>
            <p>
            The effective bounding box has no effect if incremental layout is
            disabled, or if the node is marked for incremental recalculation.
            The effective bounding box is transient, that is, it is
            automatically removed after each successful layout. The value
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.UnspecifiedRectangle"/> can be passed
            to remove a previous specification of the effective node bounding
            rectangle. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="expandedNode"> The expanded node.
            </param>
            <param name="rect"> The effective bounding rectangle.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetIncrementalNodeBoxForExpand(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MarkForIncremental(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetIncrementalNodeBoxForExpand(System.Object)">
            <summary>
            Returns the effective bounding rectangle of an expanded node during
            incremental layout.
            </summary>
            <remarks>
            Note that this parameter is transient, that is, it is automatically
            removed after each successful layout and returns
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.UnspecifiedRectangle"/> in this case.
            It returns a meaningful value only when the effective bounding box
            was set but layout was not yet performed. 
            <p>
            </p>
            </remarks>
            <param name="expandedNode"> The expanded node.
            </param>
            <returns>The effective bounding rectangle.
            </returns>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetIncrementalNodeBoxForExpand(System.Object,ILOG.Diagrammer.Rectangle2D)"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.UnspecifiedRectangle">
            <summary>
            Represents the unspecified rectangle.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetIncrementalNodeBoxForExpand(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetIncrementalNodeMovementMode(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode)">
            <summary>
            Sets the movement mode of an individual node used during incremental
            layout.
            </summary>
            <remarks>
            This movement mode is used only if the incremental mode is enabled,
            the global movement mode is set to
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.Mixed"/>, and the node is
            not marked for incremental recalculation. If the global movement
            mode is not <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.Mixed"/>, all
            nodes have the mode that is specified as the global movement mode. 
            <p>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.Free"/> - The
            incremental layout preserves the relative order of the node with
            respect to all other nodes (except those that are marked for
            incremental recalculation). It does not preserve the exact position.
            It may move the node a little bit to optimize the space usage. The
            shifting does not change the level structure of the graph. If the
            crossing reduction is disabled during incremental layout (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.CrossingReductionDuringIncremental"/>),
            the shifting also does not change the order of the node within the
            levels with respect to the other nodes. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.FixedInX"/> - The
            incremental layout preserves the relative order of the node with
            respect to all other nodes (except those that are marked for
            incremental recalculation), and it keeps the node fixed in the x
            direction. The node may shift in the y direction. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.FixedInY"/> - The
            incremental layout preserves the relative order of the node with
            respect to all other nodes (except those that are marked for
            incremental recalculation), and it keeps the node fixed in the y
            direction. The nodes may shift in the x direction. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.Fixed"/> - The node
            does not move at all during incremental layout. </LI> 
            </UL> 
            </p>
            <p>
            The default mode is
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.Free"/>. 
            </p>
            <p>
            If the incremental mode is enabled and some nodes are fixed in the x
            or y direction, it often works well if the graph has a coarsely
            level structure (for example, if it was created by a previous layout
            in free mode or in nonincremental mode) but it may create overlaps
            or a messy arrangement otherwise, in particular if only few nodes
            are fixed and many nodes are free to move. Fixing nodes has several
            consequences: The spacing options are obeyed only if there is enough
            space between the fixed nodes. The specified position of the layout
            is not obeyed, because it would require shifting the fixed nodes.
            The crossing reduction during incremental layout has no effect (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.CrossingReductionDuringIncremental"/>).
            However, you can decide whether to enable the crossing reduction of
            long links (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LongLinkCrossingReductionDuringIncremental"/>).
            If the long link crossing reduction is enabled, it will rearrange
            the long links that span several levels to avoid crossings. 
            </p>
            <p>
            Furthermore, note that if the generic connected component layout
            mechanism of the <strong>GraphLayout</strong> base class is enabled,
            it will move nodes even if they are specified as fixed. Therefore it
            is recommended disabling the generic connected component layout
            mechanism. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="node"> The node.
            </param>
            <param name="mode"> The movement mode to set.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalNodeMovementMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetIncrementalNodeMovementMode(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MarkForIncremental(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.HorizontalNodeOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.HorizontalLinkOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.HorizontalNodeLinkOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.VerticalNodeOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.VerticalLinkOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.VerticalNodeLinkOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Position"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetIncrementalNodeMovementMode(System.Object)">
            <summary>
            Returns the movement mode of an individual node used during
            incremental layout.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name="node"> The node.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalNodeMovementMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetIncrementalNodeMovementMode(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.AddConstraint(ILOG.Diagrammer.GraphLayout.HierarchicalConstraint)">
            <summary>
            Adds a constraint for the hierarchical layout.
            </summary>
            <remarks>
            Constraints can be used to force the nodes to be placed in a certain
            way relative to other nodes. For instance, you can force a node to
            be placed in the same level as another node, or you can force nodes
            to be no more than a specified number of levels apart. 
            <p>
            If many constraints are specified, it may happen that the
            constraints are contradicting (for instance, node A cannot be below
            node B and above node B at the same time). In this case, a
            constraint conflict resolution is automatically started. It takes
            the constraint priorities into account when deciding which
            constraints cannot be satisfied. The more conflicts, the more layout
            time is necessary. Therefore, it is recommended specifying
            constraints without obvious conflicts when possible. 
            </p>
            <p>
            When the graph model gets detached, all constraints are removed. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="constraint"> The constraint to add.
            </param>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalSameLevelConstraint"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalLevelRangeConstraint"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalRelativeLevelConstraint"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalGroupSpreadConstraint"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.RemoveConstraint(ILOG.Diagrammer.GraphLayout.HierarchicalConstraint)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetConstraints"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Detach"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.RemoveAllConstraints">
            <summary>
            Removes all the constraints from the hierarchical layout.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.AddConstraint(ILOG.Diagrammer.GraphLayout.HierarchicalConstraint)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.RemoveConstraint(ILOG.Diagrammer.GraphLayout.HierarchicalConstraint)">
            <summary>
            Removes the constraint from the hierarchical layout.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.AddConstraint(ILOG.Diagrammer.GraphLayout.HierarchicalConstraint)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.RemoveConstraint">
            <summary>
            Removes the constraint that was most recently added from the
            hierarchical layout.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.AddConstraint(ILOG.Diagrammer.GraphLayout.HierarchicalConstraint)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetConstraints">
            <summary>
            Returns the constraints that have been added to the hierarchical
            layout.
            </summary>
            <remarks>
            The returned collection is a read only copy of the internally stored
            collection of constraints. Adding or removing at the returned copy
            does not affect the internally stored constraints. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.AddConstraint(ILOG.Diagrammer.GraphLayout.HierarchicalConstraint)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.RemoveConstraint(ILOG.Diagrammer.GraphLayout.HierarchicalConstraint)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.ValidateConstraints">
            <summary>
            Performs a validation check for the constraints.
            </summary>
            <remarks>
            If nodes are removed from the graph, the constraint manager may
            still contain constraints that are related to these nodes. These
            constraints merely waste memory. They are removed by the validation
            check. 
            <p>
            The validation check is automatically performed during layout. In
            the most cases, it is not necessary to call this method directly.
            Only in a memory-critical application may you want to perform the
            validation check explicitly, if you added many constraints and
            removed many constrained nodes from the graph without performing any
            layout. 
            </p>
            <p>
            Do not confuse the validation check with the automatic constraint
            conflict resolution. The validation check removes constraints that
            no longer make sense in the current graph. After the validation
            check, there may still be conflicting constraints in the
            hierarchical layout. The constraint conflict resolution also happens
            automatically during layout. However, the resolution does not remove
            conflicting constraints from the layout. It only decides not to
            satisfy them. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.AddConstraint(ILOG.Diagrammer.GraphLayout.HierarchicalConstraint)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.RemoveConstraint(ILOG.Diagrammer.GraphLayout.HierarchicalConstraint)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetNodeGroups">
            <summary>
            Returns the node groups that occur in constraints that were added to
            the hierarchical layout.
            </summary>
            <remarks>
            Node groups can be shared among different constraints. 
            <p>
            </p>
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalLevelRangeConstraint"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalRelativeLevelConstraint"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalGroupSpreadConstraint"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.AddConstraint(ILOG.Diagrammer.GraphLayout.HierarchicalConstraint)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetQuickAndUgly(System.Boolean)">
            <summary>
            This is a convenience method to set up for a "quick and ugly"
            layout.
            </summary>
            <remarks>
            If you pass <see langword="true"/>, it changes various layout
            parameters so that the algorithm runs maximally fast. However, the
            quality of the result may decrease. If you pass
            <see langword="false"/>, it sets the parameters back to the original
            values. 
            <p>
            It is normally not necessary to use a quick and ugly layout, because
            the default layout parameters are chosen carefully so that the speed
            difference should be very small. However, if you lay out a huge
            graph and the performance is too slow, you can easily test with the
            quick and ugly layout whether changing parameters would improve the
            performance noticeably. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="flag"> <see langword="true"/> to enable "QuickAndUgly"
            flag, or <see langword="false"/> to disable it.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkStraighteningEnabled"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.BacktrackCrossingReductionEnabled"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MedianCrossingValueEnabled"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.NumberOfLinkCrossingSweeps"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Detach">
            <summary>
            Detaches the graph model from the layout instance.
            </summary>
            <remarks>
            When you attach a new graph model to the layout instance, you do not
            need to detach the old graph model because this is done
            automatically when you call <strong>Attach</strong>. The
            <strong>Detach</strong> method performs cleaning operations on the
            graph model. In addition to the cleaning operations in the base
            class, Hierarchical Layout removes all local specifications per node
            or link. It also removes the calculated level index and calculated
            position index from the nodes. 
            <p>
            Note that you must call this method when you no longer need the
            layout instance. Otherwise, some objects may not be garbage
            collected. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetSpecNodeLevelIndex(System.Object,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetSpecNodePositionIndex(System.Object,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetCalcNodeLevelIndex(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.GetCalcNodePositionIndex(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetNumberOfPorts(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetLinkPriority(System.Object,System.Single)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortIndex(System.Object,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortIndex(System.Object,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.CleanNode(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)">
            <summary>
            Cleans a node.
            </summary>
            <remarks>
            This method removes any data that has been stored by the layout
            algorithm on a node. In addition to the cleaning operations in the
            base class, Hierarchical Layout removes all local specifications per
            node. It also removes the calculated level index and calculated
            position index from the nodes. 
            <p>
            </p>
            </remarks>
            <param name="graphModel"> The graph model to which the
            <paramref name="node"/> belongs.
            </param>
            <param name="node"> The node to be cleaned.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Detach"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.CleanLink(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)">
            <summary>
            Cleans a link.
            </summary>
            <remarks>
            This method removes any data that has been stored by the layout
            algorithm on a link. In addition to the cleaning operations in the
            base class, Hierarchical Layout removes all local specifications per
            link. 
            <p>
            </p>
            </remarks>
            <param name="graphModel"> The graph model to which the
            <paramref name="link"/> belongs.
            </param>
            <param name="link"> The link to be cleaned.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Detach"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)">
            <summary>
            Fires a graph layout <strong>LayoutStepPerformed</strong> event.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints">
            <summary>
            Gets a collection of constraints for the hierarchical layout.
            </summary>
            <remarks>
            Constraints let the user customize the layout so that some graphic objects
            are kept side-by-side, at the same level, on a range of levels, etc.
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.ConstraintsChanged">
            <summary>
            Occurs when the content of the <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/> property change.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.FlowDirection">
            <summary>
            Gets or sets the direction of the link flow.
            </summary>
            <remarks>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.LayoutFlowDirection.Right"/> - the majority of the
            links flow to the right. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.LayoutFlowDirection.Left"/> - the majority of the
            links flow to the left. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.LayoutFlowDirection.Bottom"/> - the majority of the
            links flow to the bottom. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.LayoutFlowDirection.Top"/> - the majority of the
            links flow to the top. </LI> 
            </UL> 
            <p>
            This feature sets the direction of the flow for the majority of the
            links in a directed graph. The layout algorithm may need to direct
            some links in the opposite direction of the general link flow. If
            the links flow to the left or right, the nodes are placed in
            vertical levels. If the links flow to the top or bottom, the nodes
            are placed in horizontal levels. 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.LayoutFlowDirection.Right"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The direction of the link flow.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LevelJustification">
            <summary>
            Gets or sets the justification within the levels.
            </summary>
            <remarks>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLevelJustification.Center"/> </LI>
            
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLevelJustification.Left"/> </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLevelJustification.Right"/> </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLevelJustification.Top"/> </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLevelJustification.Bottom"/> </LI>
            
            </UL> 
            <p>
            This feature sets the justification of the nodes within each level.
            If the nodes are center-justified, all nodes of the same level are
            placed with their centers along a line. Otherwise, all nodes of the
            same level are placed with the specified border justified to a line.
            If the link flow direction is to the left or right, the nodes can be
            justified to the left, center, or right. If the link flow direction
            is to the top or bottom, the nodes can be justified to the top,
            center, or bottom. 
            </p>
            <p>
            The default value is
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLevelJustification.Center"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The justification value.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.FlowDirection"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.ConnectorStyle">
            <summary>
            Gets or sets the style of connectors.
            </summary>
            <remarks>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutConnectorStyle.Centered"/> - The
            link connection points are placed in the center of the border the
            link is attached to. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutConnectorStyle.Clipped"/> - Each
            link pointing to the center of the node is clipped at the node
            border. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutConnectorStyle.EvenlySpaced"/> -
            The link connection points are evenly spaced along the node border.
            </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutConnectorStyle.Automatic"/> - The
            connector style is selected depending on the link style. </LI> 
            </UL> 
            <p>
            The default value is
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutConnectorStyle.Automatic"/>. 
            </p>
            <p>
            The connector style is used to place the connection points of links
            that have the free origin or destination point mode and no specified
            port index. Links with fixed point mode do not change their
            connection point at the origin node. Links with specified port
            indexes are connected to the corresponding connection point of the
            port instead. The placement of connection points also depends on the
            link clip interface and the connection box interface, in the
            following way: <ol> 
            <li> First, the bounding box of an end node is obtained. If a link
            connection box interface was set via
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>,
            the bounding box and offsets are delivered by that interface.
            Otherwise, the node bounding box delivered by the graph model (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.BoundingBox(System.Object)"/>)
            is used. </li> 
            <li> Next, the initial connection point of the link is placed at
            this bounding box in the manner specified by the connector style.
            </li> 
            <li> Finally, if the link clip mode was set via
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkClipping"/>,
            the layout tells the graph model to obtain the final connection
            points by clipping against the shape of the nodes via the reshape
            mode of
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/>.
            </li>
            </ol>  
            </p>
            </remarks>
            <value>The connector style.
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortIndex(System.Object,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortIndex(System.Object,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SupportsLinkConnectionBox"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.OriginPointMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.DestinationPointMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.FromFork">
            <summary>
            Gets or sets whether a fork shape is created for links that start at
            the same source point.
            </summary>
            <remarks>
            A fork shape is a link shape where several links start at the same
            point, share a link segment, and then branch into separate link
            paths. The fork shape is used only in the orthogonal link style, and
            only in the following cases: if the connector style is
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutConnectorStyle.Centered"/>, or if the
            links start at the same specified port index at the north or south
            side of a node, or if the links have the fixed origin point mode and
            are placed at exactly the same coordinate. 
            <p>
            </p>
            </remarks>
            <value><see langword="true"/> to enable fork shape creation, or
            <see langword="false"/> to disable it.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.ConnectorStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortIndex(System.Object,System.Int32)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.OriginPointMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.ToFork">
            <summary>
            Gets or sets whether a fork shape is created for links that end at
            the same target point.
            </summary>
            <remarks>
            A fork shape is a link shape where several links join from different
            branches into a final link segment that ends at the same point. The
            fork shape is used only in the orthogonal link style, and only in
            the following cases: if the connector style is
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutConnectorStyle.Centered"/>, or if the
            links start at the same specified port index at the north or south
            side of a node, or if the links have the fixed origin point mode and
            are placed at exactly the same coordinate. 
            <p>
            </p>
            </remarks>
            <value><see langword="true"/> to enable fork shape creation, or
            <see langword="false"/> to disable it.
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortIndex(System.Object,System.Int32)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.DestinationPointMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MinForkSegmentLength">
            <summary>
            Gets or sets the minimal length of the start or end segment of links
            if a fork shape is used for these links.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <value>The minimal length of forking segments.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.FromFork"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.PreferredForkAxisLength">
            <summary>
            Gets or sets the preferred length of the axis of a fork shape.
            </summary>
            <remarks>
            If a fork shape is used for <em>n</em> links that start at the same
            point, and the flow direction is towards the bottom, then the fork
            will have a horizontal segment as the axis. This horizontal segment
            has the preferred length calculated from this parameter multiplied
            by <em>n</em>. 
            <p>
            Note this length is only a hint for the layout algorithm. If there
            is not enough free space, the layout algorithm decreases the length
            of the axis below the preferred length. If there is enough free
            space, it may also increase the length of the axis in order to
            reduce unnecessary link bends. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The preferred length of the axis of a fork shape.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.FromFork"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.ToFork"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkStyle">
            <summary>
            Gets or sets the global style of the shapes of links.
            </summary>
            <remarks>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle.Polyline"/> - All links
            get a polyline shape, that is, a shape consisting of a sequence of
            line segments. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle.Orthogonal"/> - All
            links get an orthogonal shape, that is, a shape consisting of a
            sequence of orthogonal line segments. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle.Straight"/> - All links
            get a straight-line shape. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle.NoReshape"/> - No
            reshape is performed on any link. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle.Mixed"/> - Each link can
            have a different link style. The style of each individual link can
            be set by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle)"/>
            so that different link shapes can occur in the same graph. </LI> 
            </UL> 
            <p>
            Unless the global link style is
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle.Mixed"/>, all links have the
            same style of shape. 
            </p>
            <p>
            The default value is
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle.Polyline"/>. 
            </p>
            <p>
             
            </p>
            <p>
            </p>
            </remarks>
            <value>The global style value.
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle)"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.HorizontalNodeOffset">
            <summary>
            Gets or sets the horizontal offset between nodes.
            </summary>
            <remarks>
            If the levels are horizontal, this is the minimum distance between
            the nodes of the same level. If the levels are vertical, this is the
            minimum distance between the nodes of different levels. 
            <p>
            The default value is <strong>40</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The horizontal offset value.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.VerticalNodeOffset">
            <summary>
            Gets or sets the vertical offset between nodes.
            </summary>
            <remarks>
            If the levels are vertical, this is the minimum distance between the
            nodes of the same level. If the levels are horizontal, this is the
            minimum distance between the nodes of different levels. 
            <p>
            The default value is <strong>40</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The vertical offset value.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.HorizontalLinkOffset">
            <summary>
            Gets or sets the horizontal offset between parallel segments of
            links.
            </summary>
            <remarks>
            In the orthogonal link style, the segments attached directly to the
            node may have a smaller offset if the node is too small or the
            number of incident links is too large to satisfy the specified
            offset. 
            <p>
            The default value is <strong>15</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The horizontal offset value.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.VerticalLinkOffset">
            <summary>
            Gets or sets the vertical offset between parallel segments of links.
            </summary>
            <remarks>
            In the orthogonal link style, the segments attached directly to the
            node may have a smaller offset if the node is too small or the
            number of incident links is too large to satisfy the specified
            offset. 
            <p>
            The default value is <strong>15</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The vertical offset value.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.HorizontalNodeLinkOffset">
            <summary>
            Gets or sets the horizontal offset between a node and a link segment
            that is parallel to the node border.
            </summary>
            <remarks> 
            <p>
            The default value is <strong>20</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The horizontal offset value.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.VerticalNodeLinkOffset">
            <summary>
            Gets or sets the vertical offset between a node and a link segment
            that is parallel to the node border.
            </summary>
            <remarks> 
            <p>
            The default value is <strong>20</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The vertical offset value.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MaxInterLevelApertureAngle">
            <summary>
            Gets or sets the maximal aperture angle of the links incident to a
            node.
            </summary>
            <remarks>
            This parameter has only an effect if none of the links has link
            style orthogonal. It is best suited if the link style is polyline
            links. It defines the maximal angle of the link segments that run
            between the levels of the hierarchical layout. 
            <p>
            The maximal angle is given in degree and must be between 10 and 90. 
            </p>
            <p>
            If the flow direction of the layout is vertical (to bottom or to
            top), a strictly vertical link segment has aperture 0 and a strictly
            horizontal link segment has aperture 90. By limiting the maximal
            aperture angle, you can ensure that the slope of segments between
            levels are more vertical than horizontal, i.e. that the slope of the
            link is in flow direction of the layout. To ensure the slope of the
            segments, the vertical space between the levels is enlarged. 
            </p>
            <p>
            If the flow direction of the layout is horizontal (to left or to
            right), a strictly vertical link segment has aperture 90 and a
            strictly horizontal link segment has aperture 0. By limiting the
            maximal aperture angle, you can ensure that the slope of segments
            between levels are more horizontal than vertical. To ensure the
            slope of the segments, the horizontal space between the levels is
            enlarged. 
            </p>
            <p>
            If the maximal aperture is set to 90, the aperture angle has no
            influence to the space between levels. This is the default. Very
            small maximal aperture angles are not recommended because the
            resulting layout may waste too much space between the node levels. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.FlowDirection"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkStyle"/>
            <value>The maximal aperture angle of the links incident to a node.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkWidthUsed">
            <summary>
            Gets or sets whether the layout respects the width of links.
            </summary>
            <remarks>
            This option affects the calculation of connection points that must
            be evenly spaced. It has no effect on the link connection points
            with the connector style
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutConnectorStyle.Clipped"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutConnectorStyle.Centered"/>. 
            <p>
            If <see langword="true"/> is passed as the argument, the
            distribution of the connection points varies depending on the link
            width. The horizontal or vertical offset between pairs of links or
            links and nodes is with respect to the link border. If
            <see langword="false"/> is passed as the argument, the distribution
            of connection points is independent of the link width. The
            horizontal or vertical offset between pairs of links or links and
            nodes is with respect to the link center. 
            </p>
            <p>
            The default is <see langword="false"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <value><see langword="true"/> to take link width into account when
            spacing connection points, or <see langword="false"/> to ignore link
            width (the default).
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.HorizontalNodeLinkOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.VerticalNodeLinkOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.HorizontalLinkOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.VerticalLinkOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.ConnectorStyle"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MinStartSegmentLength">
            <summary>
            Gets or sets the minimum length of the first segment of each link,
            that is, the segment that is incident to the "from" node.
            </summary>
            <remarks> 
            <p>
            The default value is <strong>0</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The minimum starting link segment.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MinEndSegmentLength"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MinEndSegmentLength">
            <summary>
            Gets or sets the minimum length of the last segment of each link,
            that is, the segment that is incident to the "to" node.
            </summary>
            <remarks> 
            <p>
            The default value is <strong>0</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The minimum ending link segment.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MinStartSegmentLength"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Position">
            <summary>
            Gets or sets the position of the layout.
            </summary>
            <remarks>
            This can be used if connected component processing is disabled or if
            the graph is fully connected. It has no effect otherwise. 
            <p>
            If a position is specified, the layout algorithm places the graph
            such that the specified point is the upper-left corner. The value
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.UnspecifiedPosition"/> is used to
            represent the situation when the position is unspecified. If no
            position is specified, in incremental mode the layout algorithm
            places the graph close to its previous position before layout
            started, and in nonincremental mode it places the graph so that
            <strong>(0, 0)</strong> is the upper-left corner. The value
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.UnspecifiedPosition"/> is used to
            represent the situation when the position is unspecified. 
            </p>
            </remarks>
            <value>The position.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.OriginPointMode">
            <summary>
            Gets or sets the global mode for the connection point of the links
            on the origin nodes.
            </summary>
            <remarks>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/> - For all links, the
            layout is free to choose the appropriate position of the connection
            point on the origin node, except for "pinned" connection points (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)"/>).
            The choice can further be influenced by specifying the side and the
            port index of the links. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Fixed"/> - For all links, the
            layout must keep the current position of the connection point on the
            origin node. This can be useful, in particular, if the node has
            fixed pins where the link is attached and the connection points
            should not be moved by the layout algorithm. 
            <p>
            Note that if the mode is fixed, specifications of the port index of
            links at the "from" side are ignored. 
            </p>
            </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/> - Each link can have a
            different mode for the connection point on the origin node. The mode
            of each individual link can be set by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>.
            </LI> 
            </UL> 
            <p>
            Unless the global mode is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>,
            the connection points on the origin node have the same mode for all
            the links. 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The global mode to set.
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortIndex(System.Object,System.Int32)"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.DestinationPointMode">
            <summary>
            Gets or sets the global mode for the connection point of the links
            on the destination nodes.
            </summary>
            <remarks>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/> - For all links, the
            layout is free to choose the appropriate position of the connection
            point on the destination node, except for "pinned" connection points
            (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)"/>).
            The choice can further be influenced by specifying the side and the
            port index of the links. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Fixed"/> - For all links, the
            layout must keep the current position of the connection point on the
            destination node. This can be useful, in particular, if the node has
            fixed pins where the link is attached and the connection points
            should not be moved by the layout algorithm. 
            <p>
            Note that if the mode is fixed, specifications of the port index of
            links at the "to" side are ignored. 
            </p>
            </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/> - Each link can have a
            different mode for the connection point on the destination node. The
            mode of each individual link can be set by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>.
            </LI> 
            </UL> 
            <p>
            Unless the global mode is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>,
            the connection points on the destination node have the same mode for
            all the links. 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The global mode to set.
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortIndex(System.Object,System.Int32)"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode">
            <summary>
            Gets or sets whether the incremental layout mode is enabled.
            </summary>
            <remarks>
             If the argument is <see langword="true"/>, the layout respects the
            current coordinates of nodes and links, and it tries to create a
            layout with similar positions. Depending on the incremental node
            movement mode, the layout may need to shift all nodes to optimize
            the space usage, but the shifting does not change the relative order
            of the nodes and links, so that the diagram after an incremental
            layout looks very similar to the previous diagram. 
            <p>
            The levels are arranged based on the current coordinates of the
            nodes. Thus, the specified node level and position indices are
            ignored during incremental layout. 
            </p>
            <p>
            The incremental mode is disabled by default. 
            </p>
            <p>
            </p>
            </remarks>
            <value><see langword="true"/> to enable the incremental layout mode,
            or <see langword="false"/> to disable it.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalNodeMovementMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetIncrementalNodeMovementMode(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MarkForIncremental(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetSpecNodeLevelIndex(System.Object,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetSpecNodePositionIndex(System.Object,System.Int32)"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.CrossingReductionDuringIncremental">
            <summary>
            Gets or sets whether crossing reduction during incremental layout is
            enabled.
            </summary>
            <remarks>
            This option has no effect if the incremental mode is disabled. If
            the incremental mode is enabled and the argument is
            <see langword="false"/>, the layout preserves the relative order of
            the nodes and the links within the levels. If the argument is
            <see langword="true"/>, the layout preserves the level structure but
            reorders the nodes within the levels to avoid link crossings. 
            <p>
            It is disabled by default. 
            </p>
            <p>
            </p>
            </remarks>
            <value><see langword="true"/> to enable crossing reduction during
            incremental layout, or <see langword="false"/> to disable it.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LongLinkCrossingReductionDuringIncremental">
            <summary>
            Gets or sets whether the handling of long links for crossing
            reduction during incremental layout is enabled.
            </summary>
            <remarks>
            This option has no effect if the incremental mode is disabled. If
            the incremental mode is enabled and the argument is
            <see langword="false"/>, the layout preserves the relative order of
            the nodes and the links within the levels. If the argument is
            <see langword="true"/>, the layout preserves the level structure and
            the relative order of the nodes, but reroutes the links in order to
            avoid link crossings. This means a long link may cross a level
            between a different pair of nodes than before layout. 
            <p>
            It is disabled by default. 
            </p>
            <p>
            </p>
            </remarks>
            <value><see langword="true"/> to enable long link crossing reduction
            during incremental layout, or <see langword="false"/> to disable it.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalAbsoluteLevelPositioning">
            <summary>
            Gets or sets whether it is enabled to place nodes within the level
            to absolute positions that are close to the previous positions
            during incremental layout.
            </summary>
            <remarks>
            This option has no effect if the incremental mode is disabled. It
            has also no effect if crossing reduction during incremental layout
            is enabled. 
            <p>
            If the incremental mode is enabled and crossing reduction during
            incremental layout is disabled, the layout arranges the nodes such
            that the relative order of the nodes within each level is preserved.
            If this parameter is set to <see langword="false"/>, nodes may be
            placed at absolute positions far from the previous positions, even
            though their relative order does not change, because the main
            objective of the algorithm is to produce a balanced layout. 
            </p>
            <p>
            To help the user preserve a mental map of the graph, this parameter
            should be set to <see langword="true"/>. In this case, the nodes are
            placed closer to their previous positions, even though this may
            result in a less balanced layout. 
            </p>
            <p>
            The freedom of incremental level positioning can be controlled by
            the tendency to preserve the previous node position (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalAbsoluteLevelPositionTendency"/>)
            and the range that is considered to be close enough to the previous
            node position
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalAbsoluteLevelPositionRange"/>).
            
            </p>
            <p>
            It is enabled by default. 
            </p>
            <p>
            </p>
            </remarks>
            <value><see langword="true"/> to enable close repositioning of nodes
            during incremental layout, at the expense of completely balancing
            the layout. A value of <see langword="false"/> will give priority to
            balancing the layout regardless of node displacements.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.CrossingReductionDuringIncremental"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalAbsoluteLevelPositionTendency">
            <summary>
            Gets or sets the percentage how much the layout algorithm tries to
            place nodes to absolute positions within the level that are close to
            the previous positions during incremental layout.
            </summary>
            <remarks>
            This option has an effect only if the incremental absolute level
            positioning is used. 
            <p>
            In nonincremental mode, nodes are placed within the level in order
            to balance the layout. If the incremental absolute level positioning
            is used, nodes should be placed close to their previous positions,
            but the layout should also be balanced. Both criteria compete with
            each other. The position tendency influences how the competing
            criteria are resolved. A high position tendency has the effect that
            the nodes stay closer to their previous positions, and a low
            position tendency has the effect that the nodes stay closer to the
            balanced position. Passing the position tendency 0 has basically the
            same effect as disabling the incremental absolute level positioning.
            
            </p>
            <p>
            The input value is a percentage between <strong>0</strong> and
            <strong>100</strong>. The default value is <strong>70</strong>
            percent. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The percentage value for the absolute level position
            tendency, a number between <strong>0</strong> and
            <strong>100</strong>.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalAbsoluteLevelPositioning"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.CrossingReductionDuringIncremental"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalAbsoluteLevelPositionRange">
            <summary>
            Gets or sets the range that is considered very close to the previous
            node position.
            </summary>
            <remarks>
            This option has an effect only if the incremental absolute level
            positioning is used. 
            <p>
            In nonincremental mode, nodes are placed within the level in order
            to balance the layout. If the incremental absolute level positioning
            is used, nodes should be placed close to their previous positions,
            but the layout should also be balanced. Both criteria compete with
            each other. The position range influences how the competing criteria
            are resolved. If a node is placed within this range to its previous
            position, the balance criteria is used to determine its position. If
            the node is placed farther away from its previous position, the
            position tendency is used to determine its position. 
            </p>
            <p>
            A node that is placed within the incremental position range to its
            previous position is placed at the best balanced position. This
            avoids having the balance of nodes that are already close to the
            previous position being disturbed by an additional tendency towards
            the previous position. 
            </p>
            <p>
            The default value is <strong>20</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The value of the absolute level position range.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalAbsoluteLevelPositioning"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.CrossingReductionDuringIncremental"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalNodeMovementMode">
            <summary>
            Gets or sets the node movement mode used during incremental layout.
            </summary>
            <remarks>
            This option has no effect if the incremental mode is disabled. Valid
            values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.Free"/> - The
            incremental layout preserves the relative order of nodes but does
            not preserve the exact position of nodes. It may move the nodes a
            little bit to optimize the space usage. The shifting does not change
            the level structure of the graph. If crossing reduction is disabled
            during incremental layout (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.CrossingReductionDuringIncremental"/>),
            the shifting also does not change the order of the nodes within the
            levels. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.FixedInX"/> - The
            incremental layout preserves the relative order of nodes and keeps
            the nodes fixed in the x direction. The nodes may shift in the y
            direction. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.FixedInY"/> - The
            incremental layout preserves the relative order of nodes and keeps
            the nodes fixed in the y direction. The nodes may shift in the x
            direction. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.Fixed"/> - The nodes
            do not move at all during incremental layout. Only nodes that are
            marked for incremental repositioning will be moved, and links are
            rerouted. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.Mixed"/> - Each node
            that is not marked for incremental can have a different mode. The
            mode of each individual node can be set by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetIncrementalNodeMovementMode(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode)"/>.
            Mixing fixed and free nodes should only be done in exceptional
            cases, because it may create overlaps or a messy arrangement. </LI> 
            </UL> 
            <p>
            Nodes that are marked for incremental are placed in a nonincremental
            way without respecting the previous position. The incremental
            movement mode has no effect for these nodes. Unless the global mode
            is <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.Mixed"/>, all nodes
            that are not marked for incremental are placed according to the same
            mode. 
            </p>
            <p>
            The default mode is
            <see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode.Free"/>. 
            </p>
            <p>
            If the incremental mode is enabled and nodes are fixed in the x or y
            direction, it works well if the graph has a coarsely level structure
            (for example, if it was created by a previous layout in free mode or
            in nonincremental mode) but it may create overlaps or a messy
            arrangement otherwise. Fixing nodes has several consequences: The
            spacing options are obeyed only if there is enough space between the
            fixed nodes. The specified position of the layout is not obeyed,
            because it would require shifting the fixed nodes. The crossing
            reduction during incremental layout has no effect (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.CrossingReductionDuringIncremental"/>).
            However, you can decide whether to enable the crossing reduction of
            long links (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LongLinkCrossingReductionDuringIncremental"/>).
            If the long link crossing reduction is enabled, it will rearrange
            the long links that span several levels to avoid crossings. 
            </p>
            <p>
            Furthermore, note that if the generic connected component layout
            mechanism of the <strong>GraphLayout</strong> base class is enabled,
            it will move nodes even if they are specified as fixed. Therefore,
            it is recommended disabling the generic connected component layout
            mechanism. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The node movement mode to set.
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetIncrementalNodeMovementMode(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MarkForIncremental(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.HorizontalNodeOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.HorizontalLinkOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.HorizontalNodeLinkOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.VerticalNodeOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.VerticalLinkOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.VerticalNodeLinkOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Position"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.PolylineLinkOverlapReductionEnabled">
            <summary>
            Gets or sets whether optimization of polyline links to avoid links
            overlapping large neighbor nodes is enabled.
            </summary>
            <remarks>
            If this option is enabled, the algorithm introduces additional bends
            if polyline links are routed at a flat angle, to avoid overlapping
            large neighbor nodes. The option does not affect orthogonal links. 
            <p>
            If the graph has a huge number of links, it is recommended switching
            this optimization off, because it is very time-consuming. 
            </p>
            <p>
            The optimization is enabled by default. 
            </p>
            <p>
            </p>
            </remarks>
            <value>Whether optimization of polyline links to avoid links
            overlapping large neighbor nodes is enabled.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.NeighborLinksAligned">
            <summary>
            Gets or sets whether links between neighbor nodes of the same level
            are aligned so that they are strictly horizontal or vertical.
            </summary>
            <remarks>
            For instance, in a top-down layout, the links between neighbor nodes
            of the same level can be drawn roughly horizontal while all other
            links are drawn roughly vertical. However, if one end node is larger
            than the other end node and both nodes are aligned at the top, the
            link between both would normally not be drawn strictly horizontal
            because it connects to the smaller node at a different y coordinate
            than to the larger node. (Reason: the y coordinate of the center of
            the nodes is different when they are aligned at the top and do not
            have the same size). In the orthogonal link style, the link would
            have a bend. If the alignment mode is enabled, these links between
            neighbor nodes are connected to the nodes so that they are strictly
            straight and have no bends. The connector style is ignored for these
            links. 
            <p>
            It is enabled by default. 
            </p>
            <p>
            If neighbor links are not aligned and have the orthogonal style, the
            spacing between the link segments may be slightly smaller than the
            specified offset between links. If the incremental node movement
            mode is fixed, it is not always possible to create aligned links
            between neighbor nodes, due to the fixed positions of the nodes. 
            </p>
            <p>
            </p>
            </remarks>
            <value><see langword="true"/> to enable alignment of neighbor nodes
            regardless of link style, or <see langword="false"/> to disable the
            strict alignment option.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.ConnectorStyle"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkStyle"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.HorizontalLinkOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.VerticalLinkOffset"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IntergraphConnectivityMode">
            <summary>
            Gets or sets whether the intergraph link connectivity is considered
            for the partitioning of the layout into levels.
            </summary>
            <remarks>
            If this option is enabled, the algorithm tries to distribute the
            nodes that represent subgraphs into the levels so that the majority
            of intergraph links point roughly in the flow direction. 
            <p>
            Even if this option is enabled, the Hierarchical Layout algorithm
            does not route intergraph links. They should be routed by applying a
            Link Layout after the Hierarchical Layout. 
            </p>
            <p>
            </p>
            </remarks>
            <value><see langword='true'/> to set intergraph connectivity mode,
            or <see langword='false'/> to disable the mode.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkStraighteningEnabled">
            <summary>
            Gets or sets whether the link straightening phase is enabled.
            </summary>
            <remarks>
            This phase analyzes long orthogonal links and tries to remove bends.
            
            <p>
            This is an expert option. It is enabled by default. It is normally
            not necessary to disable link straightening, except if you need to
            speed up the layout. 
            </p>
            <p>
            </p>
            </remarks>
            <value><see langword='true'/> to enable the link straightening
            phase, or <see langword='false'/> to disable it.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.BacktrackCrossingReductionEnabled">
            <summary>
            Gets or sets whether the backtrack mechanism of the link crossing
            reduction phase is enabled.
            </summary>
            <remarks>
            The layout algorithm uses a sweep heuristic to resolve link
            crossings which includes a backtracking mechanism. If a sweep made
            the result worse, it sets the results back to the previous
            situation. 
            <p>
            This is an expert option. It is enabled by default. It is normally
            not necessary to disable the backtrack mechanism, except if you need
            to speed up the layout. 
            </p>
            <p>
            </p>
            </remarks>
            <value><see langword='true'/> to enable backtracking during link
            crossing reduction (the default), or <see langword='false'/> to
            disable it.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MedianCrossingValueEnabled">
            <summary>
            Gets or sets whether the median crossing value is used during
            crossing reduction.
            </summary>
            <remarks>
            The layout algorithm uses a heuristic to resolve link crossings.
            This heuristic uses a "barycenter" weight on the nodes to determine
            how the crossings are resolved. If this option is enabled, it
            additionally uses a "median" weight as a tie breaker if two nodes
            have the same "barycenter" weight. Statistically, this results in
            fewer crossings. 
            <p>
            This is an expert option. It is enabled by default. It is normally
            not necessary to change this value. However, if many nodes have very
            high numbers of incoming or outgoing links, the calculation of the
            "median" weight may slow down the layout. In this case, you can
            switch this option off. 
            </p>
            <p>
            </p>
            </remarks>
            <value><see langword='true'/> to enable use of the median crossing
            value, or <see langword='false'/> to disable it.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.NumberOfLinkCrossingSweeps">
            <summary>
            Gets or sets the number of layer sweeps to remove link crossings.
            </summary>
            <remarks>
            The layout algorithm uses a sweep algorithm to resolve link
            crossings. This is a heuristic that cannot always remove all link
            crossings. The number of sweeps influences the number of crossings
            that are resolved. However, there is no simple formula to decide
            whether more sweeps would resolve more crossings or result in the
            converse. On some occasions it may be useful to increase or decrease
            the number of sweeps in order to resolve more link crossings. 
            <p>
            This is an expert option. The default value is 5. It is normally not
            necessary to change this value. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The number of sweeps to remove link crossings.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkCrossingFineTuningEnabled">
            <summary>
            Gets or sets whether the link crossing fine tuning phase is enabled.
            </summary>
            <remarks>
            This is an additional heuristic that tries to resolve more link
            crossings. 
            <p>
            This is an expert option. It is enabled by default. It is normally
            not necessary to disable fine tuning, except if you need to speed up
            the layout. 
            </p>
            <p>
            </p>
            </remarks>
            <value><see langword='true'/> to enable the link crossing fine
            tuning phase, or <see langword='false'/> to disable it.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.AllowedTime">
            <summary>
            Gets or sets the upper limit for the duration of the layout
            algorithm.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/> for details.
            </remarks>
            <value>The upper limit for the duration of the layout algorithm.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LayoutOfConnectedComponentsEnabled">
            <summary>
            Gets or sets whether the generic connected component layout
            mechanism is enabled.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/> for
            details.
            </remarks>
            <value>Whether the generic connected component layout mechanism is
            enabled.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkConnectionBoxProvider">
            <summary>
            Gets or sets the link connection box interface for the connection
            points of links.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/> for details.
            </remarks>
            <value>The link connection box interface for the connection points
            of links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.PreserveFixedNodes">
            <summary>
            Gets or sets whether the layout avoids movement of fixed nodes.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/> for details.
            </remarks>
            <value>Whether the layout avoids movement of fixed nodes.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.PreserveFixedLinks">
            <summary>
            Gets or sets whether the layout avoids movement of fixed links.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/> for details.
            </remarks>
            <value>Whether the layout avoids movement of fixed links.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.HierarchicalSideBySideConstraint">
             <summary>
             The class <strong>HierarchicalSideBySideConstraint</strong> is a
             constraint that forces a group of nodes that belong to the same level
             to be placed side by side.
             </summary>
             <remarks>
             It prohibits that other nodes of the same level are placed in the
             middle of the group. By this, the relative positions of the nodes of
             the group are close together. It does not affect the order of nodes
             that belong to different levels. 
             <p>
             Nodes are organized in horizontal or vertical levels.  Within each
             level, the nodes are placed sequentially at relative positions
             numbered from 0 to "n". The constraint specifies that those nodes of
             the group that belong to the same level are placed in subsequent
             positions within the level. The constraint is ignored, if all nodes
             of the group belong to different levels. 
             </p>
             <p>
             For instance, assume the group consists of nodes A, B, C, D, E. If A,
             B and C belong to one level  and D and E to another level, then the
             side by side constraint forces the nodes A, B, C to be placed side by
             side, and D and E to be placed side by side. The constraint is
             satisfied if the positions of A, B, C are 5, 6, 7 and the positions
             of D and E are 1 and 2. The constraint affects only the nodes that
             belong to the same level, therefore the constraint affects the
             subgroup { A, B, C } and the subgroup { D, E } individually, not the
             entire group { A, B, C, D, E } as a unit. The constraint is not
             satisfied if the positions of A, B and C are 5, 7 and 8, because in
             this case, there must be a node between A and B that does not belong
             to the same group. The node between A and B cannot be D or E, because
             D and E belong to a different level. 
             </p>
             <p>
             The constraint is evaluated, if the incremental mode is disabled. If
             the incremental mode is enabled, the constraint is only evaluated if
             the nodes of the group are marked for incremental recalculation,
             because otherwise, the incremental positions of the nodes are
             dominant. 
             </p>
             <p>
             This kind of constraint dominates the relative position constraints.
             The constraints have priorities. If several conflicting constraints
             are specified (such as a node must be side by side to three different
             groups), the constraints with lower priority are ignored during
             layout. The constraint is dominated by specified position indices,
             i.e. it does not change the order of nodes that have specified
             position indices, and by swim lane constraints, that is, it is not
             able to break swim lanes  apart. 
             </p>
             <p>
             The automatic conflict resolution can handle conflicting constraints.
             However, to speed up the layout, it is recommended to specify
             constraints in a way such that there are no conflicts.  
             </p>
             <p>
             </p>
             </remarks>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MarkForIncremental(System.Object)"/>
             <example>
             <para lang="cs,vbnet">The following example shows how to use
             the constraint to specify that a set of nodes that belong to the
             same level must be placed side by side.
             </para>
             <code lang="cs">
             using System;
             using ILOG.Diagrammer;
             using ILOG.Diagrammer.Graphic;
             using ILOG.Diagrammer.GraphLayout;
            
             // nodes are part of group
             Group group = ...;
             GraphicObject node1 = ...;
             GraphicObject node2 = ...;
             GraphicObject node3 = ...;
            
             HierarchicalLayout layout = new HierarchicalLayout();
             group.GraphLayout = layout;
            
             HierarchicalNodeGroup nodeGroup = new HierarchicalNodeGroup();
             nodeGroup.Add(node1);
             nodeGroup.Add(node2);
             nodeGroup.Add(node3);
             layout.Constraints.Add(
                 new HierarchicalSideBySideConstraint(nodeGroup, 2.0f));
             group.PerformGraphLayout();
             </code>
             <code lang="vbnet">
             Imports System
             Imports ILOG.Diagrammer
             Imports ILOG.Diagrammer.Graphic
             Imports ILOG.Diagrammer.GraphLayout
            
             ' nodes are part of group
             Dim group As Group = ...
             Dim node1 As GraphicObject = ...
             Dim node2 As GraphicObject = ...
             Dim node3 As GraphicObject = ...
            
             Dim layout As HierarchicalLayout = New HierarchicalLayout
             group.GraphLayout = layout
            
             Dim nodeGroup As HierarchicalNodeGroup = New HierarchicalNodeGroup
             nodeGroup.Add(node1)
             nodeGroup.Add(node2)
             nodeGroup.Add(node3)
             layout.Constraints.Add(
                 New HierarchicalSideBySideConstraint(nodeGroup, 2.0f))
             group.PerformGraphLayout
             </code>
             </example>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSideBySideConstraint.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalSideBySideConstraint"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSideBySideConstraint.#ctor(ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup,System.Single)">
            <summary>
            Creates a new <strong>HierarchicalSideBySideConstraint</strong>.
            </summary>
            <param name="group"> The node group.
            </param>
            <param name="priority"> The priority of the constraint.
            </param>
            <example>
            <para lang="cs,vbnet">The following example shows how to use
            the constraint to force nodes that belong to the same level 
            to be placed side by side.
            </para>
            <code lang="cs">
            HierarchicalNodeGroup nodeGroup = ...;
            layout.Constraints.Add(
                new HierarchicalSideBySideConstraint(nodeGroup, priority));
            </code>
            <code lang="vbnet">
            Dim nodeGroup As HierarchicalNodeGroup = ...
            layout.Constraints.Add(
                New HierarchicalSideBySideConstraint(nodeGroup, priority))
            </code>
            </example>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSideBySideConstraint.#ctor(ILOG.Diagrammer.GraphLayout.HierarchicalSideBySideConstraint)">
            <summary>
            Creates a new <strong>HierarchicalSideBySideConstraint</strong> by
            copying an existing one.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name='source'> The origin of the copy.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSideBySideConstraint.Copy">
            <summary>
            Copies the constraint.
            </summary>
            <remarks>  
            <p>
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSideBySideConstraint.GetGroup">
            <summary>
            Returns the group of this constraint.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.HierarchicalSameLevelConstraint">
             <summary>
             The class <strong>HierarchicalSameLevelConstraint</strong> is a
             constraint that forces two nodes to be placed at the same level.
             </summary>
             <remarks> 
             <p>
             The constraint is evaluated, if the incremental mode is disabled. If
             the incremental mode is enabled, the constraint is only evaluated if
             at least one of the nodes is marked for incremental recalculation,
             because otherwise, the incremental positions of the nodes are
             dominant. 
             </p>
             <p>
             Among the constraints, this kind has the highest priority. If several
             conflicting constraints are specified (such as the node must be
             placed in a lower level than another node <i>and</i> at the same
             level as this other node), the constraints with lower priority are
             ignored during layout. 
             </p>
             <p>
             The automatic conflict resolution can handle conflicting constraints.
             However, to speedup the layout, it is recommended to specify
             constraints in a way such that there are no conflicts.  
             </p>
             <p>
             The same level constraint has the same priority as the group spread
             constraint, because both cannot be conflicting. In fact, there are
             two ways of forcing two nodes to the same level: use the same level
             constraint, or use a group spread constraint of a group of two nodes
             with spread size 0. 
             </p>
             <p>
             </p>
             </remarks>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MarkForIncremental(System.Object)"/>
             <example>
             <para lang="cs,vbnet">The following example shows how to use
             the constraint to place two nodes in the same level.
             </para>
             <code lang="cs">
             using System;
             using ILOG.Diagrammer;
             using ILOG.Diagrammer.Graphic;
             using ILOG.Diagrammer.GraphLayout;
            
             // node1 and node2 are part of group
             Group group = ...;
             GraphicObject node1 = ...;
             GraphicObject node2 = ...;
            
             HierarchicalLayout layout = new HierarchicalLayout();
             group.GraphLayout = layout;
            
             layout.Constraints.Add(
                 new HierarchicalSameLevelConstraint(node1, node2))
             group.PerformGraphLayout();
             </code>
             <code lang="vbnet">
             Imports System
             Imports ILOG.Diagrammer
             Imports ILOG.Diagrammer.Graphic
             Imports ILOG.Diagrammer.GraphLayout
            
             ' node1 and node2 are part of group
             Dim group As Group = ...
             Dim node1 As GraphicObject = ...
             Dim node2 As GraphicObject = ...
            
             Dim layout As HierarchicalLayout = New HierarchicalLayout
             group.GraphLayout = layout
            
             layout.Constraints.Add(
                 New HierarchicalSameLevelConstraint(node1, node2))
             group.PerformGraphLayout
             </code>
             </example>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSameLevelConstraint.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalSideBySideConstraint"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSameLevelConstraint.#ctor(System.Object,System.Object)">
            <summary>
            Creates a new <strong>HierarchicalSameLevelConstraint</strong>.
            </summary>
            <param name="node1"> The one node.
            </param>
            <param name="node2"> The other node.
            </param>
            <example>
            <para lang="cs,vbnet">The following example shows how to use
            the constraint.
            It forces <strong>node1</strong> to be placed at the
            same level as <strong>node2</strong>.
            </para>
            <code lang="cs">
            layout.Constraints.Add(
                new HierarchicalSameLevelConstraint(node1, node2));
            </code>
            <code lang="vbnet">
            layout.Constraints.Add(
                New HierarchicalSameLevelConstraint(node1, node2))
            </code>
            </example>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSameLevelConstraint.#ctor(ILOG.Diagrammer.GraphLayout.HierarchicalSameLevelConstraint)">
            <summary>
            Creates a new <strong>HierarchicalSameLevelConstraint</strong> by
            copying an existing one.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name='source'> The origin of the copy.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSameLevelConstraint.Copy">
            <summary>
            Copies the constraint.
            </summary>
            <remarks>  
            <p>
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSameLevelConstraint.GetFirstNode">
            <summary>
            Returns the first node of this constraint.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSameLevelConstraint.GetSecondNode">
            <summary>
            Returns the second node of this constraint.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.HierarchicalGroupSpreadConstraint">
             <summary>
             The class <strong>HierarchicalGroupSpreadConstraint</strong> is a
             constraint that forces a group of nodes to be placed no more than a
             specified number of levels apart.
             </summary>
             <remarks>
             Nodes are organized in horizontal or vertical levels numbered from 0
             to "n". If the link flow direction is from top to bottom, the nodes
             with level index 0 are placed in the topmost level, and the nodes
             with higher level indices are placed in the levels below. If the link
             flow direction is from left to right, the nodes with level index 0
             are placed in the leftmost level, and the nodes with higher level
             indices are placed in the levels farther to the right. 
             <p>
             For instance, a constraint with spread size 2 forces the group to be
             placed such that the group node with smallest level index is no more
             than 2 levels apart from the group node with largest level index. All
             remaining nodes are placed in between. Assume that the group consists
             of the nodes A, B, and C. The group spread constraint is satisfied if
             the levels of A, B and C are 1, 2, 3. It is also satisfied if the
             levels of A, B and C are 10, 9, 8, or 10, 10, 12 or 10, 11, 11, or
             10, 10, 10. But it is not satisfied if the levels of A, B and C are
             10, 13, 12, because the highest node B is in this case more than 2
             levels apart from the lowest node A. 
             </p>
             <p>
             The constraint is evaluated, if the incremental mode is disabled. If
             the incremental mode is enabled, the constraint is only evaluated if
             the nodes of the group are marked for incremental recalculation,
             because otherwise, the incremental positions of the nodes are
             dominant. 
             </p>
             <p>
             Among the constraints, this kind has the highest priority. If several
             conflicting constraints are specified (such as two nodes must be
             placed no more than 2 number of levels apart, <i>but</i> in level 1
             and 10), the constraints with lower priority are ignored during
             layout. 
             </p>
             <p>
             The automatic conflict resolution can handle conflicting constraints.
             However, to speedup the layout, it is recommended to specify
             constraints in a way such that there are no conflicts.  
             </p>
             <p>
             The group spread constraint has the same priority as the same level
             constraint, because both cannot be conflicting. In fact, there are
             two ways of forcing two nodes to the same level: use the same level
             constraint, or use a group spread constraint of a group of two nodes
             with spread size 0. 
             </p>
             <p>
             </p>
             </remarks>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MarkForIncremental(System.Object)"/>
             <example>
             <para lang="cs,vbnet">The following example shows how to use
             the constraint to force nodes to be placed no more than 2 levels apart.
             </para>
             <code lang="cs">
             using System;
             using ILOG.Diagrammer;
             using ILOG.Diagrammer.Graphic;
             using ILOG.Diagrammer.GraphLayout;
            
             // nodes are part of group
             Group group = ...;
             GraphicObject node1 = ...;
             GraphicObject node2 = ...;
             GraphicObject node3 = ...;
            
             HierarchicalLayout layout = new HierarchicalLayout();
             group.GraphLayout = layout;
            
             HierarchicalNodeGroup nodeGroup = new HierarchicalNodeGroup();
             nodeGroup.Add(node1);
             nodeGroup.Add(node2);
             nodeGroup.Add(node3);
             layout.Constraints.Add(
                 new HierarchicalGroupSpreadConstraint(nodeGroup, 2));
             group.PerformGraphLayout();
             </code>
             <code lang="vbnet">
             Imports System
             Imports ILOG.Diagrammer
             Imports ILOG.Diagrammer.Graphic
             Imports ILOG.Diagrammer.GraphLayout
            
             ' nodes are part of group
             Dim group As Group = ...
             Dim node1 As GraphicObject = ...
             Dim node2 As GraphicObject = ...
             Dim node3 As GraphicObject = ...
            
             Dim layout As HierarchicalLayout = New HierarchicalLayout
             group.GraphLayout = layout
            
             Dim nodeGroup As HierarchicalNodeGroup = New HierarchicalNodeGroup
             nodeGroup.Add(node1)
             nodeGroup.Add(node2)
             nodeGroup.Add(node3)
             layout.Constraints.Add(
                 New HierarchicalGroupSpreadConstraint(nodeGroup, 2))
             group.PerformGraphLayout
             </code>
             </example>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalGroupSpreadConstraint.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalGroupSpreadConstraint"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalGroupSpreadConstraint.#ctor(ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup,System.Int32)">
            <summary>
            Creates a new <strong>HierarchicalGroupSpreadConstraint</strong>.
            </summary>
            <param name="group"> The node group.
            </param>
            <param name="spreadSize"> The maximum number of levels two nodes of
            the group can be apart.
            </param>
            <example>
            <para lang="cs,vbnet">The following example shows how to use
            the constraint to force nodes to be placed no more than 2 levels apart.
            </para>
            <code lang="cs">
            HierarchicalNodeGroup nodeGroup = ...;
            layout.Constraints.Add(
                new HierarchicalGroupSpreadConstraint(nodeGroup, 2));
            </code>
            <code lang="vbnet">
            Dim nodeGroup As HierarchicalNodeGroup = ...
            layout.Constraints.Add(
                New HierarchicalGroupSpreadConstraint(nodeGroup, 2))
            </code>
            </example>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalGroupSpreadConstraint.SpreadSize"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalGroupSpreadConstraint.#ctor(ILOG.Diagrammer.GraphLayout.HierarchicalGroupSpreadConstraint)">
            <summary>
            Creates a new <strong>HierarchicalGroupSpreadConstraint</strong> by
            copying an existing one.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name='source'> The origin of the copy.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalGroupSpreadConstraint.Copy">
            <summary>
            Copies the constraint.
            </summary>
            <remarks>  
            <p>
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalGroupSpreadConstraint.GetGroup">
            <summary>
            Returns the group of this constraint.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalGroupSpreadConstraint.SpreadSize">
            <summary>
            Gets or sets the spread size of the group.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <value>The maximum number of levels two nodes of the group can be
            apart.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.HierarchicalExtremityConstraint">
             <summary>
             The class <strong>HierarchicalExtremityConstraint</strong> is a
             constraint that forces the node to be placed at an extremal level, or
             at one of the extremal sides of a level.
             </summary>
             <remarks> 
             <p>
             Nodes are organized in horizontal or vertical levels numbered from 0
             to "n". The first level is the north pole level, and the last level
             is the south pole level. If the link flow direction is from top to
             bottom, the nodes with level index 0 are placed in the topmost level,
             and the nodes with higher level indices are placed in the levels
             below. North is at the top and south is at the bottom of the drawing
             in this case. If the link flow direction is from left to right, the
             nodes with level index 0 are placed in the leftmost level, and the
             nodes with higher level indices are placed in the levels farther to
             the right. North is at the left side and south is at the right side
             of the drawing in this case. 
             </p>
             <p>
             A north extremity constraint causes a node to be placed at level 0
             (that is, at the top if the flow direction is top to bottom, or at
             the left if the flow direction is left to right), and all other nodes
             to be placed at a level with higher index. A south extremity
             constraint causes a node to be placed at the level with highest index
             (that is, at the bottom if the flow direction is top to bottom, or at
             the right if the flow direction is left to right), and all other
             nodes to be placed at a level with lower index. If for instance a
             south extremity constraint is specified for several nodes, these
             nodes are all placed at the same level with highest index. 
             </p>
             <p>
             Within each level, the nodes are placed sequentially from west to
             east at relative positions numbered from 0 to "m". If the link flow
             direction is from top to bottom, the node with position index 0 is
             placed leftmost within its level, and the nodes with higher position
             indices are placed farther to the right. West is at the left side and
             east is at the right side of the drawing in this case. If the link
             flow direction is from left to right, the node with position index 0
             is placed bottommost within its level, and the nodes with higher
             position indices are placed above. West is at the bottom side and
             east is at the top side of the drawing in this case. 
             </p>
             <p>
             A west extremity constraint causes a node to be placed at position
             index 0, and an east extremity constraint causes a node to be placed
             at the highest position index of its level. Note that the east and
             west extremity constraint are local to each level: an node with east
             extremity constraint is not placed at the eastmost corner of the
             entire drawing, but only eastmost relative to its own level. 
             </p>
             <p>
             Of course, you should not specify level indices for nodes additional
             to north or south extremity constraints, and you should not specify
             position indices for nodes additional to east or west extremity
             constraints. 
             </p>
             <p>
             The constraint is evaluated, if the incremental mode is disabled. If
             the incremental mode is enabled, the constraint is only evaluated if
             the constraint node is marked for incremental recalculation, because
             otherwise, the incremental positions of the nodes are dominant. 
             </p>
             <p>
             </p>
             </remarks>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.MarkForIncremental(System.Object)"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetSpecNodeLevelIndex(System.Object,System.Int32)"/>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetSpecNodePositionIndex(System.Object,System.Int32)"/>
             <seealso cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.North"/>
             <seealso cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.South"/>
             <seealso cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.West"/>
             <seealso cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.East"/>
             <example>
             <para lang="cs,vbnet">The following example shows how to use
             the constraint to place the node in a level with higher index than
             all other nodes.</para>
             <code lang="cs">
             using System;
             using ILOG.Diagrammer;
             using ILOG.Diagrammer.Graphic;
             using ILOG.Diagrammer.GraphLayout;
            
             // node is part of group
             Group group = ...;
             GraphicObject node = ...;
            
             HierarchicalLayout layout = new HierarchicalLayout();
             group.GraphLayout = layout;
            
             layout.Constraints.Add(
                 new HierarchicalExtremityConstraint(node, HierarchicalLayoutSide.South));
             group.PerformGraphLayout();
             </code>
             <code lang="vbnet">
             Imports System
             Imports ILOG.Diagrammer
             Imports ILOG.Diagrammer.Graphic
             Imports ILOG.Diagrammer.GraphLayout
            
             ' node is part of group
             Dim group As Group = ...
             Dim node As GraphicObject = ...
            
             Dim layout As HierarchicalLayout = New HierarchicalLayout
             group.GraphLayout = layout
            
             layout.Constraints.Add(
                 New HierarchicalExtremityConstraint(node, HierarchicalLayoutSide.South))
             group.PerformGraphLayout
             </code>
             </example>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalExtremityConstraint.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalExtremityConstraint"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalExtremityConstraint.#ctor(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)">
            <summary>
            Creates a new <strong>HierarchicalExtremityConstraint</strong>.
            </summary>
            <remarks>
            The side parameter of the constructor can be set to the
            following compass directions:
            <ul style="margin-left:1.5cm">
            <li><see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.North"/> for the first level,
            </li>
            <li><see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.South"/> for the last level,
            </li>
            <li><see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.West"/> for the first position
            within a level, </li>
            <li><see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.East"/> for the last position
            within a level. </li>
            </ul>
            </remarks>
            <param name="node"> A node that should be placed at the extremity.
            </param>
            <param name="side"> The compass side that specifies the extremity.
            </param>
            <example>
            <para lang="cs,vbnet">The following examples shows how to use
            the constraint.
            It forces <strong>node1</strong> to be placed in the
            level with lowest index, and <strong>node2</strong> to be placed in
            the level with highest index. This means the <strong>node1</strong>
            is placed in level 0, and the <strong>node2</strong> is placed in a
            level with higher index than all other nodes. It furthermore
            forces <strong>node3</strong> to be placed first within its level
            and <strong>node4</strong> to be placed last within its level.
            For instance, if the link flow direction is from top to bottom, this
            means that the <strong>node1</strong> is placed topmost, the
            <strong>node2</strong> is placed bottommost, furthermore the
            <strong>node3</strong> is placed leftmost within its level, and the
            <strong>node4</strong> is placed rightmost within its level.
            </para>
            <code lang="cs">
            layout.Constraints.Add(
              new HierarchicalExtremityConstraint(node1, HierarchicalLayoutSide.North));
            layout.Constraints.Add(
              new HierarchicalExtremityConstraint(node2, HierarchicalLayoutSide.South));
            layout.Constraints.Add(
              new HierarchicalExtremityConstraint(node3, HierarchicalLayoutSide.West));
            layout.Constraints.Add(
              new HierarchicalExtremityConstraint(node4, HierarchicalLayoutSide.East));
            </code>
            <code lang="vbnet">
            layout.Constraints.Add(
              New HierarchicalExtremityConstraint(node1, HierarchicalLayoutSide.North))
            layout.Constraints.Add(
              New HierarchicalExtremityConstraint(node2, HierarchicalLayoutSide.South))
            layout.Constraints.Add(
              New HierarchicalExtremityConstraint(node3, HierarchicalLayoutSide.West))
            layout.Constraints.Add(
              New HierarchicalExtremityConstraint(node4, HierarchicalLayoutSide.East))
            </code>
            </example>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalExtremityConstraint.Side"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalExtremityConstraint.#ctor(ILOG.Diagrammer.GraphLayout.HierarchicalExtremityConstraint)">
            <summary>
            Creates a new <strong>HierarchicalExtremityConstraint</strong> by
            copying an existing one.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name='source'> The origin of the copy.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalExtremityConstraint.Copy">
            <summary>
            Copies the constraint.
            </summary>
            <remarks>  
            <p>
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalExtremityConstraint.GetNode">
            <summary>
            Returns the node of this constraint.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalExtremityConstraint.Side">
            <summary>
            Gets or sets the side at which extremity the node should be placed.
            </summary>
            <remarks>
            The side can be one of the following options:
            <ul style="margin-left:1.5cm">
            <li><see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.North"/> for the first level,
            </li>
            <li><see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.South"/> for the last level,
            </li>
            <li><see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.West"/> for the first position
            within a level, </li>
            <li><see cref="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.East"/> for the last position
            within a level. </li>
            </ul>
            </remarks>
            <value>The compass side that specifies the extremity.
            </value>
            <example>
            <para lang="cs,vbnet">The following examples shows how to set the side 
            for constraints.
            The first statement forces the node of
            <strong>constraint1</strong> to be placed in the level with lowest
            index. The second statement forces the node of
            <strong>constraint2</strong> to be placed in the level with highest
            index. The third statement forces the node of
            <strong>constraint3</strong> to be placed first within its level.
            The fourth statement forces the node of
            <strong>constraint4</strong> to be places last within its level.
            For instance, if the link flow direction is from top to bottom, this
            means that the node of <strong>constraint1</strong> is placed
            topmost, the node of <strong>constraint2</strong> is placed
            bottommost, furthermore the node of <strong>constraint3</strong> is
            placed leftmost within its level, and the node of
            <strong>constraint4</strong> is placed rightmost within its level.
            </para>
            <code lang="cs">
            constraint1.Side = HierarchicalLayoutSide.North;
            constraint2.Side = HierarchicalLayoutSide.South;
            constraint3.Side = HierarchicalLayoutSide.West;
            constraint4.Side = HierarchicalLayoutSide.East;
            </code>
            <code lang="vbnet">
            constraint1.Side = HierarchicalLayoutSide.North
            constraint2.Side = HierarchicalLayoutSide.South
            constraint3.Side = HierarchicalLayoutSide.West
            constraint4.Side = HierarchicalLayoutSide.East
            </code>
            </example>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint">
             <summary>
             The class <strong>HierarchicalSwimLaneConstraint</strong> is a
             constraint that forces a group of nodes to be placed in the same
             column or row.
             </summary>
             <remarks>
             Swim lanes are orthogonal to the levels. If the link flow direction
             is towards bottom or top, the levels are horizontal rows and the swim
             lanes are vertical columns. If the flow direction is towards left or
             right, the levels are vertical columns and the swim lanes are
             horizontal rows. 
             <p>
             The nodes of the same swim lane are placed so that it is possible to
             draw a surrounding rectangle around them. Swim lanes allow to
             organize the graph in a table-like manner. For instance, you may have
             a workflow diagram where nodes represent actions, then the swim lanes
             could represent the departments that perform these actions. Each node
             can only belong to one swim lane. 
             </p>
             <p>
             A swim lane constraint is always evaluated, even if the incremental
             mode is enabled. The constraint has a higher priority than the
             relative position constraint and the side by side constraint. You can
             specify side by side constraints for a group of nodes that belong to
             the same swim lane, but side by side constraints of nodes of
             different swim lanes are ignored. You can specify relative position
             constraints between nodes of the same swim lane. You can also specify
             relative position constraints between one entire swimlane group and
             another swimlane group, which effectively orders the swimlanes. But
             relative position constraints are ignored if they would require to
             break the swimlanes apart. The swim lane constraint dominates the
             specified position indices and the extremity constraints, i.e., if a
             swim lane constraint is used, you cannot specify position indices or
             east/west extremity constraints for any node. 
             </p>
             <p>
             The automatic conflict resolution can handle conflicting constraints.
             However, to speedup the layout, it is recommended to specify
             constraints in a way such that there are no conflicts.  
             </p>
             <p>
             </p>
             </remarks>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
             <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>
             <example>
             <para lang="cs,vbnet">The following example shows how to use
             the constraint to force nodes to be placed in the same swim lane.
             </para>
             <code lang="cs">
             using System;
             using ILOG.Diagrammer;
             using ILOG.Diagrammer.Graphic;
             using ILOG.Diagrammer.GraphLayout;
            
             // nodes are part of group
             Group group = ...;
             GraphicObject node1 = ...;
             GraphicObject node2 = ...;
             GraphicObject node3 = ...;
            
             HierarchicalLayout layout = new HierarchicalLayout();
             group.GraphLayout = layout;
            
             HierarchicalNodeGroup nodeGroup = new HierarchicalNodeGroup();
             nodeGroup.Add(node1);
             nodeGroup.Add(node2);
             nodeGroup.Add(node3);
             layout.Constraints.Add(
                 new HierarchicalSwimLaneConstraint(nodeGroup));
             group.PerformGraphLayout();
             </code>
             <code lang="vbnet">
             Imports System
             Imports ILOG.Diagrammer
             Imports ILOG.Diagrammer.Graphic
             Imports ILOG.Diagrammer.GraphLayout
            
             ' nodes are part of group
             Dim group As Group = ...
             Dim node1 As GraphicObject = ...
             Dim node2 As GraphicObject = ...
             Dim node3 As GraphicObject = ...
            
             Dim layout As HierarchicalLayout = New HierarchicalLayout
             group.GraphLayout = layout
            
             Dim nodeGroup As HierarchicalNodeGroup = New HierarchicalNodeGroup
             nodeGroup.Add(node1)
             nodeGroup.Add(node2)
             nodeGroup.Add(node3)
             layout.Constraints.Add(
                 New HierarchicalSwimLaneConstraint(nodeGroup))
             group.PerformGraphLayout
             </code>
             </example>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.#ctor(ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup)">
            <summary>
            Creates a new <strong>HierarchicalSwimLaneConstraint</strong>.
            </summary>
            <param name="group"> The node group.
            </param>
            <example>
            <para lang="cs,vbnet">The following example shows how to use
            the constraint. It forces the nodes of <strong>nodeVector</strong> to be
            placed in a swim lane.
            </para>
            <code lang="cs">
            HierarchicalNodeGroup nodeGroup = ...;
            layout.Constraints.Add(
                new HierarchicalSwimLaneConstraint(nodeGroup));
            </code>
            <code lang="vbnet">
            Dim nodeGroup As HierarchicalNodeGroup = ...
            layout.Constraints.Add(
                New HierarchicalSwimLaneConstraint(nodeGroup))
            </code>
            </example>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.#ctor(ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup,System.Single,System.Int32)">
            <summary>
            Creates a new <strong>HierarchicalSwimLaneConstraint</strong>.
            </summary>
            <remarks>
            Swim lanes may have a relative size. If the link flow direction is
            towards bottom or top, the swim lanes are columns in the layout and
            the relative size indicates the width of the column. If all swim
            lanes have the same relative size, the layout arranges the swim
            lanes so that they have the same width. If for instance a swim lane
            has relative size 3, then its width is three times larger than a
            swim lane with relative size 1. If you do not want to restrict the
            width of the columns, specify the relative size 0, which indicates
            that the layout calculate an appropriate width of the column that is
            independent from the width of the other columns.
            <p>
            If the flow direction is towards left or right, the swim lanes are
            rows in the layout and the relative size indicates the height of the
            row. The relative size of a swim lane may be ignored in incremental
            mode if the node movement mode is
            <strong>HierarchicalLayoutMovementMode.Fixed</strong>.
            </p>
            <p>
            Similar as nodes have position indices, the swim lanes are placed
            sequentially at relative positions numbered from <strong>0</strong>
            to <strong>n</strong>. In a top-down layout, the swim lane with
            position 0 is the leftmost swim lane, and the swim lanes with higher
            position indices are placed farther to the right. If the swim lanes
            has the position index <strong>-1</strong>, the layout algorithm
            determines the appropriate position automatically.
            </p>
            </remarks>
            <param name="group"> The node group.
            </param>
            <param name="relativeSize"> The relative size of the swim lane.
            </param>
            <param name="positionIndex"> The position index of the swim lane.
            </param>
            <example>
            <para lang="cs,vbnet">The following example shows how to use
            the constraint. It forces the nodes of <strong>nodeGroup</strong> to be
            placed in a swim lane. The size of the swim lane is 1 unit, and it
            is the first swim lane, because it has the position index 0.
            </para>
            <code lang="cs">
            HierarchicalNodeGroup nodeGroup = ...;
            layout.Constraints.Add(
                new HierarchicalSwimLaneConstraint(nodeGroup, 1f, 0));
            </code>
            <code lang="vbnet">
            Dim nodeGroup As HierarchicalNodeGroup = ...
            layout.Constraints.Add(
                New HierarchicalSwimLaneConstraint(nodeGroup, 1f, 0))
            </code>
            </example>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.RelativeSize"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.SpecPositionIndex"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetSpecNodePositionIndex(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.#ctor(ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup,System.Single,System.Int32,System.Single)">
            <summary>
            Creates a new <strong>HierarchicalSwimLaneConstraint</strong>.
            </summary>
            <remarks>
            Swim lanes may have a relative size and a minimal margin. If the
            link flow direction is towards bottom or top, the swim lanes are
            columns in the layout, the relative size indicates the width of the
            column, and the minimal margin is at the left and right side of the
            swim lane. If all swim lanes * have the same relative size, the
            layout arranges the swim lanes so that they have the same width. If
            for instance a swim lane has relative size 3, then its width is
            three times larger than a swim lane with relative size 1. If you do
            not want to restrict the width of the columns, specify the relative
            size 0, which indicates that the layout calculates an appropriate
            width of the column that is independent from the width of the other
            columns.
            <p>
            If the flow direction is towards left or right, the swim lanes are
            rows in the layout, the relative size indicates the height of the
            row, and the minimal margin is at the top and bottom side of the
            swim lane. The relative size of a swim lane may be ignored in
            incremental mode if the node movement mode is
            <strong>HierarchicalLayoutMovementMode.Fixed</strong>.
            </p>
            <p>
            Similar as nodes have position indices, the swim lanes are placed
            sequentially at relative positions numbered from <strong>0</strong>
            to <strong>n</strong>. In a top-down layout, the swim lane with
            position 0 is the leftmost swim lane, and the swim lanes with higher
            position indices are placed farther to the right. If the swim lanes
            has the position index <strong>-1</strong>, the layout algorithm
            determines the appropriate position automatically.
            </p>
            <p>
            </p>
            </remarks>
            <param name="group"> The node group.
            </param>
            <param name="relativeSize"> The relative size of the swim lane.
            </param>
            <param name="positionIndex"> The position index of the swim lane.
            </param>
            <param name="minMargin"> The minimal margin of the swim lane.
            </param>
            <example>
            <para lang="cs,vbnet">The following example shows how to use
            the constraint. It forces the nodes of <strong>nodeVector</strong> to be
            placed in a swim lane. The size of the swim lane is 1 unit, and it
            is the first swim lane, because it has the position index 0. The
            minimal margin of the swim lane is 5 units.
            </para>
            <code lang="cs">
            HierarchicalNodeGroup nodeGroup = ...;
            layout.Constraints.Add(
                new HierarchicalSwimLaneConstraint(nodeGroup, 1f, 0, 5f));
            </code>
            <code lang="vbnet">
            Dim nodeGroup As HierarchicalNodeGroup = ...
            layout.Constraints.Add(
                New HierarchicalSwimLaneConstraint(nodeGroup, 1f, 0, 5f))
            </code>
            </example>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.RelativeSize"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.SpecPositionIndex"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetSpecNodePositionIndex(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.#ctor(ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint)">
            <summary>
            Creates a new <strong>HierarchicalSwimLaneConstraint</strong> by
            copying an existing one.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name='source'> The origin of the copy.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.Copy">
            <summary>
            Copies the constraint.
            </summary>
            <remarks>  
            <p>
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.GetGroup">
            <summary>
            Returns the group of this constraint.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.GetCalcBoundingBox">
            <summary>
            Returns the calculated bounding box of the swim lane.
            </summary>
            <remarks>
            It is available after layout, and can be used to draw a surrounding
            rectangle for the swim lane. The coordinates of the rectangle are in
            graphic container or view coordinates, depending on the coordinate
            mode of the layout instance. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.RelativeSize"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.CoordinatesMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.GetCalcPositionIndex">
            <summary>
            Returns the calculated position index of the swim lane.
            </summary>
            <remarks>
            It is available after layout. The calculated position index is the
            same as the specified position index unless <strong>-1</strong> was
            specified. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.SpecPositionIndex"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.RelativeSize">
            <summary>
            Gets or sets the relative size of the swim lane.
            </summary>
            <remarks>
            If the link flow direction is towards bottom or top, the swim lanes
            are columns in the layout and the relative size indicates the width
            of the column. If all swim lanes have the same relative size, the
            layout arranges the swim lanes so that they have the same width. If
            for instance a swim lane has relative size 3, then its width is
            three times larger than a swim lane with relative size 1. If you do
            not want to restrict the width of the columns, specify the relative
            size 0, which indicates that the layout calculate an appropriate
            width of the column that is independent from the width of the other
            columns. 
            <p>
            If the flow direction is towards left or right, the swim lanes are
            rows in the layout and the relative size indicates the height of the
            row. 
            </p>
            <p>
            The relative size of a swim lane may be ignored in incremental mode
            if the node movement mode is
            <strong>HierarchicalLayoutMovementMode.Fixed</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetIncrementalNodeMovementMode(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutMovementMode)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalNodeMovementMode"/>
            <value>The relative size of the swim lane.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.MinMargin">
            <summary>
            Gets or sets the minimal margin of the swim lane.
            </summary>
            <remarks>
            If the link flow direction is towards bottom or top, the swim lanes
            are columns in the layout and the margin is at the left and right
            side. If the flow direction is towards left or right, the swim lanes
            are rows in the layout and the margin is at the top and bottom side.
            
            <p>
            The default margin is <strong>0</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The minimal margin of the swim lane.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.SpecPositionIndex">
            <summary>
            Gets or sets the specified position index of the swim lane.
            </summary>
            <remarks>
            Similar as nodes have position indices, the swim lanes are placed
            sequentially at relative positions numbered from <strong>0</strong>
            to <strong>n</strong>. In a top-down layout, the swim lane with
            position 0 is the leftmost swim lane, and the swim lanes with higher
            position indices are placed farther to the right. If the swim lanes
            has the position index <strong>-1</strong>, the layout algorithm
            determines the appropriate position automatically. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalSwimLaneConstraint.GetCalcPositionIndex"/>
            <value>The specified position index of the swim lane.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.Filter">
             <summary>
             Defines an image filter that can be applied to a graphic object.
             </summary>
             <remarks>The <see cref="T:ILOG.Diagrammer.Filter"/> class represents an image filter that can be applied
             to a <see cref="T:ILOG.Diagrammer.GraphicObject"/>. You specify an image filter on a graphic object using the <see cref="P:ILOG.Diagrammer.GraphicObject.Filter"/>
             property of the <see cref="T:ILOG.Diagrammer.GraphicObject"/> class.
             <p/>
             A filter is defined as a series of filter effects. Each filter effect creates a simple bitmap filter operation. Filter
             effects are sub classes of the <see langword="abstract"/> class <see cref="T:ILOG.Diagrammer.FilterEffect"/>. The combination of several
             filter effects will give the final filter result. 
             <p/>
             Two important filter effects are the "source graphic" represented by the <see cref="T:ILOG.Diagrammer.Filters.FeSourceGraphic"/> class and the "source alpha"
             represented by the <see cref="T:ILOG.Diagrammer.Filters.FeSourceAlpha"/> class. The "source graphic" is a filter effect whose result is an image containing
             the original drawing of the graphic object without filter applied. The "source alpha" is similar to the "source graphic" but the
             resulting image contains only the alpha component.
             <p/>
             The various filter effects are the following:
             <ul>
             <li>
             <see cref="T:ILOG.Diagrammer.Filters.FeBlend"/> This filter composites two images together using commonly used imaging software blending modes. 
             </li>
            	<li>
             <see cref="T:ILOG.Diagrammer.Filters.FeColorMatrix"/>: Applies a matrix transformation to the RGBA colors and alpha values of every pixel of the input image.
             </li>
            	<li>
             <see cref="T:ILOG.Diagrammer.Filters.FeComponentTransfer"/>: Applies a component-wise remapping of every pixel of the input image and can 
             be used for operations like brightness adjustment, contrast adjustment, color balance or thresholding.
             </li>
            	<li>
             <see cref="T:ILOG.Diagrammer.Filters.FeComposite"/>: This filter performs the combination of the two input images 
             pixel-wise in image space using one of the Porter-Duff compositing operations: 
             over, in, atop, out, xor. Additionally, a component-wise arithmetic operation (with the 
             result clamped between [0..1]) can be applied.
             </li>
            	<li>
             <see cref="T:ILOG.Diagrammer.Filters.FeConvolveMatrix"/>: applies a matrix convolution filter effect. 
             A convolution combines pixels in the input image with neighboring pixels to produce a resulting image.
             </li>
            	<li>
             <see cref="T:ILOG.Diagrammer.Filters.FeDiffuseLighting"/>: This filter primitive lights an image using 
             the alpha channel as a bump map. The resulting image is an RGBA opaque image based on 
             the light color with alpha = 1.0 everywhere. The lighting calculation follows the standard 
             diffuse component of the Phong lighting model.
             </li>
            	<li>
             <see cref="T:ILOG.Diagrammer.Filters.FeDisplacementMap"/>: This filter primitive uses the pixels values 
             from the second image to spatially displace the image from first input image.
             </li>
            	<li>
             <see cref="T:ILOG.Diagrammer.Filters.FeFlood"/>: This filter primitive creates a rectangle filled with a specified color and opacity.
            	</li>
             <li>
             <see cref="T:ILOG.Diagrammer.Filters.FeGaussianBlur"/>: This filter primitive performs a Gaussian blur on the input image.
            	</li>
             <li>
             <see cref="T:ILOG.Diagrammer.Filters.FeImage"/>: This filter primitive refers to another graphic object 
             or raster image, which is rendered into an RGBA raster and becomes the result of the filter primitive.
            	</li>
             <li>
             <see cref="T:ILOG.Diagrammer.Filters.FeMerge"/>: This filter primitive composites input image layers on top of each other using the over operator.
            	</li>
             <li>
             <see cref="T:ILOG.Diagrammer.Filters.FeMorphology"/>: This filter primitive performs "fattening" 
             or "thinning" of artwork. It is particularly useful for fattening or thinning an alpha channel.
            	</li>
             <li>
             <see cref="T:ILOG.Diagrammer.Filters.FeOffset"/>: This filter primitive offsets the input image relative to its 
             current position in the image space by the specified vector.
            	</li>
             <li>
             <see cref="T:ILOG.Diagrammer.Filters.FeSpecularLighting"/>: This filter primitive lights a source graphic using 
             the alpha channel as a bump map. The resulting image is an RGBA image based on the light
             color. The lighting calculation follows the standard specular component of the Phong lighting model.
             </li>
            	<li>
             <see cref="T:ILOG.Diagrammer.Filters.FeTile"/>: This filter primitive fills a target rectangle with 
             a repeated, tiled pattern of an input image.
             </li>
            	<li>
             <see cref="T:ILOG.Diagrammer.Filters.FeTurbulence"/>: This filter primitive creates an image using the
            	Perlin turbulence function. It allows the synthesis of artificial textures like clouds 
            	or marble. For a detailed description of the Perlin turbulence function, 
            	see "Texturing and Modeling", Ebert et al, AP Professional, 1994.
             </li>
             </ul>
             </remarks>
             <example>
             <para>The following sample shows how to create a drop shadow filter.</para>
             <code lang="cs">
             Filter CreateDropShadowFilter()
             {
                 Filter filter = new Filter();
            
                 FeGaussianBlur gaussianBlur = new FeGaussianBlur(4f, 4f);
                 gaussianBlur.In = new FeSourceAlpha();
            
                 FeOffset offset = new FeOffset(5f, 5f);
                 offset.In = gaussianBlur;
            
                 FeMerge merge = new FeMerge();
            
                 merge.Inputs.Add(offset);
                 merge.Inputs.Add(new FeSourceGraphic());
            
                 filter.Effects.Add(gaussianBlur);
                 filter.Effects.Add(offset);
                 filter.Effects.Add(merge);
             
                 return filter;
             }
             </code>
             <code lang="vbnet">
             Function CreateDropShadowFilter() As Filter 
             
                 Dim filter As Filter = New Filter 
             
                 Dim gaussianBlur As FeGaussianBlur = New FeGaussianBlur(4F, 4F) 
                 gaussianBlur.In = New FeSourceAlpha 
             
                 Dim offset As FeOffset = New FeOffset(5F, 5F) 
                 offset.In = gaussianBlur 
             
                 Dim merge As FeMerge = New FeMerge
             
                 merge.Inputs.Add(offset);
                 merge.Inputs.Add(New FeSourceGraphic())
            
                 filter.Effects.Add(gaussianBlur)
                 filter.Effects.Add(offset)
                 filter.Effects.Add(merge)
            
                 Return filter 
             End Function
             </code>
             </example>
             <seealso cref="P:ILOG.Diagrammer.GraphicObject.Filter">GraphicObject.Filter</seealso>
             <seealso cref="T:ILOG.Diagrammer.FilterEffect"/>
        </member>
        <member name="F:ILOG.Diagrammer.Filter.MaxResolution">
            <summary>
            The maximum size of intermediate images.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filter._opacityMatrix">
            <summary>
            Static matrix used for group opacity.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filter._defaultFilterRegion">
            <summary>
            The default filter region in percentage of object bbox.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filter._filters">
            <summary>
            Array of filter effects.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filter._filterUnits">
            <summary>
            Coordinate system for filter region.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filter._primitiveUnits">
            <summary>
            Coordinate system for effect regions.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filter._filterRegion">
            <summary>
            Filter region, may be a percentage of box of a fixed value
            in user space.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filter._resolution">
            <summary>
            The filter resolution in the x/y axis.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filter._serialInfo">
            <summary>
            Temporary store info on deserialization
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Filter"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filter.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filter"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filter.GetBounds(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Computes the bounding rectangle of this 
            filter when applied to the specified graphic object.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Filter.Draw(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Draws the specified graphic object filtered by this filter.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filter.ComputeFilterEffectResult(ILOG.Diagrammer.FilterPaintContext,ILOG.Diagrammer.FilterEffect)">
            <summary>
            Computes the image resulting from this filter effect.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filter.ComputeFilterResult(ILOG.Diagrammer.FilterPaintContext)">
            <summary>
            Computes the image resulting from this filter.
            </summary>
            <returns>The filter result.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Filter.IsWellSpecified">
            <summary>
            Checks if the filter is well specified.
            </summary>
            <remarks>
            Verify that there is at least one filter
            effect. That all filter effects have a
            correct number of inputs and that there is no forward
            looking in the effect and inputs lists.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Filter.Clone">
            <summary>
            Returns a copy of the filter.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filter.Effects">
            <summary>
            Gets the collection of <see cref="T:ILOG.Diagrammer.FilterEffect"/> in this filter.
            </summary>
            <value>A collection of <see cref="T:ILOG.Diagrammer.FilterEffect"/> that represents the collection of all filter effects in this filter.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Filter.FilterRegion">
            <summary>
            Gets and sets the filter region of this filter.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> that represents the region of the graphic object on which this filter applies. By
            default the region is defined as a percentage of the bounding area of the graphic object. The default value is a rectangle
            with the value (-0.1 -0.1 1.2 1.2) which means that the region is 10% larger than the bounding area of the graphic object.
            The region can be defined as a percentage of the object bounding box or in user space, this is defined by the <see cref="P:ILOG.Diagrammer.Filter.FilterUnits"/>
            property.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filter.PrimitiveUnits">
            <summary>
            Gets or sets the unit in which the region-of-filter effects are defined.
            </summary>
            <value>
            One of the <see cref="T:ILOG.Diagrammer.CoordinateSpace"/> values that represents the coordinate space in which the filter effect region (defined
            by the <see cref="P:ILOG.Diagrammer.FilterEffect.FilterEffectRegion"/> property of the <see cref="T:ILOG.Diagrammer.FilterEffect"/> class) is defined. 
            If the value is <see cref="F:ILOG.Diagrammer.CoordinateSpace.ObjectBBox">ObjectBBox</see> then the
            value of the filter region should be considered as percentage of the graphic object's bounding rectangle otherwise the value
            is defined in the current coordinate space. The default value is <strong>UserSpaceOnUse</strong>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filter.FilterUnits">
            <summary>
            Gets or sets the unit in which the filter region is defined.
            </summary>
            <value>
            One of the <see cref="T:ILOG.Diagrammer.CoordinateSpace"/> values that represents the coordinate space in which the filter region (defined
            by the <see cref="P:ILOG.Diagrammer.Filter.FilterRegion"/> property) is defined. If the value is <see cref="F:ILOG.Diagrammer.CoordinateSpace.ObjectBBox">ObjectBBox</see> then the
            value of the filter region should be considered as percentage of the graphic object's bounding rectangle otherwise the value
            is defined in the current coordinate space. The default value is <strong>ObjectBBox</strong>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filter.Resolution">
            <summary>
            Gets and sets the resolution for this filter.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Size"/> object that represents the width and height of 
            intermediate images when processing the filter.
            Care should be taken when assigning a non-default value to this property. 
            Too small of a value may result in unwanted pixelation in the result. 
            Too large of a value may result in slow processing and large memory usage.
            Zero values disable rendering of the element which referenced the filter.
            The default value is (-1,-1) which means that a default appropriate resolution is used.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filter.LastFilterEffect">
            <summary>
            Gets the last filter effect in the filter.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.FilterPaintContext">
            <summary>
            Defines a context that containts information
            for painting a filter for a particular Graphic object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.FilterPaintContext._filter">
            <summary>
            The filter for this execution context.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.FilterPaintContext._obj">
            <summary>
            Graphic object currently being drawn.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.FilterPaintContext._objectGeometryBounds">
            <summary>
            Graphic object geometry bounds
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.FilterPaintContext._bounds">
            <summary>
            The filter bounds 
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.FilterPaintContext._transform">
            <summary>
            Transforms from user space to filter resolution.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.FilterPaintContext._resultsMap">
            <summary>
            Contains bitmap results per filter effect
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.FilterPaintContext._sourceGraphicCache">
            <summary>
            Contains bitmap results for FeSourceGraphic
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.FilterPaintContext._sourceAlphaCache">
            <summary>
            Contains bitmap results for FeSourceAlpha
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.FilterPaintContext._userSpaceBounds">
            <summary>
            User space bounds of each filter effect
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.FilterPaintContext._regionsOfInterest">
            <summary>
            User Space region of interest for each filter effect
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.FilterPaintContext._smoothingMode">
            <summary>
            Quality for rendering graphic objects
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FilterPaintContext.#ctor(ILOG.Diagrammer.Filter,ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.FilterPaintContext"/>.
            </summary>
            <param name="filter">Filter to paint.</param>
            <param name="obj">Graphic object to apply filter to.</param>
        </member>
        <member name="M:ILOG.Diagrammer.FilterPaintContext.ToFilterUnits(ILOG.Diagrammer.Point2D)">
            <summary>
            Transforms the specified vector to filter (bitmap) resolution
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FilterPaintContext.ComputeUserSpaceBounds(ILOG.Diagrammer.FilterEffect)">
            <summary>
            Computes the bounds in the user space currently used of this
            filter effect.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FilterPaintContext.ComputeFilterEffectBounds">
            <summary>
            Computes and stores the bounds of all filter 
            effect in this filter.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FilterPaintContext.RenderLastSourceGraphicOnMerge">
            <summary>
            Tests if last filter effect is a merge with 
            the last source a FeSourceGraphic so that
            we can render the graphic at the end of the process
            rather than in the merge.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.FilterPaintContext.Filter">
            <summary>
            The filter corresponding to the context.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.FilterPaintContext.ObjectGeometryBounds">
            <summary>
            The geometry bounds of the graphic 
            object being painted.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.FilterPaintContext.Transform">
            <summary>
            Gets or sets the transformation matrix from user space to
            filter units.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.FilterPaintContext.Graphic">
            <summary>
            Gets the source graphic object
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.FilterEffectCollection">
            <summary>
            Defines the collection of <see cref="T:ILOG.Diagrammer.FilterEffect"/> .
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Design.FloatArrayConverter">
            <summary>
            A type converter for an array of floats, used for dash patterns and compound arrays of Strokes.
            </summary>
            <remarks>
            Handles to and from string conversions. The string form is a comma-separated list
            of floats.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Design.LinkArrowConverter">
            <summary>
            This converter is only used by the FormatLinkDialog
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Design.CreateLinkArrowConverter">
            <summary>
            This converter is used in the property grid (we must create a new instance
            because arrows can be shared).
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout">
            <summary>
            The main class for the Recursive Multiple Layout algorithm.
            </summary>
            <remarks>
            <p>
            This is not a layout algorithm but rather a facility to perform
            multiple layouts recursively in a nested graph. In principle, this
            is just the combination of Recursive Layout and  Multiple Layout.
            </p>
            <p>
            Unless otherwise mentioned, the normal layout algorithms such as
            <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalLayout"/>,
            <see cref="T:ILOG.Diagrammer.GraphLayout.TreeLayout"/>,
            <see cref="T:ILOG.Diagrammer.GraphLayout.MultipleLayout"/>, and so
            forth work on a flat graph, that is, they lay out the attached graph
            but not the subgraphs of the attached graph. The
            Recursive Multiple Layout is different: it traverses the nesting
            structure starting from the attached graph and recursively applies a
            first graph layout and a second graph layout
            on all subgraphs. It can be tailored for which sublayouts have
            to be applied to which subgraph.
            </p>
            <p>
            The Recursive Multiple Layout is a Recursive Layout (see
            <see cref="T:ILOG.Diagrammer.GraphLayout.RecursiveLayout"/>) where all layouts of subgraphs are
            Multiple Layouts (see
            <see cref="T:ILOG.Diagrammer.GraphLayout.MultipleLayout"/>).
            </p>
            <p>
            For instance, assume that you want to apply a Tree layout and then a
            Link layout for the nontree links
            to each subgraph. It would be unfortunate to call
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
            multiple times to achieve this, because the tree layout of the parent
            graph  would be finished before the link layout of its subgraph has
            started; hence the link layout of the subgraph invalidates the tree
            layout of the parent graph again. To avoid this effect, the Tree
            layout and Link layout of the subgraph should be
            finished before any layout of the parent graph has started. The
            following examples shows how to achieve this by using the Recursive
            Multiple Layout class. There are basically two scenarios:
            <UL>
            <LI> The same set of layout algorithms must be applied to all
            subgraphs.</LI>
            <LI> An individual layout style must be applied to each
            subgraph.</LI>
            </UL>
            <b>First scenario: Same layout styles everywhere</b>
            </p>
            <p>
            To perform a Tree Layout and a Link Layout on a nested graph, call:
            </p>
            <code lang="cs">
            GraphLayout layout = new MultipleRecursiveLayout(
                                          new TreeLayout(),
                                          new ShortLinkLayout());
            layout.Attach(topLevelGraphicContainer);
            layout.PerformLayout(true);
            </code>
            <code lang="vbnet">
            Dim layout As MultipleLayout = New MultipleRecursiveLayout( _
                                          New TreeLayout, _
                                          New ShortLinkLayout)
            layout.Attach(topLevelGraphicContainer)
            layout.PerformLayout(True)
            </code>
            In this case, each subgraph is treated bottom-up. First a tree layout
            is performed on the subgraph, then a link layout is performed on the
            subgraph. All
            subgraphs of the nested graph including the top-level graph are
            treated in this way. All layouts are performed with the same  global
            layout parameters as the layout instances passed as arguments to the
            constructor of <strong>RecursiveMultipleLayout</strong>, which are
            called the <i>reference layouts</i>. You can access the reference
            layout instances to change the global layout parameters:
            <code lang="cs">
            TreeLayout treeLayout = (TreeLayout)layout.GetFirstReferenceGraphLayout();
            treeLayout.FlowDirection = LayoutFlowDirection.Left;
            ShortLinkLayout linkLayout = (ShortLinkLayout)layout.GetSecondReferenceGraphLayout();
            linkLayout.LinkOffset = 5f;
            </code>
            <code lang="vbnet">
            Dim treeLayout As TreeLayout = CType(layout.GetFirstReferenceGraphLayout, TreeLayout)
            treeLayout.FlowDirection = LayoutFlowDirection.Left
            Dim linkLayout As ShortLinkLayout = CType(layout.GetSecondReferenceGraphLayout, ShortLinkLayout)
            linkLayout.LinkOffset = 5F
            </code>
            Internally, a clone of the reference instance is created for each
            subgraph. This clone remains attached as long as the Recursive
            Multiple Layout is attached to the top-level graph. Before layout is
            performed, the global layout parameters are copied from the reference
            instance to each clone. If you need to set layout parameters for
            individual nodes or links, you have to access the layout
            instance of the subgraph that owns the node or link:
            <code lang="cs">
            TreeLayout treeLayout = (TreeLayout)layout.GetFirstGraphLayout(subgraph);
            treeLayout.SetAlignment(node, TreeLayoutAlignment.TipOver);
            ShortLinkLayout linkLayout = (ShortLinkLayout)layout.GetSecondGraphLayout(subgraph);
            linkLayout.SetLinkStyle(link, LinkLayoutLinkStyle.Orthogonal);
            </code>
            <code lang="vbnet">
            Dim treeLayout As TreeLayout = CType(layout.GetFirstGraphLayout(subgraph), TreeLayout)
            treeLayout.SetAlignment(node, TreeLayoutAlignment.TipOver)
            Dim linkLayout As ShortLinkLayout = CType(layout.GetSecondGraphLayout(subgraph), ShortLinkLayout)
            linkLayout.SetLinkStyle(link, LinkLayoutLinkStyle.Orthogonal)
            </code>
            <p>
            In the typical case, when you use instances of
            <strong>GraphicObject</strong> as nodes and instances of
            <strong>GraphicContainer</strong> as subgraphs, it is:
            </p>
            <code lang="cs">
            TreeLayout treeLayout = (TreeLayout)layout.GetFirstGraphLayout(node.Parent);
            treeLayout.SetAlignment(node, TreeLayoutAlignment.TipOver);
            ...
            </code>
            <code lang="vbnet">
            Dim treeLayout As TreeLayout = CType(layout.GetFirstGraphLayout(node.Parent), TreeLayout)
            treeLayout.SetAlignment(node, TreeLayoutAlignment.TipOver)
            ...
            </code>
            <p>
            <b>Second scenario: Different layout styles at different subgraphs</b>
            </p>
            <p>
            The following example shows the second scenario: Each subgraph should
            be laid out by a different layout style or with individual layout
            parameters. In this case, there are no reference layouts. You specify
            the layouts of subgraphs in a very convenient way:
            </p>
            <code lang="cs">
            RecursiveMultipleLayout layout = new RecursiveMultipleLayout();
            layout.Attach(topLevelGraphicContainer);
            // specify the layout of the top-level graph
            layout.SetLayout(null, new GridLayout(),
                                   new ShortLinkLayout());
            // specify the layout of subgraphs
            layout.SetLayout(subgraph1, new TreeLayout(),
                                        new ShortLinkLayout());
            layout.SetLayout(subgraph2, new HierarchicalLayout(),
                                        new ShortLinkLayout());
            // perform the layout
            GraphLayoutReport report = layout.PerformLayout(true);
            </code>
            <code lang="vbnet">
            Dim layout As RecursiveMultipleLayout = New RecursiveMultipleLayout
            layout.Attach(topLevelGraphicContainer)
            ' specify the layout of the top-level graph
            layout.SetLayout(Nothing, New GridLayout, New ShortLinkLayout)
            ' specify the layout of subgraphs
            layout.SetLayout(subgraph1, New TreeLayout, New ShortLinkLayout)
            layout.SetLayout(subgraph2, New HierarchicalLayout, New ShortLinkLayout)
            ' perform the layout
            Dim report As GraphLayoutReport = layout.PerformLayout(True)
            </code>
            In this scenario, all layout parameters of different subgraphs are
            independent. You access the layout instance of each individual
            subgraph in the same way as when you have a reference layout. This
            allows you to change global layout parameters for this subgraph as
            well as parameters of nodes or links of the subgraph.
            <p>
            <b>Notes:</b><br/>
            </p>
            <UL>
            <LI> The Recursive Multiple Layout does not support the specified
            provider mode of <see cref="T:ILOG.Diagrammer.GraphLayout.RecursiveLayout"/>.</LI>
            <LI> It is not allowed to create a Recursive Layout that contains
            another Recursive Layout:
            <code lang="cs">
            layout = new RecursiveLayout(new RecursiveMultipleLayout());
            layout.PerformLayout(true)
            </code>
            <code lang="vbnet">
            layout = New RecursiveLayout(New RecursiveMultipleLayout)
            layout.PerformLayout(True)
            </code>
            This would traverse the nested graph and perform the Recursive Layout
            for each subgraph, which, however, itself would recursively traverse
            the nested graph again. This would just be waste of run time.</LI>
            <LI> The handlers for the <strong>LayoutStepPerformed</strong> event installed at
            the Recursive Multiple Layout receive layout events whenever the layout
            of a subgraph fires a layout event. These events, however, do not contain
            the information on which sublayout was started or finished. If you need this
            information, you should install an event handler at all sublayouts.</LI>
            </UL>
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.RecursiveLayout">
            <summary>
             The main class for the Recursive Layout algorithm.
            </summary>
            <remarks>
            <p>
            This is not a layout algorithm but rather a facility to perform
            layouts recursively in a nested graph. Unless otherwise mentioned,
            the normal layout algorithms such as
            <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalLayout"/>,
            <see cref="T:ILOG.Diagrammer.GraphLayout.TreeLayout"/>,
            <see cref="T:ILOG.Diagrammer.GraphLayout.MultipleLayout"/>, and so
            forth work on a flat graph, that is, they lay out the attached graph
            but not the subgraphs of the attached graph. The Recursive Layout is
            different: it traverses the nesting structure starting from the
            attached graph and applies a layout recursively on all subgraphs. It
            can be tailored for which sublayout has to be applied to which
            subgraph.
            </p>
            <p>
            There are basically two scenarios:
            <UL>
            <LI> The same layout style must be applied to all subgraphs.</LI>
            <LI> An individual layout style must be applied to each
            subgraphs.</LI>
            </UL>
            <b>First scenario: Same layout style everywhere</b>
            </p>
            <p>
            The following example shows the first scenario:
            </p>
            <code lang="cs">
            GraphLayout layout = new RecursiveLayout(new TreeLayout());
            layout.Attach(topLevelGraphicContainer);
            GraphLayoutReport report = layout.PerformLayout(true);
            </code>
            <code lang="vbnet">
            Dim layout As GraphLayout = New RecursiveLayout(New TreeLayout)
            layout.Attach(topLevelGraphicContainer)
            Dim report As GraphLayoutReport = layout.PerformLayout(True)
            </code>
            In this case, a tree layout is performed recursively to the top-level
            graph and to each subgraph. All layouts are performed with the same
            global layout parameters as for the layout instance passed as an
            argument to the constructor of <strong>RecursiveLayout</strong>,
            which is called its <i>reference layout</i>.  You can access the
            reference layout instance to change the global  layout parameters:
            <code lang="cs">
            TreeLayout treeLayout = (TreeLayout)layout.GetReferenceLayout();
            treeLayout.FlowDirection = LayoutFlowDirection.Left;
            </code>
            <code lang="vbnet">
            Dim treeLayout As TreeLayout = CType(layout.GetReferenceLayout, TreeLayout)
            treeLayout.FlowDirection = LayoutFlowDirection.Left
            </code>
            Internally, a clone of the reference instance is created for each
            subgraph. This clone remains attached as long as the Recursive Layout
            is attached to the top-level graph. Before layout is performed, the
            global layout parameters are copied from the reference instance to
            each clone. If you need to set layout parameters for individual nodes
            and links, you have to access the layout instance of the subgraph
            that owns the node or link:
            <code lang="cs">
            TreeLayout treeLayout = (TreeLayout)layout.GetLayout(subgraph);
            treeLayout.SetAlignment(node, TreeLayoutAlignment.TipOver);
            </code>
            <code lang="vbnet">
            Dim treeLayout As TreeLayout = CType(layout.GetLayout(subgraph), TreeLayout)
            treeLayout.SetAlignment(node, TreeLayoutAlignment.TipOver)
            </code>
            <p>
            In the typical case, when you use instances of
            <strong>GraphicObject</strong> as nodes and instances of
            <strong>GraphicContainer</strong> as subgraphs, it is:
            </p>
            <code lang="cs">
            TreeLayout treeLayout = (TreeLayout)layout.GetLayout(node.Parent);
            treeLayout.SetAlignment(node, TreeLayoutAlignment.TipOver);
            ...
            </code>
            <code lang="vbnet">
            Dim treeLayout As TreeLayout = CType(layout.GetLayout(node.Parent), TreeLayout)
            treeLayout.SetAlignment(node, TreeLayoutAlignment.TipOver)
            ...
            </code>
            <p>
            <b>Second scenario: Different layout styles at different
            subgraphs</b>
            </p>
            <p>
            The following example shows the second scenario: Each subgraph should
            be laid out by a different layout style or with individual layout
            parameters. In this case, we need a layout provider (see
            <see cref="T:ILOG.Diagrammer.GraphLayout.ILayoutProvider"/>) that
            specifies which  layout instance is used for which subgraph.
            </p>
            <code lang="cs">
            GraphLayout layout = new RecursiveLayout(layoutProvider);
            layout.Attach(topLevelGraphicContainer);
            GraphLayoutReport report = layout.PerformLayout(true);
            </code>
            <code lang="vbnet">
            Dim layout As GraphLayout = New RecursiveLayout(layoutProvider)
            layout.Attach(topLevelGraphicContainer)
            Dim report As GraphLayoutReport = layout.PerformLayout(True)
            </code>
            The layout provider returns a different layout instance for each
            subgraph.  For example, it may return a grid layout for the top-level
            graph, but a tree layout for one subgraph and a hierarchical layout for
            another subgraph of the top-level graph. Furthermore, each layout can
            have different global layout parameters.  You can implement your own
            application-specific layout provider, or you can use the predefined
            <see cref="T:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider"/> or
            <see cref="T:ILOG.Diagrammer.GraphLayout.RecursiveLayoutProvider"/> that allows you to specify the
            preferred layout of each subgraph. If neither a reference layout nor
            a layout provider is given to the Recursive Layout, an internal
            default layout provider of class
            <strong>RecursiveLayoutProvider</strong> is used. This allows you to
            specify the layouts of subgraphs in a very convenient way:
            <code lang="cs">
            RecursiveLayout layout = new RecursiveLayout();
            layout.Attach(topLevelGraphicContainer);
            // specify the layout of the top-level graph
            layout.SetLayout(null, new GridLayout());
            // specify the layout of subgraphs
            layout.SetLayout(subgraph1, new TreeLayout());
            layout.SetLayout(subgraph2, new HierarchicalLayout());
            // perform the layout
            GraphLayoutReport report = layout.PerformLayout(true);
            </code>
            <code lang="vbnet">
            Dim layout As RecursiveLayout = New RecursiveLayout
            layout.Attach(topLevelGraphicContainer)
            ' specify the layout of the top-level graph
            layout.SetLayout(Nothing, New GridLayout)
            layout.SetLayout(subgraph1, New TreeLayout)
            layout.SetLayout(subgraph2, New HierarchicalLayout)
            ' perform the layout
            Dim report As GraphLayoutReport = layout.PerformLayout(True)
            </code>
            In this scenario, there is no reference layout. All layout
            parameters of different subgraphs are independent. You access the
            layout instance of each individual subgraph in order to change global
            layout parameters for this subgraph as well as parameters of nodes
            and links of the subgraph. For instance, if the attached top-level
            graph contains two subgraphs, and node1 belongs to subgraph1 and
            node2 belongs to subgraph2, you can set individual global and local
            layout parameters in this way:
            <code lang="cs">
            // access the layout of the top-level graph
            GridLayout gridLayout = (GridLayout)layout.GetLayout(null);
            gridLayout.LayoutMode = GridLayoutMode.TileToColumns;
            // access the layouts of the subgraph
            TreeLayout treeLayout = (TreeLayout)layout.GetLayout(subgraph1);
            treeLayout.FlowDirection =  LayoutFlowDirection.Left;
            treeLayout.SetAlignment(node1, TreeLayoutAlignment.TipOver);
            HierarchicalLayout hierLayout = (HierarchicalLayout)layout.getLayout(subgraph2);
            hierLayout.IncrementalMode = true;
            hierLayout.MarkForIncremental(node2);
            </code>
            <code lang="vbnet">
            ' access the layout of the top-level graph
            Dim gridLayout As GridLayout = CType(layout.GetLayout(Nothing), GridLayout)
            gridLayout.LayoutMode = GridLayoutMode.TileToColumns
            ' access the layouts of the subgraph
            Dim treeLayout As TreeLayout = CType(layout.GetLayout(subgraph1), TreeLayout)
            treeLayout.FlowDirection = LayoutFlowDirection.Left
            treeLayout.SetAlignment(node1, TreeLayoutAlignment.TipOver)
            Dim hierLayout As HierarchicalLayout = CType(layout.getLayout(subgraph2), HierarchicalLayout)
            hierLayout.IncrementalMode = True
            hierLayout.MarkForIncremental(node2)
            </code>
            <p>
            <b>Notes:</b><br/>
            </p>
            <UL>
            <LI> The normal layout algorithms such as
            <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalLayout"/>,
            <see cref="T:ILOG.Diagrammer.GraphLayout.TreeLayout"/>,
            <see cref="T:ILOG.Diagrammer.GraphLayout.MultipleLayout"/>, and so
            forth work only on a flat graph, but for convenience, you can apply
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
            with the <strong>traverse</strong> flag set to
            <see langword="true"/>. This does not mean that the normal layout
            instance works on the entire nested graph including the subgraphs in
            this case. In fact, internally it uses a Recursive Layout in
            reference layout mode, that is, a clone of the top-level graph layout
            instance is created for each subgraph, and these clones are applied
            recursively to the nested graph. Each clone still treats only a flat
            graph.</LI>
            <LI> It is not possible to create a Recursive Layout that has a
            Recursive Layout as reference layout:
            <code lang="cs">
            layout = new RecursiveLayout(new RecursiveLayout());
            </code>
            <code lang="vbnet">
            layout = New RecursiveLayout(New RecursiveLayout())
            </code>
            This calls the copy constructor of the Recursive Layout, but does not
            create a Recursive Layout in reference layout mode. A Recursive
            Layout inside another Recursive Layout would traverse the nested
            graph and perform the Recursive Layout for each subgraph, which,
            however, itself would recursively traverse the nested graph again.
            This would just be waste of run time.</LI>
            <LI> The <strong>LayoutStepPerformed</strong> event handlers installed
            at the Recursive Layout receive events whenever the layout of a subgraph
            fires a layout event. These events, however, do not contain the information
            on which sublayout was started or finished. If you need this
            information, you should install an event handler at all sublayouts.
            One convenient way to achieve this is to install a handler for the
            <strong>SubLayoutStepPerformed</strong> event.
            </LI>
            <LI> If you want to combine <strong>MultipleLayout</strong> and
            <strong>RecursiveLayout</strong>, you can use
            <see cref="T:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout"/>. </LI>
            </UL>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.#ctor(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
             Creates a new instance of the Recursive Layout algorithm that
            allows you to apply the reference layout to the entire nested graph.
            </summary>
            <remarks>
            You should use this constructor if you want to apply the same layout
            style with the same global layout parameters to all subgraphs of the
            nested graph. The layout mode of this Recursive Layout is
            <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.ReferenceLayoutMode"/>. 
            <p>
            The reference layout must not be an instance of
            <strong>RecursiveLayout</strong>. 
            </p>
            <p>
            To indicate the top-level graphic container of the nesting hierarchy
            you want to lay out, use the method
            <strong>Attach(GraphicContainer)</strong>. <br/> To indicate the
            graph model of the top-level graph of the nesting hierarchy you want
            to lay out, use the method <strong>Attach(IGraphModel)</strong>.
            <br/> To perform the layout, use the method
            <strong>PerformLayout(bool)</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.#ctor">
            <summary>
             Creates a new instance of the Recursive Layout algorithm that
            allows you to apply layouts to the entire nested graph.
            </summary>
            <remarks>
            You should use this constructor if you want to apply a different
            layout style or individual layout parameters to each subgraph of the
            nested graph. After attaching the top-level graphic container or
            graph model, you can specify which layout is applied to which
            subgraph by using
            <see cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>.
            The layout mode of this Recursive Layout is
            <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.InternalProviderMode"/>. 
            <p>
            To indicate the top-level graphic container of the nesting hierarchy
            you want to lay out, use the method
            <strong>Attach(GraphicContainer)</strong>. <br/> To indicate the
            graph model of the top-level graph of the nesting hierarchy you want
            to lay out, use the method <strong>Attach(IGraphModel)</strong>.
            <br/> To perform the layout, use the method
            <strong>PerformLayout(bool)</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.#ctor(ILOG.Diagrammer.GraphLayout.ILayoutProvider)">
            <summary>
             Creates a new instance of the Recursive Layout algorithm that
            allows you to apply layouts to the entire nested graph.
            </summary>
            <remarks>
            You should use this constructor if you want to apply a different
            layout style or individual layout parameters to each subgraph of the
            nested graph, and you have implemented your own layout provider that
            delivers the layout instances for each subgraph. The layout mode of
            this Recursive Layout is
            <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.SpecifiedProviderMode"/>. 
            <p>
             To indicate the top-level graphic container of the nesting
            hierarchy you want to lay out, use the method
            <strong>Attach(GraphicContainer)</strong>. To indicate the graph
            model of the top-level graph of the nesting hierarchy you want to
            lay out, use the method <strong>Attach(IGraphModel)</strong>. To
            perform the layout, use the method
            <strong>PerformLayout(bool)</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Init">
            <summary>
            Initializes instance variables.
            </summary>
            <remarks> 
            <p>
            You should not call this method directly. The method is called
            internally by the constructor without arguments and by the copy
            constructor. The method must be overridden by subclasses that need
            to initialize  additional instance variables.
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.#ctor(ILOG.Diagrammer.GraphLayout.RecursiveLayout)">
            <summary>
            Creates a new layout instance by copying an existing one.
            </summary>
            <remarks>
            This constructor is used by the <see cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Copy"/>
            method. Any subclass should provide a copy constructor. 
            <p>
            The parameters of the <strong>source</strong> layout are copied
            using the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>.
            
            </p>
            <p>
            </p>
            </remarks>
            <param name="source"> The layout instance that is copied.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Copy"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Copy">
            <summary>
            Copies the layout instance.
            </summary>
            <remarks> 
            <p>
            This method copies the layout instance by calling the copy
            constructor. Note that the parameters which are specific to a node
            or a link are not copied. It depends on the layout mode what is
            copied. 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.ReferenceLayoutMode"/> - The
            reference layout is copied deeply.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.InternalProviderMode"/> - The
            information on which subgraph uses which sublayout is not
            copied.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.SpecifiedProviderMode"/> - The
            specified layout provider is copied, but not deeply.</LI> 
            </UL> 
            </p>
            </remarks>
            <returns>A copy of the layout instance.
            </returns>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Copies the parameters from a given layout instance.
            </summary>
            <remarks>
            Note that the parameters which are specific to a node or a link are
            not copied. It depends on the layout mode what is copied: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.ReferenceLayoutMode"/> - The
            reference layout is copied deeply.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.InternalProviderMode"/> - The
            information on which subgraph uses which sublayout is not
            copied.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.SpecifiedProviderMode"/> - The
            specified layout provider is copied, but not deeply.</LI> 
            </UL>
            </remarks>
            <param name="source"> The layout instance from which the parameters
            are copied.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Copy"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode">
            <summary>
            Returns the layout mode of the Recursive Layout.
            </summary>
            <remarks>
            The possible values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.ReferenceLayoutMode"/> - The
            same layout style with the same global layout parameters is applied
            to all subgraphs of the nested graph.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.InternalProviderMode"/> - The
            layout is applied using an internal recursive layout provider. The
            layout styles of individual subgraphs can be specified by
            <see cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>.</LI>
            
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.SpecifiedProviderMode"/> - The
            layout is applied using an explicitly specified layout
            provider.</LI> 
            </UL>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.#ctor"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.#ctor(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.#ctor(ILOG.Diagrammer.GraphLayout.ILayoutProvider)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutProvider">
            <summary>
            Returns the layout provider.
            </summary>
            <remarks> 
            <p>
            If the reference layout mode is used, it returns an internally
            created instance of
            <see cref="T:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider"/>. 
            </p>
            <p>
            If the internal provider mode is used, it returns an internally
            created instance of <see cref="T:ILOG.Diagrammer.GraphLayout.RecursiveLayoutProvider"/>. 
            </p>
            <p>
            In both reference layout and internal provider modes, you should not
             manipulate this internally created layout provider directly. 
            </p>
            <p>
            If the specified provider mode is used, it returns the specified
            layout provider. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetReferenceLayout">
            <summary>
            Returns the reference layout, if the reference layout mode is used.
            </summary>
            <remarks>
            It returns <see langword="null"/> otherwise. 
            <p>
            In reference layout mode, the reference layout is used to lay out
            the top-level graph. Clones of the reference layout are used to lay
            out the subgraphs. The entire nested graph is laid out with the
            global layout parameters of the reference layout. If you change
            global layout parameters of the reference layout, this will affect
            the layout of subgraphs as well, because the global layout
            parameters are copied from the reference layout to the layouts of
            the subgraphs. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.#ctor(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Sets the layout instance to be used for the input subgraph.
            </summary>
            <remarks>
            If <see langword="null"/> is passed as the subgraph, the input
            layout is used for the top-level graph. If <see langword="null"/> is
            passed as the layout, no layout will be performed for the
            corresponding subgraph. 
            <p>
            You can use this method only in internal provider mode. You must
            attach a graphic container or graph model first before using this
            method. Each subgraph must get a different layout instance, that is,
            the layout instances cannot be shared among different subgraphs. The
            input layout is automatically attached and detached by the Recursive
            Layout as needed. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="subgraph"> The subgraph or <see langword="null"/>.
            </param>
            <param name="layout"> The layout instance used to lay out the
            subgraph. This should be a new layout instance that is not used
            anywhere else.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.#ctor"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayout(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout,System.Boolean,System.Boolean)">
            <summary>
            Sets the layout instance to be used for the input subgraph.
            </summary>
            <remarks>
            If the <paramref name="traverse"/>flag is <see langword="true"/>, it
            traverses the nested graph starting from the input graph and sets a
            clone of the input layout recursively for each subgraph. Notice that
            if you insert subgraphs after calling this method, the new subgraphs
            have no layout yet assigned. 
            <p>
            If <see langword="null"/> is passed as the subgraph, the input
            layout is used for the top-level graph, and the traversal, if any,
            starts at the  top-level graph. If <see langword="null"/> is passed
            as the layout, no layout will be performed for the corresponding
            subgraphs. 
            </p>
            <p>
            You can use this method only in internal provider mode. Each
            subgraph must get a different layout instance, that is, the layout
            instances cannot be shared among different subgraphs. You must
            attach a graphic container or graph model first before using this
            method. The input layout is automatically attached and detached by
            the Recursive Layout as needed. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="subgraph"> The subgraph or <see langword="null"/>.
            </param>
            <param name="layout"> The layout instance used to lay out the
            subgraph. This should be a new layout instance that is not used
            anywhere else.
            </param>
            <param name="detachPrevious"> If <see langword="true"/>, the layout
            instance previously specified as the preferred layout of the
            subgraph (if any) is detached.
            </param>
            <param name="traverse"> If <see langword="true"/>, clones of the
            input layout are recursively used for all current subgraphs of the
            input graph.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.#ctor"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayout(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayout(System.Object)">
            <summary>
            Returns the layout instance to be used for the input subgraph.
            </summary>
            <remarks>
            If <see langword="null"/> is passed as the subgraph, the layout
            instance of the top-level graph is returned. You can use this method
            in all layout modes. You must attach a graphic container or graph
            model first before using this method. The method may return
            <see langword="null"/> if no layout should be performed for the
            subgraph. 
            <p>
            In reference layout mode, changing global layout parameters of the
            layout instances of subgraphs is useless, because during layout, the
            global parameters of the reference layout are used for each
            subgraph. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="subgraph"> The subgraph or <see langword="null"/>.
            </param>
            <returns>The layout instance used to lay out the subgraph.
            </returns>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayouts(System.Boolean)">
            <summary>
            Returns the instances of <strong>GraphLayout</strong> for the nested
            graph encapsulated by the graph model of this layout instance.
            </summary>
            <remarks>
            You can use this method in all layout modes. You must attach a
            graphic container or graph model first before using this method.
            <p>
            It returns the layout instance for the top-level graph, and
            recursively for all subgraphs. The order of the enumerator can be
            preorder (that is, the layout of the parent graph comes before the
            layout of the subgraphs) or postorder (that is, the layout of the
            subgraphs comes before the layout of the parent graph).
            </p>
            <p>
            In reference layout mode, changing global layout parameters of the
            layout instances of subgraphs is useless, because during layout, the
            global parameters of the reference layout are used for each
            subgraph.
            </p>
            <p>
            </p>
            </remarks>
            <param name="preOrder"> If <see langword="true"/>, the layout
            instances are returned in preorder, otherwise in postorder.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayout(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Allows you to specify the top-level graph model of the nested graph
            you want to lay out.
            </summary>
            <remarks>
            In addition to the functionality of the base class, the Recursive
            Layout prepares and attaches the reference layout in layout mode
            <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.ReferenceLayoutMode"/>. 
            <p>
             
            </p>
            </remarks>
            <param name="graphModel"> The graph model.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Detach"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Detach">
            <summary>
            Detaches the graph model from the layout instance.
            </summary>
            <remarks>
            When you attach a new graph model to the layout instance, you do not
            need  to detach the old graph model because this is done
            automatically when you call <see cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            The <strong>Detach</strong> method performs cleaning operations on
            the graph model. In addition to the cleaning operations in the base
            class, the Recursive Layout detaches the sublayouts of subgraphs. In
            internal provider mode, it also cleans all settings of layout
            instances for subgraphs. 
            <p>
            Note that you must call this method when you no longer need the
            layout instance. Otherwise, some objects may not be garbage
            collected. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.CreateLayoutReport">
            <summary>
            Returns a new instance of the layout report.
            </summary>
            <remarks>
            The current implementation creates an instance of
            <see cref="T:ILOG.Diagrammer.GraphLayout.RecursiveLayoutReport"/>. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.CreateLayoutReport"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.RecursiveLayoutReport"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutReport(System.Object)">
            <summary>
            Returns the report of the graph layout of the input subgraph.
            </summary>
            <remarks>
            You should call this method only after layout, while the Recursive
            Layout  is still attached to a graphic container or graph model. If
            <see langword="null"/> is passed as the subgraph, the layout report
            of the top-level graph is returned. It returns
            <see langword="null"/> if no layout instance is available for the
            subgraph, or if no layout was ever performed for the subgraph. You
            can use this method in all layout modes. 
            <p>
            </p>
            </remarks>
            <param name="subgraph"> The subgraph or <see langword="null"/>.
            </param>
            <returns>The layout report of the last layout run for the subgraph.
            </returns>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.PerformLayout(System.Boolean,System.Boolean)">
            <summary>
            Starts the layout algorithm.
            </summary>
            <remarks>
            This is different from the implementation of the base class; the
            Recursive  Layout always ignores the <paramref name='traverse'/>
            flag because the layout is always done recursively.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.PerformLayout(System.Boolean)">
            <summary>
            Starts the layout algorithm.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.PerformLayout(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Starts the layout algorithm starting at a subgraph.
            </summary>
            <remarks>
            Layout is performed for the subgraph and, the
            <paramref name="traverse"/> flag is <see langword="true"/>,
            recursively for all subgraphs contained in the subgraph. If the
            subgraph is <see langword="null"/>, the layout is started at the
            toplevel graph
            </remarks>
            <param name="subgraph"> A subgraph to start the layout
            </param>
            <param name="force"> If <see langword="true"/>, the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutNeeded"/>
            is not called. No check is made to determine if it is necessary to
            perform the layout.
            </param>
            <param name="traverse"> If <see langword="true"/>, the layout is
            applied recursively to all subgraphs contained in the subgraph.
            Otherwise, it is only applied on the input subgraph.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.Layout">
            <summary>
             Computes the layout using the Recursive Layout algorithm.
            </summary>
            <remarks>
             To start the layout, call the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.PerformSublayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout,System.Boolean)">
            <summary>
            Starts the input layout algorithm.
            </summary>
            <remarks>
            This method is used when this layout controls the input layout as  a
            sublayout. Layout classes can override this method if changes are
            needed with respect to the way in which the input layout is started.
            You should not call this method directly.
            <p>
            In addition to the functionality of the base class, the Recursive
            Layout prepares the sublayouts according to the layout mode.
            </p>
            <p>
            </p>
            </remarks>
            <param name="subgraph"> The subgraph if used during nested layout,
            or <see langword="null"/>.
            </param>
            <param name="layout"> The sublayout to be preformed.
            </param>
            <param name="force"> If <see langword="true"/>, no check is made to
            determine if it is necessary to perform the layout.
            </param>
            <returns>The layout code. See
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.ModelContentsChanged(System.Object,ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs)">
            <summary>
            Called when the contents of the attached model has changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.StopImmediately">
            <summary>
            Stops the running layout algorithm as soon as possible.
            </summary>
            <remarks>
            This works only if all layouts of all subgraphs support stopping the
            layout immediately. If the currently running sublayout of a subgraph
            does not support this feature, the sublayout will run to completion,
            but the layouts of other subgraphs will not be started. 
            <p>
            This method can be used if multiple threads are used for layout and
            GUI control. The GUI control thread calls this method to notify the
            layout thread that the layout run must be stopped. The layout
            algorithm will perform some final cleanup operations before
            terminating. Therefore, the layout thread will continue until the
            cleanup operations are finished. The GUI thread, however, returns
            immediately from this method. 
            </p>
            <p>
            If the layout algorithm is stopped before completion, the result
            code of the layout report is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <returns><see langword="true"/> if the algorithm can be stopped at
            this time.
            </returns>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.PropagateLayoutOfConnectedComponentsEnabled(System.Boolean)">
            <summary>
            Enables the connected component layout mechanism for all layouts of
            subgraphs that support this feature.
            </summary>
            <remarks>
            Notice that the Recursive Layout itself does not support this
            feature, since the connected component layout mechanism works on the
            flat graph while the Recursive Layout works on a nested graph.
            Despite this, it may make sense in certain situations to propagate
            the connected component layout setting to all layouts of subgraphs. 
            <p>
            In reference layout mode, it calls
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>
            at the reference layout, if the reference layout supports this
            feature. If a graph is attached and the layout mode is the internal
            or specified provider mode, it traverses the nesting hierarchy and
            calls 
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>
            for all layout instances of subgraphs that support this feature.
            However, if you insert subgraphs after calling this method, or if
            you change the layout instances of subgraphs in your specified
            provider or via
            <see cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            in the internal provider after calling this method, the new layouts
            of these subgraphs may have a different setting. 
            </p>
            <p>
            In internal or specified provider mode, this method throws a runtime
            exception when no graph model is yet attached. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLayoutOfConnectedComponents"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.PropagateLayoutOfConnectedComponents(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Sets the layout instance that lays out the connected components of
            all subgraphs that have a main layout that supports the connected
            component layout mechanism.
            </summary>
            <remarks>
            Notice that the Recursive Layout itself does not support this
            feature, since the connected component layout mechanism works on the
            flat graph while the Recursive Layout works on a nested graph.
            Despite this, it may make sense in certain situations to propagate
            the connected component layout setting to all layouts of subgraphs. 
            <p>
            In reference layout mode, it calls
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents"/>
            at the reference layout, if the reference layout supports this
            feature. If a graph is attached and the layout mode is the internal
            or specified provider mode, it traverses the nesting hierarchy and
            calls 
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents"/>
            for all layout instances of subgraphs that support this feature.
            However, if you insert subgraphs after calling this method, or if
            you change the layout instances of subgraphs in your specified
            provider or via
            <see cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            in the internal provider after calling this method, the new layouts
            of these subgraphs may have a different setting. 
            </p>
            <p>
            In internal or specified provider mode, this method throws a runtime
            exception when no graph model is yet attached. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLayoutOfConnectedComponents"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.PropagateLinkConnectionBoxInterface(ILOG.Diagrammer.GraphLayout.ILinkConnectionBoxProvider)">
            <summary>
            Sets the link connection box interface for the connection points of
            links at all layouts of subgraphs that support this feature.
            </summary>
            <remarks>
            Notice that the Recursive Layout itself does not support this
            feature, since the link connection box interface works on the flat
            graph while the Recursive Layout works on a nested graph. Despite
            this, it may make sense in certain situations to propagate the link
            connection box setting to all layouts of subgraphs. After the
            propagation, the same link connection box interface is shared by all
            layout instances of all subgraphs of the attached graph. 
            <p>
            In reference layout mode, it calls
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>
            at the reference layout, if the reference layout supports this
            feature. If a graph is attached and the layout mode is the internal
            or specified provider mode, it traverses the nesting hierarchy and
            calls 
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>
            for all layout instances of subgraphs that support this feature.
            However, if you insert subgraphs after calling this method, or if
            you change the layout instances of subgraphs in your specified
            provider or via
            <see cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            in the internal provider after calling this method, the new layouts
            of these subgraphs may have a different setting. 
            </p>
            <p>
            In internal or specified provider mode, this method throws a runtime
            exception when no graph model is yet attached. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsLinkConnectionBox"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.AddGraphLayoutStepPerformedEventHandler(ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventHandler,System.Boolean,System.Boolean)">
            <summary>
            Adds a handler for <strong>LayoutStepPerformed</strong> events to
            this layout and/or all layouts of subgraphs.
            </summary>
            <remarks>
            If the <paramref name="traverse"/> flag is <see langword="true"/>
            and a graph is attached, it traverses the nesting hierarchy to also
            add the handler  to the layouts of subgraphs that are currently in
            the hierarchy. If you insert or remove subgraphs after calling this
            method, or if you change the layout instances of subgraphs in your
            specified provider or via
            <see cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            in the internal provider after calling this method, you are
            responsible yourself for updating the layout event handler.
            <p>
            It is in most cases more efficient and more convenient to install a
            handler via
            <see cref="E:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SubLayoutStepPerformed"/>
            at the Recursive Layout rather than traversing the subgraphs and
            installing a handler on all sublayouts. Only if the order of how
            different handler receive the same event is critical, it does it make
            sense to use this method.
            </p>
            <p>
            If the traverse flag is <see langword="true"/> in internal or
            specified provider mode and no graph model is yet attached, this
            method throws an exception.
            </p>
            </remarks>
            <param name="handler"> The handler.
            </param>
            <param name="includeSelf"> If <see langword="true"/>, it adds the
            handler to this Recursive Layout instance.
            </param>
            <param name="traverse"> If <see langword="true"/>, it adds the
            handler to all layouts of subgraphs.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.RemoveGraphLayoutStepPerformedEventHandler(ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventHandler,System.Boolean,System.Boolean)">
            <summary>
            Removes a handler for <strong>LayoutStepPerformed</strong> events from 
            this layout and/or all layouts of subgraphs.
            </summary>
            <remarks>
            If the <paramref name='traverse'/> flag is <see langword='true'/>
            and a graph is attached, it traverses the nesting hierarchy to also
            remove the handler from the layouts of subgraphs that are
            currently in the hierarchy.
            <p>
            If the traverse flag is <see langword='true'/> in internal or
            specified provider mode and no graph model is yet attached, this
            method throws an exception.
            </p>
            </remarks>
            <param name='handler'> The handler.
            </param>
            <param name='includeSelf'> If <see langword='true'/>, it removes the
            handler from this Recursive Layout instance.
            </param>
            <param name='traverse'> If <see langword='true'/>, it removes the
            handler from all layouts of subgraphs.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.AddGraphLayoutPropertyChangedEventHandler(ILOG.Diagrammer.GraphLayout.GraphLayoutPropertyChangedEventHandler,System.Boolean,System.Boolean)">
            <summary>
            Adds a handler for <strong>PropertyChanged</strong> events to
            this layout and/or all layouts of subgraphs.
            </summary>
            <remarks>
            If the <paramref name="traverse"/> flag is <see langword="true"/>
            and a graph is attached, it traverses the nesting hierarchy to also
            add the handler to the layouts of subgraphs that are currently in
            the hierarchy. If you insert or remove subgraphs after calling this
            method, or if you change the layout instances of subgraphs in your
            specified provider or via
            <see cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            in the internal provider after calling this method, you are
            responsible yourself for updating the layout parameter event
            handler.
            <p>
            If the traverse flag is <see langword="true"/> in internal or
            specified provider mode and no graph model is yet attached, this
            method throws an exception.
            </p>
            <p>
            </p>
            </remarks>
            <param name="handler"> The handler.
            </param>
            <param name="includeSelf"> If <see langword="true"/>, it adds the
            handler to this Recursive Layout instance.
            </param>
            <param name="traverse"> If <see langword="true"/>, it adds the
            handler to all layouts of subgraphs.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.RemoveGraphLayoutPropertyChangedEventHandler(ILOG.Diagrammer.GraphLayout.GraphLayoutPropertyChangedEventHandler,System.Boolean,System.Boolean)">
            <summary>
            Removes a handler for <strong>PropertyChanged</strong> events from 
            this layout and/or all layouts of subgraphs.
            </summary>
            <remarks>
            If the <paramref name='traverse'/> flag is <see langword='true'/>
            and a graph is attached, it traverses the nesting hierarchy to also
            remove the handler  from the layouts of subgraphs that are
            currently in the hierarchy.
            <p>
            If the traverse flag is <see langword='true'/> in internal or
            specified provider mode and no graph model is yet attached, this
            method throws an exception.
            </p>
            <p>
            </p>
            </remarks>
            <param name='handler'> The handler.
            </param>
            <param name='includeSelf'> If <see langword='true'/>, it removes the
            handler from this Recursive Layout instance.
            </param>
            <param name='traverse'> If <see langword='true'/>, it removes the
            handler from all layouts of subgraphs.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SupportsPercentageComplete">
            <summary>
            Indicates whether the layout class can estimate the percentage of
            completion during the run of the layout.
            </summary>
            <remarks>
            If all layouts of subgraphs support this feature, the percentage
            value is calculated from the sublayouts. If some sublayouts do not
            support this feature, the Recursive Layout algorithm can indicate by
            discrete percentage values how many layouts of subgraphs are already
            finished. For instance, if the nesting hierarchy contains five
            graphs, the percentage will increase in fixed steps by 20%. 
            <p>
            The calculated percentage values are not very precise. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IncreasePercentageComplete(System.Int32)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.PercentageComplete"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SupportsStopImmediately">
            <summary>
            Indicates whether the layout class can immediately interrupt the
            current  run of the layout in a controlled way.
            </summary>
            <remarks>
            In principle, the Recursive Layout supports this feature. If,
            however, the sublayout of a subgraph is running and does not support
            this feature, then the sublayout runs to completion first before the
            entire nested layout is stopped. 
            <p>
            If the layout algorithm is stopped before completion, the result
            code of the layout report is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.StopImmediately"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsStoppedImmediately"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SupportsAllowedTime">
            <summary>
            Indicates whether the layout class can stop the layout computation
            when a user-defined allowed time is exceeded.
            </summary>
            <remarks>
            In principle, the Recursive Layout supports this feature. If,
            however, the sublayout of a subgraph is running and does not support
            this feature, then the sublayout runs to completion first before the
            entire nested layout is stopped when the allowed time has elapsed. 
            <p>
            If the layout algorithm is stopped before completion, the result
            code of the layout report is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/>
            '/&gt;
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutTimeElapsed"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.OnSubLayoutStepPerformed(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs)">
            <summary>
            This method is called by the graph layouts of subgraphs.
            It forwards the layout event to this Recursive Layout.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SubLayoutStepPerformed">
            <summary>
            Occurs when the layout algorithm of a subgraph has finished a step
            in the algorithm.
            </summary>
            <remarks>
            This does not receive the <strong>LayoutStepPerformed</strong>
            events from the Recursive Layout, but rather the events for the
            layouts of the subgraphs (that is, the graph layout instance 
            stored in the event argument is the sublayout, not the Recursive
            layout).
            If you want to receive events from the Recursive Layout itself,
            please add the handler for the <strong>LayoutStepPerformed</strong>
            event instead.
            <p>
            It is here for convenience, because it
            allows you  to install a <strong>LayoutStepPerformed</strong> event
            handler on all layouts of subgraphs without iterating over all 
            subgraphs. If you install the handler here,  
            you do not need to worry about updating these handlers 
            yourself when you insert or remove subgraphs after calling this method,
            or when you change the layout instances of subgraphs in the layout
            provider, because the sublayout event handler is not directly installed
            at the layouts of the subgraphs.</p>
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SubgraphCorrectionInterface">
            <summary>
            Gets or sets the correction strategy for subgraphs.
            </summary>
            <remarks>
            The method <see cref="M:ILOG.Diagrammer.GraphLayout.ISubgraphCorrection.Correct(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout,ILOG.Diagrammer.Rectangle2D)"/> of the subgraph
            correction interface is called immediately after the layout of the
            subgraph has finished. This allows you, for instance, to correct the
            position of the subgraph after its contents have been laid out. If
            all subgraphs are laid out completely, and the layout mode of all
            layouts in the nested graph is not incremental, then you do not need
            to install any subgraph correction interface. However, in the
            following situations, it is useful to install a subgraph correction
            interface: 
            <UL>
            <LI> The subgraph is laid out, but its parent graph is not laid out
            (because no layout is specified for the parent graph).</LI> 
            <LI> The subgraph is laid out, but the subgraph is specified as
            fixed inside the parent graph (for instance by
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetFixed(System.Object)"/>).</LI>
            
            <LI> The subgraph and its parent graph are laid out, but the layout
            of the parent graph uses an incremental mode that analyzes the old
            position of the subgraph (see for instance
            <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.IncrementalMode"/>
            or
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>).
            </LI> 
            </UL>
            If subgraphs of type <see cref="T:ILOG.Diagrammer.GraphicContainer"/>
            are used, the layout of the subgraph affects the bounding box of the
            subgraph. The subgraph may appear at a completely different position
            after layout, even though no layout of the parent graph was
            performed that contains the subgraph as  a node, and even though
            <see cref="M:ILOG.Diagrammer.GraphicObject.Move(ILOG.Diagrammer.Point2D)"/> was never
            called for the subgraph. The reason for this effect is simply the
            internal bounding box mechanism of
            <see cref="T:ILOG.Diagrammer.GraphicContainer"/>. This effect is very
            unfortunate in the situations that were described above. There are
            two predefined subgraph correction strategies that help to eliminate
            this effect: <see cref="T:ILOG.Diagrammer.GraphLayout.SubgraphCorrectionBarycenterFixed"/> and
            <see cref="T:ILOG.Diagrammer.GraphLayout.SubgraphCorrectionBoundsFixed"/>. 
            <p>
            </p>
            </remarks>
            <value>The correction strategy for subgraphs.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.AllowedTime">
            <summary>
            Gets or sets the upper limit for the duration of the layout
            algorithm.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/> for details.
            </remarks>
            <value>The upper limit for the duration of the layout algorithm.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.CoordinatesMode">
            <summary>
            Gets or sets the coordinates mode to be used during layout.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.CoordinatesMode"/> for details.
            </remarks>
            <value>The coordinates mode to be used during layout.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.MinBusyTime">
            <summary>
            Gets or sets the minimal time that the layout algorithm can be busy.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.MinBusyTime"/> for details.
            </remarks>
            <value>The minimal time that the layout algorithm can be busy.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.AutoLayout">
            <summary>
            Gets or sets whether the auto layout mode is enabled.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AutoLayout"/> for details.
            </remarks>
            <value>Whether the auto layout mode is enabled.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.ParametersUpToDate">
            <summary>
            Gets or sets whether the layout parameters are up to date.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/> for details.
            </remarks>
            <value>Whether the layout parameters are up to date.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.StructureUpToDate">
            <summary>
            Gets or sets whether the structure of the graph is up to date.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.StructureUpToDate"/> for details.
            </remarks>
            <value>Whether the structure of the graph is up to date.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GeometryUpToDate">
            <summary>
            Gets or sets whether the geometry of the graph is up to date.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.GeometryUpToDate"/> for details.
            </remarks>
            <value>Whether the geometry of the graph is up to date.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.RecursiveLayout.RLayoutsPreorderEnumerator">
            <summary>
            Enumerator over the layouts of a nested model in preorder.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.RecursiveLayout.RLayoutsPostorderEnumerator">
            <summary>
            Enumerator over the layouts of a nested model in postorder.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.RecursiveLayoutProvider">
            <summary>
            The internal layout provider used by the Recursive Layout in internal
            provider mode.
            </summary>
            <remarks>
            The provider behaves like the
            <see cref="T:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider"/>
            except that
            <see cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayoutProvider.GetGraphLayout(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            returns <see langword="null"/> for a graph model that has no
            preferred layout. It <em>does not clone</em> the layout instance of
            the closest parent graph for which a layout has been set. This allows
            you to specify <see langword="null"/> as the  preferred layout for
            those subgraphs that should not be laid out at all. 
            <p>
            If you allocate an instance of
            <strong>RecursiveLayoutProvider</strong> explicitly, you must call
            the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.DetachLayouts(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Boolean)"/>
            when you no  longer need the layout provider instance; otherwise,
            some objects may not  be garbage collected. However
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.DetachLayouts(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Boolean)"/>
            is automatically called for the internal layout provider of the
            Recursive Layout when the Recursive Layout is detached. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.ILayoutProvider"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayoutProvider.#ctor">
            <summary>
            Creates a new <strong>RecursiveLayoutProvider</strong>.
            </summary>
            <remarks>
            Use the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.SetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            to specify preferred layouts.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveLayoutProvider.GetGraphLayout(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Returns the layout instance to be used to lay out
            <paramref name="graphModel"/>.
            </summary>
            <remarks>
            It returns the preferred layout specified using
            <see cref="M:ILOG.Diagrammer.GraphLayout.DefaultLayoutProvider.SetPreferredLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>.
            If no preferred layout was specified, the method returns
            <see langword="null"/>. 
            <p>
            </p>
            </remarks>
            <param name="graphModel"> The graph model (the graph model that
            encapsulates the topmost graphic container, or a subgraph).
            </param>
            <returns>The layout instance to be used for
            <paramref name="graphModel"/>, or <see langword="null"/> if no
            layout is need for <paramref name="graphModel"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.#ctor(ILOG.Diagrammer.GraphLayout.GraphLayout,ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
             Creates a new instance of the Recursive Multiple Layout algorithm
            that allows you to apply the reference layouts to the entire nested
            graph.
            </summary>
            <remarks>
            You should use this constructor if you want to apply the same layout
            styles with the same global layout parameters to all subgraphs of
            the nested graph. The layout mode of this Recursive Multiple Layout
            is <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.ReferenceLayoutMode"/>. 
            <p>
            This constructor behaves basically like a Recursive Layout that
            contains a Multiple Layout. The code 
            </p>
            <code>
            layout = new RecursiveMultipleLayout(layout1, layout2);</code>
            is equivalent to 
            <code>
            layout = new RecursiveLayout(
                           new MultipleLayout(layout1, layout2));</code> 
            <p>
            The reference graph layouts must not be an instance of
            <strong>RecursiveLayout</strong>. 
            </p>
            <p>
            To indicate the top-level graphic container of the nesting hierarchy
            you want to lay out, use the method
            <strong>Attach(GraphicContainer)</strong>. <br/> To indicate the
            graph model of the top-level graph of the nesting hierarchy you want
            to lay out, use the method <strong>Attach(IGraphModel)</strong>.
            <br/> To perform the layout, use the method
            <strong>PerformLayout(bool)</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.#ctor">
            <summary>
             Creates a new instance of the Recursive Multiple Layout algorithm
            that allows you to apply layouts to the entire nested graph.
            </summary>
            <remarks>
            You should use this constructor if you want to apply different
            layout styles or individual layout parameters to each subgraph of
            the nested graph. After attaching the top-level graphic container or
            graph model, you can specify which layout is applied to which
            subgraph by using
            <see cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>.
            The layout mode of this Recursive Multiple Layout is
            <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.InternalProviderMode"/>. 
            <p>
            To indicate the top-level graphic container of the nesting hierarchy
            you want to lay out, use the method
            <strong>Attach(GraphicContainer)</strong>. <br/> To indicate the
            graph model of the top-level graph of the nesting hierarchy you want
            to lay out, use the method <strong>Attach(IGraphModel)</strong>.
            <br/> To perform the layout, use the method
            <strong>PerformLayout(bool)</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.Init">
            <summary>
            Initializes instance variables.
            </summary>
            <remarks> 
            <p>
            You should not call this method directly. The method is called
            internally by the constructor without arguments and by the copy
            constructor. The method must be overridden by subclasses that need
            to initialize  additional instance variables.
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.#ctor(ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout)">
            <summary>
            Creates a new layout instance by copying an existing one.
            </summary>
            <remarks>
            This constructor is used by the
            <see cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.Copy"/> method. Any subclass
            should provide a copy constructor. 
            <p>
            The parameters of the <strong>source</strong> layout are copied
            using the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>.
            
            </p>
            <p>
            </p>
            </remarks>
            <param name="source"> The layout instance that is copied.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.Copy"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.Copy">
            <summary>
            Copies the layout instance.
            </summary>
            <remarks> 
            <p>
            This method copies the layout instance by calling the copy
            constructor. Note that the parameters which are specific to a node
            or a link are not copied.  It depends on the layout mode what is
            copied: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.ReferenceLayoutMode"/> - The
            reference layouts are copied deeply.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.InternalProviderMode"/> - The
            information which subgraph uses which sublayouts is not copied.</LI>
            
            </UL> 
            </p>
            </remarks>
            <returns>A copy of the layout instance.
            </returns>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.#ctor(ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Copies the parameters from a given layout instance.
            </summary>
            <remarks>
            Note that the parameters which are specific to a node or a link are
            not copied.  It depends on the layout mode what is copied: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.ReferenceLayoutMode"/> - The
            reference layouts are copied deeply.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.InternalProviderMode"/> - The
            information which subgraph uses which sublayouts is not copied.</LI>
            
            </UL>
            </remarks>
            <param name="source"> The layout instance from which the parameters
            are copied.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.Copy"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.GetFirstReferenceGraphLayout">
            <summary>
            Returns the first reference graph layout, if the reference layout
            mode is used.
            </summary>
            <remarks>
            Returns <see langword="null"/> otherwise. 
            <p>
            In reference layout mode, the reference layout is used to lay out
            the top-level graph. Clones of the reference layout are used to lay
            out the subgraphs. The entire nested graph is laid out with the
            global layout parameters of the reference layout. If you change
            global layout parameters of the reference layout, this will affect
            the layout of subgraphs as well, because the global layout
            parameters are copied from the reference layout to the layouts of
            the subgraphs. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.#ctor(ILOG.Diagrammer.GraphLayout.GraphLayout,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.GetSecondReferenceGraphLayout">
            <summary>
            Returns the second reference graph layout, if the reference layout
            mode is used.
            </summary>
            <remarks>
            Returns <see langword="null"/> otherwise. 
            <p>
            In reference layout mode, the reference layout is used to lay out
            the top-level graph. Clones of the reference layout are used to lay
            out the subgraphs. The entire nested graph is laid out with the
            global layout parameters of the reference layout. If you change
            global layout parameters of the reference layout, this will affect
            the layout of subgraphs as well, because the global layout
            parameters are copied from the reference layout to the layouts of
            the subgraphs. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.#ctor(ILOG.Diagrammer.GraphLayout.GraphLayout,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Sets the layout instance to be used for the input subgraph.
            </summary>
            <remarks>
            The input layout must be an instance of
            <strong>MultipleLayout</strong>. If <see langword="null"/> is passed
            as the subgraph, the input layout is used for the top-level graph.
            If <see langword="null"/> is passed as the layout, no layout will be
            performed for the corresponding subgraph. 
            <p>
            You can use this method only in internal provider mode. You must
            attach a graphic container or graph model first before using this
            method. Each subgraph must get a different layout instance, that is,
            the layout instances cannot be shared among different subgraphs. The
            input layout is automatically attached and detached by the Recursive
            Multiple Layout as needed. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="subgraph"> The subgraph or <see langword="null"/>.
            </param>
            <param name="layout"> The layout instance used to lay out the
            subgraph. This can be <see langword="null"/>, or must be an instance
            of <strong>MultipleLayout</strong>.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.#ctor"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayout(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout,System.Boolean,System.Boolean)">
            <summary>
            Sets the layout instance to be used for the input subgraph.
            </summary>
            <remarks>
            The input layout must be an instance of
            <strong>MultipleLayout</strong>. If the <paramref name="traverse"/>
            flag is <see langword="true"/>, it traverses the nested graph
            starting from the input graph and sets a clone of the input layout
            recursively for each subgraphs. Notice that if you insert subgraphs
            after calling this method, the new subgraphs have no layout yet
            assigned. 
            <p>
            If <see langword="null"/> is passed as the subgraph, the input
            layout is used for the top-level graph, and the traversal, if any,
            starts at the  top-level graph. If <see langword="null"/> is passed
            as the layout, no layout will be performed for the corresponding
            subgraphs. 
            </p>
            <p>
            You can use this method only in internal provider mode. Each
            subgraph must get a different layout instance, that is, the layout
            instances cannot be shared among different subgraphs. You must
            attach a graphic container or graph model first before using this
            method. The input layout is automatically attached and detached by
            the Recursive Multiple Layout as needed. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="subgraph"> The subgraph or <see langword="null"/>.
            </param>
            <param name="layout"> The layout instance used to lay out the
            subgraph. This must be an instance of
            <strong>MultipleLayout</strong>.
            </param>
            <param name="detachPrevious"> If <see langword="true"/>, the layout
            instance previously specified as the preferred layout of the
            subgraph (if any) is detached.
            </param>
            <param name="traverse"> If <see langword="true"/>, clones of the
            input layout are recursively used for all current subgraphs of the
            input graph.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.#ctor"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayout(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout,ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Sets the layout instances to be used for the input subgraph.
            </summary>
            <remarks>
            If <see langword="null"/> is passed as the subgraph, the input
            layout is used for the top-level graph. Internally, a Multiple
            Layout is created that contains the input layouts as sublayouts. 
            <p>
            When the Recursive Multiple Layout is performed,
            <paramref name="layout1"/> is applied first and
            <paramref name="layout2"/> second to the input subgraph. 
            </p>
            <p>
            You can use this method only in internal provider mode. You must
            attach a graphic container or graph model first before using this
            method. Each subgraph must get different layout instances, that is,
            the layout instances cannot be shared among different subgraphs. The
            input layouts are automatically attached and detached by the
            Recursive Multiple Layout as needed. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="subgraph"> The subgraph or <see langword="null"/>.
            </param>
            <param name="layout1"> The first graph layout used to lay out the
            subgraph.
            </param>
            <param name="layout2"> The second graph layout used to lay out the
            subgraph.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.#ctor"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayout(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.GetFirstGraphLayout(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.GetSecondGraphLayout(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.GetFirstGraphLayout(System.Object)">
            <summary>
            Returns the layout instance to be used for the input subgraph as the
            first layout.
            </summary>
            <remarks>
            If <see langword="null"/> is passed as the subgraph, the layout
            instance of the top-level graph is returned. You can use this method
            in all layout modes. You must attach a graphic container or graph
            model first before using this method. The method may return
            <see langword="null"/> if no layout should be performed for the
            subgraph. 
            <p>
            In reference layout mode, changing global layout parameters of the
            layout instances of subgraphs is useless, because during layout, the
            global parameters of the first reference graph layout are used for
            each subgraph. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="subgraph"> The subgraph or <see langword="null"/>.
            </param>
            <returns>The layout instance used as the first layout for the
            subgraph.
            </returns>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.GetSecondGraphLayout(System.Object)">
            <summary>
            Returns the layout instance to be used for the input subgraph as the
            second layout.
            </summary>
            <remarks>
            If <see langword="null"/> is passed as the subgraph, the layout
            instance of the top-level graph is returned. You can use this method
            in all layout modes. You must attach a graphic container or graph
            model first before using this method. The method may return
            <see langword="null"/> if no layout should be performed for the
            subgraph. 
            <p>
            In reference layout mode, changing global layout parameters of the
            layout instances of subgraphs is useless, because during layout, the
            global parameters of the second reference graph layout are used for
            each subgraph. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="subgraph"> The subgraph or <see langword="null"/>.
            </param>
            <returns>The layout instance used as the second layout for the
            subgraph.
            </returns>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.SetLayout(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout,ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.PropagateFirstGraphLayoutActive(System.Boolean)">
            <summary>
            Sets whether the first graph layout of all subgraphs is active.
            </summary>
            <remarks>
            This allows you to temporarily disable the first graph layouts. The
            first graph layouts are active by default. However, if you want to
            perform a layout using only the second graph layouts  of the
            subgraphs, you can set the first layout inactive. In this case, none
            of the first graph layouts of  subgraphs are performed when calling
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            on the Recursive Multiple layout instance. 
            <p>
            In reference layout mode, it calls
            <see cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayoutActive"/>
            at the reference layout, which is in this case a Multiple Layout. If
            a graph is attached and the layout mode is the internal provider
            mode, it traverses the nesting hierarchy and calls 
            <see cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayoutActive"/>
            for all Multiple Layout instances of subgraphs. However, if you
            insert subgraphs after calling this method, or if you change the
            layout instances of subgraphs in the internal provider after calling
            this method, the new layouts of these subgraphs may have a different
            setting. 
            </p>
            <p>
            This method throws a runtime exception when no graph model is yet
            attached. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="active"> <see langword="true"/> if the first graph
            layout is active, or <see langword="false"/> otherwise.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.GetFirstGraphLayout(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayoutActive"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.PropagateSecondGraphLayoutActive(System.Boolean)">
            <summary>
            Sets whether the second graph layout of all subgraphs is active.
            </summary>
            <remarks>
            This allows you to temporarily disable the second graph layouts. The
            second graph layouts are active by default. However, if you want to
            perform a layout using only the first graph layouts  of the
            subgraphs, you can set the second layout inactive. In this case,
            none of the second graph layouts of  subgraphs are performed when
            calling
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            on the Recursive Multiple layout instance. 
            <p>
            In reference layout mode, it calls
            <see cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayoutActive"/>
            at the reference layout, which is in this case a Multiple Layout. If
            a graph is attached and the layout mode is the internal provider
            mode, it traverses the nesting hierarchy and calls 
            <see cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayoutActive"/>
            for all Multiple Layout instances of subgraphs. However, if you
            insert subgraphs after calling this method, or if you change the
            layout instances of subgraphs in the internal provider after calling
            this method, the new layouts of these subgraphs may have a different
            setting. 
            </p>
            <p>
            This method throws a runtime exception when no graph model is yet
            attached. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="active"> <see langword="true"/> if the second graph
            layout is active, or <see langword="false"/> otherwise.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.GetSecondGraphLayout(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayoutActive"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.OnSubLayoutStepPerformed(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs)">
            <summary>
            This method is called by the graph layouts of subgraphs.
            It forwards the layout event to this Recursive Layout.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.FirstGraphLayoutActive">
            <summary>
            Gets or sets whether the first graph layout of all subgraphs is
            active.
            </summary>
            <remarks>
            This holds for calls of
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            except those calls that were triggered by automatic layout (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.AutoLayout"/>). Possible values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayoutActivation.Active"/> - the
            first graph layout is active for all subgraphs. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayoutActivation.Inactive"/> - the
            first graph layout is inactive for all subgraphs. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayoutActivation.Mixed"/> - it is
            unspecified whether the first layout is active or inactive for all
            subgraphs. Instead, it is possible to specify for each subgraph
            individually by
            <see cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayoutActive"/>
            whether the first graph layout should be active or inactive. </LI> 
            </UL> 
            <p>
            </p>
            </remarks>
            <value>Whether the first graph layout is active.
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.AutoLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayoutActive"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.PropagateFirstGraphLayoutActive(System.Boolean)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.FirstGraphLayoutActiveDuringAutoLayout"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.SecondGraphLayoutActive">
            <summary>
            Gets or sets whether the second graph layout of all subgraphs is
            active.
            </summary>
            <remarks>
            This holds for calls of
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            except those calls that were triggered by automatic layout (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.AutoLayout"/>). Possible values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayoutActivation.Active"/> - the
            second graph layout is active for all subgraphs. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayoutActivation.Inactive"/> - the
            second graph layout is inactive for all subgraphs. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayoutActivation.Mixed"/> - it is
            unspecified whether the second layout is active or inactive for all
            subgraphs. Instead, it is possible to specify for each subgraph
            individually by
            <see cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayoutActive"/>
            whether the second graph layout should be active or inactive. </LI> 
            </UL> 
            <p>
            </p>
            </remarks>
            <value>Whether the second graph layout is active.
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.AutoLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayoutActive"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.PropagateSecondGraphLayoutActive(System.Boolean)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.SecondGraphLayoutActiveDuringAutoLayout"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.FirstGraphLayoutActiveDuringAutoLayout">
            <summary>
            Gets or sets whether the first graph layout of all subgraphs is
            active during automatic layout.
            </summary>
            <remarks>
            This is only used if the layout was triggered by automatic layout
            (see <see cref="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.AutoLayout"/>). Possible values are:
            
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayoutActivation.Active"/> - the
            first graph layout is active for all subgraphs. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayoutActivation.Inactive"/> - the
            first graph layout is inactive for all subgraphs. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayoutActivation.Mixed"/> - it is
            unspecified whether the first layout is active or inactive for all
            subgraphs. Instead, it is possible to specify for each subgraph
            individually by
            <see cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayoutActive"/>
            whether the first graph layout should be active or inactive. </LI> 
            </UL>
            It is often useful to differentiate which sublayout is active during
            normal relayout (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.FirstGraphLayoutActive"/>) and
            during automatic layout (this API). For instance, if the first graph
            layout positions the nodes and the second graph layout routes the
            links, it allows to specify that during automatic layout, only the
            links should be routed, i.e., the first graph layout must be
            disabled, while during a full explicitly triggered layout, the first
            graph layout must be enabled. 
            <p>
            </p>
            </remarks>
            <value>Whether the first graph layout is active during automatic
            layout.
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformAutoLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.AutoLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayoutActive"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.PropagateFirstGraphLayoutActive(System.Boolean)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.FirstGraphLayoutActive"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.SecondGraphLayoutActiveDuringAutoLayout">
            <summary>
            Gets or sets whether the second graph layout of all subgraphs is
            active during automatic layout.
            </summary>
            <remarks>
            This is only used if the layout was triggered by automatic layout
            (see <see cref="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.AutoLayout"/>). Possible values are:
            
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayoutActivation.Active"/> - the
            second graph layout is active for all subgraphs. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayoutActivation.Inactive"/> - the
            second graph layout is inactive for all subgraphs. </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayoutActivation.Mixed"/> - it is
            unspecified whether the second layout is active or inactive for all
            subgraphs. Instead, it is possible to specify for each subgraph
            individually by
            <see cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayoutActive"/>
            whether the second graph layout should be active or inactive. </LI> 
            </UL>
            It is often useful to differentiate which sublayout is active during
            normal relayout (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.SecondGraphLayoutActive"/>) and
            during automatic layout (this API). For instance, if the first graph
            layout positions the nodes and the second graph layout routes the
            links, it allows to specify that during automatic layout, only the
            links should be routed, i.e., the second graph layout must be
            enabled, while during a full explicitly triggered layout, the second
            graph layout might be disabled. 
            <p>
            </p>
            </remarks>
            <value>Whether the second graph layout is active during automatic
            layout.
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformAutoLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.AutoLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayoutActive"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.PropagateSecondGraphLayoutActive(System.Boolean)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.SecondGraphLayoutActive"/>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayoutActivation">
            <summary>
            The activation modes of the Recursive Multiple layout.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.FirstGraphLayoutActive"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.SecondGraphLayoutActive"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.FirstGraphLayoutActiveDuringAutoLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout.SecondGraphLayoutActiveDuringAutoLayout"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayoutActivation.Active">
            <summary>
            The sublayout is active for all subgraphs.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayoutActivation.Inactive">
            <summary>
            The sublayout is inactive for all subgraphs.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayoutActivation.Mixed">
            <summary>
            It sublayout can be active or inactive for individual sublayouts.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.LongLinkLayout">
            <summary>
            The main class for the Long Link Layout algorithm.
            </summary>
            <remarks> 
            <p>
            The Long Link Layout algorithm reshapes the links of a graph without
            moving the nodes. It is specialized to route long orthogonal links on
            a grid without overlapping nodes. It uses a classical path search
            mechanism and an additional crossing reduction phase. It can be used
            to find an orthogonal route without overlaps in a labyrinth of node
            obstacles. 
            </p>
            <p>
            Optionally, direct links can be computed, which, however, may overlap
            nodes. See the property <see cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.LinkStyle"/>. 
            </p>
            <p>
            This layout algorithm is recommended if any of the following
            conditions apply: 
            <UL>
            <LI> Many links are long, and it is important that long orthogonal
            links do not overlap obstacles.</LI> 
            <LI> Routing on a grid is preferred because it guarantees a minimal
            distance between link segments.</LI> 
            <LI> An increasing number of bends is acceptable if this avoids any
            overlaps.</LI> 
            </UL>
            Otherwise, the
            <see cref="T:ILOG.Diagrammer.GraphLayout.ShortLinkLayout"/> may be more
            suitable. 
            </p>
            <p>
            Here are sample drawings produced by the Long Link Layout: <CENTER>
            <A HREF="images/GraphLayout/layout-Link-long2timesB.gif">
            <IMG SRC="images/GraphLayout/layout-Link-long2times.gif" BORDER="0" ALIGN="BOTTOM" WIDTH="100%"/></A>
            </CENTER> <FONT SIZE="-2">Click on the image to see it in normal
            size.</FONT> 
            </p>
            <p>
            The long link mode can be used to find a route through a labyrinth:
            <CENTER> <A HREF="images/GraphLayout/layout-Link-labyrinth.gif">
            <IMG SRC="images/GraphLayout/layout-Link-labyrinth.gif" BORDER="0" ALIGN="BOTTOM" WIDTH="75%"/></A>
            </CENTER> <FONT SIZE="-2">Click on the image to see it in normal
            size.</FONT> 
            </p>
            <p>
            Note the following points: 
            <UL>
            <LI> The algorithm never moves any nodes. It only reshapes
            links.</LI> 
            <LI> The algorithm normally routes normal links. It has a special
            mode to route the intergraph links of the graph model.</LI> 
            <LI> The algorithm has an incremental mode and a nonincremental mode.
            In nonincremental mode, all links are routed. In incremental mode,
            only those links are routed that overlap nodes or whose end nodes
            have changed. The incremental mode cannot be used for intergraph
            links.</LI> 
            <LI> The algorithm supports self-links and multiple links between the
            same pair of nodes.</LI> 
            </UL> 
            </p>
            </remarks>
            <example>
            <para lang="cs,vbnet">The following example shows how to apply 
            the Long Link Layout.</para>
            <code lang="cs">
            using System;
            using ILOG.Diagrammer;
            using ILOG.Diagrammer.Graphic;
            using ILOG.Diagrammer.GraphLayout; 
            
            Group group = new Group();
            
            // Fill the group with nodes and links here
            
            LongLinkLayout layout = new LongLinkLayout();
            group.LinkLayout = layout;
            group.PerformGraphLayout(); 
            </code>
            <code lang="vbnet">
            Imports System
            Imports ILOG.Diagrammer
            Imports ILOG.Diagrammer.Graphic
            Imports ILOG.Diagrammer.GraphLayout
            
            Dim group As Group = New Group 
            
            ' Fill the group with nodes and links here
            
            Dim layout As LongLinkLayout = New LongLinkLayout
            group.LinkLayout = layout
            group.PerformGraphLayout
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.#ctor">
            <summary>
            Creates a new instance of the Long Link Layout algorithm.
            </summary>
            <remarks>
            <br/> To indicate the graphic container you want to lay out, use the
            method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>.
            <br/> To indicate the graph model you want to lay out, use the
            method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            <br/> To perform the layout, use the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            <br/> To modify the layout parameters, use the different methods
            provided in this class and its superclass. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Filter"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.#ctor(ILOG.Diagrammer.GraphLayout.LongLinkLayout)">
            <summary>
            Creates a new layout instance by copying an existing one.
            </summary>
            <remarks>
            This constructor is used by the <see cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.Copy"/>
            method. Any subclass should provide a copy constructor. 
            <p>
            The parameters of the <strong>source</strong> layout are copied
            using the method <see cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="source"> The layout instance that is copied.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.Copy"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.Init">
            <summary>
            Initializes instance variables.
            </summary>
            <remarks> 
            <p>
            You should not call this method directly. The method is called
            internally by the constructor without arguments and by the copy
            constructor. The method must be overridden by subclasses that need
            to initialize additional instance variables. 
            </p>
            <p>
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.Copy">
            <summary>
            Copies the layout instance.
            </summary>
            <remarks> 
            <p>
            This method copies the layout instance by calling the copy
            constructor. 
            </p>
            <p>
            When performing a recursive layout on a nested graph,
            <see cref="T:ILOG.Diagrammer.GraphLayout.ILayoutProvider"/> uses this
            method to "clone" the layout instance of a parent graph. Note that
            the parameters which are specific to a node or a link are not
            copied. Only the global parameters are copied. The customization
            interfaces (node side filter, node box interface, termination point
            filter) are also copied. 
            </p>
            <p>
            </p>
            </remarks>
            <returns>A copy of the layout instance.
            </returns>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.NodeBoxProvider"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.NodeSideFilter"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.TerminationPointFilter"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Copies the parameters from a given layout instance.
            </summary>
            <remarks> 
            <p>
            Note that the parameters which are specific to a node or a link are
            not copied. Only the global parameters are copied. The customization
            interfaces (node side filter, node box interface, termination point
            filter) are also copied. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="source"> The layout instance from which the parameters
            are copied.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.Copy"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.NodeBoxProvider"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.NodeSideFilter"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.TerminationPointFilter"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.Detach">
            <summary>
            Detaches the graph model from the layout instance.
            </summary>
            <remarks>
            When you attach a new graph model to the layout instance, you do not
            need to detach the old graph model because this is done
            automatically when you call
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            
            <p>
            The method performs cleaning operations on the graph model. In
            addition to the cleaning operations in the base class, the Long Link
            Layout removes the link style specifications of individual links. 
            </p>
            <p>
            Note that you must call this method when you no longer need the
            layout instance. Otherwise, some objects may not be garbage
            collected. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.CleanNode(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)">
            <summary>
            Cleans a node.
            </summary>
            <remarks>
            This method removes any data that has been stored by the layout
            algorithm on a node. 
            <p>
            The method is automatically called by
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.ModelContentsChanged(System.Object,ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs)"/>
            whenever a
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs"/>
            of type 
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.NodeRemoved"/> is
            received. 
            </p>
            <p>
            Subclasses can override this method to remove additional information
            stored in the nodes. 
            </p>
            <p>
            Notice that the method may be called multiple times for the same
            node. At the time this method is called, the node may already be
            removed; therefore, overridden versions of this method should be
            implemented so that they work even if the object is no longer  a
            node of <paramref name="graphModel"/>. 
            </p>
            </remarks>
            <param name="graphModel"> The graph model to which the
            <paramref name="node"/> belongs.
            </param>
            <param name="node"> The node to be cleaned.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.Detach"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.Dispose"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.CleanLink(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)">
            <summary>
            Cleans a link.
            </summary>
            <remarks>
            This method removes any data that has been stored by the layout
            algorithm on a link.  
            <p>
            The method is automatically called by
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.ModelContentsChanged(System.Object,ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs)"/>
            whenever a
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs"/>
            of type 
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.LinkRemoved"/> is
            received. 
            </p>
            <p>
            Subclasses can override this method to remove additional information
            stored in the links. 
            </p>
            <p>
            Notice that the method may be called multiple times for the same
            link. At the time this method is called, the link may already be
            removed; therefore, overridden versions of this method should be
            implemented so that they work even if the object is no longer  a
            link of <paramref name="graphModel"/>. 
            </p>
            </remarks>
            <param name="graphModel"> The graph model to which the
            <paramref name="link"/> belongs.
            </param>
            <param name="link"> The link to be cleaned.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.Detach"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.Dispose"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.Layout">
            <summary>
            Computes the layout using the Long Link Layout algorithm.
            </summary>
            <remarks>
            To start the layout, call the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.CreateLayoutReport">
            <summary>
            Creates the graph layout report instance.
            </summary>
            <remarks>
            The current implementation creates an instance of
            <see cref="T:ILOG.Diagrammer.GraphLayout.LongLinkLayoutReport"/>. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CreateLayoutReport"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.LongLinkLayoutReport"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SupportsPreserveFixedLinks">
            <summary>
            Indicates that this layout class allows the user to specify fixed
            links.
            </summary>
            <remarks>
            Fixed links are not reshaped during the layout if the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/>
            is set to <see langword="true"/>. The effect is very similar to the
            effect when the links are filtered during layout. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Filter"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/>
            '/&gt;
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.LinkStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle)"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SupportsAllowedTime">
            <summary>
            Indicates that this layout class can stop the layout computation in
            a proper manner when the user-defined allowed time is exceeded.
            </summary>
            <remarks>
            If the allowed time elapses before termination of the Long Link
            Layout algorithm, the links are not reshaped and remain at the same
            position as before the start of the algorithm. The result code in
            the layout report is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/> in this case. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/>
            '/&gt;
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SupportsStopImmediately">
            <summary>
            Indicates that this layout class can interrupt the current run of
            the layout immediately in a controlled way.
            </summary>
            <remarks>
            If interrupted, the links are not reshaped and remain at the same
            position as before the start of the algorithm. The result code in
            the layout report is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/> in this case. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.StopImmediately"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsStoppedImmediately"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.StopImmediately">
            <summary>
            Stops the running of the layout algorithm as soon as possible.
            </summary>
            <remarks>
            The Long Link Layout algorithm has several steps. In the first
            steps, the layout algorithm can be stopped and the method returns
            <see langword='true'/>. In the very last step,  the layout algorithm
            cannot be stopped and the method returns <see langword='false'/>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SupportsPercentageComplete">
            <summary>
            Indicates that this layout class can estimate the percentage of
            completion during the run of layout.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IncreasePercentageComplete(System.Int32)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.PercentageComplete"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SupportsLinkConnectionBox">
            <summary>
            Indicates that this layout class can use a link connection box
            provider to calculate the end points of a link.
            </summary>
            <remarks>
            The link connection box provider is an object that provides the
            rectangle to which the links are connected for each node. 
            <p>
            The link connection box is used instead of the bounding box of each
            node (see <see cref="P:ILOG.Diagrammer.GraphicObject.Bounds"/> and 
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.BoundingBox(System.Object)"/>)
            during the routing of links. The tangential offsets provided by the
            link connection box provider are currently ignored. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle)">
            <summary>
            Sets the style of the shape of an individual link.
            </summary>
            <remarks>
            This link style is used only if the global link style is set to
            <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Mixed"/>. Otherwise, all links have
            the style that is specified as the global link style. 
            <p>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Orthogonal"/> - the link gets an
            orthogonal shape, that is, a shape consisting of a sequence of
            alternating horizontal and vertical line segments.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Direct"/> - the link gets a
            nearly straight-line shape. The shape of the link is a polyline
            composed of a straight-line segment between the end nodes with two
            short horizontal or vertical segments at its ends (their length is
            controlled by <see cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MinStartSegmentLength"/> and
            <see cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MinEndSegmentLength"/> and may be 0). In
            this link style, links may overlap nodes.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.NoReshape"/> - the link is not
            reshaped.</LI> 
            </UL> 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Orthogonal"/>.  
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.GetLinkStyle(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.LinkStyle"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.GetLinkStyle(System.Object)">
            <summary>
            Returns the style of the shape of an individual link.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.LinkStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)">
            <summary>
            Sets the mode for the connection point on an individual link on the
            origin node.
            </summary>
            <remarks>
            This mode is used only if the global from point mode is set to
            <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>. Otherwise, the connection
            points on the origin nodes have, for all the links, the mode that is
            specified as the global origin point mode. 
            <p>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/> - The layout is free to
            choose, for this link, the appropriate position of the connection
            point on the origin node, except for "pinned"  connection points
            (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)"/>).</LI>
            
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Fixed"/> - The layout must keep,
            for this link, the current position of the connection point on the
            origin node. This can be useful, in particular, if the node has
            fixed anchors where the link is attached (anchors for which
            <see cref="P:ILOG.Diagrammer.Anchor.CanMove"/> returns
            <see langword="false"/>) and the pins should not be moved  by the
            layout algorithm. 
            <p>
            Note that, in this mode, the first segment of a link is not placed 
            on the grid. Therefore, the first segment may be closer than the 
            specified minimal offset to neighbor links, or may even overlap them
            if they start at the same fixed point.
            </p>
            </LI> 
            </UL> 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <param name="mode"> The mode to set.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.GetOriginPointMode(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.OriginPointMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.GetOriginPointMode(System.Object)">
            <summary>
            Returns the origin point mode of an individual link.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.OriginPointMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)">
            <summary>
            Sets the mode for the connection point on an individual link on the
            destination node.
            </summary>
            <remarks>
            This mode is used only if the global from point mode is set to
            <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>. Otherwise, the connection
            points on the destination nodes have, for all the links, the mode
            that is specified as the global destination point mode. 
            <p>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/> - The layout is free to
            choose, for this link, the appropriate position of the connection
            point on the destination node, except for "pinned"  connection
            points (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)"/>).</LI>
            
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Fixed"/> - The layout must keep,
            for this link, the current position of the connection point on the
            destination node. This can be useful, in particular, if the node has
            fixed pins where the link is attached (anchors for which
            <see cref="P:ILOG.Diagrammer.Anchor.CanMove"/> returns
            <see langword="false"/>) and the pins should not be moved  by the
            layout algorithm. 
            <p>
            Note that, in this mode, the first segment of a link is not placed 
            on the grid. Therefore, the first segment may be closer than the 
            specified minimal offset to neighbor links, or may even overlap them
            if they start at the same fixed point.
            </p>
            </LI> 
            </UL> 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <param name="mode"> The mode to set.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.GetDestinationPointMode(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.DestinationPointMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.GetDestinationPointMode(System.Object)">
            <summary>
            Returns the destination point mode of an individual link.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.DestinationPointMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MarkForIncremental(System.Object)">
            <summary>
            Marks the input link to be rerouted with the next call of
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>,
            if incremental mode is enabled.
            </summary>
            <remarks>
            Normally the incremental layout reroutes only those links that have
            changed since the last layout. By setting a mark on the link, this
            link will be rerouted even if it has not changed. 
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.IncrementalMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AddRectObstacle(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Adds a rectangular obstacle for the routing.
            </summary>
            <remarks>
            All nodes are considered rectangular obstacles by default for the
            routing of a link. The algorithm tries to find a link routing that
            avoids overlaps with rectangular obstacles. If graphic objects that
            are not nodes should also be considered as obstacles, you can add
            them by this method. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.RemoveAllRectObstacles"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AddLineObstacle(ILOG.Diagrammer.Rectangle2D)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AddLineObstacle(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.NodeObstacleEnabled"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.RemoveAllRectObstacles">
            <summary>
            Removes all additional rectangular obstacles.
            </summary>
            <remarks>  
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AddRectObstacle(ILOG.Diagrammer.Rectangle2D)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AddLineObstacle(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Adds a line segment obstacle for the routing.
            </summary>
            <remarks>
            This must be either a horizontal line segment or a vertical line
            segment; hence, the input bounding box must either have zero width
            or zero height. Orthogonally routed link segments are considered
            line segment obstacles by default for the routing of another link.
            The algorithm tries to find a link routing that allows crossing line
            obstacles in the orthogonal  direction but avoids overlaps with line
            obstacles in the parallel  direction. If graphic objects that are
            not links should also be  considered as obstacles, you can add them
            by this method. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.RemoveAllLineObstacles"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AddRectObstacle(ILOG.Diagrammer.Rectangle2D)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.LinkObstacleEnabled"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AddLineObstacle(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            Adds a line segment obstacle for the routing.
            </summary>
            <remarks>
            This is a line segment that need not be strictly horizontal or
            vertical. Orthogonally routed link segments are considered line
            segment obstacles by default for the routing of another link. The
            algorithm tries to find a link routing that allows crossing line
            obstacles in the orthogonal  direction but avoids overlaps with line
            obstacles in the parallel  direction. If graphical objects that are
            not links should also be  considered as obstacles, you can add them
            by this method. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.RemoveAllLineObstacles"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AddRectObstacle(ILOG.Diagrammer.Rectangle2D)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.LinkObstacleEnabled"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.RemoveAllLineObstacles">
            <summary>
            Removes all additional line obstacles.
            </summary>
            <remarks>  
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AddLineObstacle(ILOG.Diagrammer.Rectangle2D)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AddLineObstacle(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.GetCalcFallbackLinks">
            <summary>
            Returns the links that could not be routed on the grid without
            obstacle overlaps by the previous layout call.
            </summary>
            <remarks>
            A link may not be routed without overlaps if the allowed time to
            find a route for this single link elapsed (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AllowedTimePerLink"/>), if the route would
            have to bypass too many obstacles (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MaxBacktrack"/>), or if there is no path
            on the grid from the start node to the end node that bypasses all
            obstacles. 
            <p>
            These links must be routed by some fallback mechanism. If the
            fallback routing option was set to <see langword="true"/> by using
            <see cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.FallbackRouteEnabled"/>, these links are
            routed by a simple fallback routing algorithm inside
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            If the fallback routing option was set to <see langword="false"/>,
            these links are not routed. In this case, the user is supposed to
            implement a fallback mechanism to route these links after
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            terminated successfully. 
            </p>
            <p>
            Note that there will be no calculated fallback links if the previous
            layout did not terminate successfully, for example, if the global
            layout  time elapsed or if the algorithm was stopped immediately
            during the  previous run of
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.FallbackRouteEnabled"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AllowedTimePerLink"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MaxBacktrack"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.StopImmediately"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)">
            <summary>
            Fires a graph layout <strong>LayoutStepPerformed</strong> event.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.HorizontalGridOffset">
            <summary>
            Gets or sets the horizontal offset between the grid lines.
            </summary>
            <remarks>
            Links are routed on an orthogonal grid. 
            <p>
            The default value is <strong>5</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.HorizontalMinOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.HorizontalGridBase"/>
            <value>The horizontal offset between the grid lines.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.VerticalGridOffset">
            <summary>
            Gets or sets the vertical offset between the grid lines.
            </summary>
            <remarks>
            Links are routed on an orthogonal grid. 
            <p>
            The default value is <strong>5</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.VerticalMinOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.VerticalGridBase"/>
            <value>The vertical offset between the grid lines.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.HorizontalGridBase">
            <summary>
            Gets or sets the horizontal base coordinate of the grid.
            </summary>
            <remarks>
            This is the <I>x</I>-coordinate of the first vertical grid line.
            Links are routed on an orthogonal grid. 
            <p>
            The default value is <strong>0</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.HorizontalGridOffset"/>
            <value>The horizontal base coordinate of the grid.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.VerticalGridBase">
            <summary>
            Gets or sets the vertical base coordinate of the grid.
            </summary>
            <remarks>
            This is the <I>y</I>-coordinate of the first horizontal grid line.
            Links are routed on an orthogonal grid. 
            <p>
            The default value is <strong>0</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.VerticalGridOffset"/>
            <value>The vertical base coordinate of the grid.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.HorizontalMinOffset">
            <summary>
            Gets or sets the minimal horizontal offset between the node border
            and a link segment that is (vertically) parallel to the node border.
            </summary>
            <remarks> 
            <p>
            The default value is <strong>3</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.HorizontalGridOffset"/>
            <value>The minimal horizontal offset between the node border and a
            link segment that is (vertically) parallel to the node border.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.VerticalMinOffset">
            <summary>
            Gets or sets the minimal vertical offset between the node border and
            a link segment that is (horizontally) parallel to the node border.
            </summary>
            <remarks> 
            <p>
            The default value is <strong>3</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.VerticalGridOffset"/>
            <value>The minimal vertical offset between the node border and a
            link segment that is (horizontally) parallel to the node border.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MinNodeCornerOffset">
            <summary>
            Gets or sets the minimum offset between a node corner and a link
            starting at this node.
            </summary>
            <remarks>
            Setting this to <strong>0</strong> enables the layout to start a 
            link exactly at a node corner. 
            <p>
            The default value is <strong>3</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The minimum offset between a node corner and a link starting
            at this node.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MinStartSegmentLength">
            <summary>
            Gets or sets the minimum length of the first segment of each link,
            that is, the segment incident to the "from" node.
            </summary>
            <remarks> 
            <p>
            The default value is <strong>10</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MinEndSegmentLength"/>
            <value>The minimum length of the first segment of each link, that
            is, the segment incident to the "from" node.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MinEndSegmentLength">
            <summary>
            Gets or sets the minimum length of the last segment of each link,
            that is, the segment incident to the "to" node.
            </summary>
            <remarks> 
            <p>
            The default value is <strong>10</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MinStartSegmentLength"/>
            <value>The minimum length of the last segment of each link, that is,
            the segment incident to the "to" node.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AllowedTimePerLink">
            <summary>
            Gets or sets the upper limit for the time allowed to find a route
            for a long link.
            </summary>
            <remarks>
            The algorithm tries to find a short route for the link. It uses a
            backtrack mechanism to find a route that bypasses obstacles. The
            runtime of the backtrack can be large if the size of the drawing
            area is large and the grid offset is small. The algorithm stops the
            backtrack when the specified time is elapsed and gives up without
            result. 
            <p>
            The default value is <strong>2000</strong> (2 seconds). 
            </p>
            <p>
            Note that the specified time is valid for each single link, that is,
            the <I>maximal time</I> to find routes for all links is
            approximately the specified time per link multiplied by the number
            of links. However, this happens only extremely seldom. The algorithm
            will most likely find a route for the majority of the links before
            the time elapses; therefore, the <I>average time</I> to find routes
            for all links is much smaller.  
            </p>
            <p>
            If the specified time elapsed for a link and the fallback routing is
            enabled, the link is quickly routed by the fallback mechanism
            instead. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MaxBacktrack"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.HorizontalGridOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.VerticalGridOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.FallbackRouteEnabled"/>
            <value>The upper limit for the time allowed to find a route for a
            long link.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MaxBacktrack">
            <summary>
            Gets or sets the maximal number of backtrack steps to find a route
            for a long link.
            </summary>
            <remarks>
            The algorithm tries to find a short route for the link. The
            backtrack number indicates that the algorithm tries to find a route
            that is so many grid points longer than the shortest possible route
            before it gives up the search. 
            <p>
            Decreasing the value causes the algorithm to give up earlier without
            result. If the "from" point and "to" point are fixed, this speeds up
            the search. Otherwise, the time behavior is more complex, so it may
            speed up or slow down the search. 
            </p>
            <p>
            The default value is <strong>30000</strong>. 
            </p>
            <p>
            If the maximal number of backtrack steps is exceeded and the
            fallback routing is enabled, the link is quickly routed by the
            fallback mechanism instead. 
            </p>
            <p>
            </p>
            </remarks>
             
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.FallbackRouteEnabled"/>
            <value>The maximal number of backtrack steps to find a route for a
            long link.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.LinkStyle">
            <summary>
            Gets or sets the global style of the shapes of links.
            </summary>
            <remarks>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Orthogonal"/> - all links get an
            orthogonal shape, that is, a shape consisting of a sequence of
            alternating horizontal and vertical line segments.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Direct"/> - all links get a
            nearly straight-line shape. The shape of the links is a polyline
            composed of a straight-line segment between the end nodes with two
            short horizontal or vertical segments at its ends (their length is
            controlled by <see cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MinStartSegmentLength"/> and
            <see cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MinEndSegmentLength"/> and may be 0). In
            this link style, links may overlap nodes.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Mixed"/> - each link can have a
            different link style. The style of each individual link can be set
            by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle)"/>
            so that different link shapes can occur in the same graph.</LI> 
            </UL> 
            <p>
            Unless the global link style is
            <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Mixed"/>, all links have the same
            style of shape. 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Orthogonal"/>.  
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle)"/>
            <value>The global style of the shapes of links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.ExhaustiveSearching">
            <summary>
            Gets or sets the exhaustive searching of routes for links.
            </summary>
            <remarks>
            If this option is enabled, the algorithm examines the complete grid
            exhaustively to find a route for an orthogonal link. This may result
            in fewer bends, but it takes a huge amount of runtime for large
            graphs. 
            <p>
            Exhaustive searching is disabled by default. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The exhaustive searching of routes for links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.StraightRouteEnabled">
            <summary>
            Gets or sets the straight routing.
            </summary>
            <remarks>
            If this option is enabled, the algorithm makes an additional attempt
            to find a route with zero or one bend before starting the normal
            backtrack mechanism. As result, the layout has fewer bends, but the
            distribution of links at the border may become uneven. 
            <p>
            Straight routing is enabled by default. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The straight routing.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.CrossingReductionEnabled">
            <summary>
            Gets or sets the crossing reduction.
            </summary>
            <remarks>
            If this option is enabled, the algorithm tries to reduce the
            crossings between orthogonal links that are routed. 
            <p>
            Crossing reduction is enabled by default. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.NumberCrossingReductionIterations"/>
            <value>The crossing reduction.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.NumberCrossingReductionIterations">
            <summary>
            Gets or sets the maximal number of iterations performed during
            crossing reduction.
            </summary>
            <remarks>
            This option has an effect only if crossing reduction is enabled.
            Reducing the value speeds up the algorithm, but the layout may
            contain more link crossings. 
            <p>
            The default value is <strong>2</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.CrossingReductionEnabled"/>
            <value>The maximal number of iterations performed during crossing
            reduction.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.OriginPointMode">
            <summary>
            Gets or sets the global mode for the connection point of the links
            on the origin nodes.
            </summary>
            <remarks>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/> - For all links, the
            layout is free to choose the appropriate position of the connection
            point on the origin node, except for "pinned"  connection points
            (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)"/>).</LI>
            
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Fixed"/> - For all links, the
            layout must keep the current position of the connection point on the
            origin node. This can be useful, in particular, if the node has
            fixed pins where the link is attached (anchors for which
            <see cref="P:ILOG.Diagrammer.Anchor.CanMove"/> returns
            <see langword="false"/>) and the pins should not be moved  by the
            layout algorithm. 
            <p>
            Note that, in this mode, the first segment of a link is not placed 
            on the grid. Therefore, the first segment may be closer than the 
            specified minimal offset to neighbor links, or may even overlap them
            if they start at the same fixed point.
            </p>
            </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/> - Each link can have a
            different mode for the connection point on the origin node. The mode
            of each individual link can be set by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>.</LI>
            
            </UL> 
            <p>
            Unless the global mode is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>,
            the connection points on the origin node have the same mode for all
            the links. 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/>. 
            </p>
            </remarks>
            <value>The global mode to set.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.DestinationPointMode">
            <summary>
            Gets or sets the global mode for the connection point of the links
            on the destination nodes.
            </summary>
            <remarks>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/> - For all links, the
            layout is free to choose the appropriate position of the connection
            point on the destination node, except for "pinned"  connection
            points (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)"/>).</LI>
            
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Fixed"/> - For all links, the
            layout must keep the current position of the connection point on the
            destination node. This can be useful, in particular, if the node has
            fixed pins where the link is attached (anchors for which
            <see cref="P:ILOG.Diagrammer.Anchor.CanMove"/> returns
            <see langword="false"/>) and the pins should not be moved  by the
            layout algorithm. 
            <p>
            Note that, in this mode, the first segment of a link is not placed 
            on the grid. Therefore, the first segment may be closer than the 
            specified minimal offset to neighbor links, or may even overlap them
            if they start at the same fixed point.
            </p>
            </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/> - Each link can have a
            different mode for the connection point on the destination node. The
            mode of each individual link can be set by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>.</LI>
            
            </UL> 
            <p>
            Unless the global mode is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>,
            the connection points on the destination node have the same mode for
            all the links. 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/>. 
            </p>
            </remarks>
            <value>The global mode to set.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.IncrementalMode">
            <summary>
            Gets or sets the incremental layout mode.
            </summary>
            <remarks>
            If the argument is <see langword="true"/>, only those links that
            were affected by changes since the last layout are rerouted. A link
            is rerouted under the following conditions: 
            <UL>
            <LI> if the link is new,</LI> 
            <LI> if the link shape or link style has changed,</LI> 
            <LI> if the parameters controlling start and end segments have
            changed,</LI> 
            <LI> if the link now overlaps obstacles that were moved or
            resized,</LI> 
            <LI> if the link is no longer on the grid,</LI> 
            <LI> if the link is marked for incremental rerouting.</LI> 
            </UL>
            The links preserve the side and relative order of their connection
            points from the previous layout, if this mode is selected by
            <see cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.IncrementalConnectionPreserving"/>.  
            <p>
            The incremental mode works only if the intergraph links mode is
            disabled or if there are no intergraph links. The incremental mode
            is disabled by default. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.LinkStyle"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MinStartSegmentLength"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MinEndSegmentLength"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MarkForIncremental(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.InterGraphLinksMode"/>
            <value>The incremental layout mode.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.IncrementalConnectionPreserving">
            <summary>
            Gets or sets whether the incremental layout mode preserves the side
            and  relative order of the link connection points.
            </summary>
            <remarks>
            The default is <see langword="false"/>. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.IncrementalMode"/>
            <value>Whether the incremental layout mode preserves the side and
            relative order of the link connection points.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.InterGraphLinksMode">
            <summary>
            Gets or sets the routing of intergraph links.
            </summary>
            <remarks>
            If the argument is  <see langword="true"/>, the intergraph links are
            routed; otherwise, only the normal links are routed.  An intergraph
            link is a link stored in a given graph that has an origin or
            destination not stored in this graph. If the combined intergraph
            link routing is enabled in additional, this means that normal links
            and intergraph links are routed together;, otherwise, only the
            intergraph links are routed. 
            <p>
            The default value is <see langword="true"/>. 
            </p>
            <p>
            If the intergraph link mode is enabled and the graph actually
            contains some intergraph links, there are some restrictions: 
            <UL>
             
            <LI> The incremental mode has no effect.</LI> 
            <LI> If layout is performed on a nested
            <see cref="T:ILOG.Diagrammer.GraphicContainer"/> (or
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>),
            the top-level graph must have a view attached because of the
            coordinate transformations of the subgraphs. If you create your own
            subclass of <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/>
            instead of
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/> to
            route intergraph links, you must ensure that all graph models of all
            subgraphs use the same coordinate system through appropriate
            coordinate transformations.</LI> 
            </UL> 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.CombinedInterGraphLinksMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.IncrementalMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)"/>
            <value>The routing of intergraph links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.CombinedInterGraphLinksMode">
            <summary>
            Gets or sets the routing of normal links in addition to intergraph
            links.
            </summary>
            <remarks>
            If intergraph link routing is disabled, the option has no effect. If
            intergraph link routing is enabled and the argument is
            <see langword="true"/>, both normal links and intergraph links are
            routed in the same pass. Otherwise, only the intergraph links are
            routed.  
            <p>
            The default value is <see langword="true"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.InterGraphLinksMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)"/>
            <value>The routing of normal links in addition to intergraph links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.NodeObstacleEnabled">
            <summary>
            Gets or sets whether nodes should be obstacles for the link routes.
            </summary>
            <remarks>
            The default is <see langword="true"/>. There are, however,
            situations where it may be suitable to consider a set of obstacles
            different from the nodes. In this case you can switch nodes as
            obstacles off and use the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AddRectObstacle(ILOG.Diagrammer.Rectangle2D)"/> to specify the
            obstacles that are needed. 
            </remarks>
            <value>Whether nodes should be obstacles for the link routes.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.LinkObstacleEnabled">
            <summary>
            Gets or sets whether links should be line obstacles for the link
            routes.
            </summary>
            <remarks>
            The default is <see langword="true"/>. There are, however,
            situations where it may be suitable to consider a set of obstacles
            different from the links. In this case you can switch links as
            obstacles off and use the methods
            <see cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AddLineObstacle(ILOG.Diagrammer.Rectangle2D)"/>
            and 
            <see cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AddLineObstacle(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)"/>
             to specify the obstacles that are needed. 
            <p>
            </p>
            </remarks>
            <value>Whether links should be line obstacles for the link routes.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.FallbackRouteEnabled">
            <summary>
            Gets or sets whether the fallback routing algorithm is enabled.
            </summary>
            <remarks>
            This routing algorithm is used for those links that cannot be routed
            on the grid without overlapping other obstacles (nodes or links). If
            it is disabled, then these fallback links remain unrouted. 
            <p>
            The default is <see langword="true"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AllowedTimePerLink"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.MaxBacktrack"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.GetCalcFallbackLinks"/>
            <value>Whether the fallback routing algorithm is enabled.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.NodeBoxProvider">
            <summary>
            Gets or sets the node box interface for the obstacle area.
            </summary>
            <remarks>
            The node box interface is an object that provides the rectangle that
            determines the node box for each node. If none is given, the layout
            algorithm uses the bounding box of each node (see
            <see cref="P:ILOG.Diagrammer.GraphicObject.Bounds"/> and 
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.BoundingBox(System.Object)"/>) by default. This node box
            specifies the obstacle area of the node, that is, the area that
            links should avoid so they do not overlap the node. This can be
            different from the node box used to find the connection points of
            the links. 
            <p>
            You can set this property to <see langword="null"/> to go back to
            the default behavior. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>
            <value>The node box interface for the obstacle area.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.NodeSideFilter">
            <summary>
            Gets or sets the node-side filter, that is, an object that allows or
            prohibits the connection of the links on a given side of the nodes.
            </summary>
            <remarks> 
            <p>
            Note that the node-side filter serves the same purpose as the
            termination point filter; it is, however, easier to use. If a
            termination point filter is installed, the node-side filter is
            ignored. If neither a termination point filter nor a node-side
            filter is installed, the layout algorithm is free to choose any side
            of the nodes. 
            </p>
            <p>
            When a filter is specified, the layout algorithm asks the filter  at
            which side of its end node each link is allowed to attach to. Note
            that a filter should always allow a link to connect to at least one
            side of a node; otherwise the link cannot be routed. 
            </p>
            <p>
            You can set this property to <see langword="null"/> to go back to
            the default behavior. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.INodeSideFilter"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.TerminationPointFilter"/>
            <value>The node-side filter, that is, an object that allows or
            prohibits the connection of the links on a given side of the nodes.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.TerminationPointFilter">
            <summary>
            Gets or sets the termination point filter, that is, an object that
            allows filtering the termination points that are proposed by the
            layout algorithm.
            </summary>
            <remarks> 
            <p>
            For each side, the layout algorithm proposes some termination
            points. It also proposes a penalty that indicates how "good" this
            termination point is. The default penalty indicates how far the
            termination point is away from the border. By installing a
            termination point filter, you can change this penalty. 
            </p>
            <p>
            Note that the termination point filter serves the same purpose as
            the node-side filter but allows a greater flexibility. If a
            termination point filter and a node-side filter are installed, the
            node-side filter is ignored. If neither a termination point filter
            nor a node-side filter is installed, the layout algorithm is free to
            choose any termination point. 
            </p>
            <p>
            When a filter is specified, the layout algorithm proposes a sequence
            of termination points on the grid for each link. It proposes
            termination points at all four sides of the corresponding end node.
            It asks the  filter for the penalty of each termination point and
            then chooses the termination points with the lowest penalty that are
            feasible to route the link. 
            </p>
            <p>
            You can set this property to <see langword="null"/> to go back to
            the default behavior. 
            </p>
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.ILongLinkTerminationPointFilter"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.NodeSideFilter"/>
            <value>The termination point filter, that is, an object that allows
            filtering the termination points that are proposed by the layout
            algorithm.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.PreserveFixedLinks">
            <summary>
            Gets or sets whether the layout avoids movement of fixed links.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/> for details.
            </remarks>
            <value>Whether the layout avoids movement of fixed links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.AllowedTime">
            <summary>
            Gets or sets the upper limit for the duration of the layout
            algorithm.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/> for details.
            </remarks>
            <value>The upper limit for the duration of the layout algorithm.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.LinkConnectionBoxProvider">
            <summary>
            Gets or sets the link connection box interface for the connection
            points of links.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/> for details.
            </remarks>
            <value>The link connection box interface for the connection points
            of links.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ZoomInteractor">
            <summary>
            An interactor that zoom a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> by dragging a rectangle.
            </summary>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.RotateInteractor"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.PanInteractor"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.SelectInteractor"/>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ZoomInteractor._zoomInCursor">
            <summary>
            The cursor when the mouse hovers the view in a zoom-in state.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ZoomInteractor._zoomOutCursor">
            <summary>
            The cursor when the mouse hovers the view in a zoom-out state.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ZoomInteractor._zoomCursor">
            <summary>
            The cursor when the rectangle is dragged.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ZoomInteractor._zoomOut">
            <summary>
            internal flag indicating whether we are in a zoomout operation.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ZoomInteractor._animationDuration">
            <summary>
            the number of animation steps.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ZoomInteractor._inAnimation">
            <summary>
            internal flag indicating whether we are in a middle of an animation.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ZoomInteractor._zoomOutModifier">
            <summary>
            The zoom out modifier.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ZoomInteractor._mouseDownPt">
            <summary>
            The mouse down point
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.ZoomInteractor"/> class.
            </summary>
            <remarks>The left button is used to drag the rectangle and the Shift key to indicate a zoom out.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.#ctor(System.Windows.Forms.MouseButtons,ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ModifierKeys)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.ZoomInteractor"/> class.
            </summary>
            <param name="buttons">The mouse button that start the interaction.</param>
            <param name="zoomOutModifier">The modifier that indicates a zoom out operation should be performed.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.OnAnimationDurationChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.AnimationDuration"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>AnimationDuration</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.OnZoomOutModifierChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomOutModifier"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>ZoomOutModifier</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ShouldSerializeZoomInCursor">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomInCursor"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ResetZoomInCursor">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomInCursor"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.OnZoomInCursorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomInCursor"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>ZoomInCursor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ShouldSerializeZoomOutCursor">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomOutCursor"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ResetZoomOutCursor">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomOutCursor"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.OnZoomOutCursorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomOutCursor"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>ZoomOutCursor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ShouldSerializeZoomCursor">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomCursor"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ResetZoomCursor">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomCursor"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.OnZoomCursorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomCursor"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>ZoomCursor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.OnViewChanged(ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnViewChanged(ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs)">ViewInteractor.OnViewChanged</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">ViewInteractor.OnKeyDown</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnKeyUp(System.Windows.Forms.KeyEventArgs)">ViewInteractor.OnKeyUp</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.StartInteraction">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.StartInteraction">ViewInteractor.StartInteraction</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseDown</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseMove</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.GetZoomOutKeysModifier">
            <summary>
            Gets the value of the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomOutModifier"/> property as a <see cref="T:System.Windows.Forms.Keys"/> modifier.
            </summary>
            <returns>the value of the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomOutModifier"/> property as a <see cref="T:System.Windows.Forms.Keys"/> modifier.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.GetZoomOutKeys">
            <summary>
            Gets the value of the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomOutModifier"/> property as a <see cref="T:System.Windows.Forms.Keys"/>.
            </summary>
            <returns>The value of the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomOutModifier"/> property as a <see cref="T:System.Windows.Forms.Keys"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.GetHoverCursor">
            <summary>
            Gets the hover cursor according to the current state of the zoom out modifier key.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.StopInteraction(System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.StopInteraction(System.Boolean)">ViewInteractor.StopInteraction</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.UpdateStatusBarText">
            <summary>
            This method overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.UpdateStatusBarText">ViewInteractor.UpdateStatusBarText</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.DrawGhost(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.DrawGhost(ILOG.Diagrammer.DrawingContext)">ViewInteractor.DrawGhost</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.DoIt">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.DoIt">DragRectangleInteractor.DoIt</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomView(ILOG.Diagrammer.Transform)">
            <summary>
            Is called to perform the zoom on the view.
            </summary>
            <param name="t">A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</param>
            <remarks>The default implementation of this method set the view transformation to <paramref name="t"/>.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ComputeZoom">
            <summary>
            Computes the transformation that should be applied to the view.
            </summary>
            <returns>A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</returns>
            <remarks>This method should be called from the <see cref="M:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.DoIt"/> method.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.AnimationDuration">
            <summary>
            Gets or sets the duration of the zoom animation.
            </summary>
            <value>The animation duration. The default value is <strong>TimeSpan.Zero</strong>.</value>
            <remarks>Setting the value <strong>TimeSpan.Zero</strong> disable the animation.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.AnimationDurationChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.AnimationDuration"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomOutModifier">
            <summary>
            Gets or sets the zoom out modifier.
            </summary>
            <value>The zoom-out modifier. The default value is <see cref="F:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ModifierKeys.Shift"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomOutModifierChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomOutModifier"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomOut">
            <summary>
            Gets or sets whether the current operation is a zoom-out interaction.
            </summary>
            <value><see langword="true"/> if the current operation is a zoom-out operation, <see langword="false"/> otherwise.</value>
            <remarks>This property is set when the interaction is started. The value set depends on the keys modifiers pressed when the 
            interaction started.</remarks>
            <seealso cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomOutModifier"/>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomInCursor">
            <summary>
            Gets or sets the mouse cursor for a zoom-in operation.
            </summary>
            <value>the mouse cursor for a zoom-in operation.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomInCursorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomInCursor"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomOutCursor">
            <summary>
            Gets or sets the mouse cursor for a zoom-out operation.
            </summary>
            <value>the mouse cursor for a zoom-in operation.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomOutCursorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomOutCursor"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomCursor">
            <summary>
            Gets the mouse cursor when the mouse pointer moves over the view.
            </summary>
            <value>the mouse cursor when the mouse pointer moves over the view..</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomCursorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomCursor"/> property is changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ModifierKeys">
            <summary>
            Describes the possible modifier keys available to perform a zoom-out.
            </summary>
            <remarks>
            Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ZoomOutModifier"/> 
            property of a <see cref="T:ILOG.Diagrammer.Windows.Forms.ZoomInteractor"/>
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ModifierKeys.Shift">
            <summary>
            The zoom-out operation is performed when the Shift key is pressed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ZoomInteractor.ModifierKeys.Control">
            <summary>
            The zoom-out operation is performed when the Control key is pressed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.CSSEngine.GetCSSValue(System.Xml.XmlNode,System.String)">
            After ComputeStyle has been called on each XmlElement, this method
            can return the right CSSValue for a particular XmlElement for
            property.
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.CSSEngine.AddToList(System.Collections.IList,System.Xml.XmlElement,System.Collections.IList)">
            This method will add the list the rules matching this element.
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GradientStopChooser.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientStopChooser.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GradientStopChooser.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ColorField">
            <summary>
            A Control to edit a Color component.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ColorField._model">
            <summary>
            The selection model
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ColorField._colorComponentType">
            <summary>
            The type of the color component edited by this control.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ColorField._updatingModel">
            <summary>
            internal flag indicating whether we are updating the model internally.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ColorField.#ctor">
            <summary>
            Creates and initializes a new <see cref="T:ILOG.Diagrammer.Windows.Forms.ColorField"/> object.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ColorField.ColorComponentType">
            <summary>
            Gets or sets the type of the color component to edit.
            </summary>
            <value>The type of the color component to edit.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ColorField.Value">
            <summary>
            Gets or sets the value of the color component.
            </summary>
            <value>The value of the color component.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ColorField.ColorSelectionModel">
            <summary>
            Gets or sets the color selection model associated with this control.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphicObjectInvalidatedEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.GraphicContainer.ChildInvalidated"/> event 
            of a <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObjectInvalidatedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.GraphicObjectInvalidatedEventArgs"/> class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObjectInvalidatedEventArgs.GraphicObject">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.GraphicObject"/> that caused the invalidation.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference, or <see langword="null"/> if the container being 
            invalidated is the cause of the invalidation.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicObjectInvalidatedEventArgs.GraphicContainer">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.GraphicContainer"/> that caused the invalidation.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> reference, or <see langword="null"/> if the container being 
            invalidated is the cause of the invalidation.</value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphicObjectInvalidatedEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.GraphicContainer.ChildInvalidated"/> event raised when a <see cref="T:ILOG.Diagrammer.GraphicContainer"/> is being invalidated.
            </summary>
            <param name="sender">The soure of the event.</param>
            <param name="e">A <see cref="T:ILOG.Diagrammer.GraphicObjectInvalidatedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ILOG.Diagrammer.GraphicLayerCollection">
            <summary>
            Represents a collection of <see cref="T:ILOG.Diagrammer.GraphicLayer"/> objects.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicLayerCollection.#ctor(ILOG.Diagrammer.IDiagramView)">
            <summary> 
            Initializes a new instance of <see cref="T:ILOG.Diagrammer.GraphicLayerCollection"/>.
            </summary>
            <param name="owner">The diagram view that owns the collection.</param>
        </member>
        <member name="M:ILOG.Diagrammer.ToolLayer.HitTest(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicLayer.HitTest(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">DiagramLayer.HitTest</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ToolLayer.Paint(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicLayer.Paint(ILOG.Diagrammer.DrawingContext)">DiagramLayer.Paint</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ToolLayer.GetTransformToView(ILOG.Diagrammer.GraphicContainer)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicLayer.GetTransformToView(ILOG.Diagrammer.GraphicContainer)">GraphicLayer.GetTransformToView</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.LinkShapeType">
            <summary>
            Defines predefined shapes for a <see cref="T:ILOG.Diagrammer.Graphic.Link"/> object.
            </summary>
            <remarks>
            Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.Graphic.Link.ShapeType"/> 
            property of a <see cref="T:ILOG.Diagrammer.Graphic.Link"/> object.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinkShapeType.Straight">
            <summary>
            A straight line between the start end end point.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinkShapeType.Orthogonal">
            <summary>
            Two or three orthogonal segments.A sequence of vertical or horizontal segments.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinkShapeType.Oblique">
            <summary>
            A sequence of vertical, horizontal or oblique (45 degrees) segments.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinkShapeType.Free">
            <summary>
            A free polyline.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.LinkFillEffect">
            <summary>
            Defines the way the link is filled.
            </summary>
            <remarks>Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.Graphic.Link.FillEffect"/> property
            of a <see cref="T:ILOG.Diagrammer.Graphic.Link"/>.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinkFillEffect.None">
            <summary>
            No effect: draw the link's path normally using the <see cref="T:ILOG.Diagrammer.Stroke"/> property.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinkFillEffect.Pipe">
            <summary>
            Pipe effect: draw stripes starting at the center of
            the path with the Stroke's fill color, and darkening
            on both sides towards the border of the path.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinkFillEffect.Neon">
            <summary>
            Neon effect: draw stripes starting at the center of
            the path with the Stroke's fill color, and fading (using transparency)
            on both sides towards the border of the path.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ArrowShape">
            <summary>
            Defines the predefined arrow
            shapes that can be used in a <see cref="T:ILOG.Diagrammer.Graphic.ShapeArrow"/>.
            </summary>
            <remarks>Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.Graphic.ShapeArrow.Shape"/> property
            of a <see cref="T:ILOG.Diagrammer.Graphic.ShapeArrow"/>.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ArrowShape.Triangle">
            <summary>
            A filled triangular arrow shape.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ArrowShape.Open">
            <summary>
            An open arrow shape made of two lines.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ArrowShape.Sunken">
            <summary>
            A filled triangular arrow shape with a "sunken" bottom side.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ArrowShape.Curved">
            <summary>
            A filled triangular arrow shape with a curved bottom side.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ArrowShape.Square">
            <summary>
            A filled square arrow shape.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ArrowShape.Diamond">
            <summary>
            A filled diamond arrow shape.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ArrowShape.Circle">
            <summary>
            A filled circle arrow shape.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ArrowShape.Star">
            <summary>
            A filled star arrow shape.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ArrowShape.Custom">
            <summary>
            A custom arrow shape.
            </summary>
            <remarks>
            You must set the <see cref="P:ILOG.Diagrammer.Graphic.ShapeArrow.CustomShape"/> property
            to the custom shape.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.LinkTextPositionType">
            <summary>
            Defines how to interpret the position of a text on a <see cref="T:ILOG.Diagrammer.Graphic.LinkTextItem"/>.
            </summary>
            <remarks>Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.Graphic.LinkTextItem.PositionType"/> property
            of a <see cref="T:ILOG.Diagrammer.Graphic.LinkTextItem"/></remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinkTextPositionType.AbsoluteFromStart">
            <summary>
            The <see cref="F:ILOG.Diagrammer.Graphic.LinkTextPositionType.AbsoluteFromStart"/> value specifies that the <see cref="P:ILOG.Diagrammer.Graphic.LinkTextItem.Position"/>
            property is interpreted as a fixed length (in pixels) along the path of the link, measured from
            the starting point of the link.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinkTextPositionType.AbsoluteFromEnd">
            <summary>
            The <see cref="F:ILOG.Diagrammer.Graphic.LinkTextPositionType.AbsoluteFromEnd"/> value specifies that the <see cref="P:ILOG.Diagrammer.Graphic.LinkTextItem.Position"/>
            property is interpreted as a fixed length (in pixels) along the path of the link, measured
            (backwards) from the end point of the link.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinkTextPositionType.AbsoluteFromMiddle">
            <summary>
            The <see cref="F:ILOG.Diagrammer.Graphic.LinkTextPositionType.AbsoluteFromMiddle"/> value specifies that the <see cref="P:ILOG.Diagrammer.Graphic.LinkTextItem.Position"/>
            property is interpreted as a fixed length (in pixels) along the path of the link, measured from
            the middle point of the link.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinkTextPositionType.Relative">
            <summary>
            The <see cref="F:ILOG.Diagrammer.Graphic.LinkTextPositionType.Relative"/> value specifies that the <see cref="P:ILOG.Diagrammer.Graphic.LinkTextItem.Position"/>
            property is interpreted as a ratio (between <strong>0</strong> and <strong>1</strong>)
            of the total length of the link's path.
            For example, the position <strong>0</strong> means the starting point of the link,
            the position <strong>1</strong> means the end point of the link, the position <strong>0.5</strong>
            means the middle of the link.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Link">
             <summary>
             Defines a polyline graphic object that can be connected to two other
             graphic objects so that when one of the objects moves, the link's shape is modified
             to stay connected to the object. Links can display arrows at both ends,
             and provide many style options for filling the link's path, drawing a border, and
             displaying text.
             </summary>
             <remarks>
             <para>
             A Link can be connected to the <see cref="T:ILOG.Diagrammer.Anchor"/> objects of a <see cref="T:ILOG.Diagrammer.GraphicObject"/>
             through the <see cref="P:ILOG.Diagrammer.Graphic.Link.StartAnchor"/> and <see cref="P:ILOG.Diagrammer.Graphic.Link.EndAnchor"/> properties,
             or it can be disconnected, in which case the start and end points are set through the
             <see cref="P:ILOG.Diagrammer.Graphic.Link.StartPoint"/> and <see cref="P:ILOG.Diagrammer.Graphic.Link.EndPoint"/> properties.
             </para>
             <para>
             The <see cref="P:ILOG.Diagrammer.Graphic.Link.ShapeType"/> property can be set to compute the link's shape
             automatically depending on the end points. The link shape can be a simple straight line,
             a sequence of orthogonal segments, a sequence of orthogonal or oblique segments, or a free sequence
             of lines. The <see cref="P:ILOG.Diagrammer.Graphic.Link.Radius"/> property can be used to display rounded link bends.
             </para>
             <para>
             The link class can display arrows at both ends through the <see cref="P:ILOG.Diagrammer.Graphic.Link.StartArrow"/> and
             <see cref="P:ILOG.Diagrammer.Graphic.Link.EndArrow"/> properties. You can use a standard GDI+ arrow, or one of the predefined
             arrow shapes, or provide your own <see cref="T:ILOG.Diagrammer.GraphicObject"/> to draw a custom shape.
             </para>
             <para>
             The link's path can be drawn using any stroke. The <see cref="P:ILOG.Diagrammer.Graphic.Link.FillEffect"/>
             property can also be used to draw special "pipe" or "neon" effects.
             </para>
             <para>
             An additional border can be drawn around the link's path using the <see cref="P:ILOG.Diagrammer.Graphic.Link.BorderStroke"/>
             and <see cref="P:ILOG.Diagrammer.Graphic.Link.BevelBorder"/> properties.
             </para>
             <para>
             One or several text items can be displayed on the link through the <see cref="P:ILOG.Diagrammer.Graphic.Link.TextItems"/>
             property.
             </para>
             <para>
             Crossings between links can be displayed using a "tunnel" or "bridge" shape, or simply
             by "cutting" the link's shape. This is controlled by the <see cref="P:ILOG.Diagrammer.Graphic.Link.CrossingStyle"/> property.
             Note that, to enable the computation of link crossings, the <see cref="P:ILOG.Diagrammer.GraphicContainer.LinkCrossings"/>
             property must enable link crossings on the toplevel <see cref="T:ILOG.Diagrammer.GraphicContainer"/> that contains
             the links.
             </para>
             </remarks>
             <example>
             <para lang="cs,vbnet">
             The following example creates a simple graph with 3 nodes and 3 links between the nodes:</para>
             <code lang="cs">
             GraphicObject CreateNodesAndLinks()
             {
                // Create a Group to store the graph
                Group graph = new Group();
            
                // Create ellipses for the nodes.
                Ellipse node1 = new Ellipse(0, 0, 50, 50);
                Ellipse node2 = new Ellipse(300, 0, 50, 50);
                Ellipse node3 = new Ellipse(150, 300, 50, 50);
            
                // Add one anchor for each node
                node1.Anchors.Add(new ShapeAnchor());
                node2.Anchors.Add(new ShapeAnchor());
                node3.Anchors.Add(new ShapeAnchor());
            
                node1.Fill = new SolidFill(Color.Blue);
                node2.Fill = node1.Fill;
                node3.Fill = node1.Fill;
            
                // Create the links
                Link link1 = new Link();
                link1.StartAnchor = node1.Anchors[0];
                link1.EndAnchor = node2.Anchors[0];
            
                Link link2 = new Link();
                link2.StartAnchor = node2.Anchors[0];
                link2.EndAnchor = node3.Anchors[0];
            
                Link link3 = new Link();
                link3.StartAnchor = node3.Anchors[0];
                link3.EndAnchor = node1.Anchors[0];
            
                // Store node and links in the Group
                graph.Objects.AddRange(
                    new GraphicObject[] { 
                        link1, link2, link3, 
                        node1, node2, node3 });
                return graph;
             }
             </code>
             <code lang="vbnet">
             Function CreateNodesAndLinks() As GraphicObject 
                 ' Create a Group to store the graph
                 Dim graph As Group = New Group 
             
                 ' Create ellipses for the nodes.
                 Dim node1 As Ellipse = New Ellipse(0, 0, 50, 50) 
                 Dim node2 As Ellipse = New Ellipse(300, 0, 50, 50) 
                 Dim node3 As Ellipse = New Ellipse(150, 300, 50, 50) 
             
                 ' Add one anchor for each node
                 node1.Anchors.Add(New ShapeAnchor) 
                 node2.Anchors.Add(New ShapeAnchor) 
                 node3.Anchors.Add(New ShapeAnchor) 
             
                 node1.Fill = New SolidFill(Color.Blue) 
                 node2.Fill = node1.Fill 
                 node3.Fill = node1.Fill 
             
                 ' Create the links
                 Dim link1 As Link = New Link 
                 link1.StartAnchor = node1.Anchors(0) 
                 link1.EndAnchor = node2.Anchors(0) 
             
                 Dim link2 As Link = New Link 
                 link2.StartAnchor = node2.Anchors(0) 
                 link2.EndAnchor = node3.Anchors(0) 
             
                 Dim link3 As Link = New Link 
                 link3.StartAnchor = node3.Anchors(0) 
                 link3.EndAnchor = node1.Anchors(0) 
             
                 ' Store node and links in the Group
                 graph.Objects.AddRange( _
                      New GraphicObject() { _
                           link1, link2, link3, _
                           node1, node2, node3}) 
                 Return graph 
             End Function 
             </code>
             </example>
        </member>
        <member name="T:ILOG.Diagrammer.ICrossable">
            <summary>
            Interface implemented by graphic objects
            that want to be notified when crossing points are detected by the
            crossing manager.
            </summary>
            <seealso cref="T:ILOG.Diagrammer.ILink"/>
            <seealso cref="T:ILOG.Diagrammer.Graphic.Link"/>
        </member>
        <member name="P:ILOG.Diagrammer.ICrossable.CrossingsEnabled">
            <summary>
            Indicates whether this object is currently interested in link crossings.
            </summary>
            <value><see langword="true"/> if this object is currently interested in crossings.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ICrossable.CrossingSegments">
            <summary>
            Gets the segments of this crossable object.
            </summary>
            <value>An array of <see cref="T:ILOG.Diagrammer.Point2D"/> structures.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ICrossable.CrossingPoints">
            <summary>
            Gets and sets the crossing points between this object and other
            crossable objects.
            </summary>
            <value>An array of <see cref="T:ILOG.Diagrammer.CrossingPoint"/> instances.</value>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Link"/> class.
            </summary>
            <remarks>
            The new <see cref="T:ILOG.Diagrammer.Graphic.Link"/> object is not connected to any <see cref="T:ILOG.Diagrammer.GraphicObject"/>
            or <see cref="T:ILOG.Diagrammer.Anchor"/> object.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.#ctor(ILOG.Diagrammer.Anchor,ILOG.Diagrammer.Anchor)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Link"/> class using the
            specified start and end anchors.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.#ctor(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Link"/> class using the
            specified start and end graphic objects.
            </summary>
            <remarks>
            <para>
            The <see cref="P:ILOG.Diagrammer.Graphic.Link.StartAnchor"/> and <see cref="P:ILOG.Diagrammer.Graphic.Link.EndAnchor"/>
            properties are set to <see cref="T:ILOG.Diagrammer.BoundsAnchor"/> objects with a <see cref="P:ILOG.Diagrammer.BoundsAnchor.Position"/>
            property equal to <see cref="F:ILOG.Diagrammer.AnchorPosition.Automatic"/>. These anchors are created automatically
            if they do not already exist on the specified graphic objects.
            </para>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.Dispose(System.Boolean)">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.SetFlag(System.UInt16,System.Boolean)">
            <summary>
            Sets or unsets the value of a flag.
            </summary>
            <param name="flag">The flag value.</param>
            <param name="value">The value of the flag</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.GetFlag(System.UInt16)">
            <summary>
            Gets the value of a flag.
            </summary>
            <param name="flag">The flag.</param>
            <returns>The value of a flag.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnOrthogonalSpacingChanged(System.Single,System.Single)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.OrthogonalSpacing"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnStrokeChanged(ILOG.Diagrammer.StyleChangeType)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Shape.OnStrokeChanged(ILOG.Diagrammer.StyleChangeType)">Shape.OnStrokeChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnStrokeChanged(ILOG.Diagrammer.Stroke,ILOG.Diagrammer.Stroke)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Shape.OnStrokeChanged(ILOG.Diagrammer.Stroke,ILOG.Diagrammer.Stroke)">Shape.OnStrokeChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnStartAnchorChanged(ILOG.Diagrammer.Anchor,ILOG.Diagrammer.Anchor)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.StartAnchor"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnStartAnchorChanged(ILOG.Diagrammer.AnchorChange)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.StartAnchor"/> property contents is changed.
            </summary>
            <param name="change">One of the <see cref="T:ILOG.Diagrammer.AnchorChange"/> values.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnEndAnchorChanged(ILOG.Diagrammer.Anchor,ILOG.Diagrammer.Anchor)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.EndAnchor"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnEndAnchorChanged(ILOG.Diagrammer.AnchorChange)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.EndAnchor"/> property contents is changed.
            </summary>
            <param name="change">One of the <see cref="T:ILOG.Diagrammer.AnchorChange"/> values.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnCanEditOrthogonalShapeChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Link.CanEditOrthogonalShape"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnPointsChanged">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.PolyPoints.OnPointsChanged">PolyPoints.OnPointsChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnShapeTypeChanged(ILOG.Diagrammer.Graphic.LinkShapeType,ILOG.Diagrammer.Graphic.LinkShapeType)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.ShapeType"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnBorderStrokeChanged(ILOG.Diagrammer.Stroke,ILOG.Diagrammer.Stroke)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.BorderStroke"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnBorderStrokeChanged(ILOG.Diagrammer.StyleChangeType)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.BorderStroke"/> contents is changed.
            </summary>
            <param name="type">One of the <see cref="T:ILOG.Diagrammer.StyleChangeType"/> values.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnBevelBorderChanged(System.Boolean,System.Boolean)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.BevelBorder"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnFillEffectChanged(ILOG.Diagrammer.Graphic.LinkFillEffect,ILOG.Diagrammer.Graphic.LinkFillEffect)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.FillEffect"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnStartArrowChanged(ILOG.Diagrammer.Graphic.LinkArrow,ILOG.Diagrammer.Graphic.LinkArrow)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.StartArrow"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnStartArrowChanged(ILOG.Diagrammer.StyleChangeType)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.StartArrow"/> contents is changed.
            </summary>
            <param name="type">One of the <see cref="T:ILOG.Diagrammer.StyleChangeType"/> values.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnEndArrowChanged(ILOG.Diagrammer.Graphic.LinkArrow,ILOG.Diagrammer.Graphic.LinkArrow)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.EndArrow"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnEndArrowChanged(ILOG.Diagrammer.StyleChangeType)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.EndArrow"/> contents is changed.
            </summary>
            <param name="type">One of the <see cref="T:ILOG.Diagrammer.StyleChangeType"/> values.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnCrossingStyleChanged(ILOG.Diagrammer.LinkCrossingsStyle,ILOG.Diagrammer.LinkCrossingsStyle)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.CrossingStyle"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnCrossingSizeChanged(System.Single,System.Single)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.CrossingSize"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnTextItemsChanged(ILOG.Diagrammer.GraphicChange)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.TextItems"/> property is changed.
            </summary>
            <param name="type">One of the <see cref="T:ILOG.Diagrammer.GraphicChange"/> values.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnCutAtTextChanged(System.Boolean,System.Boolean)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.CutAtText"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnRadiusChanged(System.Single,System.Single)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.Radius"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnCurvedChanged(System.Boolean,System.Boolean)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.Curved"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnCardinalSplineChanged(System.Boolean,System.Boolean)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.CardinalSpline"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnCurveTensionChanged(System.Single,System.Single)">
            <summary>
            This method is invoked when the <see cref="P:ILOG.Diagrammer.Graphic.Link.CurveTension"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.SetLinkPoints(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            Sets the link points computed according to the anchor points.
            </summary>
            <remarks>
            The default implementation sets the first and last points of the polyline
            to the two connection points, and sets the intermediate points according
            to the <see cref="P:ILOG.Diagrammer.Graphic.Link.ShapeType"/> property.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.AddCrossings(System.Drawing.Drawing2D.GraphicsPath,ILOG.Diagrammer.CrossingPoint[],System.Single,System.Single,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,System.Boolean,System.Boolean)">
            <summary>
            Adds a shape representing one or several crossings to the path of this link.
            This method is called by CreateGraphicsPath while building the link's path
            if the link crosses other links. When a sequence of crossings are close to each
            other, the method is called with all the crossings of the "bundle", thus
            allowing to create a single shape that represents the bundle. Otherwise, the
            method is called once for each "isolated" crossing.
            </summary>
            <param name="path">The link's path that is being built. The method must
            add to this path the appropriate elements to display the crossings.</param>
            <param name="crossingPoints">The crossing points.</param>
            <param name="crossingSize">The size of the crossings.</param>
            <param name="start">The starting point of the "Space" that the crossings must fill.</param>
            <param name="end">The ending point of the "Space" that the crossings must fill.</param>
            <param name="angle">The angle of the link segment on which the crossings appears.</param>
            <param name="startTruncated"><see langword="true"/> if the starting point of the crossings
            is close to the start of the segment and cannot be displayed normally.</param>
            <param name="endTruncated"><see langword="true"/> if the ending point of the crossings
            is close to the end of the segment and cannot be displayed normally.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.Clone">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.Clone">GraphicObject.Clone"</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.GetDefaultAnchors">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetDefaultAnchors">GraphicObject.GetDefaultAnchors</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnParentChanging(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnParentChanging(ILOG.Diagrammer.GraphicChangeEventArgs)">GraphicObject.OnParentChanging</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnParentChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            Updates the link points according to the new parent.
            </summary>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnGraphicChanging(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnGraphicChanging(ILOG.Diagrammer.GraphicChangeEventArgs)">GraphicObject.OnGraphicChanging</see>.
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnGraphicChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnGraphicChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">GraphicObject.OnGraphicChanged</see>.
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This method is overriden to prevent the link from being translated when it is connected to
            a start and/or end graphic object.
            </summary>
            <param name="rect">The new bounds.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This method is overriden to prevent the link from being translated when it is connected to
            a start and/or end graphic object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.OnTransformChanged(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnTransformChanged(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Transform)">GraphicObject.OnTransformChanged</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.GetBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.ComputeStyledBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Shape.ComputeStyledBounds(ILOG.Diagrammer.Transform)">Shape.ComputeStyledBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.RenderStroke(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This method is overridden to drawn the link's arrows, border, text and crossings
            (if any), and to render the fill effect.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Shape.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">Shape.UpdateGraphicsPath</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.ShortenSegmentForRadius(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,System.Single@,ILOG.Diagrammer.Point2D@,System.Boolean)">
            <summary>
            Shortens a segment to a specified length.
            </summary>
            <param name="p1">The start point of the segment</param>
            <param name="p2">The end point of the segment</param>
            <param name="e">The desired length of the new segment</param>
            <param name="half">If true, the length of the new segment is limited to half the length of the initial segment.</param>
            <param name="result">A new point such that the segment [p1,result] is aligned
            with the segment [p1,p2], and has a length of 'e'.</param>
            <returns>
            If half = false: true if the segment [p1,p2] has a length greater than e,
            otherwise false and 'e' is modified to be the length of [p1,p2].
            If half = true: true if the segment [p1,p2] has a length greater than 2*e,
            otherwise false and 'e' is modified to be half the length of [p1,p2].
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.HitTestText(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestText(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestText</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.GetEditTextBounds">
            <summary>
            This member overides <see cref="M:ILOG.Diagrammer.GraphicObject.GetEditTextBounds">GraphicObject.GetEditTextBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.GetToolboxItemBitmap">
            <summary>
            Used by introspection !
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.AdjustEndPoint(System.Collections.Generic.List{ILOG.Diagrammer.Point2D},System.Int32,System.Int32)">
            <summary>
            Adjusts the point just next to the start or end point
            to keep the first/last segment orthogonal.
            </summary>
            <param name="points">The point collection to modify.</param>
            <param name="i">The start index: 0 for the start, Points.Count-1 for the end.</param>
            <param name="d">The index increment: +1 for the start, -1 for the end.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.ComputeOrthogonal(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.AnchorPosition,ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.AnchorPosition,ILOG.Diagrammer.Rectangle2D,System.Collections.Generic.List{ILOG.Diagrammer.Point2D})">
            <summary>
            Computes the points of an orthogonal link.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.DrawPipeOrNeon(ILOG.Diagrammer.DrawingContext,System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Fills the link with a pipe or neon effect.
            Both rely on drawing the link several times, decreasing the pen
            width each time, and changing the color progressively.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.PaintText(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.PaintText(ILOG.Diagrammer.DrawingContext)"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Link.PlaceTextItem(ILOG.Diagrammer.Graphic.LinkTextItem)">
            <summary>
            Computes the position along the link's path according to the
            <see cref="P:ILOG.Diagrammer.Graphic.LinkTextItem.Position"/> and <see cref="P:ILOG.Diagrammer.Graphic.LinkTextItem.PositionType"/>
            properties.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.OrthogonalSpacing">
            <summary>
            Gets or sets the spacing between the link and the start or end object
            when the link shape is <see cref="F:ILOG.Diagrammer.Graphic.LinkShapeType.Orthogonal"/>.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.ShapeType"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.CanEditOrthogonalShape"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Link.OrthogonalSpacingChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Link.OrthogonalSpacing"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.Stroke">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Graphic.Shape.Stroke">Shape.Stroke</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.Fill">
            <summary>
            Gets or sets the fill for the link. This property is not used.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.Start">
            <summary>
            Gets or sets the graphic object connected to the start of the link.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>
            <remarks>
            <para>
            When the <see cref="P:ILOG.Diagrammer.Graphic.Link.Start"/> property is set to a non-null value, the <see cref="P:ILOG.Diagrammer.Graphic.Link.StartAnchor"/>
            property is set to a <see cref="T:ILOG.Diagrammer.BoundsAnchor"/> with a <see cref="P:ILOG.Diagrammer.BoundsAnchor.Position"/>
            property equal to <see cref="F:ILOG.Diagrammer.AnchorPosition.Automatic"/>. This anchor is created automatically
            if it does not already exist on the specified graphic object.
            </para>
            <para>
            When the <see cref="P:ILOG.Diagrammer.Graphic.Link.Start"/> property is set to <see langword="null"/>, the <see cref="P:ILOG.Diagrammer.Graphic.Link.StartAnchor"/>
            property is set to <see langword="null"/>.
            </para>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.End"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.StartAnchor"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.EndAnchor"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.End">
            <summary>
            Gets or sets the graphic object connected to the end of the link.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>
            <remarks>
            <para>
            When the <see cref="P:ILOG.Diagrammer.Graphic.Link.End"/> property is set to a non-null value, the <see cref="P:ILOG.Diagrammer.Graphic.Link.EndAnchor"/>
            property is set to a <see cref="T:ILOG.Diagrammer.BoundsAnchor"/> with a <see cref="P:ILOG.Diagrammer.BoundsAnchor.Position"/>
            property equal to <see cref="F:ILOG.Diagrammer.AnchorPosition.Automatic"/>. This anchor is created automatically
            if it does not already exist on the specified graphic object.
            </para>
            <para>
            When the <see cref="P:ILOG.Diagrammer.Graphic.Link.End"/> property is set to <see langword="null"/>, the <see cref="P:ILOG.Diagrammer.Graphic.Link.EndAnchor"/>
            property is set to <see langword="null"/>.
            </para>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.Start"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.StartAnchor"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.EndAnchor"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.StartAnchor">
            <summary>
            Gets or sets the anchor connected to the start of the link.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Anchor"/> reference.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.EndAnchor"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.Start"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.End"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Link.StartAnchorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Link.StartAnchor"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.EndAnchor">
            <summary>
            Gets or sets the anchor connected to the end of the link.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Anchor"/> reference.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.StartAnchor"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.Start"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.End"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Link.EndAnchorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Link.EndAnchor"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.CanEditOrthogonalShape">
            <summary>
            Determines whether or not the segments of an orthogonal link can be edited.
            </summary>
            <value><see langword="true"/> if the segments of an orthogonal link can be edited; Otherwise,
            <see langword="false"/>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.ShapeType"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Link.CanEditOrthogonalShapeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Link.CanEditOrthogonalShape"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.StartPoint">
            <summary>
            Gets or sets the start point of the link. This property is used only when the
            start of the link is not connected to any graphic object, that is, when the
            <see cref="P:ILOG.Diagrammer.Graphic.Link.StartAnchor"/> property is <see langword="null"/>.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.EndPoint"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.EndPoint">
            <summary>
            Gets or sets the end point of the link. This property is used only when the
            end of the link is not connected to any graphic object, that is, when the
            <see cref="P:ILOG.Diagrammer.Graphic.Link.EndAnchor"/> property is <see langword="null"/>.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.StartPoint"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.ShapeType">
            <summary>
            Gets or sets the type of automatic shape of the link.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Graphic.LinkShapeType"/> values.</value>
            <remarks>
            The link shape can be one of the following:
            <list type="bullet">
            <item>
            <term><see cref="F:ILOG.Diagrammer.Graphic.LinkShapeType.Free"/></term>
            The points of the link are not set automatically (except the first and last
            point if the link is connected to graphic objects). 
            </item>
            <item>
            <term><see cref="F:ILOG.Diagrammer.Graphic.LinkShapeType.Straight"/></term>
            The link is a single straight line.
            </item>
            <item>
            <term><see cref="F:ILOG.Diagrammer.Graphic.LinkShapeType.Orthogonal"/></term>
            The points of the link are set so that the link is a sequence of
            orthogonal segments.
            The shape is computed to avoid the bounding regions of the start and end objects
            (if possible).
            </item>
            <item>
            <term><see cref="F:ILOG.Diagrammer.Graphic.LinkShapeType.Oblique"/></term>
            The points of the link are set so that the link is a sequence of oblique
            (45 degrees) or orthogonal segments.
            The shape is computed to avoid the bounding regions of the start and end objects
            (if possible).
            </item>
            </list>
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Link.ShapeTypeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Link.ShapeType"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.BorderStroke">
            <summary>
            Gets or sets the stroke used to draw the border of the link.
            The border is drawn "around" the normal path of the link.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Stroke"/> instance, or <see langword="null"/>. The default value is <see langword="null"/>.</value>
            <remarks>
            The border is drawn before (or "under") the link's path, so:
            <list type="bullet">
            <item>
            You must always leave the stroke alignment to
            <see cref="F:System.Drawing.Drawing2D.PenAlignment.Center"/>, otherwise the border will be
            hidden by the path.
            </item>
            <item>
            Since only half of the border's stroke will appear, you must use a
            stroke twice as wide as the desired border width.
            </item>
            </list>
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Link.BorderStrokeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Link.BorderStroke"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.BevelBorder">
            <summary>
            Gets or sets the flag that specifies if a "bevel" border is drawn
            around the link's path. The bevel is made of a sequence of segments
            with "light" and "dark" colors (derived from the color specified in the <see cref="P:ILOG.Diagrammer.Graphic.Link.Stroke"/> property
            ) to simulate a 3-D effect.
            </summary>
            <value><see langword="true"/> if a "bevel" border id drawing around the link's path; Otherwise,
            <see langword="false"/>.</value>
            <remarks>
            <para>
            If the <see cref="P:ILOG.Diagrammer.Graphic.Link.BorderStroke"/> property is not <see langword="null"/>,
            the <see cref="P:ILOG.Diagrammer.Graphic.Link.BevelBorder"/> property is ignored.
            </para>
            <para>
            The visible width of the bevel is equal to the width of the <see cref="P:ILOG.Diagrammer.Graphic.Link.Stroke"/>
            divided by 4, with a minimum of 2.
            </para>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.BorderStroke"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.Stroke"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Link.BevelBorderChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Link.BevelBorder"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.FillEffect">
            <summary>
            Gets or sets the type of effect used to draw the path of the link.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Graphic.LinkFillEffect"/> values.</value>
            <remarks>
            The fill effect can be one of:
            <list type="bullet">
            <item>
            <term><see cref="F:ILOG.Diagrammer.Graphic.LinkFillEffect.None"/></term>
            The path is drawn using the <see cref="P:ILOG.Diagrammer.Graphic.Link.Stroke"/> property.
            </item>
            <item>
            <term><see cref="F:ILOG.Diagrammer.Graphic.LinkFillEffect.Pipe"/></term>
            Parallel stripes with darkening colors (derived from the <see cref="P:ILOG.Diagrammer.Graphic.Link.Stroke"/>'s color)
            are drawn to simulate a 3-D cylinder.
            </item>
            <item>
            <term><see cref="F:ILOG.Diagrammer.Graphic.LinkFillEffect.Neon"/></term>
            Parallel stripes with fading colors (derived from the <see cref="P:ILOG.Diagrammer.Graphic.Link.Stroke"/>'s color)
            are drawn to simulate a glowing neon lamp.
            </item>
            </list>
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Link.FillEffectChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Link.FillEffect"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.StartArrow">
            <summary>
            Gets or sets the object that describes the start arrow of the link.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Graphic.LinkArrow"/> instance, or <see langword="null"/>. The default value is <see langword="null"/>.</value>
            <remarks>
            Link arrows are described by instances of the abstract class <see cref="T:ILOG.Diagrammer.Graphic.LinkArrow"/>, 
            which has a predefined subclass: <see cref="T:ILOG.Diagrammer.Graphic.ShapeArrow"/> to use an instance of the <see cref="T:ILOG.Diagrammer.Graphic.Shape"/>
            class with a predefined or custom shape.
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.EndArrow"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Link.StartArrowChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Link.StartArrow"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.EndArrow">
            <summary>
            Gets or sets the object that describes the end arrow of the link.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Graphic.LinkArrow"/> instance, or <see langword="null"/>. The default value is a <see cref="T:ILOG.Diagrammer.Graphic.CapArrow"/> instance.</value>
            <remarks>
            Link arrows are described by instances of the abstract class <see cref="T:ILOG.Diagrammer.Graphic.LinkArrow"/>, 
            which has a predefined subclass: <see cref="T:ILOG.Diagrammer.Graphic.ShapeArrow"/> to use an instance of the <see cref="T:ILOG.Diagrammer.Graphic.Shape"/>
            class with a predefined or custom shape.
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.StartArrow"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Link.EndArrowChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Link.EndArrow"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.CrossingStyle">
            <summary>
            Gets or sets the style used to draw link crossings.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.LinkCrossingsStyle"/> values. The default value is
            <see cref="F:ILOG.Diagrammer.LinkCrossingsStyle.Default"/>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.CrossingSize"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Link.CrossingStyleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Link.CrossingStyle"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.CrossingSize">
            <summary>
            Gets or sets the size of the crossings for this link.
            </summary>
            <value>A <see cref="T:System.Single"/> that specifies the size of the crossings for this link. The default value inherits from
            the parent container.</value>
            <remarks>
            The crossing size is the size of the "gap" displayed along the
            crossing link. For example, with the <see cref="F:ILOG.Diagrammer.LinkCrossingsStyle.Tunnel"/>
            style, the crossing size is the diameter of the half-circle.
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.CrossingStyle"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Link.CrossingSizeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Link.CrossingSize"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.TextItems">
            <summary>
            Gets the collection of text items displayed by this link.
            </summary>
            <value>A collection of <see cref="T:ILOG.Diagrammer.Graphic.LinkTextItem"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Link.TextItemsChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Link.TextItems"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.Text">
            <summary>
            Gets or sets the text of the first text item of this link.
            </summary>
            <value>A <see cref="T:System.String"/>.</value>
            <remarks>To add several text items to a link, use the <see cref="P:ILOG.Diagrammer.Graphic.Link.TextItems"/> property.</remarks>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.TextItems"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.TextAppearance">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.TextAppearance">GraphicObject.TextAppearance</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.CutAtText">
            <summary>
            Gets or sets the flag that specifies if the link is cut when it intersects
            its own text.
            </summary>
            <value><see langword="true"/> if the link is cut when it intersects its own text; Otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.TextItems"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Link.CutAtTextChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Link.CutAtText"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.Radius">
            <summary>
            Gets or sets the radius used to draw the rounded bends of the link.
            </summary>
            <value>A <see cref="T:System.Single"/> value that represents the radius of the link bends. The default value is 
            <strong>0</strong>.</value>
            <remarks>
            A radius of 0 means that the bends are not rounded (that is, the link
            is drawn normally as a polyline). 
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Link.RadiusChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Link.Radius"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.Curved">
            <summary>
            Determines whether the link is drawn as a curve or as straight line segments.
            </summary>
            <value><see langword="true"/> if the link is drawn as a curve; Otherwise, <see langword="false"/>.</value>
            <remarks>
            <para>
            If <see cref="P:ILOG.Diagrammer.Graphic.Link.Curved"/> is <see langword="true"/>, the link is drawn as a curve.
            </para>
            <para>
            If the <see cref="P:ILOG.Diagrammer.Graphic.Link.CardinalSpline"/> property is <see langword="true"/>, the curve is a cardinal spline,
            that is, it goes through all the points of the link.
            </para>
            <para>
            If <see cref="P:ILOG.Diagrammer.Graphic.Link.CardinalSpline"/> is <see langword="false"/>,
            the curve is a bezier spline that goes through the middle points of the intermediate segments of the link.
            </para>
            <para>
            Note that this property has no effect on straight links,
            so the <see cref="P:ILOG.Diagrammer.Graphic.Link.ShapeType"/> should be set to  <see cref="F:ILOG.Diagrammer.Graphic.LinkShapeType.Orthogonal"/>,
            <see cref="F:ILOG.Diagrammer.Graphic.LinkShapeType.Oblique"/> or  <see cref="F:ILOG.Diagrammer.Graphic.LinkShapeType.Free"/>.
            </para>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.CardinalSpline"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.CurveTension"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Link.CurvedChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Link.Curved"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.CardinalSpline">
            <summary>
            When the <see cref="P:ILOG.Diagrammer.Graphic.Link.Curved"/> property is <see langword="true"/>,
            determines whether the curve goes through all the points of the link
            or if it goes through the middle points of the intermediate segments.
            </summary>
            <value><see langword="true"/> if the link is drawn as a cardinal spline; Otherwise, <see langword="false"/>.</value>
            <remarks>
            <para>
            If <see cref="P:ILOG.Diagrammer.Graphic.Link.Curved"/> is <see langword="true"/> and <see cref="P:ILOG.Diagrammer.Graphic.Link.CardinalSpline"/> is <see langword="true"/>
            (the default), the link is drawn as a cardinal spline, that is, a curve that goes through all the
            definition points of the link. The sharpness of the bends can then be adjusted using the
            <see cref="P:ILOG.Diagrammer.Graphic.Link.CurveTension"/> property.
            </para>
            <para>
            If <see cref="P:ILOG.Diagrammer.Graphic.Link.Curved"/> is <see langword="true"/> and <see cref="P:ILOG.Diagrammer.Graphic.Link.CardinalSpline"/> is <see langword="false"/>,
            the link is drawn as a bezier spline. The spline starts at the start point of the link, then goes through
            the middle points of all the segments (except the first and last segments), and ends at the end point of the
            link. With this option, the curve does not go through all the points of the link, but the result is usually
            nicer than with a cardinal spline. The <see cref="P:ILOG.Diagrammer.Graphic.Link.CurveTension"/> property controls how closely the
            curve follows the straight segments of the link.
            </para>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.Curved"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.CurveTension"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Link.CardinalSplineChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Link.CardinalSpline"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.CurveTension">
            <summary>
            Gets or sets the tension parameter used to compute the shape of the curve
            when <see cref="P:ILOG.Diagrammer.Graphic.Link.Curved"/> is <see langword="true"/>.
            </summary>
            <value>A <see cref="T:System.Single"/> value representing the curve tension. The default value is <strong>0.5</strong>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Link.Curved"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Link.CurveTensionChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Link.CurveTension"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.HasFixedNumberOfPoints">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Graphic.PolyPoints.HasFixedNumberOfPoints">PolyPoints.HasFixedNumberOfPoints"</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.HasPreferredWidth">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth">GraphicObject.HasPreferredWidth</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.HasPreferredHeight">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight">GraphicObject.HasPreferredHeight</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.ShouldReceiveParentChangeNotifications">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.ShouldReceiveParentChangeNotifications">GraphicObject.ShouldReceiveParentChangeNotifications</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.CanMove">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.CanMove">GraphicObject.CanMove</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.CanReparent">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.CanReparent">GraphicObject.CanReparent</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.Transform">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.Transform">GraphicObject.Transform</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.Points">
            <summary>
            This member redefines <see cref="P:ILOG.Diagrammer.Graphic.PolyPoints.Points">PolyPoints.Points</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.IsCollapsed">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.IsCollapsed">GraphicObject.IsCollapsed</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.IsVisible">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.IsVisible">GraphicObject.IsVisible</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.HasFreePoints">
            <summary>
            Indicates whether the link has intermediate points that can be edited with the mouse or
            if the start and end of the link is not connected to a node.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Link.IsDrawingText">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.IsDrawingText"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.LinkArrow">
            <summary>
            Represents the start or end arrow of a link.
            </summary>
            <remarks>
            This class is abstract.
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.Graphic.ShapeArrow"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkArrow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.LinkArrow"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkArrow.GetBounds(ILOG.Diagrammer.Graphic.Link,ILOG.Diagrammer.Transform)">
            <summary>
            Returns the bounds of the arrow when used with the specified link.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkArrow.GetOffset(ILOG.Diagrammer.Graphic.Link)">
            <summary>
            Returns the offset to keep between the end of the arrow and the 
            first or last point of the link's path. This can be used to prevent
            the path from "showing behind" the arrow.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkArrow.Paint(ILOG.Diagrammer.DrawingContext,ILOG.Diagrammer.Graphic.Link)">
            <summary>
            Paints the arrow.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkArrow.HitTest(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Graphic.Link,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Returns <see langword="true"/> if the specified point is inside this arrow.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinkArrow.Start">
            <summary>
            Specifies whether this arrow is a start arrow or an end arrow.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinkArrow.Size">
            <summary>
            Gets or sets the size of the arrow.
            </summary>
            <remarks>
            <para>
            The actual size of the arrow will be the value of the <see cref="P:ILOG.Diagrammer.Graphic.LinkArrow.Size"/>
            multiplied by the width of the <see cref="T:ILOG.Diagrammer.Stroke"/>, plus the width of the
            <see cref="P:ILOG.Diagrammer.Graphic.Link.BorderStroke"/> or the bevel width if any.
            </para>
            <para>
            The width and height must be thought of as applying to a vertical arrow.
            When the arrow is not vertical, it is just rotated and not resized.
            So, for example, the width of a horizontal arrow is determined by the <see cref="P:ILOG.Diagrammer.Size2D.Height"/>
            property of the <see cref="P:ILOG.Diagrammer.Graphic.LinkArrow.Size"/> and a its height is determined by <see cref="P:ILOG.Diagrammer.Size2D.Width"/>
            property of the <see cref="P:ILOG.Diagrammer.Graphic.LinkArrow.Size"/>.
            </para>
            <para>
            The default size of the arrow is 4.
            </para>
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.CapArrow">
            <summary>
            This class lets you use a standard GDI+ adjustable arrow cap
            as the start/end arrow of a link. Using this class is equivalent to
            setting a <see cref="T:System.Drawing.Drawing2D.AdjustableArrowCap"/>
            on the link's stroke.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CapArrow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.CapArrow"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CapArrow.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.CapArrow"/> class using
            the specified <paramref name="filled"/> flag.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CapArrow.#ctor(System.Boolean,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.CapArrow"/> class using
            the specified <paramref name="filled"/> flag and the specified width and height.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CapArrow.GetBounds(ILOG.Diagrammer.Graphic.Link,ILOG.Diagrammer.Transform)">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Graphic.LinkArrow.GetBounds(ILOG.Diagrammer.Graphic.Link,ILOG.Diagrammer.Transform)">LinkArrow.GetBounds</see> and
            returns an empty rectangle.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CapArrow.GetOffset(ILOG.Diagrammer.Graphic.Link)">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Graphic.LinkArrow.GetOffset(ILOG.Diagrammer.Graphic.Link)">LinkArrow.GetOffset</see> and
            returns 0.
            </summary>
            <param name="link">The link.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CapArrow.Paint(ILOG.Diagrammer.DrawingContext,ILOG.Diagrammer.Graphic.Link)">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Graphic.LinkArrow.Paint(ILOG.Diagrammer.DrawingContext,ILOG.Diagrammer.Graphic.Link)">LinkArrow.Paint</see> and
            does nothing.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CapArrow.HitTest(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Graphic.Link,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Graphic.LinkArrow.HitTest(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Graphic.Link,ILOG.Diagrammer.DrawingContext)">LinkArrow.HitTest</see> and
            returns <see langword="false"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CapArrow.Clone">
            <summary>
            Returns a copy of this <see cref="T:ILOG.Diagrammer.Graphic.CapArrow"/> instance.
            </summary>
            <returns>A new <see cref="T:ILOG.Diagrammer.Graphic.CapArrow"/> instance.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CapArrow.Equals(System.Object)">
            <summary>
            Tests equality with another <see cref="T:ILOG.Diagrammer.Graphic.CapArrow"/> instance.
            </summary>
            <param name="obj">The other <see cref="T:ILOG.Diagrammer.Graphic.CapArrow"/> instance.</param>
            <returns><see langword="true"/> if and only if the arrow caps are equal.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CapArrow.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CapArrow.ToString">
            <summary>
            Returns a short string description of this <see cref="T:ILOG.Diagrammer.Graphic.CapArrow"/> instance.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.CapArrow.Filled">
            <summary>
            Gets or sets the flag that specifies if the arrow is a filled triangle
            or an open arrow made of two lines.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.CapArrow.Size">
            <summary>
            Overrides <see cref="P:ILOG.Diagrammer.Graphic.LinkArrow.Size">LinkArrow.Size</see> and
            sets the size of the adjustable arrow cap.
            </summary>
            <remarks>
            The default size of the arrow is 4.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ShapeArrow">
            <summary>
            This class lets you use any <see cref="T:ILOG.Diagrammer.Graphic.Shape"/> object as a custom arrow.
            You can use a predefined shape defined by the <see cref="T:ILOG.Diagrammer.Graphic.ArrowShape"/> enumeration,
            or create your own <see cref="T:ILOG.Diagrammer.Graphic.Shape"/> object if you need a custom shape.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ShapeArrow.#ctor(ILOG.Diagrammer.Graphic.ArrowShape)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.ShapeArrow"/> class
            using the specified predefined shape.
            </summary>
            <param name="shape">One of the <see cref="T:ILOG.Diagrammer.Graphic.ArrowShape"/> values.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ShapeArrow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.ShapeArrow"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ShapeArrow.#ctor(ILOG.Diagrammer.Graphic.Shape)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.ShapeArrow"/> class
            using the specified custom shape.
            </summary>
            <param name="customShape">An instance of the <see cref="P:ILOG.Diagrammer.Graphic.ShapeArrow.Shape"/> class.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ShapeArrow.GetBounds(ILOG.Diagrammer.Graphic.Link,ILOG.Diagrammer.Transform)">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Graphic.LinkArrow.GetBounds(ILOG.Diagrammer.Graphic.Link,ILOG.Diagrammer.Transform)">LinkArrow.GetBounds</see> and
            returns the bounds of the <see cref="T:ILOG.Diagrammer.Graphic.Shape"/> object representing the arrow.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ShapeArrow.GetOffset(ILOG.Diagrammer.Graphic.Link)">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Graphic.LinkArrow.GetOffset(ILOG.Diagrammer.Graphic.Link)">LinkArrow.GetOffset</see> and
            returns the value of the <see cref="P:ILOG.Diagrammer.Graphic.ShapeArrow.Offset"/> property multiplied
            by the height of the arrow.
            </summary>
            <param name="link">The link.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ShapeArrow.Paint(ILOG.Diagrammer.DrawingContext,ILOG.Diagrammer.Graphic.Link)">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Graphic.LinkArrow.Paint(ILOG.Diagrammer.DrawingContext,ILOG.Diagrammer.Graphic.Link)">LinkArrow.Paint</see> and
            paints the <see cref="T:ILOG.Diagrammer.Graphic.Shape"/> object representing the arrow.
            </summary>
            <param name="context">The drawing context.</param>
            <param name="link">The <see cref="T:ILOG.Diagrammer.Graphic.Link"/> that contains the arrow.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ShapeArrow.HitTest(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Graphic.Link,ILOG.Diagrammer.DrawingContext)">
            <summary>
            Overrides <see cref="M:ILOG.Diagrammer.Graphic.LinkArrow.HitTest(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Graphic.Link,ILOG.Diagrammer.DrawingContext)">LinkArrow.HitTest</see> and
            returns <see langword="true"/> if and only if the point is inside
            the <see cref="T:ILOG.Diagrammer.Graphic.Shape"/> object representing the arrow.
            </summary>
            <param name="point">The point to test.</param>
            <param name="link">The <see cref="T:ILOG.Diagrammer.Graphic.Link"/> that contains the arrow.</param>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/> containing drawing information.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ShapeArrow.Clone">
            <summary>
            Returns a copy of this <see cref="T:ILOG.Diagrammer.Graphic.ShapeArrow"/> instance.
            </summary>
            <returns>A new <see cref="T:ILOG.Diagrammer.Graphic.ShapeArrow"/> instance.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ShapeArrow.Equals(System.Object)">
            <summary>
            Tests equality of this <see cref="T:ILOG.Diagrammer.Graphic.ShapeArrow"/> instance with another <see cref="T:ILOG.Diagrammer.Graphic.ShapeArrow"/> instance.
            </summary>
            <param name="obj">The other <see cref="T:ILOG.Diagrammer.Graphic.ShapeArrow"/> instance.</param>
            <returns><see langword="true"/> if and only if the shape of this
            arrow is equal to the shape of the other arrow.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ShapeArrow.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ShapeArrow.ToString">
            <summary>
            Returns a short string description of this <see cref="T:ILOG.Diagrammer.Graphic.ShapeArrow"/> instance.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ShapeArrow.CustomShape">
            <summary>
            Gets or sets a custom <see cref="T:ILOG.Diagrammer.Graphic.Shape"/> for this arrow.
            </summary>
            <remarks>
            Set the <see cref="P:ILOG.Diagrammer.Graphic.ShapeArrow.Shape"/> property to <see cref="F:ILOG.Diagrammer.Graphic.ArrowShape.Custom"/>
            when you set this property to a custom shape, otherwise your custom shape
            will be replaced by a predefined shape.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ShapeArrow.Size">
            <summary>
            Overrides <see cref="P:ILOG.Diagrammer.Graphic.LinkArrow.Size">LinkArrow.Size</see> and
            resizes the arrow shape.
            </summary>
            <remarks>
            The default size of the arrow is 4.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ShapeArrow.Fill">
            <summary>
            Gets or sets the fill style of the shape.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ShapeArrow.Stroke">
            <summary>
            Gets or sets the stroke style of the shape.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ShapeArrow.Shape">
            <summary>
            Gets or sets a predefined shape for the arrow.
            </summary>
            <remarks>
            Use the <see cref="F:ILOG.Diagrammer.Graphic.ArrowShape.Custom"/> value and set the
            <see cref="P:ILOG.Diagrammer.Graphic.ShapeArrow.CustomShape"/> property to use a custom shape.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ShapeArrow.Offset">
            <summary>
            Gets or sets the offset between the extremity of the arrow and the start/end of the link's path.
            </summary>
            <remarks>
            <para>
            The actual offset returns by <see cref="M:ILOG.Diagrammer.Graphic.ShapeArrow.GetOffset(ILOG.Diagrammer.Graphic.Link)"/> is the value of the
            <see cref="P:ILOG.Diagrammer.Graphic.ShapeArrow.Offset"/> property multiplied by the arrow's height.
            </para>
            <para>
            The default offset is 0.5f, which means that the offset is half the size of the arrow.
            </para>
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.LinkSelectionGraphic">
            <summary>
            The selection class dedicated to objects implementing the <see cref="T:ILOG.Diagrammer.ILink"/> interface.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic">
            <summary>
            The selection class dedicated to objects that implement the <see cref="T:ILOG.Diagrammer.Graphic.IPolyPointsShape"/> interface.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.IsTypeSupported(System.Type)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.SelectionGraphic.IsTypeSupported(System.Type)">SelectionGraphic.IsTypeSupported</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">DefaultSelectionGraphic.GetHandleDescription</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.GetHandlePoints">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandlePoints">DefaultSelectionGraphic.GetHandlePoints</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.GetHandleType(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleType(System.Int32)">DefaultSelectionGraphic.GetHandleType</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.GetHandleCursor(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleCursor(System.Int32)">DefaultSelectionGraphic.GetHandleCursor</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.GetHandleMovingCursor(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleMovingCursor(System.Int32)">DefaultSelectionGraphic.GetHandleMovingCursor</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.IsHandleVisible(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.IsHandleVisible(System.Int32)">DefaultSelectionGraphic.IsHandleVisible</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.ObjectReselected(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.SelectionGraphic.ObjectReselected(ILOG.Diagrammer.GraphicObject)">SelectionGraphic.ObjectReselected</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.DoMovePoint(System.Int32,ILOG.Diagrammer.Point2D)">
            <summary>
            Is called when the handle corresponding to the specified point is moved.
            </summary>
            <param name="index">The zero-based index of the point of the selected object being moved.</param>
            <param name="point">The new location for the specified point of the selected object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.MoveHandle(System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.MoveHandle(System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">DefaultSelectionGraphic.MoveHandle</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.OnMouseClick(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseClick(ILOG.Diagrammer.ObjectMouseEventArgs)">GraphicObject.OnMouseClick</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.OnInteractionStarted">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.ReshapeSelectionGraphic.OnInteractionStarted">ReshapeSelectionGraphic.OnInteractionStarted</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.OnInteractionValidated">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnInteractionValidated">DefaultSelectionGraphic.OnInteractionValidated</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.RaisePointsChanging">
            <summary>
            Is called to notify that the points of the polypoints are about to change.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.RaisePointsChanged">
            <summary>
            Is called to notify that the points of the polypoints have changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.ValidateGhostGraphic(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.ValidateGhostGraphic(ILOG.Diagrammer.GraphicObject)">DefaultSelectionGraphic.ValidateGhostGraphic</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.DoAddPoint(System.Int32,ILOG.Diagrammer.Point2D)">
            <summary>
            Is called to add a point to the selected object.
            </summary>
            <param name="index">The zero-based index of the point to add.</param>
            <param name="point">The location of the point to add.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.DoRemovePoint(System.Int32)">
            <summary>
            Is called to remove a point from the selected object.
            </summary>
            <param name="index">The zero-based index of the point to remove.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.CanEditSelectedObjectPoints">
            <summary>
            Gets a value indicating whether it's possible to move points from the selected object
            by clicking the corresponding selection handle and dragging it.
            </summary>
            <value><see langword="true"/> to enable points to be moved; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.CanRemoveSelectedObjectPoints">
            <summary>
            Gets a value indicating whether it's possible to remove points from the selected object
            by clicking the corresponding selection handle with the <strong>CTRL-key</strong> pressed.
            </summary>
            <value><see langword="true"/> to enable point deletion; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.CanAddSelectedObjectPoints">
            <summary>
            Gets a value indicating whether it's possible to add points to the selected object.
            </summary>
            <value><see langword="true"/> to enable point addition; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.EditMode">
            <summary>
            Gets or sets the edit mode for the selected graphic object.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.CanReparentSelectedObject">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.DefaultSelectionGraphic.CanReparentSelectedObject">DefaultSelectionGraphic.CanReparentSelectedObject</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.CanRotateSelectedObject">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.DefaultSelectionGraphic.CanRotateSelectedObject">DefaultSelectionGraphic.CanRotateSelectedObject</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.CanMoveSelectedObject">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.DefaultSelectionGraphic.CanMoveSelectedObject">DefaultSelectionGraphic.CanMoveSelectedObject</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.CanResizeSelectedObject">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.ReshapeSelectionGraphic.CanResizeSelectedObject">ReshapeSelectionGraphic.CanResizeSelectedObject</see>
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.PolyPointsEditMode">
            <summary>
            Describes the edition mode of the <see cref="T:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic"/>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.PolyPointsEditMode.EditBounds">
            <summary>
            The selection graphic objects allows to edit the object bounds.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.PolyPointsEditMode.EditPoints">
            <summary>
            The selection graphic objects allows to edit the object points.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.LinkSelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.IsTypeSupported(System.Type)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.SelectionGraphic.IsTypeSupported(System.Type)">SelectionGraphic.IsTypeSupported</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.GetHandlePoints">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.GetHandlePoints">PolyPointsSelectionGraphic.GetHandlePoints</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.IsHandleVisible(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.IsHandleVisible(System.Int32)">DefaultSelectionGraphic.IsHandleVisible</see> and
            hides the intermediate points of a <see cref="T:ILOG.Diagrammer.Graphic.Link"/> that cannot be edited
            when <see cref="P:ILOG.Diagrammer.Graphic.Link.ShapeType"/> is not <see cref="F:ILOG.Diagrammer.Graphic.LinkShapeType.Free"/>.
            </summary>
            <param name="index">The index of the handle.</param>
            <returns><see langword="true"/> if the point can be moved, or
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.GetHandleType(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.GetHandleType(System.Int32)">PolyPointsSelectionGraphic.GetHandleType</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.GetHandleCursor(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.ReshapeSelectionGraphic.GetHandleCursor(System.Int32)">ReshapeSelectionGraphic.GetHandleCursor</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">PolyPointsSelectionGraphic.GetHandleDescription</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.MoveHandle(System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.MoveHandle(System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">PolyPointsSelectionGraphic.MoveHandle</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.OnMouseDown(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseDown(ILOG.Diagrammer.ObjectMouseEventArgs)">GraphicObject.OnMouseDown</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.GetCreateLinkInteractor">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor"/> object that will be used to reconnect the link
            when the user clicks on the first or last point of the link.
            </summary>
            <remarks>
            By default, a new <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateLinkInteractor"/> is returned.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.OnInteractionValidated">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.OnInteractionValidated">PolyPointsSelectionGraphic.OnInteractionValidated</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.CanResizeSelectedObject">
            <summary>
            This member overrides 
            <see cref="P:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.CanResizeSelectedObject">PolyPointsSelectionGraphic.CanResizeSelectedObject</see> to return 
            <see langword="false"/>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.CanRotateSelectedObject">
            <summary>
            This member overrides 
            <see cref="P:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.CanRotateSelectedObject">PolyPointsSelectionGraphic.CanRotateSelectedObject</see> to return 
            <see langword="false"/>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.CanMoveSelectedObject">
            <summary>
            This member overrides 
            <see cref="P:ILOG.Diagrammer.DefaultSelectionGraphic.CanMoveSelectedObject">DefaultSelectionGraphic.CanMoveSelectedObject</see> to return 
            <see langword="false"/>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.ShowBorder">
            <summary>
            This member overrides 
            <see cref="P:ILOG.Diagrammer.DefaultSelectionGraphic.ShowBorder">DefaultSelectionGraphic.ShowBorder</see> to return 
            <see langword="false"/>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.CanRemoveSelectedObjectPoints">
            <summary>
            This member overrides 
            <see cref="P:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.CanRemoveSelectedObjectPoints">PolyPointsSelectionGraphic.CanRemoveSelectedObjectPoints</see> to return 
            <see langword="false"/> if the number of link points is smaller than <strong>3</strong>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.CanEditSelectedObjectPoints">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.CanEditSelectedObjectPoints">PolyPointsSelectionGraphic.CanEditSelectedObjectPoints</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinkSelectionGraphic.CanConnectLink">
            <summary>
            Gets a value indicating whether the selected link can be connected or disconnected using the mouse pointer.
            </summary>
            <value><see langword="true"/> if the selected link can be connected or disconnected using the mouse pointer; Otherwise,
            <see langword="false"/>. The default value inherits from the
            <see cref="P:ILOG.Diagrammer.SelectionStyle.CanConnect">SelectionStyle.CanConnect</see> property.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.LinkTextOrthogonalAlignment">
            <summary>
            Defines the alignment of a <see cref="T:ILOG.Diagrammer.Graphic.LinkTextItem"/>
            orthogonally to the direction of the <see cref="T:ILOG.Diagrammer.Graphic.Link"/>.
            </summary>
            <remarks>Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.Graphic.LinkTextItem.OrthogonalAlignment"/> property
            of a <see cref="T:ILOG.Diagrammer.Graphic.LinkTextItem"/>.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinkTextOrthogonalAlignment.Center">
            <summary>
            Causes the text item to be centered on the link's path.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinkTextOrthogonalAlignment.Left">
            <summary>
            Causes the text item to be drawn on the left of the link's path
            (looking towards the end of the link).
            </summary>
            <remarks>
            For example, if the text is on a horizontal segment of
            the link pointing right, the text will be drawn above the link.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinkTextOrthogonalAlignment.Right">
            <summary>
            Causes the text item to be drawn on the right of the link's path
            (looking towards the end of the link).
            </summary>
            <remarks>
            For example, if the text is on a horizontal segment of
            the link pointing right, the text will be drawn below the link.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.LinkTextParallelAlignment">
            <summary>
            Defines the alignment of a <see cref="T:ILOG.Diagrammer.Graphic.LinkTextItem"/>
            parallel to the direction of the <see cref="T:ILOG.Diagrammer.Graphic.Link"/>.
            </summary>
            <remarks>Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.Graphic.LinkTextItem.ParallelAlignment"/> property
            of a <see cref="T:ILOG.Diagrammer.Graphic.LinkTextItem"/>.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinkTextParallelAlignment.Middle">
            <summary>
            Causes the text to be centered on the text item's position.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinkTextParallelAlignment.Start">
            <summary>
            Causes the text to be aligned with the position of the text item,
            on the side nearest to the start of the link.
            </summary>
            <remarks>
            For example, if the text is on a horizontal segment of
            the link pointing right, the text will be left-aligned
            with respect to the position of the text item.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinkTextParallelAlignment.End">
            <summary>
            Causes the text to be aligned with the position of the text item,
            on the side nearest to the end of the link.
            </summary>
            <remarks>
            For example, if the text is on a horizontal segment of
            the link pointing right, the text will be right-aligned
            with respect to the position of the text item.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.LinkTextItem">
            <summary>
            Represents a text item displayed by a
            <see cref="T:ILOG.Diagrammer.Graphic.Link"/> object.
            </summary>
            <remarks>You add text in a link using the <see cref="P:ILOG.Diagrammer.Graphic.Link.TextItems"/> property of a <see cref="T:ILOG.Diagrammer.Graphic.Link"/>.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkTextItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.LinkTextItem"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkTextItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.LinkTextItem"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinkTextItem.ToString">
            <summary>
            This member overrides <see cref="M:System.Object.ToString">Object.ToString</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinkTextItem.Text">
            <summary>
            Gets or sets the text displayed by this text item.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinkTextItem.PositionType">
            <summary>
            Gets or sets the position type that specifies how the <see cref="P:ILOG.Diagrammer.Graphic.LinkTextItem.Position"/>
            property is interpreted.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinkTextItem.Position">
            <summary>
            Gets or sets the position of the text along the link's path.
            </summary>
            <remarks>
            The way this property is interpreted is defined by the <see cref="P:ILOG.Diagrammer.Graphic.LinkTextItem.PositionType"/>
            property.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinkTextItem.TextAppearance">
            <summary>
            Gets or sets the appearance of this text item.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinkTextItem.OrthogonalAlignment">
            <summary>
            Gets or sets the alignment of the text orthogonally to the link's
            polyline.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinkTextItem.ParallelAlignment">
            <summary>
            Gets or sets the alignment along the link's polyline.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinkTextItem.Distance">
            <summary>
            Gets or sets the distance between the text and the link.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinkTextItem.Rotation">
            <summary>
            Gets or sets the rotation angle (in degrees) of this text item.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinkTextItem.AutoRotate">
            <summary>
            Determines whether or not this item is rotated automatically according the angle of the link segment.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.LinkTextItemCollection">
            <summary>
            Represents a strongly-typed collection of <see cref="T:ILOG.Diagrammer.Graphic.LinkTextItem"/> objects.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Image">
            <summary>
            Defines a graphic object that draws an image.
            </summary>
            <remarks>
            The <see cref="T:ILOG.Diagrammer.Graphic.Image"/> class displays a raster image, or a vector image. To display a raster image, 
            use the <see cref="P:ILOG.Diagrammer.Graphic.Image.SystemImage"/> property. To display a vector image, use the <see cref="P:ILOG.Diagrammer.Graphic.Image.GraphicObject"/> property.
            </remarks>
            <example>
            <para lang="cv,vbnet">
            Following example creates an image object:
            </para>
            <code lang="cs">
             ILOG.Diagrammer.Graphic.Image CreateImage()
             {
                 ILOG.Diagrammer.Graphic.Image img = new ILOG.Diagrammer.Graphic.Image();
                 img.Rectangle = new Rectangle2D(0, 0, 100, 100);
                 img.KeepAspectRatio = AspectRatioAlignment.XMidYMid;
                 img.ImageUri = new Uri("http://www.ilog.com/logo.gif");
                 return img;
             }
            </code>
            <code lang="vbnet">
            Function CreateImage() As ILOG.Diagrammer.Graphic.Image 
                Dim img As ILOG.Diagrammer.Graphic.Image = New ILOG.Diagrammer.Graphic.Image 
                img.Rectangle = New Rectangle2D(0, 0, 100, 100) 
                img.KeepAspectRatio = AspectRatioAlignment.XMidYMid 
                img.ImageUri = New Uri("http://www.ilog.com/logo.gif") 
                Return img 
            End Function
            </code>
            </example>
            <see cref="T:ILOG.Diagrammer.Graphic.GraphicSymbol"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Image"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.#ctor(System.Drawing.Image,ILOG.Diagrammer.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Image"/> class using the specified parameters.
            </summary>
            <param name="image">The <see cref="T:ILOG.Diagrammer.Graphic.Image"/> object to display.</param>
            <param name="location">A <see cref="T:ILOG.Diagrammer.Point2D"/> structure that defines
            the top left point of the object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.#ctor(System.Drawing.Image,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Image"/> class using the specified parameters.
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image"/> object to display.</param>
            <param name="bounds">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure that defines
            the bounds of the object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.#ctor(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Image"/> class using the specified parameters.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> object to display.</param>
            <param name="location">A <see cref="T:ILOG.Diagrammer.Point2D"/> structure that defines
            the top left point of the object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.#ctor(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Image"/> class using the specified parameters.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> object to display.</param>
            <param name="bounds">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure that defines
            the bounds of the object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.#ctor(System.Uri,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Image"/> class using the specified parameters.
            </summary>
            <param name="uri">The uri of the image to display.</param>
            <param name="bounds">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure that defines
            the bounds of the object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.#ctor(System.Uri,ILOG.Diagrammer.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Image"/> class using the specified parameters.
            </summary>
            <param name="uri">The uri of the image to display.</param>
            <param name="location">A <see cref="T:ILOG.Diagrammer.Point2D"/> structure that defines
            the top left point of the object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.Dispose(System.Boolean)">GraphicObject.Dispose</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.OnImageUriChanged(System.Uri,System.Uri)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Image.ImageUri"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.OnSystemImageChanged(System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Image.SystemImage"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.OnGraphicObjectChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.GraphicObject)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Image.GraphicObject"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.OnInterpolationModeChanged(System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Image.InterpolationMode"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.OnRectangleChanged(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Image.Rectangle"/> property is modified.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.OnKeepAspectRatioChanged(ILOG.Diagrammer.AspectRatioAlignment,ILOG.Diagrammer.AspectRatioAlignment)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Image.KeepAspectRatio"/> property is modified.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.OnSliceChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Image.Slice"/> property is modified.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.Animate">
            <summary>
            Animates image when possible.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.StopAnimate">
            <summary>
            Stops image animation.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.OnVisibilityChanged(ILOG.Diagrammer.Visibility,ILOG.Diagrammer.Visibility)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnVisibilityChanged(ILOG.Diagrammer.Visibility,ILOG.Diagrammer.Visibility)">GraphicObject.OnVisibilityChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.OnParentChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnParentChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">GraphicObject.OnParentChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.PaintCore(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)">GraphicObject.PaintCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestCore</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">GraphicObject.IntersectsCore</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.GetDisplayBounds">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetDisplayBounds">GraphicObject.GetDisplayBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.GetGeometryBounds">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetGeometryBounds">GraphicObject.GetGeometryBounds</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.GetStyledBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetStyledBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetStyledBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">GraphicObject.GetPreferredSizeCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Image.GetDefaultAnchors">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetDefaultAnchors">GraphicObject.GetDefaultAnchors</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Image.ImageUri">
            <summary>
            Gets or sets the uri of the image displayed by this object.
            </summary>
            <value>A valid <see cref="T:System.Uri"/>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Image.SystemImage"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Image.GraphicObject"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Image.ImageUriChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Image.ImageUri"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Image.SystemImage">
            <summary>
            Gets or sets the image displayed by the object.
            </summary>
            <value>A <see cref="T:System.Drawing.Image"/> that is displayed by the object.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Image.ImageUri"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Image.GraphicObject"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Image.SystemImageChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Image.SystemImage"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Image.GraphicObject">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.GraphicObject"/> displayed by this object.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Image.ImageUri"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Image.SystemImage"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Image.GraphicObjectChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Image.GraphicObject"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Image.VectorImage">
             <summary>
             Gets or sets the image displayed by the object.
             </summary>
             <remarks>
             The image is specified as a string containing the XML definition of the image in IVN format.
             This property is mainly used for serialization purposes. To set a vector image by code, use the
             <see cref="P:ILOG.Diagrammer.Graphic.Image.GraphicObject"/> property.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Image.InterpolationMode">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Drawing2D.InterpolationMode"/> used to draw this image.
            </summary>
            <value>One of the <see cref="T:System.Drawing.Drawing2D.InterpolationMode"/> values. The default value is <see cref="T:System.Drawing.Drawing2D.InterpolationMode">InterpolationMode.Default</see>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Image.InterpolationModeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Image.InterpolationMode"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Image.Rectangle">
            <summary>
            Gets or sets the rectangle that defines the bounds of the object.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> object that defines the bounds of the object.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Image.ImageUri"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Image.SystemImage"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Image.GraphicObject"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Image.RectangleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Image.Rectangle"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Image.KeepAspectRatio">
            <summary>
            Gets or sets the type of alignment of the image in the definition rectangle.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.AspectRatioAlignment"/> values that
            represents the alignment of the image in the definition rectangle. The default value is
            <see cref="F:ILOG.Diagrammer.AspectRatioAlignment.XMidYMid"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Image.KeepAspectRatioChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Image.KeepAspectRatio"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Image.Slice">
            <summary>
            Gets or sets the mode used to stretch the image in the object bounding box.
            </summary>
            <value>When the value is <see langword="true"/>, the image is stretched to respect the value of the
            <see cref="P:ILOG.Diagrammer.Graphic.Image.KeepAspectRatio"/> property and the image will cover the bounding box of the object defined by the
            <see cref="P:ILOG.Diagrammer.Graphic.Image.Rectangle"/> property, thus some part of the image might not be visible. When the value is <see langword="false"/> (the default),
            the image will be stretched to respect the value of the
            <see cref="P:ILOG.Diagrammer.Graphic.Image.KeepAspectRatio"/> property and the image will be fully visible inside the bounding box of the object, thus
            some part of the bounding box of the object might not be filled with the image.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Image.KeepAspectRatio"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Image.SliceChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Image.Slice"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Image.SupportsCoreTransparency">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.SupportsCoreTransparency">GraphicObject.SupportsCoreTransparency</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Image.HasPreferredWidth">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth">GraphicObject.HasPreferredWidth</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Image.HasPreferredHeight">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight">GraphicObject.HasPreferredHeight</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.ChildrenHierarchyChangeAction">
            <summary>
            Specifies a change in the contents of a <see cref="T:ILOG.Diagrammer.GraphicContainer"/> object.
            </summary>
            <remarks>This enumeration is used by the <see cref="T:ILOG.Diagrammer.ChildrenHierarchyChangeEventArgs"/> class.</remarks>
        </member>
        <member name="F:ILOG.Diagrammer.ChildrenHierarchyChangeAction.Add">
            <summary>
            Children have been added to a container.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.ChildrenHierarchyChangeAction.Remove">
            <summary>
            Children have been removed from a container.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.ChildrenHierarchyChangeEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.GraphicContainer.ChildrenHierarchyChanged"/> event of a <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.ChildrenHierarchyChangeEventArgs.Parent">
            <summary>
            Gets the container in which the change has occurred.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ChildrenHierarchyChangeEventArgs.Action">
            <summary>
            Gets the change type that occurred in the container.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.ChildrenHierarchyChangeAction"/> values.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ChildrenHierarchyChangeEventArgs.Children">
            <summary>
            Gets the array of children that were added to or removed from the container.
            </summary>
            <value>The children that were added to or removed from the container.</value>
        </member>
        <member name="T:ILOG.Diagrammer.ChildrenHierarchyChangeEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.GraphicContainer.ChildrenHierarchyChanged"/> event raised when adding elements to or removing elements from a <see cref="T:ILOG.Diagrammer.GraphicContainer"/>. 
            </summary>
            <param name="sender">The soure of the event.</param>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ChildrenHierarchyChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ILOG.Diagrammer.QueryCollapsedAnchorEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.GraphicContainer.QueryCollapsedAnchor"/> event
            of a <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.QueryCollapsedAnchorEventArgs.OriginalAnchor">
            <summary>
            Gets the original anchor associated with the graphic object that is collapsed.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Anchor"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.QueryCollapsedAnchorEventArgs.ContainerAnchor">
            <summary>
            Gets or sets the anchor that will be used to compute the connection point
            on the graphic container instead of <see cref="P:ILOG.Diagrammer.QueryCollapsedAnchorEventArgs.OriginalAnchor"/>.
            </summary>
            <remarks>
            When the <see cref="E:ILOG.Diagrammer.GraphicContainer.QueryCollapsedAnchor"/> event is received
            by a <see cref="T:ILOG.Diagrammer.GraphicContainer"/>, the container can provide an <see cref="T:ILOG.Diagrammer.Anchor"/>
            object that will be used to compute the connection point of the link with the container.
            This anchor is provided by setting the <see cref="P:ILOG.Diagrammer.QueryCollapsedAnchorEventArgs.ContainerAnchor"/> property of
            the <see cref="T:ILOG.Diagrammer.QueryCollapsedAnchorEventArgs"/> object passed to the event handler.
            The anchor provided can be one of the existing anchors of the container, or a newly
            created anchor.
            If the container does not provide any anchor, a <see cref="T:ILOG.Diagrammer.BoundsAnchor"/> with a
            position equal to <see cref="F:ILOG.Diagrammer.AnchorPosition.Automatic"/> will be used as the default.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.QueryCollapsedAnchorEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.GraphicContainer.QueryCollapsedAnchor"/> event raised
            to query the anchor to use when a descendant of a <see cref="T:ILOG.Diagrammer.GraphicContainer"/> is collapsed.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ILOG.Diagrammer.QueryCollapsedAnchorEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.AbstractDropDownEditor">
            <summary>
            This code is duplicated from AbstractDropDownEditor.cs in Design assembly....
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.AbstractDropDownEditor.GetValues">
            <summary>
            Returns the values displayed in the drop-down list.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.AbstractDropDownEditor.ValueEquals(System.Object,System.Object)">
            <summary>
            Tests if the edited value is equal to a value from the list.
            The base implementation calls Object.Equals.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.AbstractDropDownEditor.GetNewValue(System.Object)">
            <summary>
            Returns a copy of the selected value. 
            The base implementation returns a cloned copy (if the value
            is cloneable), or the value itself.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.AbstractDropDownEditor.DrawValue(System.Object,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draws a value in the editor. This method is called to paint the value
            both in the editor and in the drop-down list.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ConstraintDialog">
            <summary>
            The <see cref="T:ILOG.Diagrammer.Windows.Forms.ConstraintDialog"/> class defines a Windows Forms dialog
            that can be used to edit the constraints of a <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalLayout"/>
            or a <see cref="T:ILOG.Diagrammer.GraphLayout.TreeLayout"/> algorithm used to layout a graph contained
            in a <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ConstraintDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.ConstraintDialog"/> class.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ConstraintDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ConstraintDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ConstraintDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ConstraintDialog.GraphicContainer">
            <summary>
            Gets or sets the graphic container whose graph layout constraints
            are edited.
            </summary>
            <value>A <see cref="P:ILOG.Diagrammer.Windows.Forms.ConstraintDialog.GraphicContainer"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ConstraintDialog.GraphLayout">
            <summary>
            Gets or sets the graph layout algorithm whose constraints must be edited.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayout"/> instance.</value>
            <remarks>
            This property must be set only if the graph layout whose constraints must be edited
            is not the same as the value of the <see cref="P:ILOG.Diagrammer.GraphicContainer.GraphLayout"/> property of the
            graphic container stored in the <see cref="P:ILOG.Diagrammer.Windows.Forms.ConstraintDialog.GraphicContainer"/>
            property.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Printing.PrintPageContentEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ILOG.Diagrammer.Printing.ExtendedPrintDocument.PrintPageContent">PrintPageContent</see>
            event of an <see cref="T:ILOG.Diagrammer.Printing.ExtendedPrintDocument">ExtendedPrintDocument</see>.
            </summary>
            <param>
            The declaration of your event handler must have the same parameters
            as the <see cref="T:ILOG.Diagrammer.Printing.PrintPageContentEventHandler">PrintPageContentEventHandler</see> delegate declaration.
            </param>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:System.Drawing.Printing.PrintPageEventArgs">PrintPageEventArgs</see> that contains the event data.</param>
        </member>
        <member name="T:ILOG.Diagrammer.Printing.ExtendedPrintDocument">
             <summary>
             Defines a document that can be sent to a printer.
             </summary>
             <remarks>Derives from the <see cref="T:System.Drawing.Printing.PrintDocument"/> class and adds the notion
             of header and footer. Typically you create an instance of the <see cref="T:ILOG.Diagrammer.Printing.ExtendedPrintDocument"/> class,
             set the properties that describe how to print, such as the header and footer, and use the <see cref="M:System.Drawing.Printing.PrintDocument.Print">Print</see>
             method to start the printing process. Handle the <see cref="E:ILOG.Diagrammer.Printing.ExtendedPrintDocument.PrintPageContent"/> event where
             you specify the content to print in a page by using the <see cref="T:System.Drawing.Graphics"/> object in
             the <see cref="T:System.Drawing.Printing.PrintPageEventArgs"/>. 
            </remarks>
             <seealso cref="T:ILOG.Diagrammer.Printing.HeaderFooter"/>
             <seealso cref="T:ILOG.Diagrammer.Windows.Forms.DocumentPageSetupDialog"/>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.ExtendedPrintDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Printing.ExtendedPrintDocument"/> 
            class using the default <see cref="T:System.Drawing.Printing.PageSettings"/>.
            </summary>
            <remarks>
            By default, there is no header, no footer, and the order of the
            page is over, then down.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.ExtendedPrintDocument.#ctor(System.Drawing.Printing.PageSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Printing.ExtendedPrintDocument"/>
            class using the specified <see cref="T:System.Drawing.Printing.PageSettings"/>.
            </summary>
            <param name="settings">A <see cref="T:System.Drawing.Printing.PageSettings"/> object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.ExtendedPrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Drawing.Printing.PrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">PrintDocument.OnBeginPrint</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.ExtendedPrintDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Drawing.Printing.PrintDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">PrintDocument.OnPrintPage</see>.
            </summary>
            <remarks>This method is sealed. In order to print the content of a page
            you must override <see cref="M:ILOG.Diagrammer.Printing.ExtendedPrintDocument.OnPrintPageContent(System.Drawing.Printing.PrintPageEventArgs)"/>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.ExtendedPrintDocument.OnPrintPageContent(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Printing.ExtendedPrintDocument.PrintPageContent"/> event. It is called before the actual
            content of the current page is printed.
            </summary>
            <param name="e">A <see cref="T:System.Drawing.Printing.PrintPageEventArgs">PrintPageEventArgs</see> that contains the event
            data that was received by <see cref="M:ILOG.Diagrammer.Printing.ExtendedPrintDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)"/>.
            </param>
            <remarks>
            This method allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.<br></br>
            When a derived class calls the <strong>OnPrintPageContent</strong> method, it raises the <strong>PrintPageContent</strong> event by invoking the event handler through a delegate. For more information, see Raising an Event.<br></br>
            <note type="inheritinfo">When overriding <strong>OnPrintPageContent</strong> in a derived class, 
            be sure to call the <strong>OnPrintPageContent</strong> method of the base class 
            so that registered delegates receive the event.</note>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.ExtendedPrintDocument.FormatPageIndex">
            <summary>
            Is called to format the index of the page being printed.
            </summary>
            <returns>The string conversion of the index of the page being printed.</returns>
            <remarks>This method is used by the <see cref="T:ILOG.Diagrammer.Printing.HeaderFooter"/> class.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.ExtendedPrintDocument.FormatNumberOfPages">
            <summary>
            Is called to format the number of pages being printed.
            </summary>
            <returns>The string conversion of the number of pages being printed.</returns>
            <remarks>This method is used by the <see cref="T:ILOG.Diagrammer.Printing.HeaderFooter"/> class.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.ExtendedPrintDocument.FormatDate">
            <summary>
            Is called to format the document date.
            </summary>
            <returns>The string conversion of the document date.</returns>
            <remarks>This method is used by the <see cref="T:ILOG.Diagrammer.Printing.HeaderFooter"/> class.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.ExtendedPrintDocument.FormatTime">
            <summary>
            Is called to format the document time.
            </summary>
            <returns>The string conversion of the document time.</returns>
            <remarks>This method is used by the <see cref="T:ILOG.Diagrammer.Printing.HeaderFooter"/> class.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.ExtendedPrintDocument.FormatFile">
            <summary>
            Is called to format the document filename.
            </summary>
            <returns>The string conversion of the document filename.</returns>
            <remarks>This method is used by the <see cref="T:ILOG.Diagrammer.Printing.HeaderFooter"/> class.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.ExtendedPrintDocument.FormatAuthor">
            <summary>
            Is called to format the document author.
            </summary>
            <returns>The string conversion of the document author.</returns>
            <remarks>This method is used by the <see cref="T:ILOG.Diagrammer.Printing.HeaderFooter"/> class.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.ExtendedPrintDocument.FormatDocument">
            <summary>
            Is called to format the document name.
            </summary>
            <returns>The string conversion of the document name.</returns>
            <remarks>This method is used by the <see cref="T:ILOG.Diagrammer.Printing.HeaderFooter"/> class.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.ExtendedPrintDocument.SetPages(System.Int32)">
            <summary>
            Sets the number of pages of the document.
            </summary>
            <param name="pages">
            The new number of pages of the document.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.ExtendedPrintDocument.PrintHeader(System.Drawing.Graphics)">
            <summary>
            Is called to paint the header.
            </summary>
            <param name="g">The graphic context.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.ExtendedPrintDocument.PrintFooter(System.Drawing.Graphics)">
            <summary>
            Is called to paint the footer.
            </summary>
            <param name="g">The graphic context.</param>
        </member>
        <member name="E:ILOG.Diagrammer.Printing.ExtendedPrintDocument.PrintPageContent">
            <summary>
            Occurs when the output to print for the content of the current page is needed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.ExtendedPrintDocument.PrintingArea">
            <summary>
            Gets the printing area (in 1/100 inch).
            </summary>
            <value>A <see cref="T:System.Drawing.RectangleF"/> that represents the printing area.</value>
            <remarks>This area is computed according to the margins given
            by the user.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.ExtendedPrintDocument.ClientPrintingArea">
            <summary>
            Gets the client printing area (in 1/100 inch).
            </summary>
            <value>A <see cref="T:System.Drawing.RectangleF"/> that represents the client printing area. The printing area
            without the header and footer.</value>
            <remarks>
            This area is the printing area without the header and footer
            areas.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.ExtendedPrintDocument.FrameSize">
            <summary>
            Gets or sets the size of the frame to print around the client area.
            </summary>
            <value>A <see cref="T:System.Drawing.RectangleF"/> that represents the size of 
            the frame to print around the client area.</value>
            <remarks>
            When the property <see cref="P:ILOG.Diagrammer.Printing.ExtendedPrintDocument.MustPrintFrame"/> is <see langword="true"/>
            a frame will be drawn around the printing area of each page. This
            property can be used to control the position and size of this frame.
            The default value is the client printing area.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.ExtendedPrintDocument.Pages">
            <summary>
            Gets the number of pages of the document.
            </summary>
            <value>The number of pages in the document.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.ExtendedPrintDocument.PageIndex">
            <summary>
            Gets the zero-based index of the current page being
            printed.
            </summary>
            <value>An integer that represents the zero-based 
            index of the page currently being printed.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.ExtendedPrintDocument.PrintingDate">
            <summary>
            Gets the date and time of the printing.
            </summary>
            <value>A <see cref="T:System.DateTime"/> object that represents the date and time of the 
            printing.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.ExtendedPrintDocument.Author">
            <summary>
            Gets or sets the author of the document.
            </summary>
            <value> A <see cref="T:System.String"/> that represents the author of the document.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.ExtendedPrintDocument.File">
            <summary>
            Gets or sets the name of the file associated with the document.
            </summary>
            <value>A <see cref="T:System.String"/> that represents the name of the file 
            associated with the document.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.ExtendedPrintDocument.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Printing.HeaderFooter"/> object that represents the text to print
            in the header of the document.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.ExtendedPrintDocument.Footer">
            <summary>
            Gets or sets the footer.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Printing.HeaderFooter"/> object that represents the text to print
            in the footer of the document.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.ExtendedPrintDocument.MustPrintFrame">
            <summary>
            Gets or sets a Boolean value to indicate whether a frame must be printed
            around the client printing area of each page.
            </summary>
            <value><see langword="true"/> if a frame must be printed around the
            client area of each page; <see langword="false"/> otherwise. The default
            value is <see langword="false"/>.</value>
            <remarks>When the value is <see langword="true"/> a frame will be 
            printed around the client area of the page. You can control the size
            of this frame by using the <see cref="P:ILOG.Diagrammer.Printing.ExtendedPrintDocument.FrameSize"/> property.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.ExtendedPrintDocument.IsOverThenDownOrder">
            <summary>
            Gets or sets a Boolean value to indicate in which order the pages are
            numbered.
            </summary>
            <value>A <see cref="T:System.Boolean"/> value to indicate in which order the pages are
            numbered.</value>
            <remarks>
            The pages are numbered horizontally then vertically when this
            property is <see langword="true"/>, otherwise they are numbered vertically then
            horizontally.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Printing.HeaderFooter">
             <summary>
             Represents the header or footer of an <see cref="T:ILOG.Diagrammer.Printing.ExtendedPrintDocument"/>.
             </summary>
             <remarks>
             <p>You can set the header and the footer of a <see cref="T:ILOG.Diagrammer.Printing.ExtendedPrintDocument"/>
             using the <see cref="P:ILOG.Diagrammer.Printing.ExtendedPrintDocument.Header"/> and 
             <see cref="P:ILOG.Diagrammer.Printing.ExtendedPrintDocument.Footer"/> properties.</p>
             <p>A header or footer is defined by three text sections. The texts will be drawn on
             the left, center and right area of the header. Each text can have several lines and
             may contain some predefined patterns that will be translated to values of the
             document that is printed. Such patterns exist for the page number, the number of pages in the document,
             the file name, the document name, the author, the date and time.</p>
             </remarks>
             <example>
             <para lang="cs,vbnet">The following example creates a print document
             that prints a footer showing the page number on each page.</para>
             <code lang="cs">
             ExtendedPrintDocument CreatePrintDocument()
             {
                 ExtendedPrintDocument document = new ExtendedPrintDocument();
                 document.Header = new Header(null, HeaderFooter.PagePattern, null);
                 return document;
             }
            </code>
             <code lang="vbnet">
             Function CreatePrintDocument() As ExtendedPrintDocument 
                 Dim document As New ExtendedPrintDocument 
                 document.Header = new Header(null, HeaderFooter.PagePattern, null)
                 Return document 
             End Function
             </code>
            </example>
             <seealso cref="T:ILOG.Diagrammer.Printing.ExtendedPrintDocument"/>
        </member>
        <member name="F:ILOG.Diagrammer.Printing.HeaderFooter.PagePattern">
            <summary>
            The pattern for the page number.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Printing.HeaderFooter.PagesPattern">
            <summary>
            The pattern for the number of pages in the document.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Printing.HeaderFooter.DatePattern">
            <summary>
            The pattern for the printing date.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Printing.HeaderFooter.TimePattern">
            <summary>
            The pattern for the printing time.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Printing.HeaderFooter.FileNamePattern">
            <summary>
            The pattern for the name of the file associated with the document.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Printing.HeaderFooter.DocumentPattern">
            <summary>
            The pattern for the name of the document.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Printing.HeaderFooter.AuthorPattern">
            <summary>
            The pattern for the name of the author of the document.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.HeaderFooter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Printing.HeaderFooter"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.HeaderFooter.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Printing.HeaderFooter"/> class.
            </summary>
            <param name="left">The text printed on the left of the page.</param>
            <param name="center">The text printed on the center of the page.</param>
            <param name="right">The text printed on the right of the page.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.HeaderFooter.Print(System.Drawing.Graphics,System.Drawing.RectangleF,ILOG.Diagrammer.Printing.ExtendedPrintDocument)">
            <summary>
            Prints this header/footer object.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object where to print.</param>
            <param name="bounds">
            A <see cref="T:System.Drawing.RectangleF"/> structure that specifies the location of the drawn text.
            </param>
            <param name="doc">
            The <see cref="T:ILOG.Diagrammer.Printing.ExtendedPrintDocument"/> currently being printed.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.HeaderFooter.AddPattern(System.String,ILOG.Diagrammer.Printing.HeaderFooter.GetReplacingValue)">
            <summary>
            Adds a new pattern with a delegate to compute the replacing value.
            </summary>
            <param name="pattern">The new pattern to be replaced.</param>
            <param name="func">
            The delegate of type <see cref="T:ILOG.Diagrammer.Printing.HeaderFooter.GetReplacingValue"/> to
            compute the replacing value.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.HeaderFooter.Clone">
            <summary>
            Copies the <see cref="T:ILOG.Diagrammer.Printing.HeaderFooter"/>.
            </summary>
            <returns>A new <see cref="T:ILOG.Diagrammer.Printing.HeaderFooter"/> instance.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.HeaderFooter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current
            <see cref="T:ILOG.Diagrammer.Printing.HeaderFooter"/>.
            </summary>
            <returns>
            Returns a <strong>String</strong> that represents the current
            <see cref="T:ILOG.Diagrammer.Printing.HeaderFooter"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.HeaderFooter.ToString(ILOG.Diagrammer.Printing.ExtendedPrintDocument)">
            <summary>
            Converts the header or footer to a pretty string replacing the patterns
            by values from the document.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.HeaderFooter.LeftFont">
            <summary>
            Gets or sets the font for the left text.
            </summary>
            <value>A <see cref="T:System.Drawing.Font"/> object that defines the font of the left text of the header.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.HeaderFooter.CenterFont">
            <summary>
            Gets or sets the font for the centered text.
            </summary>
            <value>A <see cref="T:System.Drawing.Font"/> object that defines the font of the center text of the header.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.HeaderFooter.RightFont">
            <summary>
            Gets or sets the font for the right text.
            </summary>
            <value>A <see cref="T:System.Drawing.Font"/> object that defines the font of the right text of the header.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.HeaderFooter.LeftText">
            <summary>
            Gets or sets the left text.
            </summary>
            <value>A <see cref="T:System.String"/> that represents the text to print on the left.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.HeaderFooter.CenterText">
            <summary>
            Gets or sets the centered text.
            </summary>
            <value>A <see cref="T:System.String"/> that represents the text to print on the center.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.HeaderFooter.RightText">
            <summary>
            Gets or sets the right text.
            </summary>
            <value>A <see cref="T:System.String"/> that represents the text to print on the right.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.HeaderFooter.Height">
            <summary>
            Gets the height of this object without the margin.
            </summary>
            <value>The height of the header.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.HeaderFooter.Color">
            <summary>
            Gets or sets the color of the header or footer.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the color
            of the header or footer. The default value is <see cref="P:System.Drawing.Color.Black">Color.Black</see>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.HeaderFooter.Margin">
            <summary>
            Gets or sets the margin between this object and the page frame.
            </summary>
            <value>The margin between this object and the page frame.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Printing.HeaderFooter.GetReplacingValue">
            <summary>
            Achieves the computation of the value to replace a pattern by.
            </summary>
            <param name="document">A <see cref="T:ILOG.Diagrammer.Printing.ExtendedPrintDocument">document</see> that contains
            the data to print.
            </param>
        </member>
        <member name="T:ILOG.Diagrammer.LinkCrossingsEnableMode">
            <summary>
            Specifies whether link crossing detection is enabled or disabled for a container.
            </summary>
            <remarks>Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.LinkCrossings.Enabled"/> property
            of a <see cref="T:ILOG.Diagrammer.LinkCrossings"/> object.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.LinkCrossingsEnableMode.LikeParent">
            <summary>
            Specifies that link crossing detection is enabled if it
            is enabled for the container's parent.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.LinkCrossingsEnableMode.Enabled">
            <summary>
            Specifies that link crossing detection is enabled for this container,
            and for all sub-containers whose <see cref="F:ILOG.Diagrammer.LinkCrossingsEnableMode.Enabled"/> property is
            equals to <see cref="F:ILOG.Diagrammer.LinkCrossingsEnableMode.LikeParent"/>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.LinkCrossingsEnableMode.Disabled">
            <summary>
            Specifies that link crossing detection is disabled for this container,
            and for all sub-containers whose <see cref="F:ILOG.Diagrammer.LinkCrossingsEnableMode.Enabled"/> property is
            equals to <see cref="F:ILOG.Diagrammer.LinkCrossingsEnableMode.LikeParent"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.LinkCrossingsStyle">
            <summary>
            Defines the way link crossings are drawn.
            </summary>
            <remarks>Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.LinkCrossings.Style"/> property
            of a <see cref="T:ILOG.Diagrammer.LinkCrossings"/> object.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.LinkCrossingsStyle.Default">
            <summary>
            The link crossing style is inherited from the parent <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.LinkCrossingsStyle.None">
            <summary>
            Links cross normally, no special link crossings are drawn.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.LinkCrossingsStyle.Tunnel">
            <summary>
            Tunnel crossing: an arc is drawn "over" the crossed link.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.LinkCrossingsStyle.Bridge">
            <summary>
            Bridge crossing: the link is cut at the crossing, and has two short lines orthogonal to the link.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.LinkCrossingsStyle.Cut">
            <summary>
            No shape: the link is just cut at the crossing.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.LinkCrossingsOrientation">
            <summary>
            Defines the preferred orientation of link crossings.
            </summary>
            <remarks>Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.LinkCrossings.Orientation"/> property
            of a <see cref="T:ILOG.Diagrammer.LinkCrossings"/> object.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.LinkCrossingsOrientation.Horizontal">
            <summary>
            Specifies that the link crossings should be placed on horizontal segments
            when possible.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.LinkCrossingsOrientation.Vertical">
            <summary>
            Specifies that the link crossings should be placed on vertical segments
            when possible.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.LinkCrossingsOrientation.Any">
            <summary>
            Specifies that the orientation of link crossings does not matter, and that
            the link crossings will be placed on the first segment for which the
            crossing is detected.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.LinkCrossings">
            <summary>
            Regroups parameters for the link crossing detection.
            </summary>
            <remarks>You specify the link crossing parameters for links inside a <see cref="T:ILOG.Diagrammer.GraphicContainer"/>
            through the <see cref="P:ILOG.Diagrammer.GraphicContainer.LinkCrossings"/> property of a <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.LinkCrossings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.LinkCrossings"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.LinkCrossings.ToString">
            <summary>
            This member overrides <see cref="M:System.Object.ToString">Object.ToString</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.LinkCrossings.Enabled">
            <summary>
            Indicates whether link crossing detection is enabled for this graphic container.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.LinkCrossingsEnableMode"/> values. The default value
            is <see cref="F:ILOG.Diagrammer.LinkCrossingsEnableMode.LikeParent"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.LinkCrossings.Style">
            <summary>
            Gets or sets the style used to draw link crossings.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.LinkCrossingsStyle"/> values. The default value
            is <see cref="F:ILOG.Diagrammer.LinkCrossingsStyle.Tunnel"/>.</value>
            <seealso cref="P:ILOG.Diagrammer.LinkCrossings.Size"/>
            <seealso cref="P:ILOG.Diagrammer.LinkCrossings.Orientation"/>
        </member>
        <member name="P:ILOG.Diagrammer.LinkCrossings.Size">
            <summary>
            Gets or sets the size of the link crossings.
            </summary>
            <value>A <see cref="T:System.Single"/> value that represents the size of the link crossings.
            The default value is <strong>10</strong>.</value>
            <seealso cref="P:ILOG.Diagrammer.LinkCrossings.Style"/>
            <seealso cref="P:ILOG.Diagrammer.LinkCrossings.Orientation"/>
        </member>
        <member name="P:ILOG.Diagrammer.LinkCrossings.Orientation">
            <summary>
            Gets or sets the link crossing orientation for this graphic container.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.LinkCrossingsOrientation"/> values. The
            default value is <see cref="F:ILOG.Diagrammer.LinkCrossingsOrientation.Horizontal"/>.</value>
            <seealso cref="P:ILOG.Diagrammer.LinkCrossings.Style"/>
            <seealso cref="P:ILOG.Diagrammer.LinkCrossings.Size"/>
        </member>
        <member name="T:ILOG.Diagrammer.CrossingManager">
            <summary>
            The <see cref="T:ILOG.Diagrammer.CrossingManager"/> class computes the crossings of a set of polyline objects in a canvas.
            The polyline objects must implement the ICrossable interface (for now, the interface is
            implemented only by <see cref="T:ILOG.Diagrammer.Graphic.Link"/> objects).
            The crossing manager uses an implementation of the Bentley-Ottmann "sweep-line" algorithm,
            which has an execution time of O((n+k)log(n)) (n = # of segments, k = # of intersections).
            The algorithm is run every time the contents of the canvas change. When crossing points are
            detected, the crossing manager notifies crossable objects by setting their CrossingPoints property.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CrossingManager.ComputeCrossings">
            <summary>
            Performs the sweep-line algorithm on the segments of all the
            "crossable" objects (that is, objects that implement the
            ICrossable interface) contained in the specified Canvas, and
            recursively in the sub-Canvas.
            The crossings of each object are stored in the object's
            CrossingPoints property (if they have changed).
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CrossingManager.AddSegments(ILOG.Diagrammer.ICrossable,ILOG.Diagrammer.Point2D[])">
            <summary>
            Adds a set of segments on which to perform the algorithm.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CrossingManager.Sweep">
            <summary>
            Performs the sweep-line algorithm on the current segments.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.CrossingPoint">
            <summary>
            Represents a crossing point between
            two <see cref="T:ILOG.Diagrammer.ICrossable"/> objects, or the left or right point of a
            <see cref="T:ILOG.Diagrammer.CrossingSegment"/>.
            </summary>
            <remarks>
            A <see cref="T:ILOG.Diagrammer.CrossingPoint"/> object represents a crossing point between
            two <see cref="T:ILOG.Diagrammer.ICrossable"/> objects, or the left or right point of a
            <see cref="T:ILOG.Diagrammer.CrossingSegment"/>.
            When the <see cref="P:ILOG.Diagrammer.LinkCrossings.Enabled"/> property of a <see cref="T:ILOG.Diagrammer.GraphicContainer"/> object
            is set to <see langword="true"/>, the crossing points are computed and sent to each
            <see cref="T:ILOG.Diagrammer.ICrossable"/> object through its <see cref="P:ILOG.Diagrammer.ICrossable.CrossingPoints"/> property.
            Each <see cref="T:ILOG.Diagrammer.ICrossable"/> object can then display the crossing points as it wishes.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.CrossingPoint.ToString">
            <summary>
            This member overrides <see cref="M:System.Object.ToString">Object.ToString</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CrossingPoint.CompareTo(System.Object)">
            <summary>
            Compares this crossing point with another crossing point.
            </summary>
            <remarks>
            The ordering of points is used internally by the crossing detection
            algorithm.
            </remarks>
            <param name="obj">The other object to compare this object to.</param>
        </member>
        <member name="M:ILOG.Diagrammer.CrossingPoint.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if and only if both crossing points have the same location.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CrossingPoint.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.CrossingPoint.Point">
            <summary>
            Gets the location of the crossing point.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</value>
        </member>
        <member name="P:ILOG.Diagrammer.CrossingPoint.Segment1">
            <summary>
            Gets the first segment of the intersection.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.CrossingSegment"/> instance.</value>
            <remarks>
            <para>
            If this point is an intersection point, the value for this property
            is the first of the two segments that intersect.
            </para>
            <para>
            If this point is the end point of a segment, the value of this property
            is the segment and <see cref="P:ILOG.Diagrammer.CrossingPoint.Segment2"/> is <see langword="null"/>.
            </para>
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.CrossingPoint.Segment2">
            <summary>
            Gets the second segment of the intersection.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.CrossingSegment"/> instance.</value>
            <remarks>
            <para>
            If this point is an intersection point, the value for this property
            is the second of the two segments that intersect.
            </para>
            <para>
            If this point is the end point of a segment, this property
            is <see langword="null"/>.
            </para>
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.CrossingSegment">
            <summary>
            Represents one of the two segments
            that intersect at a <see cref="T:ILOG.Diagrammer.CrossingPoint"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CrossingSegment.CompareTo(System.Object)">
            <summary>
            Compares this segment with another segment.
            </summary>
            <remarks>
            The ordering of segments is used internally by the crossing detection
            algorithm.
            </remarks>
            <param name="obj">The other object to compare this object to.</param>
        </member>
        <member name="M:ILOG.Diagrammer.CrossingSegment.ToString">
            <summary>
            This member overrides <see cref="M:System.Object.ToString">Object.ToString</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CrossingSegment.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.CrossingSegment.Owner">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.ICrossable"/> object that is segment belongs to.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.ICrossable"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.CrossingSegment.PolylineIndex">
            <summary>
            Gets the index of this segment in the path of the <see cref="T:ILOG.Diagrammer.ICrossable"/>.
            </summary>
            <value>An <see cref="T:System.Int32"/> value that represents the index of this segment
            in the path of the <see cref="T:ILOG.Diagrammer.ICrossable"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.CrossingSegment.Left">
            <summary>
            Gets the left point of this segment, that is, the smaller end point
            in the sense of the <see cref="M:ILOG.Diagrammer.CrossingPoint.CompareTo(System.Object)"/> method.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.CrossingPoint"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.CrossingSegment.Right">
            <summary>
            Gets the right point of this segment, that is, the greater end point
            in the sense of the <see cref="M:ILOG.Diagrammer.CrossingPoint.CompareTo(System.Object)"/> method.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.CrossingPoint"/> instance.</value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode">
            <summary>
            The execution modes of the Recursive layout.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.#ctor"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.#ctor(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.#ctor(ILOG.Diagrammer.GraphLayout.ILayoutProvider)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RecursiveLayout.GetLayoutMode"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.ReferenceLayoutMode">
            <summary>
            Layout mode with reference layout.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.InternalProviderMode">
            <summary>
            Layout mode with internal layout provider.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.RecursiveLayoutMode.SpecifiedProviderMode">
            <summary>
            Layout mode with explicitly specified provider.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil">
            <summary>
            This class regroups some graph layout utilities.
            </summary>
            <summary>
            This class regroups some graph layout utilities.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.IsTree(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object)">
            <summary>
            Returns <see langword="true"/> if the connected component of the
            graph attached to the layout instance that contains
            <paramref name="startNode"/> is a pure tree (with no cycles).
            </summary>
            <remarks>
            Returns <see langword="false"/> if this component contains at least
            one cycle. 
            <p>
            Self-links (that is, links with the same origin and destination
            node) are ignored during this test. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.IsTree(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.IsTree(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)">
            <summary>
            Returns <see langword="true"/> if the connected component of
            <paramref name="graphModel"/> that contains
            <paramref name="startNode"/> is a pure tree (with no cycles).
            </summary>
            <remarks>
            Returns <see langword="false"/> if this component contains at least
            one cycle. 
            <p>
            Self-links (that is, links with the same origin and destination
            node) are ignored during this test. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.IsTree(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.IsConnected(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Checks whether a graph model is connected or not.
            </summary>
            <remarks>
            The method returns <see langword='true'/> if
            <paramref name='graphModel'/> is connected (that is, a graph where
            there is a path connecting each pair of nodes) and returns
            <see langword='false'/> otherwise. 
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.GetConnectedComponents(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Returns a graph model.
            </summary>
            <remarks> 
            <p>
            If the argument <paramref name="graphModel"/> represents a connected
            graph (see <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.IsConnected(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>), the graph
            model is returned unchanged. Otherwise, it returns a new graph model
            in which only nodes are stored (no links). Each node of the new
            graph model is itself a graph model (instance of
            <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/>) and contains the nodes and the links of a
            connected component of the graph model passed as an argument. 
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfNodeOverlaps(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Returns the number of overlaps between nodes in the graph model.
            </summary>
            <remarks>
            It takes the bounding box of the nodes into account, but not the
            precise shape. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfNodeLinkOverlaps(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfLinkOverlaps(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfLinkCrossings(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfLinkBends(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfNodeLinkOverlaps(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Returns the number of overlaps between a node and a link in the
            graph model.
            </summary>
            <remarks>
            It takes the bounding box of the nodes into account, but not the
            precise shape. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfNodeOverlaps(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfLinkOverlaps(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfLinkCrossings(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfLinkBends(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfLinkBends(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Returns the number of bends of all links in the graph model.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfNodeOverlaps(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfNodeLinkOverlaps(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfLinkOverlaps(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfLinkCrossings(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfLinkCrossings(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Returns the number of crossings between two links in the graph
            model.
            </summary>
            <remarks>
            This does not include the number of link overlaps: Two link segments
            cross if they are not parallel but have a common point. Two link
            segments overlap if they are parallel and have a common point. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfNodeOverlaps(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfNodeLinkOverlaps(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfLinkOverlaps(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfLinkBends(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfLinkOverlaps(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Returns the number of overlaps between two links in the graph model.
            </summary>
            <remarks>
            This does not include the number of link crossings: Two link
            segments cross if they are not parallel but have a common point. Two
            link segments overlap if they are parallel and have a common point.
            It assumes the links have a width of at least 0.5. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfNodeOverlaps(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfNodeLinkOverlaps(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfLinkCrossings(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.ComputeNumberOfLinkBends(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.GetLayouts(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.ILayoutProvider,System.Boolean)">
            <summary>
            Returns the instances of GraphLayout for the nested graph
            encapsulated by the input graph model.
            </summary>
            <remarks>
            It returns the layout instance for this graph, and recursively
            for all subgraphs. The order of the enumerator can be pre-order
            (that is, the layout of parent graph comes before the layout of
            the subgraphs) or post-order (that is, the layout of the subgraphs
            comes before the layout of the parent graph).
            </remarks>
            <param name="model">The graph model.
            </param>
            <param name="layoutProvider">The object that provides a layout
            instance to be used for laying out each subgraph.
            </param>
            <param name="preOrder">If <see langword="true"/>), the layout
            instances are returned in pre-order, otherwise in post-order.
            </param>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.LayoutsPreorderEnumerator">
            <summary>
            Enumerator over the layouts of a nested model in preorder.
            </summary>
            <remarks>
            Careful: This is not Java enumerator style semantics.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphLayoutUtil.LayoutsPostorderEnumerator">
            <summary>
            Enumerator over the layouts of a nested model in postorder.
            </summary>
            <remarks>
            Careful: This is not Java enumerator style semantics.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.SVG.Css.Selector">
            <summary>
            
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.Selector.DESCENDANT">
            Transition: direct descendant 
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.Selector.CHILD">
            Transition: any sub level child 
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.Selector.ADJACENT">
            Transition: brother 
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.Selector._root">
            (mandatory) root, either *, Type, ID 
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.Selector._isID">
            (mandatory) true if there is an ID selector 
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.Selector._id">
            the selected id 
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.Selector._classes">
            (optional) class 
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.Selector._pseudo">
            (optional) pseudo-class 
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.Selector._attributes">
            (optional) attributes 
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.Selector._transition">
            (optional) previous transition 
        </member>
        <member name="T:ILOG.Diagrammer.GradientStopCollection">
            <summary>
            Defines the collection of <see cref="T:ILOG.Diagrammer.GradientStop"/> objects in a <see cref="T:ILOG.Diagrammer.GradientFill"/>.
            </summary>
            <remarks>
            <see cref="T:ILOG.Diagrammer.GradientStopCollection"/> allows specifying the intermediate colors 
            of a multi-color <see cref="T:ILOG.Diagrammer.GradientFill"/>. 
            You add <see cref="T:ILOG.Diagrammer.GradientStop"/> to define the position 
            and color of a gradient through the <see cref="P:ILOG.Diagrammer.GradientFill.GradientStops"/> property
            of a <see cref="T:ILOG.Diagrammer.GradientFill"/>.
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GradientFill.GradientStops"/>
        </member>
        <member name="F:ILOG.Diagrammer.GradientStopCollection._serialInfo">
            <summary>
            Temporary store info on deserialization
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GradientStopCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.GradientFill"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GradientStopCollection.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GradientStopCollection.Equals(System.Object)">
            <summary>
            This member overrides <see cref="M:System.Object.Equals(System.Object)">Object.Equals</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GradientStopConverter">
            <summary>
            Defines a type converter for the <see cref="T:ILOG.Diagrammer.GradientStop"/> class.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GradientStop">
            <summary>
            Represents a stop in a <see cref="T:ILOG.Diagrammer.GradientFill"/> object.
            </summary>
            <remarks>
            <see cref="T:ILOG.Diagrammer.GradientStop"/> represents the location and the color of an intermediate color
            in a <see cref="T:ILOG.Diagrammer.GradientFill"/>.
            <para>
            <see cref="T:ILOG.Diagrammer.GradientStop"/> holds a color through the <see cref="P:ILOG.Diagrammer.GradientStop.Color"/>
            property and the location of this color in the gradient through the <see cref="P:ILOG.Diagrammer.GradientStop.Offset"/>
            property.</para>
            <para>
            You add a new stop in a 
            gradient through the <see cref="P:ILOG.Diagrammer.GradientFill.GradientStops"/> property of a <see cref="T:ILOG.Diagrammer.GradientFill"/>.
            </para>
            </remarks>
            <example>
            For an example of <see cref="T:ILOG.Diagrammer.GradientStop"/> go to the <see cref="T:ILOG.Diagrammer.LinearGradientFill"/> class.
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.GradientStop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.GradientStop"/> class.
            </summary>
            <remarks>
            This constructor creates a stop with an offset 
            of zero and the color is <see cref="P:System.Drawing.Color.White"/>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GradientStop.#ctor(System.Drawing.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.GradientStop"/> class.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color"/> that represents the color of the gradient
            stop.</param>
            <param name="offset">The offset of the gradient stop. The value must be in the [0.1] range.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GradientStop.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GradientStop.Equals(System.Object)">
            <summary>
            This member overrides <see cref="M:System.Object.Equals(System.Object)">Object.Equals</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GradientStop.Color">
            <summary>
            Gets or sets the color of the gradient stop.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the color of the gradient
            stop. The default value is <see cref="P:System.Drawing.Color.White"/>
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GradientStop.Offset">
            <summary>
            Gets or sets the offset of the gradient stop.
            </summary>
            <value>
            A <see cref="T:System.Single"/> value in the [0..1] range that represents 
            the offset of the gradient stop.
            The default value is 0.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.BlendType">
            <summary>
            Represents the type of blend for a two-color gradient.
            </summary>
            <remarks>
            Use the values of this enumeration to specify the <see cref="P:ILOG.Diagrammer.GradientFill.BlendType"/>
            property of a <see cref="T:ILOG.Diagrammer.GradientFill"/>
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.BlendType.Linear">
            <summary>
            The linear blend type.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.BlendType.SigmaBell">
            <summary>
            The sigma bell type.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GradientFill">
            <summary>
            Defines an <see langword="abstract"/> base class for gradient fills.
            </summary>
            <remarks>
            <see cref="T:ILOG.Diagrammer.GradientFill"/> is the base class for gradient fill 
            such as <see cref="T:ILOG.Diagrammer.LinearGradientFill"/>
            and <see cref="T:ILOG.Diagrammer.PathGradientFill"/>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GradientFill.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.GradientFill"/> class.
            </summary>
            <remarks>This constructor creates a <see cref="T:ILOG.Diagrammer.GradientFill"/> object
            with the start color white and the end color black.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GradientFill.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.GradientFill"/> class using the specified parameters.
            </summary>
            <param name="startColor">A <see cref="T:System.Drawing.Color"/> that represents the start color of the gradient.</param>
            <param name="endColor">A <see cref="T:System.Drawing.Color"/> that represents the end color of the gradient.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GradientFill.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.GradientFill"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GradientFill.Clone">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.StyleBase.Clone">StyleBase.Clone</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GradientFill.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GradientFill.Equals(System.Object)">
            <summary>
            This member overrides <see cref="M:System.Object.Equals(System.Object)">Object.Equals</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GradientFill.BlendType">
            <summary>
            Gets or sets the type of blend for the gradient.
            </summary>
            <value>
            One of the <see cref="T:ILOG.Diagrammer.BlendType"/> values; the default value is <see cref="F:ILOG.Diagrammer.BlendType.Linear">Linear</see>
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GradientFill.CoordinateSpace">
            <summary>
            Gets or sets the coordinate space in which the gradient will be computed.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.CoordinateSpace"/> values.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GradientFill.StartColor">
            <summary>
            Gets or sets the start color of the gradient.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the start
            color of the gradient. The default value is <see cref="P:System.Drawing.Color.White"/>.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GradientFill.EndColor"/>
            <seealso cref="P:ILOG.Diagrammer.GradientFill.GradientStops"/>
        </member>
        <member name="P:ILOG.Diagrammer.GradientFill.EndColor">
            <summary>
            Gets or sets the end color of the gradient.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the end
            color of the gradient. The default value is <see cref="P:System.Drawing.Color.Black"/>.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GradientFill.StartColor"/>
            <seealso cref="P:ILOG.Diagrammer.GradientFill.GradientStops"/>
        </member>
        <member name="P:ILOG.Diagrammer.GradientFill.GradientStops">
            <summary>
            Gets the gradient stop collection of this gradient.
            </summary>
            <value>A collection of <see cref="T:ILOG.Diagrammer.GradientStop"/> instance.</value>
            <seealso cref="P:ILOG.Diagrammer.GradientFill.StartColor"/>
            <seealso cref="P:ILOG.Diagrammer.GradientFill.EndColor"/>
        </member>
        <member name="P:ILOG.Diagrammer.GradientFill.WrapMode">
            <summary>
            Gets or sets the wrap mode of the gradient.
            </summary>
            <value>One of the <see cref="T:System.Drawing.Drawing2D.WrapMode"/> values. The
            default value is <see cref="F:System.Drawing.Drawing2D.WrapMode.TileFlipXY"/>
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.LinearGradientFill">
            <summary>
            Defines a linear gradient fill.
            </summary>
            <remarks>
            <see cref="T:ILOG.Diagrammer.LinearGradientFill"/> allows to fill an area with a linear gradient.
            The linear gradient follows a gradient axis defined by two points the <see cref="P:ILOG.Diagrammer.LinearGradientFill.P1"/> and 
            <see cref="P:ILOG.Diagrammer.LinearGradientFill.P2"/> properties. 
            <br/>
            <see cref="T:ILOG.Diagrammer.LinearGradientFill"/> defines a starting color (<see cref="P:ILOG.Diagrammer.GradientFill.StartColor"/>
            property) and a ending color (<see cref="P:ILOG.Diagrammer.GradientFill.EndColor"/> property). The start color corresponds to
            the point defined by <see cref="P:ILOG.Diagrammer.LinearGradientFill.P1"/> and the end color to the point <see cref="P:ILOG.Diagrammer.LinearGradientFill.P2"/>. Additional
            colors can be added on the gradient axis through the <see cref="P:ILOG.Diagrammer.GradientFill.GradientStops"/>
            property.
            </remarks>
            <example>
            <para lang="cs,vbnet">
            The following example creates a Rect object with a linear gradient from the top-left corner of
            the rectangle to the bottom-right corner.
            </para>
            <code lang="cs">     
            Rect CreateRectWithLinearGradient()
            {
                Rect rectangle = new Rect(0, 0, 100, 100);
                LinearGradientFill myFill = new LinearGradientFill();
                myFill.P1 = new Point2D(0, 0);
                myFill.P2 = new Point2D(1, 1);
                myFill.StartColor = Color.Red;
                myFill.EndColor = Color.Blue;
                myFill.GradientStops.AddRange(
                    new GradientStop[] {
                      new GradientStop(Color.White, 0.25f),
                      new GradientStop(Color.Orange, 0.75f) });
                rectangle.Fill = myFill;
                return rectangle;
            }
            </code>
            <code lang="vbnet">
            Function CreateRectWithLinearGradient() As Rect 
                Dim rectangle As Rect = New Rect(0, 0, 100, 100) 
                Dim myFill As LinearGradientFill = New LinearGradientFill 
                myFill.P1 = New Point2D(0, 0) 
                myFill.P2 = New Point2D(1, 1) 
                myFill.StartColor = Color.Red 
                myFill.EndColor = Color.Blue 
                myFill.GradientStops.AddRange(New GradientStop() {_
                    New GradientStop(Color.White, 0.25F), _
                    New GradientStop(Color.Orange, 0.75F)}) 
                rectangle.Fill = myFill 
                Return rectangle 
            End Function
            </code>
            <para lang="cs,vbnet">This example will produce the following image:</para>
            <br/><img src="images/LinearGradientFill.png"/>
            </example>
        </member>
        <member name="F:ILOG.Diagrammer.LinearGradientFill.SVGCompliantDefaultValue">
            <summary>
            The default value for the <see cref="P:ILOG.Diagrammer.LinearGradientFill.SVGCompliant"/> property.
            </summary>
            <see langword="true"/> if the gradient definition is based on the SVG standard; otherwise <see langword="false"/>. The
            default value is <see langword="true"/>.      
        </member>
        <member name="M:ILOG.Diagrammer.LinearGradientFill.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.LinearGradientFill"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.LinearGradientFill.#ctor(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.LinearGradientFill"/> class using the specified parameters.
            </summary>
            <param name="p1">The point corresponding to the start color.</param>
            <param name="p2">The point corresponding to the end color.</param>
            <param name="startColor">The start <see cref="T:System.Drawing.Color"/> of the linear gradient.</param>
            <param name="endColor">The end <see cref="T:System.Drawing.Color"/> of the linear gradient.</param>
        </member>
        <member name="M:ILOG.Diagrammer.LinearGradientFill.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.LinearGradientFill"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.LinearGradientFill.GetBrush(ILOG.Diagrammer.Rectangle2D,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Fill.GetBrush(ILOG.Diagrammer.Rectangle2D,System.Drawing.Drawing2D.GraphicsPath)">Fill.GetBrush</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.LinearGradientFill.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.LinearGradientFill.Equals(System.Object)">
            <summary>
            This member overrides <see cref="M:System.Object.Equals(System.Object)">Object.Equals</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.LinearGradientFill.ToString">
            <summary>
            This member overrides <see cref="M:System.Object.ToString">Object.ToString</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.LinearGradientFill.SVGCompliant">
            <summary>
            Gets or sets a value indicating whether the gradient definition is based on the SVG standard.
            </summary>
            <value>
            <see langword="true"/> if the gradient definition is based on the SVG standard; otherwise <see langword="false"/>. The
            default value depends on the <see cref="F:ILOG.Diagrammer.LinearGradientFill.SVGCompliantDefaultValue"/> property.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.LinearGradientFill.GammaCorrection">
            <summary>
            Gets or sets a value indicating whether gamma correction is enabled on the <see cref="T:ILOG.Diagrammer.LinearGradientFill"/>.
            </summary>
            <value>
            <see langword="true"/> if gamma correction is enabled on the gradient; otherwise <see langword="false"/>. The
            default value is <see langword="false"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.LinearGradientFill.P1">
            <summary>
            Gets or sets the first point of the linear gradient.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Point2D"/> that corresponds to the first point of the linear gradient. This point corresponds to the
            <see cref="P:ILOG.Diagrammer.GradientFill.StartColor"/> color. Note that the point may be absolute or 
            relative to the bounding box of the current graphic object this depends on the value of the
            <see cref="T:ILOG.Diagrammer.CoordinateSpace"/> property. When the <see cref="P:ILOG.Diagrammer.GradientFill.CoordinateSpace"/> property is 
            set to <see cref="F:ILOG.Diagrammer.CoordinateSpace.ObjectBBox"/> the point (0,0)
            corresponds to the top-left corner of the object and (1,1) to the bottom-right corner of the object.
            </value>
            <seealso cref="P:ILOG.Diagrammer.LinearGradientFill.P2"/>
        </member>
        <member name="P:ILOG.Diagrammer.LinearGradientFill.P2">
            <summary>
            Gets or sets the second point of the linear gradient.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Point2D"/> that corresponds to the second point of the linear gradient. This point corresponds to the
            <see cref="P:ILOG.Diagrammer.GradientFill.EndColor"/> color. Note that the point may be absolute or 
            relative to the bounding box of the current graphic object this depends on the value of the
            <see cref="T:ILOG.Diagrammer.CoordinateSpace"/> property. When the <see cref="P:ILOG.Diagrammer.GradientFill.CoordinateSpace"/> property is 
            set to <see cref="F:ILOG.Diagrammer.CoordinateSpace.ObjectBBox"/> the point (0,0)
            corresponds to the top-left corner of the object and (1,1) to the bottom-right corner of the object.
            </value>
            <seealso cref="P:ILOG.Diagrammer.LinearGradientFill.P1"/>
        </member>
        <member name="T:ILOG.Diagrammer.PathGradientShape">
            <summary>
            Defines the shape of a <see cref="T:ILOG.Diagrammer.PathGradientFill"/> object.
            </summary>
            <remarks>Use the values of this enumeration to specify the shape of path gradient
            through the <see cref="P:ILOG.Diagrammer.PathGradientFill.GradientShape"/> property of a 
            <see cref="T:ILOG.Diagrammer.PathGradientFill"/>.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.PathGradientShape.Rectangle">
            <summary>
            A rectangular shape.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.PathGradientShape.Ellipse">
            <summary>
            An elliptic shape.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.PathGradientShape.CurrentShape">
            <summary>
            The current shape of the graphic object being drawn.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.PathGradientShape.Circle">
            <summary>
            A circular shape.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.PathGradientFill">
            <summary>
            Defines a path gradient fill.
            </summary>
            <remarks><see cref="T:ILOG.Diagrammer.PathGradientFill"/> allows painting an area with 
            a gradient from the outline of a path to the center of the path.
            <see cref="T:ILOG.Diagrammer.PathGradientFill"/> can have various shape. The shape can be an 
            ellipse, a circle, a rectangle or when the gradient is used to fill 
            a graphic object, the shape can be the shape of the graphic object itself.
            The shape of the gradient is defined by the <see cref="P:ILOG.Diagrammer.PathGradientFill.GradientShape"/> property.
            <see cref="T:ILOG.Diagrammer.PathGradientFill"/> defines a starting color (<see cref="P:ILOG.Diagrammer.GradientFill.StartColor"/>
            property) and a ending color (<see cref="P:ILOG.Diagrammer.GradientFill.EndColor"/> property). The start color corresponds to
            the outline of the path and the end color to the center of the path. Additional
            colors can be added between the center and the outline through the <see cref="P:ILOG.Diagrammer.GradientFill.GradientStops"/>
            property.
            </remarks>
            <example>  
            <para lang="cs,vbnet">The following example creates an ellipse filled with a path gradient.</para>
            <code lang="cs"> 
            Ellipse CreateEllipseWithPathGradientFill()
            {
                Ellipse ellipse = new Ellipse(0, 0, 100, 100);
                PathGradientFill myFill = new PathGradientFill();
                myFill.GradientShape = PathGradientShape.CurrentShape;
                myFill.StartColor = Color.Red;
                myFill.EndColor = Color.Blue;
                myFill.GradientStops.AddRange(
                    new GradientStop[] {
                    new GradientStop(Color.White, 0.25f),
                    new GradientStop(Color.Orange, 0.75f) });
                myFill.CenterPoint = new Point2D(.25f, .25f);
            
                ellipse.Fill = myFill;
                return ellipse;
            }
            </code>
            <code lang="vbnet">
            Function CreateEllipseWithPathGradientFill() As Ellipse 
                Dim ellipse As Ellipse = New Ellipse(0, 0, 100, 100)
            
                Dim myFill As PathGradientFill = New PathGradientFill 
                myFill.GradientShape = PathGradientShape.CurrentShape 
                myFill.StartColor = Color.Red 
                myFill.EndColor = Color.Blue 
                myFill.GradientStops.AddRange( _
                    New GradientStop() { _
                        New GradientStop(Color.White, 0.25F), _
                        New GradientStop(Color.Orange, 0.75F)}) 
                myFill.CenterPoint = New Point2D(0.25F, 0.25F) 
            
                ellipse.Fill = myFill 
                Return ellipse 
            End Function
            </code>
            <para lang="cs,vbnet">This example will produce the following image:</para>
            <br/><img src="images/PathGradientFill.png"/></example>
        </member>
        <member name="M:ILOG.Diagrammer.PathGradientFill.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.PathGradientFill"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathGradientFill.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.PathGradientFill"/> class with the specified colors.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathGradientFill.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.PathGradientFill"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathGradientFill.GetBrush(ILOG.Diagrammer.Rectangle2D,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Fill.GetBrush(ILOG.Diagrammer.Rectangle2D,System.Drawing.Drawing2D.GraphicsPath)">Fill.GetBrush</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathGradientFill.GetHashCode">
            <summary>
            Computes the hashcode for the object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathGradientFill.Equals(System.Object)">
            <summary>
            Tests whether <paramref name="obj"/> is a <see cref="T:ILOG.Diagrammer.PathGradientFill"/> with 
            the same definition of this <see cref="T:ILOG.Diagrammer.PathGradientFill"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathGradientFill.ToString">
            <summary>
            This member overrides <see cref="M:System.Object.ToString">Object.ToString</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.PathGradientFill.Transform">
            <summary>
            Gets or sets the affine transformation of the path gradient.
            </summary>
            <value>
            A <see cref="P:ILOG.Diagrammer.PathGradientFill.Transform"/> that represents the affine transformation of the path gradient.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.PathGradientFill.Bounds">
            <summary>
            Gets or sets the bounds of the path gradient.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> that represents the bounds of the path gradient.
            When the value of <see cref="T:ILOG.Diagrammer.CoordinateSpace"/> property is <see cref="F:ILOG.Diagrammer.CoordinateSpace.ObjectBBox"/> 
            (the default), the value of the <see cref="P:ILOG.Diagrammer.PathGradientFill.Bounds"/> property must be interpreted in the coordinate
            system of the graphic object being painted. In this coordinate system (0,0) is mapped to the top-left
            corner of the graphic object and (1,1) to the bottom-right corner of the graphic object. Thus
            when the <see cref="P:ILOG.Diagrammer.PathGradientFill.Bounds"/> property is (0,0,1,1) the path gradient covers the whole graphic object.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.PathGradientFill.CenterPoint">
            <summary>
            Gets or sets the center point of the gradient.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> structure that represents the
            center of the path gradient. The interpretation of the value
            depends on the value of the <see cref="P:ILOG.Diagrammer.GradientFill.CoordinateSpace"/> property.
            The default value is the point (0.5 0.5) and the default coordinate 
            type is <see cref="F:ILOG.Diagrammer.CoordinateSpace.ObjectBBox"/>
            so the center is the center of the graphic object.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.PathGradientFill.GradientShape">
            <summary>
            Gets or sets the shape of the gradient.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.PathGradientShape"/> values. The
            default value is <see cref="F:ILOG.Diagrammer.PathGradientShape.Ellipse"/>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.DockPanel">
             <summary>
             Defines an area within which you can arrange child elements by docking them on the left, top, bottom or center of the panel. 
             </summary>
             <remarks>
             <see cref="T:ILOG.Diagrammer.Graphic.DockPanel"/> is a panel in which you can arrange child elements docking them 
             on the left, top, bottom or center of the panel.
             Use the <see cref="M:ILOG.Diagrammer.Graphic.DockPanel.SetDock(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.DockStyle)"/> method to set the dock style of a child object. Use
             the <see cref="M:ILOG.Diagrammer.Graphic.Panel.SetHorizontalAlignment(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.HorizontalAlignment)"/> and <see cref="M:ILOG.Diagrammer.Graphic.Panel.SetVerticalAlignment(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.VerticalAlignment)"/> methods to
             specify how the child will be aligned in its docking position.</remarks>
             <example>
             <para lang="cs,vbnet">The following sample creates a <strong>DockPanel</strong> with two child, an ellipse
             docked in the center and a rectangle docked at the bottom.</para>
             <code lang="cs">
             DockPanel CreateDockPanel() {
                 DockPanel dockPanel = new DockPanel();
                      
                 dockPanel.BorderMargins = new Margins(2f);
                 dockPanel.ItemsMargins = new Margins(2f);
                 dockPanel.Rectangle = new Rectangle2D(0F, 0F, 200f, 200f);
            
                 Ellipse ellipse = new Ellipse();
                 dockPanel.SetDock(ellipse, DockStyle.Fill);
                 dockPanel.SetVerticalAlignment(ellipse, VerticalAlignment.Stretch);
                 dockPanel.SetHorizontalAlignment(ellipse, HorizontalAlignment.Stretch);
                 ellipse.Fill = new SolidFill(Color.Red);
            
                 Rect rect = new Rect();
                 dockPanel.SetDock(rect, DockStyle.Bottom);
                 rect.AutoSize = true;
                 rect.Text = "A DockPanel";
                 dockPanel.SetVerticalAlignment(rect, VerticalAlignment.Center);
                 dockPanel.SetHorizontalAlignment(rect, HorizontalAlignment.Stretch);
            
                 dockPanel.Objects.Add(ellipse);
                 dockPanel.Objects.Add(rect);
            
                 return dockPanel;   
             }
             </code>
             <code lang="vbnet">
             Function CreateDockPanel() As DockPanel 
                 Dim dockPanel As DockPanel = New DockPanel
             
                 dockPanel.BorderMargins = New Margins(2F) 
                 dockPanel.ItemsMargins = New Margins(2F) 
                 dockPanel.Rectangle = New Rectangle2D(0F, 0F, 200F, 200F) 
             
                 Dim ellipse As Ellipse = New Ellipse 
                 dockPanel.SetDock(ellipse, DockStyle.Fill) 
                 dockPanel.SetVerticalAlignment(ellipse, VerticalAlignment.Stretch) 
                 dockPanel.SetHorizontalAlignment(ellipse, HorizontalAlignment.Stretch) 
                 ellipse.Fill = New SolidFill(Color.Red)
             
                 Dim rect As Rect = New Rect 
                 dockPanel.SetDock(rect, DockStyle.Bottom) 
                 rect.AutoSize = True 
                 rect.Text = "A DockPanel" 
                 dockPanel.SetVerticalAlignment(rect, VerticalAlignment.Center) 
                 dockPanel.SetHorizontalAlignment(rect, HorizontalAlignment.Stretch) 
             
                 dockPanel.Objects.Add(ellipse) 
                 dockPanel.Objects.Add(rect) 
                 Return dockPanel 
             End Function
             </code>
             </example>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.DockPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.DockPanel"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.DockPanel.GetDock(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Gets the dock style of the specified child object.
            </summary>
            <param name="obj">A child object.</param>
            <returns>One of the <see cref="T:ILOG.Diagrammer.Graphic.DockStyle"/> values.</returns>
            <remarks>The default value for this property is <see cref="F:ILOG.Diagrammer.Graphic.DockStyle.None"/>.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.DockPanel.SetDock(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.DockStyle)">
            <summary>
            Sets the dock style for the specified child object.
            </summary>
            <param name="obj">A child object.</param>
            <param name="style">One of the <see cref="T:ILOG.Diagrammer.Graphic.DockStyle"/> values.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.DockPanel.OnDockChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.DockStyle,ILOG.Diagrammer.Graphic.DockStyle)">
            <summary>
            Is called when the dock style of the specified child object has changed.
            </summary>
            <param name="obj">A child object.</param>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.DockPanel.OnChildBoundsChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Control.OnChildBoundsChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">Control.OnChildBoundsChanged</see>.
            </summary>	
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.DockPanel.OnChildZOrderChanged(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildZOrderChanged(ILOG.Diagrammer.GraphicObject)">GraphicContainer.OnChildZOrderChanged</see>
            </summary>	
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.DockPanel.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">GraphicObject.GetPreferredSizeCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.DockPanel.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">GraphicContainer.CanResizeChild</see>.
            </summary>	
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.DockPanel.CanMoveChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanMoveChild(ILOG.Diagrammer.GraphicObject)">GraphicContainer.CanMoveChild</see>.
            </summary>	
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.DockPanel.CanRotateChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanRotateChild(ILOG.Diagrammer.GraphicObject)">GraphicContainer.CanRotateChild</see>.
            </summary>	
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.DockPanel.OnHorizontalAlignmentChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.HorizontalAlignment,ILOG.Diagrammer.Graphic.HorizontalAlignment)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Panel.OnHorizontalAlignmentChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.HorizontalAlignment,ILOG.Diagrammer.Graphic.HorizontalAlignment)">Panel.OnHorizontalAlignmentChanged</see>.
            </summary>	
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.DockPanel.OnVerticalAlignmentChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.VerticalAlignment,ILOG.Diagrammer.Graphic.VerticalAlignment)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Panel.OnVerticalAlignmentChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.VerticalAlignment,ILOG.Diagrammer.Graphic.VerticalAlignment)">Panel.OnVerticalAlignmentChanged</see>.
            </summary>	
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.DockPanel.OnMarginsChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Margins,ILOG.Diagrammer.Margins)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Panel.OnMarginsChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Margins,ILOG.Diagrammer.Margins)">Panel.OnMarginsChanged</see>.
            </summary>	
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.DockPanel.DoLayout(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Control.DoLayout(ILOG.Diagrammer.Rectangle2D)">Control.DoLayout</see>.
            </summary>	
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.DockPanel.HasPreferredWidth">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth">GraphicObject.HasPreferredWidth</see>.
            </summary>	
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.DockPanel.HasPreferredHeight">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight">GraphicObject.HasPreferredHeight</see>.
            </summary>	
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ICurveShape">
            <summary>
            Defines an interface implemented by graphic object that draws a cardinal spline curve.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ICurveShape.Tension">
            <summary>
            Gets or sets the tension of the curve.
            </summary>
            <value>A floating point value that represents the tension of the curve.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.CurveBase">
            <summary>
            Defines the <see langword="abstract"/> base class of graphic object 
            that draw a cardinal spline curve.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CurveBase.#ctor(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.CurveBase"/> class.
            </summary>
            <param name="points">An array of <see cref="T:ILOG.Diagrammer.Point2D"/> that
            represent the points of the curve.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CurveBase.OnTensionChanged(System.Single,System.Single)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.CurveBase.Tension"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.CurveBase.Stroke">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Graphic.Shape.Stroke">Shape.Stroke</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.CurveBase.Tension">
            <summary>
            Gets or sets the tension of the curve.
            </summary>
            <value>A float value that represents the tension of the curve. The default
            value is 0.5f.
            </value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.CurveBase.TensionChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.CurveBase.Tension"/> property has changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ClosedCurve">
            <summary>
            Defines a graphic object 
            that draws a closed cardinal spline curve.
            </summary>
            <remarks>
            <see cref="T:ILOG.Diagrammer.Graphic.ClosedCurve"/> defines a graphic object 
            that draws a closed cardinal spline curve. The points defining
            the curve are defined by the <see cref="P:ILOG.Diagrammer.Graphic.PolyPoints.Points"/> property.
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample creates a closed curve.</para>
            <code lang="cs">
            ClosedCurve CreateClosedCurve()
            {
                ClosedCurve curve = new ClosedCurve();
                curve.Points.AddRange(new Point2D[] {
                    new Point2D(0,0),
                    new Point2D(100, 50),
                    new Point2D(200,0),
                    new Point2D(300,50)
                });
                curve.Stroke = new Stroke(Color.Black, 2, DashStyle.Dash);
                curve.Fill = new SolidFill(Color.Blue);
                return curve;
            }
            </code>
            <code lang="vbnet">
            Function CreateClosedCurve() As ClosedCurve 
                Dim curve As ClosedCurve = New ClosedCurve 
                curve.Points.AddRange(New Point2D() {_
                              New Point2D(0, 0), _
                              New Point2D(100, 50), _
                              New Point2D(200, 0), _
                              New Point2D(300, 50)}) 
                curve.Stroke = New Stroke(Color.Black, 2, DashStyle.Dash) 
                curve.Fill = New SolidFill(Color.Blue) 
                Return curve 
            End Function
            </code>
            </example>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ClosedCurve._fillMode">
            <summary>
            fill mode of the path
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ClosedCurve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.ClosedCurve"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ClosedCurve.#ctor(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.ClosedCurve"/> class using
            the specified parameters.
            </summary>
            <param name="points">An array of <see cref="T:ILOG.Diagrammer.Point2D"/> that defines the 
            points of the curve.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ClosedCurve.OnFillModeChanged(System.Drawing.Drawing2D.FillMode,System.Drawing.Drawing2D.FillMode)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.ClosedCurve.FillMode"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ClosedCurve.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Shape.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">Shape.UpdateGraphicsPath</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ClosedCurve.FillMode">
            <summary>
            Gets or sets the filling mode of the closed curve.
            </summary>
            <value>One of the <see cref="T:System.Drawing.Drawing2D.FillMode"/> values. 
            The default value is <see cref="F:System.Drawing.Drawing2D.FillMode.Alternate"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ClosedCurve.FillModeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ClosedCurve.FillMode"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ClosedCurve.IsClosed">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Graphic.PolyPoints.IsClosed">PolyPoints.IsClosed</see>
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Curve">
            <summary>
            Defines a graphic object 
            that draw a cardinal spline curve.
            </summary>
            <remarks>
            <see cref="T:ILOG.Diagrammer.Graphic.Curve"/> defines a graphic object 
            that draw a cardinal spline curve. The points defining
            the curve are defined by the <see cref="P:ILOG.Diagrammer.Graphic.PolyPoints.Points"/> property.
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample creates a curve.</para>
            <code lang="cs">
            Curve CreateCurve()
            {
                Curve curve = new Curve();
                curve.Points.AddRange(new Point2D[] {
                    new Point2D(0,0),
                    new Point2D(100, 50),
                    new Point2D(200,0),
                    new Point2D(300,50)
                });
                curve.Stroke = new Stroke(Color.Black, 2, DashStyle.Dash);
                return curve;
            }
            </code>
            <code lang="vbnet">
            Function CreateCurve() As Curve 
                Dim curve As Curve = New Curve 
                curve.Points.AddRange(New Point2D() {_
                              New Point2D(0, 0), _
                              New Point2D(100, 50), _
                              New Point2D(200, 0), _
                              New Point2D(300, 50)}) 
                curve.Stroke = New Stroke(Color.Black, 2, DashStyle.Dash) 
                Return curve 
            End Function
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Curve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Curve"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Curve.#ctor(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Curve"/> class using
            the specified parameters.
            </summary>
            <param name="points">An array of <see cref="T:ILOG.Diagrammer.Point2D"/> that defines the 
            points of the curve.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Curve.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Shape.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">Shape.UpdateGraphicsPath</see>
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.BezierCurve">
             <summary>
             Defines a graphic object that draws a bezier curve.
             </summary>
             <remarks>
             A <see cref="T:ILOG.Diagrammer.Graphic.BezierCurve"/> object is a graphic object that displays a bezier curve. The points defining
             the curve are defined by the <see cref="P:ILOG.Diagrammer.Graphic.PolyPoints.Points"/> property.
             </remarks>
             <example>
             <para lang="cs,vbnet">The following sample creates a bezier curve.</para>
             <code lang="cs">
             BezierCurve CreateBezier()
             {
                 BezierCurve bezier = new BezierCurve();
                 bezier.Points.AddRange(new Point2D[] {
                      new Point2D(0,0),
                      new Point2D(100, 100),
                      new Point2D(200,0),
                      new Point2D(300,100)
                 });
                 bezier.Stroke = new Stroke(Color.Black, 2, DashStyle.Dash);
                 return bezier;
             }
            </code>
             <code lang="vbnet">
             Function CreateBezier() As BezierCurve 
                Dim bezier As BezierCurve = New BezierCurve 
                bezier.Points.AddRange(New Point2D() {_
                     New Point2D(0, 0), _
                     New Point2D(100, 100), _
                     New Point2D(200, 0), _
                     New Point2D(300, 100)}) 
                bezier.Stroke = New Stroke(Color.Black, 2, DashStyle.Dash) 
                Return bezier 
             End Function
             </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.BezierCurve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.BezierCurve"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.BezierCurve.#ctor(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.BezierCurve"/> class using
            the specified parameters.
            </summary>
            <param name="points">An array of <see cref="T:ILOG.Diagrammer.Point2D"/> that defines the 
            points of the curve.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.BezierCurve.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Shape.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">Shape.UpdateGraphicsPath</see>
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.BezierSelectionGraphic">
            <summary>
            The selection class dedicated to <see cref="T:ILOG.Diagrammer.Graphic.BezierCurve"/> objects.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.BezierSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.BezierSelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.BezierSelectionGraphic.IsTypeSupported(System.Type)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.SelectionGraphic.IsTypeSupported(System.Type)">SelectionGraphic.IsTypeSupported</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.BezierSelectionGraphic.PaintCore(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)">GraphicObject.PaintCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.BezierSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">DefaultSelectionGraphic.GetHandleDescription</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.BezierSelectionGraphic.CanAddSelectedObjectPoints">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.CanAddSelectedObjectPoints">PolyPointsSelectionGraphic.CanAddSelectedObjectPoints</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.BezierSelectionGraphic.CanRemoveSelectedObjectPoints">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.CanRemoveSelectedObjectPoints">PolyPointsSelectionGraphic.CanRemoveSelectedObjectPoints</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor">
            <summary>
            An interactor that creates shapes defined from a rectangle.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.RectFactory">
            <summary>
            A factory that creates <see cref="T:ILOG.Diagrammer.Graphic.Rect"/> instances.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.EllipseFactory">
            <summary>
            A factory that creates <see cref="T:ILOG.Diagrammer.Graphic.Ellipse"/> instances.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.ArcFactory">
            <summary>
            A factory that creates <see cref="T:ILOG.Diagrammer.Graphic.Arc"/> instances.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.PieFactory">
            <summary>
            A factory that creates <see cref="T:ILOG.Diagrammer.Graphic.Pie"/> instances.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.DefaultShapeStroke">
            <summary>
            The default stroke set on the new shape.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.DefaultShapeFill">
            <summary>
            The default fill set on the new shape.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor._factory">
            <summary>
            The IRectangularShapeFactory factory.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor._defaultStroke">
            <summary>
            the default stroke of the created shape
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor._defaultFill">
            <summary>
            the default fill of the created shape
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor"/>  class.
            </summary>
            <remarks>This constructor configures the interactor so that it triggers the interaction
            on <see cref="F:System.Windows.Forms.MouseButtons.Left"/> and it creates <see cref="T:ILOG.Diagrammer.Graphic.Rect"/> shapes.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.#ctor(System.Windows.Forms.MouseButtons)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor"/>  class.
            </summary>
            <remarks>This constructor configures the interactor so that it triggers the interaction
            on the specified button and it creates <see cref="T:ILOG.Diagrammer.Graphic.Rect"/> shapes.</remarks>
            <param name="button">The mouse button that starts the interaction.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.#ctor(ILOG.Diagrammer.Windows.Forms.IGraphicObjectFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor"/>  class.
            </summary>
            <remarks>This constructor configures the interactor so that it triggers the interaction
            on <see cref="F:System.Windows.Forms.MouseButtons.Left"/> and it creates shapes of the specified type.</remarks>
            <param name="shapeFactory">The factory that creates the shape.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.#ctor(ILOG.Diagrammer.Windows.Forms.IGraphicObjectFactory,System.Windows.Forms.MouseButtons)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor"/> class.
            </summary>
            <remarks>This constructor configures the interactor so that it triggers the interaction
            on the specified button and it creates shapes of the specified type.</remarks>
            <param name="buttons">The mouse button that starts the interaction.</param>
            <param name="shapeFactory">The factory that creates the shape.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.OnViewChanged(ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs)">
            <summary>
            Invoked when this interactor is connected to or disconnected from a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.OnSnapToGridChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.SnapToGrid"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>SnapToGrid</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.OnCreateOnClickChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.CreateOnClick"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>CreateOnClick</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.ShouldSerializeFactory">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.Factory"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.ResetFactory">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.Factory"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.OnFactoryChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.Factory"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>Factory</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.ShouldSerializeDefaultStroke">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.DefaultStroke"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.ResetDefaultStroke">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.DefaultStroke"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.OnDefaultStrokeChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.DefaultStroke"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>DefaultStroke</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.ShouldSerializeDefaultFill">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.DefaultFill"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.ResetDefaultFill">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.DefaultFill"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.OnDefaultFillChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.DefaultFill"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>DefaultFill</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.OnObjectCreated(ILOG.Diagrammer.Windows.Forms.GraphicObjectCreatedEventArgs)">
            <summary>
            Invoked when a <see cref="T:ILOG.Diagrammer.GraphicObject"/> has been created.
            </summary>
            <param name="e">An <see cref="T:ILOG.Diagrammer.Windows.Forms.GraphicObjectCreatedEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.ShouldSerializeCursor">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.Cursor"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.ResetCursor">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.Cursor"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.OnCursorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.Cursor"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>Cursor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">ViewInteractor.OnKeyDown</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnKeyUp(System.Windows.Forms.KeyEventArgs)">ViewInteractor.OnKeyUp</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.OnAspectRatioChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DragRectangleInteractor.AspectRatio"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>AspectRatio</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.GetTargetContainer(System.Drawing.Point,ILOG.Diagrammer.GraphicObject)">
            <summary>
            Returns the container in which the object will be created.
            </summary>
            <param name="p">A <see cref="T:System.Drawing.Point"/> structure.</param>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> to drop.</param>
            <returns>The <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance at the specified location.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.DoIt">
            <summary>
            Invoked when the interaction is validated.
            </summary>
            <remarks>This method is invoked when the mouse button that started the interactor
            is released to perform the interaction.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.CreateGraphicObject(System.IServiceProvider)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.
            </summary>
            <remarks>You specificy the type of <see cref="T:ILOG.Diagrammer.Graphic.IRectangularShape"/> objects
            by means of the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.Factory"/> property.</remarks>
            <returns>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.AddGraphicObject(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Adds the specified shape to the view container.
            </summary>
            <param name="obj">The object to add.</param>
            <param name="container">The <see cref="T:ILOG.Diagrammer.GraphicContainer"/> to add the object to.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.UpdateStatusBarText">
            <summary>
            This method overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.UpdateStatusBarText">ViewInteractor.UpdateStatusBarText</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.StartInteraction">
            <summary>
            Invoked when the interaction starts.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.StopInteraction(System.Boolean)">
            <summary>
            Invoked when the interaction ends.
            </summary>
            <param name="validate"></param>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.SnapToGrid">
            <summary>
            Gets or sets whether the rectangle should snap to the grid points when dragged.
            </summary>
            <value><see langword='true'/> if the rectangle should snap to the grid (if active) points when dragged.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.SnapToGridChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.SnapToGrid"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.CreateOnClick">
            <summary>
            Indicates whether the interactor should create objects with default size when the view is clicked.
            </summary>
            <value><see langword="true"/> if the interactor should create objects with default size when the
            view is clicked; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.CreateOnClickChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.CreateOnClick"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.Factory">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.Windows.Forms.IGraphicObjectFactory"/>.
            </summary>
            <remarks>The factory determined both the type of the shape to create.</remarks>
            <seealso cref="M:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.CreateGraphicObject(System.IServiceProvider)"/>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.FactoryChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.Factory"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.DefaultStroke">
            <summary>
            Gets or sets the stroke of the created shape.
            </summary>
            <value>The stroke of the created shape.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.DefaultStrokeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.DefaultStroke"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.DefaultFill">
            <summary>
            Gets or sets the fill of the created shape.
            </summary>
            <value>The fill of the created shape.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.DefaultFillChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.DefaultFill"/> property is changed.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.ObjectCreated">
            <summary>
            Occurs when a <see cref="T:ILOG.Diagrammer.GraphicObject"/> has been created.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.Cursor">
            <summary>
            Gets or sets the cursor used when the interactor is active.
            </summary>
            <value>The cursor used when the interactor is active.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.CursorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.Cursor"/> property is changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.GenericGraphicObjectFactory">
            <summary>
            A factory that creates <see cref="T:ILOG.Diagrammer.Graphic.Rect"/> instances.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.ArcShapeFactory">
            <summary>
            A factory that creates <see cref="T:ILOG.Diagrammer.Graphic.Arc"/> instances.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.PieShapeFactory">
            <summary>
            A factory that creates <see cref="T:ILOG.Diagrammer.Graphic.Pie"/> instances.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ViewPort">
            <summary>
            Defines a control that can stretch and scale its content to fill the available space.
            </summary>
            <remarks>The <see cref="P:ILOG.Diagrammer.Graphic.ViewPort.ViewBox"/> property specifies which portion of the control content is displayed.
            The <see cref="P:ILOG.Diagrammer.Graphic.ViewPort.KeepAspectRatio"/> and <see cref="P:ILOG.Diagrammer.Graphic.ViewPort.Slice"/> properties specify the alignment used to
            display the control content.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ViewPort.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.ViewPort"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ViewPort.OnViewBoxChanged(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.ViewPort.ViewBox"/> property is modified.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ViewPort.OnKeepAspectRatioChanged(ILOG.Diagrammer.AspectRatioAlignment,ILOG.Diagrammer.AspectRatioAlignment)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.ViewPort.KeepAspectRatio"/> property is modified.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ViewPort.OnSliceChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.ViewPort.Slice"/> property is modified.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ViewPort.CanMoveChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanMoveChild(ILOG.Diagrammer.GraphicObject)">GraphicContainer.CanMoveChild</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ViewPort.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">GraphicContainer.CanResizeChild</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ViewPort.OnRectangleChanged(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Control.OnRectangleChanged(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D)">Control.OnRectangleChanged</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ViewPort.PaintChildren(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.PaintContent(ILOG.Diagrammer.DrawingContext)">GraphicContainer.PaintContent</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ViewPort.ViewBox">
            <summary>
            Gets or sets the area of the view port contents that will be displayed.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</value>
            <remarks>The default value returns the bounds of the view port contents. You can change this property to 
            view only a portion of the view port contents.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ViewPort.ViewBoxChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ViewPort.ViewBox"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ViewPort.KeepAspectRatio">
            <summary>
            Gets or sets the type of alignment of the view contents.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.AspectRatioAlignment"/> values that
            represents the alignment of the view contents. The default value is
            <see cref="F:ILOG.Diagrammer.AspectRatioAlignment.XMidYMid"/>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ViewPort.Slice"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ViewPort.KeepAspectRatioChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ViewPort.KeepAspectRatio"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ViewPort.Slice">
            <summary>
            Gets or sets the mode used to stretch the view contents.
            </summary>
            <value>When the value is <see langword="true"/>, the view contents is stretched to respect the value of the
            <see cref="P:ILOG.Diagrammer.Graphic.ViewPort.KeepAspectRatio"/> property and the image will cover the bounding box of the object defined by the
            <see cref="T:System.Drawing.Rectangle"/> property, thus some part of the image might not be visible. When the value is <see langword="false"/> (the default),
            the image will be stretched to respect the value of the
            <see cref="P:ILOG.Diagrammer.Graphic.ViewPort.KeepAspectRatio"/> property and the image will be fully visible inside the bounding box of the object, thus
            some part of the bounding box of the object might not be filled with the image.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ViewPort.KeepAspectRatio"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ViewPort.SliceChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ViewPort.Slice"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ViewPort.ChildTransform">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicContainer.ChildTransform">GraphicContainer.ChildTransform</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ViewPortSelectionGraphic">
            <summary>
            The selection class dedicated to <see cref="T:ILOG.Diagrammer.Graphic.ViewPort"/> objects.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ViewPortSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.ViewPortSelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ViewPortSelectionGraphic.ShowMoveHandle">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.DefaultSelectionGraphic.ShowMoveHandle">DefaultSelectionGraphic.ShowMoveHandle</see>.
            </summary> 
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Basic2DShapeType">
            <summary>
            Describes the shape of <see cref="T:ILOG.Diagrammer.Graphic.Basic2DShape"/> objects.
            </summary>
            <remarks>Use the values of this enumeration to set the 
            <see cref="P:ILOG.Diagrammer.Graphic.Basic2DShape.ShapeType"/> property of a <see cref="T:ILOG.Diagrammer.Graphic.Basic2DShape"/>
            object. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Basic2DShapeType.Rectangle">
            <summary>
            Defines a rectangle. A control value allows to modify the radii of the rectangle's corners.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Basic2DShapeType.Ellipse">
            <summary>
            Defines an ellipse.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Basic2DShapeType.Parallelogram">
            <summary>
            Defines a parallelogram. A control value allows to modify the parellelogram.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Basic2DShapeType.Trapezoid">
            <summary>
            Defines a trapezoid. A control value allows to modify the trapezoid.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Basic2DShapeType.Octagon">
            <summary>
            Defines an octagon. A control value allows to modify the octagon.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Basic2DShapeType.Hexagon">
            <summary>
            Defines an hexagon. A control value allows to modify the octagon.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Basic2DShapeType.RegularPentagon">
            <summary>
            Defines a regular pentagon.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Basic2DShapeType.Triangle">
            <summary>
            Defines a triangle. A control value allows to modify the triangle.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Basic2DShapeType.Diamond">
            <summary>
            Defines a diamond.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Basic2DShapeType.Cross">
            <summary>
            Defines a cross. A control value allows to modify the cross.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Basic2DShapeType.Star5">
            <summary>
            Defines a five points star. A control value allows to modify the star.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Basic2DShapeType.Star4">
            <summary>
            Defines a four points star. A control value allows to modify the star.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Basic2DShapeType.Arrow">
            <summary>
            Defines an arrow. A control value allows to modify the arrow.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Basic2DShape">
            <summary>
            Defines a class that represents basic 2D shapes. 
            </summary>
            <remarks>The <see cref="T:ILOG.Diagrammer.Graphic.Basic2DShape"/> class draws basic 2D shapes defined by the <see cref="T:ILOG.Diagrammer.Graphic.Basic2DShapeType"/> enumeration.
            To modify the shape of a <strong>Basic2DShape</strong> object, use the <see cref="P:ILOG.Diagrammer.Graphic.Basic2DShape.ShapeType"/> and <see cref="P:ILOG.Diagrammer.Graphic.Basic2DShape.ControlValue"/> properties.
            </remarks>
            <example>
            <para lang="cs,vbnet">
            The following example creates a <see cref="T:ILOG.Diagrammer.Graphic.Basic2DShape"/> object that represents a star.</para>
            <code lang="cs">        
            Basic2DShape CreateBasicShape()
            {
                LinearGradientFill gradient
                   = new LinearGradientFill(new Point2D(0, 0),
                                            new Point2D(0, 1),
                                            Color.Yellow,
                                            Color.Red);
            
                Basic2DShape star = new Basic2DShape();
                star.ShapeType = Basic2DShapeType.Star4;
                star.ControlValue = .8f;
                star.Fill = gradient;
                star.Stroke = new Stroke(Color.Olive);
                 
                return star;
            }
            </code>
            <code lang="vbnet">
            Function CreateBasicShape() As Basic2DShape 
               Dim gradient As LinearGradientFill _
                   = New LinearGradientFill(New Point2D(0, 0), _
                                            New Point2D(0, 1), _
                                            Color.Yellow, Color.Red) 
               Dim star As Basic2DShape = New Basic2DShape 
               star.ShapeType = Basic2DShapeType.Star4 
               star.ControlValue = 0.8F 
               star.Fill = gradient 
               star.Stroke = New Stroke(Color.Olive) 
               Return star 
            End Function
            </code>
            </example>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.BoundedShape">
            <summary>
            Represents the <see langword="abstract"/> base class of graphic objects with a bounded shape.
            </summary>
            <remarks>
            The <see cref="T:ILOG.Diagrammer.Graphic.BoundedShape"/> class represents the abstract base class
            for graphic object whose shape is defined by a rectangle, such as the <see cref="T:ILOG.Diagrammer.Graphic.Rect"/> or
            <see cref="T:ILOG.Diagrammer.Graphic.Ellipse"/> classes. The class defines a <see cref="P:ILOG.Diagrammer.Graphic.BoundedShape.Rectangle"/> property that
            represents the geometry of the shape.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.BoundedShape._defaultBoundedShapeBounds">
            <summary>
            Default bounds of object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.BoundedShape._rect">
            <summary>
            The definition rect of the object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.BoundedShape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.BoundedShape"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.BoundedShape.#ctor(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.BoundedShape"/> class using
            the specified parameter.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.BoundedShape.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.BoundedShape"/> class using
            the specified parameter.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.BoundedShape.OnRectangleChanged(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.BoundedShape.Rectangle"/> property is modified.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.BoundedShape.GetGeometryBounds">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetGeometryBounds">GraphicObject.GetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.BoundedShape.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.BoundedShape.GetDefaultAnchors">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetDefaultAnchors">GraphicObject.GetDefaultAnchors</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.BoundedShape.Rectangle">
            <summary>
            Gets or sets the rectangle that defines the object.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> object that defines the object.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.BoundedShape.RectangleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.BoundedShape.Rectangle"/> property contents has changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShape.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Basic2DShape"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShape.#ctor(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Basic2DShape"/> class.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> that defines the object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShape.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Basic2DShape"/> class.
            </summary>
            <param name="x">The x coordinate of the upper left corner.</param>
            <param name="y">The x coordinate of the upper left corner.</param>
            <param name="width">The rectangle width.</param>
            <param name="height">The rectangle height.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShape.OnShapeTypeChanged(ILOG.Diagrammer.Graphic.Basic2DShapeType,ILOG.Diagrammer.Graphic.Basic2DShapeType)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Basic2DShape.ShapeType"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShape.OnControlValueChanged(System.Single,System.Single)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Basic2DShape.ControlValue"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShape.OnCanEditControlValueChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Basic2DShape.CanEditControlValue"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShape.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Shape.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">Shape.UpdateGraphicsPath</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShape.GetBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetBounds</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShape.GetToolboxItemBitmap">
            <summary>
            Used by introspection !
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShape.GetToolboxItemDescription">
            <summary>
            Used by introspection !
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Basic2DShape.ShapeType">
            <summary>
            Gets or sets the shape of this graphic object
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Graphic.Basic2DShapeType"/> values. The default value is <see cref="F:ILOG.Diagrammer.Graphic.Basic2DShapeType.Rectangle">Basic2DShapeType.Rectangle</see>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Basic2DShape.ShapeTypeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Basic2DShape.ShapeType"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Basic2DShape.ControlValue">
            <summary>
            Gets or sets a value that modifies the shape depending on the shape type.
            </summary>
            <value>Represents a value that modifies the shape depending on the shape type.
            The default value is <strong>0</strong>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Basic2DShape.ControlValueChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Basic2DShape.ControlValue"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Basic2DShape.CanEditControlValue">
            <summary>
            Gets or sets a value that indicates whether or not the object control point can be moved
            during an interaction.
            </summary>
            <value><see langword="true"/> if the object control point can be moved; Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Basic2DShape.CanEditControlValueChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Basic2DShape.CanEditControlValue"/> property has changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic">
            <summary>
            The selection class dedicated to <see cref="T:ILOG.Diagrammer.Graphic.Basic2DShape"/> objects.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic.FirstHandleIndex">
            <summary>
            The index of the first handle for this class.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic.MoveControlValueHandleIndex">
            <summary>
            The index of the handle that allows to move the control value of the object.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic.LastHandleIndex">
            <summary>
            The index of the last handle for this class.
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic.IsTypeSupported(System.Type)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.SelectionGraphic.IsTypeSupported(System.Type)">SelectionGraphic.IsTypeSupported</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">DefaultSelectionGraphic.GetHandleDescription</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic.GetHandlePoints">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandlePoints">DefaultSelectionGraphic.GetHandlePoints</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic.IsHandleVisible(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.IsHandleVisible(System.Int32)">DefaultSelectionGraphic.IsHandleVisible</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic.GetHandleType(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleType(System.Int32)">DefaultSelectionGraphic.GetHandleType</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic.GetHandleCursor(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleCursor(System.Int32)">DefaultSelectionGraphic.GetHandleCursor</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic.OnInteractionStarted">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnInteractionStarted">DefaultSelectionGraphic.OnInteractionStarted</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic.OnInteractionValidated">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnInteractionValidated">DefaultSelectionGraphic.OnInteractionValidated</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic.MoveHandle(System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.MoveHandle(System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">DefaultSelectionGraphic.MoveHandle</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic.DoMoveControlPoint(System.Single)">
            <summary>
            Is called to when the control point is moved.
            </summary>
            <param name="value">The new control value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic.ValidateGhostGraphic(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.ValidateGhostGraphic(ILOG.Diagrammer.GraphicObject)">DefaultSelectionGraphic.ValidateGhostGraphic</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic.Basic2DShape">
            <summary>
            Casts the Edited object to an ICircularShape.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Basic2DShapeSelectionGraphic.CanEditSelectedObjectControlValue">
            <summary>
            Gets a value indicating whether it's possible to edit the object's control value.
            </summary>
            <value><see langword="true"/> to enable editing of object's control value; Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Design.IDropDownOwner">
            <summary>
            Represents a possible Windows Forms dialog owner.
            </summary>
            <remarks>
            This interface is implemented on objects that expose a Win32 HWND handle
            that can be used by a <see cref="T:System.Windows.Forms.Form"/> object to specify the owning top-level window.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Design.IDropDownOwner.DropDownOwner">
            <summary>
            Gets the Win32 HWND handle to the window represented by this implementer.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Rectangle2DConverter">
            <summary>
            Defines a type converter for a <see cref="T:ILOG.Diagrammer.Rectangle2D"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Margins">
            <summary>
            Stores a set of four floating-point numbers that represent left, right, top and bottom margins.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Margins.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Margins"/> structure with the specified parameter.
            </summary>
            <param name="margin">The value for the left, right, top and bottom margins.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Margins.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Margins"/> structure with the specified parameter.
            </summary>
            <param name="left">The left margin.</param>
            <param name="right">The right margin.</param>
            <param name="top">the top margin.</param>
            <param name="bottom">The bottom margin.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Margins.Equals(System.Object)">
            <summary>
            This member overrides <see cref="M:System.Object.Equals(System.Object)">Object.Equals</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Margins.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Margins.ToString">
            <summary>
            This member overrides <see cref="M:System.Object.ToString">Object.ToString</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Margins.op_Inequality(ILOG.Diagrammer.Margins,ILOG.Diagrammer.Margins)">
            <summary>
            Tests whether two <see cref="T:ILOG.Diagrammer.Margins"/> structures have equal values.
            </summary>
            <param name="left">The <see cref="T:ILOG.Diagrammer.Margins"/> structure that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:ILOG.Diagrammer.Margins"/> structure that is to the right of the equality operator.</param>
            <returns><see langword="true"/> if the two specified <see cref="T:ILOG.Diagrammer.Margins"/> structures have equal values;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Margins.op_Equality(ILOG.Diagrammer.Margins,ILOG.Diagrammer.Margins)">
            <summary>
            Tests whether two <see cref="T:ILOG.Diagrammer.Margins"/> structures differ in margin values.
            </summary>
            <param name="left">The <see cref="T:ILOG.Diagrammer.Margins"/> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:ILOG.Diagrammer.Margins"/> structure that is to the right of the inequality operator.</param>
            <returns><see langword="true"/> if the two specified <see cref="T:ILOG.Diagrammer.Margins"/> structures are unequal;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Margins.Inflate(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Inflates the specified rectangle using these margins.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</param>
            <returns>The inflated rectangle.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Margins.Inflate(ILOG.Diagrammer.Size2D)">
            <summary>
            Inflates the specified size using these margins.
            </summary>
            <param name="size">A <see cref="T:ILOG.Diagrammer.Size2D"/> structure.</param>
            <returns>The inflated size.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Margins.Deflate(ILOG.Diagrammer.Size2D)">
            <summary>
            Deflates the specified size using these margins.
            </summary>
            <param name="size">A <see cref="T:ILOG.Diagrammer.Size2D"/> structure.</param>
            <returns>The inflated size.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Margins.Deflate(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Deflates the specified rectangle using these margins.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</param>
            <returns>The deflated rectangle.</returns>
        </member>
        <member name="F:ILOG.Diagrammer.Margins.Empty">
            <summary>
            Represents an instance of the <see cref="T:ILOG.Diagrammer.Margins"/> class with its members uninitialized.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Margins.Bottom">
            <summary>
            Gets or sets the bottom margin, in pixels.
            </summary>
            <value>The margin in pixels.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Margins.Top">
            <summary>
            Gets or sets the top margin, in pixels.
            </summary>
            <value>The margin in pixels.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Margins.Left">
            <summary>
            Gets or sets the left margin, in pixels.
            </summary>
            <value>The margin in pixels.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Margins.Right">
            <summary>
            Gets or sets the right margin, in pixels.
            </summary>
            <value>The margin in pixels.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Margins.Horizontal">
            <summary>
            Gets the sum of the left and right margins.
            </summary>
            <value>The sum of the left and right margins.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Margins.Vertical">
            <summary>
            Gets the sum of the top and bottom margins.
            </summary>
            <value>The sum of the top and bottom margins.</value>
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.Parser.#ctor(System.IO.TextReader)">
            Creates a CSS parser.
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.Parser.#ctor(System.Uri)">
            Creates a CSS parser.
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.Parser.setBaseURL(System.Uri)">
            This method allows you to change the base <strong>URL</strong>
            for loading external style sheets.
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.Parser.parseDeclaration">
            Parses the reader given at creation time as a CSS declaration line.
            @return a Rule representing the declaration line.
        </member>
        <member name="M:ILOG.Diagrammer.SVG.Css.Parser.parse">
            Parses the reader given at creation time.
            @return an array of Rule representing the CSS.
        </member>
        <member name="M:ILOG.Diagrammer.SVG.CSSUtilities.ConvertRatio(System.String)">
            Converts the input value to a ratio. If the input value ends
            with a % character, it is considered a percentage. Otherwise,
            it is considered a plain floating point value
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.SingleColorComponentControl">
            <summary>
            A Control that displays one color component of a <see cref="T:ILOG.Diagrammer.ColorSelectionModel"/>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SingleColorComponentControl.Value">
            <summary>
            The value of the color component used by this control
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SingleColorComponentControl.WheelIncrement">
            <summary>
            The increment used when the mouse wheel is moved
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.SingleColorComponentControl.ColorComponentType">
            <summary>
            The color component used by this control
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.CustomColorChooser">
            <summary>
            A class that edits <see cref="T:ILOG.Diagrammer.GenericColor"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CustomColorChooser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.CustomColorChooser"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CustomColorChooser.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CustomColorChooser.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CustomColorChooser.ColorChanged">
            <summary>
            Occurs when the components of the edited color are changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CustomColorChooser.NewColor">
            <summary>
            Gets or sets the new color.
            </summary>
            <remarks>The new color is defined as the color currently being edited.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CustomColorChooser.CurrentColor">
            <summary>
            Gets or sets the current color.
            </summary>
            <remarks>The current color is defined as the color to edit.</remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.GridElement">
            <summary>
            Defines row or column specific properties within a <see cref="T:ILOG.Diagrammer.Graphic.GridPanel"/>. 
            </summary>
            <remarks><para>A <strong>GridElement</strong> objects represent rows or a columns of a 
            <see cref="T:ILOG.Diagrammer.Graphic.GridPanel"/>.</para>
            <para>A <strong>GridElement</strong> can have a fixed size, a size that depends on the 
            available space in the <see cref="T:ILOG.Diagrammer.Graphic.GridPanel"/> it belongs to, or a size that depends on the objects located in it.
            The <see cref="P:ILOG.Diagrammer.Graphic.GridElement.UnitType"/> and <see cref="P:ILOG.Diagrammer.Graphic.GridElement.Size"/> properties are used to control the <strong>GridElement</strong> size.
            When <see cref="P:ILOG.Diagrammer.Graphic.GridElement.UnitType"/> is set to <see cref="F:ILOG.Diagrammer.Graphic.GridUnitType.Elastic"/>, the <see cref="P:ILOG.Diagrammer.Graphic.GridElement.Size"/>
            property represents the amount of available space that will be allocated to the grid element relative
            to the other elastic grid elements. When <see cref="P:ILOG.Diagrammer.Graphic.GridElement.UnitType"/> is set to <see cref="F:ILOG.Diagrammer.Graphic.GridUnitType.Fixed"/>,
            the <see cref="P:ILOG.Diagrammer.Graphic.GridElement.Size"/> property is the size in pixels of the grid element.</para>
            </remarks>
            <example>
            For a complete example on <see cref="T:ILOG.Diagrammer.Graphic.GridElement"/> see the <see cref="T:ILOG.Diagrammer.Graphic.GridPanel"/> class.
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.GridElement"/> class.
            </summary>
            <remarks>This constructor creates an elastic grid element with a default size of <strong>100</strong>.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridElement.#ctor(ILOG.Diagrammer.Graphic.GridUnitType,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.GridElement"/> class with the specified parameters.
            </summary>
            <remarks>This constructor creates an elastic grid element with a default size of <strong>100</strong>.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.GridElement.Size">
            <summary>
            Gets or sets the size of this grid element.
            </summary>
            <value>A <see cref="T:System.Single"/> value.</value>
            <remarks>When the <see cref="P:ILOG.Diagrammer.Graphic.GridElement.UnitType"/> property is set to <see cref="F:ILOG.Diagrammer.Graphic.GridUnitType.Elastic"/>, the <see cref="P:ILOG.Diagrammer.Graphic.GridElement.Size"/>
            property represents the amount of available space that will be allocated to the grid element relative
            to the other elastic grid elements. When the <see cref="P:ILOG.Diagrammer.Graphic.GridElement.UnitType"/> property is set to <see cref="F:ILOG.Diagrammer.Graphic.GridUnitType.Fixed"/>,
            the <see cref="P:ILOG.Diagrammer.Graphic.GridElement.Size"/> property is the size in pixels of the grid element.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.GridElement.UnitType">
            <summary>
            Gets or sets the unit type for this grid element.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Graphic.GridUnitType"/> values. The default value is <see cref="F:ILOG.Diagrammer.Graphic.GridUnitType.Elastic"/>.</value>
            <remarks>When the <see cref="P:ILOG.Diagrammer.Graphic.GridElement.UnitType"/> property is set to <see cref="F:ILOG.Diagrammer.Graphic.GridUnitType.Elastic"/>, the <see cref="P:ILOG.Diagrammer.Graphic.GridElement.Size"/>
            property represents the amount of available space that will be allocated to the grid element relative
            to the other elastic grid elements. When the <see cref="P:ILOG.Diagrammer.Graphic.GridElement.UnitType"/> property is set to <see cref="F:ILOG.Diagrammer.Graphic.GridUnitType.Fixed"/>,
            the <see cref="P:ILOG.Diagrammer.Graphic.GridElement.Size"/> property is the size in pixels of the grid element. When the <see cref="P:ILOG.Diagrammer.Graphic.GridElement.UnitType"/> property is set to
            <see cref="F:ILOG.Diagrammer.Graphic.GridUnitType.AutoSize"/>, the <see cref="P:ILOG.Diagrammer.Graphic.GridElement.Size"/> property is not used, and the grid element size is
            computed with the size of the graphic objects located in this grid element.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.GridElementCollection">
            <summary>
            Represents a collection of <see cref="T:ILOG.Diagrammer.Graphic.GridElement"/> objects in a <see cref="P:ILOG.Diagrammer.Graphic.GridElementCollection.GridPanel"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.GridPanel">
            <summary>
            Defines a grid area consisting of columns and rows.
            </summary>
            <remarks>
            <para>A <see cref="T:ILOG.Diagrammer.Graphic.GridPanel"/> is made of columns and rows. Columns and rows can be accessed through
            the <see cref="P:ILOG.Diagrammer.Graphic.GridPanel.Columns"/> and <see cref="P:ILOG.Diagrammer.Graphic.GridPanel.Rows"/> properties, which are collections of <see cref="T:ILOG.Diagrammer.Graphic.GridElement"/> objects.
            </para>
            <para>To place a child object inside the grid, use the <see cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetColumn(ILOG.Diagrammer.GraphicObject,System.Int32)"/>, <see cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetRow(ILOG.Diagrammer.GraphicObject,System.Int32)"/> methods.
            The <see cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetColumnSpan(ILOG.Diagrammer.GraphicObject,System.Int32)"/> and <see cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetRowSpan(ILOG.Diagrammer.GraphicObject,System.Int32)"/> can also be used when an object needs to 
            to span accross several columns or rows. Note that the <see cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetObjectAt(ILOG.Diagrammer.GraphicObject,System.Int32,System.Int32)"/> method can also 
            be used to place a graphic object in the grid.</para>
            </remarks>
            <example>
            <code lang="cs">
            GridPanel CreateGridPanel()
            {
               // Creates a grid panel 
               GridPanel grid = new GridPanel();
               grid.Rectangle = new Rectangle2D(0F, 0F, 300F, 300F);
             
               // Create 2 rows and 2 columns
               // The first column uses 30% of the width
               // The second column uses 70% of the with
               // Each row occupies 50 % of the total height
               GridElement column1 = new GridElement(GridUnitType.Elastic, 30f);
               GridElement column2 = new GridElement(GridUnitType.Elastic, 70f);
               GridElement row1 = new GridElement(GridUnitType.Elastic, 100f);
               GridElement row2 = new GridElement(GridUnitType.Elastic, 100f);
             
               // Add columns and rows
               grid.Columns.Add(column1);
               grid.Columns.Add(column2);
               grid.Rows.Add(row1);
               grid.Rows.Add(row2);
             
               // Creates a white rectangle on the first
               // row and spanning on two columns
               Rect rect1 = new Rect();
               rect1.Fill = new SolidFill(Color.White);
               grid.SetRow(rect1, 0);
               grid.SetColumn(rect1, 0);
               grid.SetColumnSpan(rect1, 2);
             
               // Creates a blue rectangle on the second
               // row and first column
               Rect rect2 = new Rect();
               rect2.Fill = new SolidFill(Color.Blue);
               grid.SetRow(rect2, 1);
               grid.SetColumn(rect2, 0);
             
               // Creates a yellow rectangle on the second
               // row and second column
               Rect rect3 = new Rect();
               rect3.Fill = new SolidFill(Color.Yellow);
               grid.SetRow(rect3, 1);
               grid.SetColumn(rect3, 2);
             
               grid.Objects.AddRange(new GraphicObject[] { rect1, rect2, rect3 });
               return grid;
            }
            </code>
            <code lang="vbnet">
            Function CreateGridPanel() As GridPanel 
            
               ' Creates a grid panel 
               Dim grid As GridPanel = New GridPanel 
               grid.Rectangle = New Rectangle2D(0F, 0F, 300F, 300F) 
            
               ' Create 2 rows and 2 columns
               ' The first column uses 30% of the width
               ' The second column uses 70% of the with
               ' Each row occupies 50 % of the total height    
               Dim column1 As GridElement = New GridElement(GridUnitType.Elastic, 30F) 
               Dim column2 As GridElement = New GridElement(GridUnitType.Elastic, 70F) 
               Dim row1 As GridElement = New GridElement(GridUnitType.Elastic, 100F) 
               Dim row2 As GridElement = New GridElement(GridUnitType.Elastic, 100F) 
            
               ' Add columns and rows
               grid.Columns.Add(column1) 
               grid.Columns.Add(column2) 
               grid.Rows.Add(row1) 
               grid.Rows.Add(row2) 
            
               ' Creates a white rectangle on the first
               ' row and spanning on two columns
               Dim rect1 As Rect = New Rect 
               rect1.Fill = New SolidFill(Color.White) 
               grid.SetRow(rect1, 0) 
               grid.SetColumn(rect1, 0) 
               grid.SetColumnSpan(rect1, 2) 
            
               ' Creates a blue rectangle on the second
               ' row and first column    
               Dim rect2 As Rect = New Rect 
               rect2.Fill = New SolidFill(Color.Blue) 
               grid.SetRow(rect2, 1) 
               grid.SetColumn(rect2, 0) 
            
               ' Creates a yellow rectangle on the second
               ' row and second column
               Dim rect3 As Rect = New Rect 
               rect3.Fill = New SolidFill(Color.Yellow) 
               grid.SetRow(rect3, 1) 
               grid.SetColumn(rect3, 2) 
            
               grid.Objects.AddRange(New GraphicObject() {rect1, rect2, rect3}) 
               Return grid 
            End Function
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Graphic.GridElement"/>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.GridPanel._columnRowCache">
            <summary>
            Each cell contains a set of objects located in the cell [c,r]
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.GridPanel._rows">
            <summary>
            The rows of the grid.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.GridPanel._columns">
            <summary>
            The columns of the grid.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.GridPanel._horizontalGridLines">
            <summary>
            Indicates the grid line stroke for horizontal grid lines.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.GridPanel._verticalGridLines">
            <summary>
            Indicates the grid line stroke for vertical grid lines.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.GridPanel._clipCells">
            <summary>
            Indicates whether or not cell clipping is allowed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.GridPanel"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.GridPanel"/> class using the specified parameters.
            </summary>
            <param name="columns">The number of columns.</param>
            <param name="rows">The number of rows.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.Dispose(System.Boolean)">GraphicObject.Dispose</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.OnClipCellsChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.GridPanel.ClipCells"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.OnHorizontalGridLinesChanged(ILOG.Diagrammer.Stroke,ILOG.Diagrammer.Stroke)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.GridPanel.HorizontalGridLines"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.OnHorizontalGridLinesChanged">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.GridPanel.HorizontalGridLines"/> is changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.OnVerticalGridLinesChanged(ILOG.Diagrammer.Stroke,ILOG.Diagrammer.Stroke)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.GridPanel.VerticalGridLines"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.OnVerticalGridLinesChanged">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.GridPanel.VerticalGridLines"/> is changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.GetRow(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Gets the row of the specified child object.
            </summary>
            <param name="obj">A child object.</param>
            <returns>The zero-based index of the row containing the specified object.</returns>
            <remarks>The default value for this property is <strong>-1</strong>, which means that the object
            is not located in any row.</remarks>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetRow(ILOG.Diagrammer.GraphicObject,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.GetRowSpan(ILOG.Diagrammer.GraphicObject)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetRowSpan(ILOG.Diagrammer.GraphicObject,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetObjectAt(ILOG.Diagrammer.GraphicObject,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.SetRow(ILOG.Diagrammer.GraphicObject,System.Int32)">
            <summary>
            Sets the row for the specified child object.
            </summary>
            <param name="obj">A child object.</param>
            <param name="row">The zero-based index of the row containing the specified object.</param>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.GetRow(ILOG.Diagrammer.GraphicObject)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.GetRowSpan(ILOG.Diagrammer.GraphicObject)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetRowSpan(ILOG.Diagrammer.GraphicObject,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetObjectAt(ILOG.Diagrammer.GraphicObject,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.OnRowChanged(ILOG.Diagrammer.GraphicObject,System.Int32,System.Int32)">
            <summary>
            Is called when the row of the specified child object has changed.
            </summary>
            <param name="obj">A child object.</param>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.GetRowSpan(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Gets the number of rows the specified child object spans on.
            </summary>
            <param name="obj">A child object.</param>
            <returns>The number of rows the specified object spans on.</returns>
            <remarks>The default value for this property is <strong>1</strong>.</remarks>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.GetRow(ILOG.Diagrammer.GraphicObject)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetRow(ILOG.Diagrammer.GraphicObject,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetRowSpan(ILOG.Diagrammer.GraphicObject,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetObjectAt(ILOG.Diagrammer.GraphicObject,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.SetRowSpan(ILOG.Diagrammer.GraphicObject,System.Int32)">
            <summary>
            Sets the number of rows the specified child object spans on.
            </summary>
            <param name="obj">A child object.</param>
            <param name="span">The number of rows the specified child object spans on.</param>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.GetRow(ILOG.Diagrammer.GraphicObject)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.GetRowSpan(ILOG.Diagrammer.GraphicObject)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetRow(ILOG.Diagrammer.GraphicObject,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetObjectAt(ILOG.Diagrammer.GraphicObject,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.OnRowSpanChanged(ILOG.Diagrammer.GraphicObject,System.Int32,System.Int32)">
            <summary>
            Is called when the row span of the specified child object has changed.
            </summary>
            <param name="obj">A child object.</param>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.GetColumn(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Gets the column of the specified child object.
            </summary>
            <param name="obj">A child object.</param>
            <returns>The zero-based index of the column containing the specified object.</returns>
            <remarks>The default value for this property is <strong>-1</strong>, which means that the object
            is not located in any column.</remarks>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetColumn(ILOG.Diagrammer.GraphicObject,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.GetColumnSpan(ILOG.Diagrammer.GraphicObject)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetColumnSpan(ILOG.Diagrammer.GraphicObject,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetObjectAt(ILOG.Diagrammer.GraphicObject,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.SetColumn(ILOG.Diagrammer.GraphicObject,System.Int32)">
            <summary>
            Sets the column for the specified child object.
            </summary>
            <param name="obj">A child object.</param>
            <param name="column">The zero-based index of the column containing the specified object.</param>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.GetColumn(ILOG.Diagrammer.GraphicObject)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.GetColumnSpan(ILOG.Diagrammer.GraphicObject)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetColumnSpan(ILOG.Diagrammer.GraphicObject,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetObjectAt(ILOG.Diagrammer.GraphicObject,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.OnColumnChanged(ILOG.Diagrammer.GraphicObject,System.Int32,System.Int32)">
            <summary>
            Is called when the column of the specified child object has changed.
            </summary>
            <param name="obj">A child object.</param>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.GetColumnSpan(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Gets the number of columns the specified child object spans on.
            </summary>
            <param name="obj">A child object.</param>
            <returns>The number of columns the specified object spans on.</returns>
            <remarks>The default value for this property is <strong>1</strong>.</remarks>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.GetColumn(ILOG.Diagrammer.GraphicObject)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetColumn(ILOG.Diagrammer.GraphicObject,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetColumnSpan(ILOG.Diagrammer.GraphicObject,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetObjectAt(ILOG.Diagrammer.GraphicObject,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.SetColumnSpan(ILOG.Diagrammer.GraphicObject,System.Int32)">
            <summary>
            Sets the number of columns the specified child object spans on.
            </summary>
            <param name="obj">A child object.</param>
            <param name="span">The number of columns the specified child object spans on.</param>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.GetColumn(ILOG.Diagrammer.GraphicObject)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetColumn(ILOG.Diagrammer.GraphicObject,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.GetColumnSpan(ILOG.Diagrammer.GraphicObject)"/>
            <seealso cref="M:ILOG.Diagrammer.Graphic.GridPanel.SetObjectAt(ILOG.Diagrammer.GraphicObject,System.Int32,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.OnColumnSpanChanged(ILOG.Diagrammer.GraphicObject,System.Int32,System.Int32)">
            <summary>
            Is called when the column span of the specified child object has changed.
            </summary>
            <param name="obj">A child object.</param>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.BeginInit">
            <summary>
            This member overrides the <see cref="M:ILOG.Diagrammer.GraphicContainer.BeginInit">GraphicContainer.BeginInit</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.EndInit">
            <summary>
            This member overrides the <see cref="M:ILOG.Diagrammer.GraphicContainer.EndInit">GraphicContainer.EndInit</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.SetObjectAt(ILOG.Diagrammer.GraphicObject,System.Int32,System.Int32)">
            <summary>
            Sets the cell in which the specified object will be placed.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <param name="column">The zero-based index of the column for the specified object.</param>
            <param name="row">The zero-based index of the row for the specified object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.SetObjectAt(ILOG.Diagrammer.GraphicObject,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the cell in which the specified object will be placed.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</param>
            <param name="column">The zero-based index of the column for the specified object.</param>
            <param name="row">The zero-based index of the row for the specified object.</param>
            <param name="columnSpan">The number of columns the specified object spans on.</param>
            <param name="rowSpan">The number of rows the specified object spans on.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.OnChildrenRemoved(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            This member overrides the <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildrenRemoved(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">GraphicContainer.OnChildrenRemoved</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.OnChildrenAdded(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            This member overrides the <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildrenAdded(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">GraphicContainer.OnChildrenAdded</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.OnChildBoundsChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Control.OnChildBoundsChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">Control.OnChildBoundsChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.OnChildZOrderChanged(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildZOrderChanged(ILOG.Diagrammer.GraphicObject)">GraphicContainer.OnChildZOrderChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">GraphicObject.GetPreferredSizeCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">GraphicContainer.CanResizeChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.CanMoveChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanMoveChild(ILOG.Diagrammer.GraphicObject)">GraphicContainer.CanMoveChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.CanRotateChild(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanRotateChild(ILOG.Diagrammer.GraphicObject)">GraphicContainer.CanRotateChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.GetCellBounds(System.Int32,System.Int32)">
            <summary>
            Returns the bounds of the specified grid cell.
            </summary>
            <param name="column">The zero-based index of the grid cell column.</param>
            <param name="row">The zero-based index of the grid cell row.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.GetCellBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the bounds of the specified grid cells.
            </summary>
            <param name="column">The zero-based index of the grid cell column.</param>
            <param name="row">The zero-based index of the grid cell row.</param>
            <param name="columnSpan">The number of columns to span on.</param>
            <param name="rowSpan">The number of rows to span on.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.DoLayout(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Control.DoLayout(ILOG.Diagrammer.Rectangle2D)">Control.DoLayout</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.GetObjectsAtCell(System.Int32,System.Int32)">
            <summary>
            Gets an array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> objects located in the specified cell.
            </summary>
            <param name="column">The zero-based index of the column.</param>
            <param name="row">The zero-based index of the row.</param>
            <returns>An array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> objects.</returns>
            <remarks>The method returns all the objects that are drawn in the specfied cell,
            including the objects that spans accross multiple cells.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.GetObjectsAtRow(System.Int32)">
            <summary>
            Gets an array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> objects located in the specified column.
            </summary>
            <param name="row">The zero-based index of the row.</param>
            <returns>An array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> objects.</returns>
            <remarks>The method returns all the objects that are drawn on the specfied row.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.GetObjectsAtColumn(System.Int32)">
            <summary>
            Gets an array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> objects located in the specified row.
            </summary>
            <param name="column">The zero-based index of the column.</param>
            <returns>An array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> objects.</returns>
            <remarks>The method returns all the objects that are drawn on the specfied column.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.OnHorizontalAlignmentChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.HorizontalAlignment,ILOG.Diagrammer.Graphic.HorizontalAlignment)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Panel.OnHorizontalAlignmentChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.HorizontalAlignment,ILOG.Diagrammer.Graphic.HorizontalAlignment)">Panel.OnHorizontalAlignmentChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.OnVerticalAlignmentChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.VerticalAlignment,ILOG.Diagrammer.Graphic.VerticalAlignment)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Panel.OnVerticalAlignmentChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.VerticalAlignment,ILOG.Diagrammer.Graphic.VerticalAlignment)">Panel.OnVerticalAlignmentChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.OnMarginsChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Margins,ILOG.Diagrammer.Margins)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Panel.OnMarginsChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Margins,ILOG.Diagrammer.Margins)">Panel.OnMarginsChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.OnItemsMarginsChanged(ILOG.Diagrammer.Margins,ILOG.Diagrammer.Margins)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Panel.OnItemsMarginsChanged(ILOG.Diagrammer.Margins,ILOG.Diagrammer.Margins)">Panel.OnItemsMarginsChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.PaintGridLines(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Is Called to paint the grid lines.
            </summary>
            <param name="context">The drawing context.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.PaintChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.ObjectsControl.PaintChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.DrawingContext)">ObjectsControl.PaintChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.GridPanel.PaintCore(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)">GraphicObject.PaintCore</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.GridPanel.ClipCells">
            <summary>
            Gets or sets a value indicating whether cells should clip their contents. 
            </summary>
            <value><see langword="true"/> if cells should clip their contents; Otherwise, <see langword="false"/>.
            The default value is <see langword="false"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.GridPanel.ClipCellsChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.GridPanel.ClipCells"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.GridPanel.HorizontalGridLines">
            <summary>
            Gets or sets the stroke for the horizontal grid lines within a <see cref="T:ILOG.Diagrammer.Graphic.GridPanel"/>.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Stroke"/> reference. The default value is <see langword="null"/>, which means
            that grid lines are not visible.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.GridPanel.VerticalGridLines"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.GridPanel.HorizontalGridLinesChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.GridPanel.HorizontalGridLines"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.GridPanel.VerticalGridLines">
            <summary>
            Gets or sets the stroke for the vertical lines within a <see cref="T:ILOG.Diagrammer.Graphic.GridPanel"/>.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Stroke"/> reference. The default value is <see langword="null"/>, which means
            that grid lines are not visible.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.GridPanel.HorizontalGridLines"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.GridPanel.VerticalGridLinesChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.GridPanel.VerticalGridLines"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.GridPanel.Rows">
            <summary>
            Gets the rows of the panel.
            </summary>
            <value>A collection of <see cref="T:ILOG.Diagrammer.Graphic.GridElement"/> objects.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.GridPanel.Columns"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.GridPanel.Columns">
            <summary>
            Gets the columns of the panel.
            </summary>
            <value>A collection of <see cref="T:ILOG.Diagrammer.Graphic.GridElement"/> objects.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.GridPanel.Rows"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.GridPanel.HasPreferredHeight">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight">GraphicObject.HasPreferredHeight</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.GridPanel.HasPreferredWidth">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth">GraphicObject.HasPreferredWidth</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Canvas">
             <summary>
             Defines an area within which you can explicitly position child objects by 
             coordinates relative to the <see cref="T:ILOG.Diagrammer.Graphic.Canvas"/> area. 
             </summary>
             <remarks>
             A <see cref="T:ILOG.Diagrammer.Graphic.Canvas"/> is a graphic objects within which you can explicitly position 
             child objects by coordinates relative to the <see cref="T:ILOG.Diagrammer.Graphic.Canvas"/> area.
             Use the <see cref="M:ILOG.Diagrammer.Graphic.Canvas.SetAnchor(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.AnchorStyle)"/> method to position a child object in the <see cref="T:ILOG.Diagrammer.Graphic.Canvas"/> area.
             </remarks>
             <example>
             <para lang="cs,vbnet">
             The following example creates a canvas with two rectangle inside it, the first one is
             attached on the top right of the canvas and the second one on the bottom left.
             </para>
             <code lang="cs">
             Canvas CreateCanvas()
             {
                 Canvas canvas = new Canvas();
                      
                 canvas.Rectangle = new Rectangle2D(0f, 0f, 220f, 160f);
                 canvas.Background = new SolidFill(Color.LightGray);
                 canvas.Border = new Stroke(Color.Blue, 2f);
                 canvas.CornerRadius = new CornerRadius(5f);
            
                 Rect rect1 = new Rect(10F, 10F, 70F, 40F);
                 rect1.Fill = new SolidFill(Color.White);
            
                 canvas.SetAnchor(rect1, AnchorStyle.Top | AnchorStyle.Left);
            
                 Rect rect2 = new Rect(140F, 110F, 70F, 40F);
                 rect2.Fill = new SolidFill(Color.White);
            
                 canvas.SetAnchor(rect2, AnchorStyle.Bottom | AnchorStyle.Right);
                      
                 canvas.Objects.AddRange(new GraphicObject[] { rect1, rect2 });
                 return canvas;
             }
             </code>
             <code lang="vbnet">
             Function CreateCanvas() As Canvas 
                 Dim canvas As Canvas = New Canvas 
             
                 canvas.Rectangle = New Rectangle2D(0F, 0F, 220F, 160F) 
                 canvas.Background = New SolidFill(Color.LightGray) 
                 canvas.Border = New Stroke(Color.Blue, 2F) 
                 canvas.CornerRadius = New CornerRadius(5F) 
             
                 Dim rect1 As Rect = New Rect(10F, 10F, 70F, 40F) 
                 rect1.Fill = New SolidFill(Color.White) 
             
                 canvas.SetAnchor(rect1, AnchorStyle.Top Or AnchorStyle.Left) 
             
                 Dim rect2 As Rect = New Rect(140F, 110F, 70F, 40F) 
                 rect2.Fill = New SolidFill(Color.White) 
             
                 canvas.SetAnchor(rect2, AnchorStyle.Bottom Or AnchorStyle.Right) 
             
                 canvas.Objects.AddRange(New GraphicObject() {rect1, rect2}) 
                 Return canvas 
             End Function</code>
             </example>
             <seealso cref="T:ILOG.Diagrammer.Graphic.StackPanel"/>
             <seealso cref="T:ILOG.Diagrammer.Graphic.GridPanel"/>
             <seealso cref="T:ILOG.Diagrammer.Graphic.DockPanel"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Canvas.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Canvas"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Canvas.GetAnchor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Gets the anchor of the specified child object.
            </summary>
            <param name="obj">A child object.</param>
            <returns>One of the <see cref="T:ILOG.Diagrammer.Graphic.AnchorStyle"/> values.</returns>
            <remarks>The default value for this property is <see cref="F:ILOG.Diagrammer.Graphic.AnchorStyle.None"/>.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Canvas.SetAnchor(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.AnchorStyle)">
            <summary>
            Sets the anchor for the specified child object.
            </summary>
            <param name="obj">A child object.</param>
            <param name="anchor">One of the <see cref="T:ILOG.Diagrammer.Graphic.AnchorStyle"/> values.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Canvas.OnAnchorChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Graphic.AnchorStyle,ILOG.Diagrammer.Graphic.AnchorStyle)">
            <summary>
            Is called when the anchor of the specified child object has changed.
            </summary>
            <param name="obj">A child object.</param>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Canvas.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">GraphicObject.GetPreferredSizeCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Canvas.OnChildrenAdded(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildrenAdded(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">GraphicContainer.OnChildrenAdded</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Canvas.OnChildBoundsChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Control.OnChildBoundsChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">Control.OnChildBoundsChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Canvas.OnChildZOrderChanged(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.OnChildZOrderChanged(ILOG.Diagrammer.GraphicObject)">GraphicContainer.OnChildZOrderChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Canvas.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.CanResizeChild(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Orientation)">GraphicContainer.CanResizeChild</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Canvas.OnMarginsChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Margins,ILOG.Diagrammer.Margins)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Panel.OnMarginsChanged(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.Margins,ILOG.Diagrammer.Margins)">Panel.OnMarginsChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Canvas.DoLayout(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Control.DoLayout(ILOG.Diagrammer.Rectangle2D)">Control.DoLayout</see>.
            </summary>	
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Canvas.EndInit">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.EndInit">GraphicContainer.EndInit</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Canvas.SupportsGraphLayout">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.SupportsGraphLayout">GraphicContainer.SupportsGraphLayout</see>.
            </summary>
            <remarks>
            As implemented in this class, this method returns always <see langword="true"/>.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Canvas.HasPreferredHeight">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight">GraphicObject.HasPreferredHeight</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Canvas.HasPreferredWidth">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth">GraphicObject.HasPreferredWidth</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.IPolyPointsShapeFactory">
            <summary>
            Factory to handle creation of PolyPointsShape instances.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.IPolyPointsShapeFactory.CreateInstance(System.IServiceProvider)">
            <summary>
            Creates an instance of IPolyPointsShape. 
            </summary>
            <returns>A IPolyPointsShape instance. </returns>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.IPolyPointsShapeFactory.MinimumNumberOfPoints">
            <summary>
            Gets the minimum number of point required to define this shape.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.IPolyPointsShapeFactory.MaximumNumberOfPoints">
            <summary>
            Gets the maximum number of point required to define this shape.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor">
            <summary>
            An interactor to create PolyPointsShape
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.CurveFactory">
            <summary>
            The factory to create Curve shape.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.ClosedCurveFactory">
            <summary>
            The factory to create ClosedCurve shape.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.PolygonFactory">
            <summary>
            The factory to create Polygon shape.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.PolylineFactory">
            <summary>
            The factory to create Polyline shape.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.GhostMarkerWidth">
            <summary>
            the half-width of the squares drawn at every points
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor._snapToGrid">
            <summary>
            indicates whether the grid is taken into account
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor._freeHandMode">
            <summary>
            indicates whether the Free Hand mode is active
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor._endOnRightClick">
            <summary>
            indicates whether the interaction ends on a right click (in addition to a double-click)
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor._cancelOnDisconnect">
            <summary>
            indicates whether the interaction is canceled when the interaction is disconnected
            while in operation
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor._count">
            <summary>
            the number of points that have been created
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor._createdObject">
            <summary>
            the ghost object
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor._minDistance">
            <summary>
            the minimum distance between two points
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor._points">
            <summary>
            the array containing the shape points when in xor mode
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor._factory">
            <summary>
            the shape factory
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor._defaultStroke">
            <summary>
            the default stroke of the created shape
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor._defaultFill">
            <summary>
            the default fill of the created shape
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor._ghostStroke">
            <summary>
            the stroke used by the ghost object (do not zoom)
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor._lastPt">
            <summary>
            the point that is removed when the mouse leave the view while in operation
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor"/> CreatePolyPointsInteractor class.
            </summary>
            <remarks>This constructor configures the interactor so that it triggers the interaction
            on <see cref="F:System.Windows.Forms.MouseButtons.Left"/> and it creates Polyline shapes.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.#ctor(System.Windows.Forms.MouseButtons)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor"/> CreatePolyPointsInteractor class.
            </summary>
            <remarks>This constructor configures the interactor so that it triggers the interaction
            on the specified button and it creates Polyline shapes.</remarks>
            <param name="buttons">The mouse button that starts the interaction.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.#ctor(ILOG.Diagrammer.Windows.Forms.IPolyPointsShapeFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor"/> CreatePolyPointsInteractor class.
            </summary>
            <remarks>This constructor configures the interactor so that it triggers the interaction
            on <see cref="F:System.Windows.Forms.MouseButtons.Left"/> and it creates shapes of the specified type.</remarks>
            <param name="shapeFactory">The factory that creates the shape.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.#ctor(ILOG.Diagrammer.Windows.Forms.IPolyPointsShapeFactory,System.Windows.Forms.MouseButtons)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor"/> CreatePolyPointsInteractor class.
            </summary>
            <remarks>This constructor configures the interactor so that it triggers the interaction
            on the specified button and it creates shapes of the specified type.</remarks>
            <param name="buttons">The mouse button that starts the interaction.</param>
            <param name="shapeFactory">The factory that creates the shape.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.ShouldSerializeFactory">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.Factory"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.ResetFactory">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.Factory"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.OnFactoryChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.Factory"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>Factory</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.OnSnapToGridChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.SnapToGrid"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>SnapToGrid</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.OnFreeHandModeChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.FreeHandMode"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>FreeHandMode</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.ShouldSerializeDefaultStroke">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.DefaultStroke"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.ResetDefaultStroke">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.DefaultStroke"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.OnDefaultStrokeChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.DefaultStroke"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>DefaultStroke</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.ShouldSerializeDefaultFill">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.DefaultFill"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.ResetDefaultFill">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.DefaultFill"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.OnDefaultFillChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.DefaultFill"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>DefaultFill</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.OnMinDistanceBetweenPointsChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.MinDistanceBetweenPoints"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>MinDistanceBetweenPoints</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.OnEndOnRightClickChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.EndOnRightClick"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>EndOnRightClick</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.OnCancelOnDisconnectChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.CancelOnDisconnect"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>CancelOnDisconnect</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.OnObjectCreated(ILOG.Diagrammer.Windows.Forms.GraphicObjectCreatedEventArgs)">
            <summary>
            Invoked when a <see cref="T:ILOG.Diagrammer.Graphic.IPolyPointsShape"/> has been created.
            </summary>
            <param name="e">An <see cref="T:ILOG.Diagrammer.Windows.Forms.GraphicObjectCreatedEventArgs"/> that contains the event data. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.ShouldSerializeCursor">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.Cursor"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.ResetCursor">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.Cursor"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.OnCursorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.Cursor"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>Cursor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseDown</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseMove</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseUp(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseUp</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">ViewInteractor.OnKeyDown</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.OnMouseLeave(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseLeave(System.EventArgs)">ViewInteractor.OnMouseLeave</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.OnMouseEnter(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseEnter(System.EventArgs)">ViewInteractor.OnMouseEnter</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.StopInteraction(System.Boolean)">
            <summary>
             Invoked when the interaction ends.
            </summary>
            <param name="validate"><see langword="true"/> to validate the interaction; <see langword="false"/> to abort.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.StartInteraction">
            <summary>
             Invoked when the interaction starts.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.Reset">
            <summary>
            Reset the interactor state.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.UpdateStatusBarText">
            <summary>
            This method overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.UpdateStatusBarText">ViewInteractor.UpdateStatusBarText</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.GetMinimumNumberOfPoints">
            <summary>
            Gets the minimum number of points required to create the object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.GetMaximumNumberOfPoints">
            <summary>
            Gets the maximum number of points required to create the object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.OnViewChanging(ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs)">
            <summary>
            Invoked when the <see cref="T:System.Windows.Forms.View"/> property is changing.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.OnViewChanged(ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs)">
            <summary>
            Invoked when this interactor is connected to or disconnected from a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.Validate">
            <summary>
            Validates the interaction.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.GetTargetContainer(System.Drawing.Point,ILOG.Diagrammer.GraphicObject)">
            <summary>
            Returns the container in which the object will be created.
            </summary>
            <param name="p">A <see cref="T:System.Drawing.Point"/> structure.</param>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> to drop.</param>
            <returns>The <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance at the specified location.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.DoIt">
            <summary>
            Invoked when the interaction is validated.
            </summary>
            <remarks>This method invoke the <see cref="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.CreatePolyPointsShape(System.IServiceProvider)"/> method and adds the created
            object to the connected <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.</remarks>
            <seealso cref="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.AddGraphicObject(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.CreatePolyPointsShape(System.IServiceProvider)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.AddGraphicObject(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Adds the specified object to the connected <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
            <param name="obj">The object to add to the view.</param>
            <param name="container">The destination container.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.CreatePolyPointsShape(System.IServiceProvider)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.Graphic.IPolyPointsShape"/> instance.
            </summary>
            <remarks>This methods uses <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.Factory"/> property to create the new graphic object.</remarks>
            <returns>A <see cref="T:ILOG.Diagrammer.Graphic.IPolyPointsShape"/> instance.</returns>
            <seealso cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.Factory"/>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.GetInvalidateRect">
            <summary>
            Gets the rectangle to invalidate during ghost drawing operation.
            </summary>
            <returns>The rectangle to invalidate.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.Accept(ILOG.Diagrammer.Point2D)">
            <summary>
            Returns whether the specified point should be added.
            </summary>
            <param name="point">The point to add.</param>
            <returns>Whether the specified point should be added.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.GetPoints(System.Boolean)">
            <summary>
            Gets the current shape definition points.
            </summary>
            <param name="transformed"><langword>true</langword> if the points should be transformed
            in view coordinates, <langword>false</langword> otherwise.</param>
            <returns>The shape definition points.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.AddPoint(System.Drawing.Point)">
            <summary>
            Adds a new shape definition point.
            </summary>
            <param name="point">The point to add.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.AddPointOpaque(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Transform)">
            <summary>
            Adds a definition point when in opaque mode.
            </summary>
            <param name="point">The point to add.</param>
            <param name="t">The <see cref="T:ILOG.Diagrammer.Transform"/> to apply, if any.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.MakePoints(System.Int32)">
            <summary>
            Ensures the internal definition points array can store the specified 
            number of points.
            </summary>
            <param name="count">The number of points.</param>
            <returns>The internal array.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.CheckDistance(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            Gets whether the distance between the specified points is valid according to the
            <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.MinDistanceBetweenPoints"/> property.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <returns><langword>true</langword> if the distance between the two points is enough, 
            <langword>false</langword> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.DrawGhost(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Draws the ghost.
            </summary>
            <remarks>The method can be overridden to do temporary drawing when the interactor is working.</remarks>
            <param name="context">The graphics context.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.Factory">
            <summary>
            Gets or sets the factory used to create new shapes.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Windows.Forms.IPolyPointsShapeFactory"/> instance.</value>
            <remarks>The factory determined both the type of the shape to create and 
            additional information about the behavior of the interaction.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.FactoryChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.Factory"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.SnapToGrid">
            <summary>
            Gets or sets whether the points are aligned on the grid.
            </summary>
            <value><see langword="true"/> if the points are aligned on the grid;
            <see langword="false"/> otherwise.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.SnapToGridChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.SnapToGrid"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.FreeHandMode">
            <summary>
            Gets or sets a value indicating whether free hand mode is active.
            </summary>
            <value><see langword="true"/> if the free hand mode is active;
            <see langword="false"/> otherwise.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.FreeHandModeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.FreeHandMode"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.DefaultStroke">
            <summary>
            Gets or sets the stroke of the created shape.
            </summary>
            <value>The stroke of the created shape.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.DefaultStrokeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.DefaultStroke"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.DefaultFill">
            <summary>
            Gets or sets the fill of the created shape.
            </summary>
            <value>The fill of the created shape.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.DefaultFillChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.DefaultFill"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.MinDistanceBetweenPoints">
            <summary>
            Gets or sets the minimum distance between two successive points.
            </summary>
            <value>The minimum distance between two successive points.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.MinDistanceBetweenPointsChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.MinDistanceBetweenPoints"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.EndOnRightClick">
            <summary>
            Gets or sets whether the interaction ends on a right click.
            </summary>
            <remarks>This mode is in addition to the default behavior that ends the interaction
            on a double click.</remarks>
            <value><see langword="true"/> if the interaction ends on a right click;
            <see langword="false"/> otherwise.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.EndOnRightClickChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.EndOnRightClick"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.CancelOnDisconnect">
            <summary>
            Gets or sets whether the interaction is canceled when the view is disconnected
            while in operation.
            </summary>
            <value><see langword="true"/> if the interaction is canceled when the view is disconnected
            while in operation; <see langword="false"/> otherwise.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.CancelOnDisconnectChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.CancelOnDisconnect"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.Count">
            <summary>
            Gets the current number of points.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.ObjectCreated">
            <summary>
            Occurs when a <see cref="T:ILOG.Diagrammer.Graphic.IPolyPointsShape"/> has been created.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.Cursor">
            <summary>
            Gets or sets the cursor used when the interactor is active.
            </summary>
            <value>The cursor used when the interactor is active.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.CursorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreatePolyPointsInteractor.Cursor"/> property is changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.GraphLayoutConfigurationDialog">
            <summary>
            A dialog that edits the graph layout properties of a <see cref="P:ILOG.Diagrammer.Windows.Forms.GraphLayoutConfigurationDialog.GraphicContainer"/>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GraphLayoutConfigurationDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GraphLayoutConfigurationDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GraphLayoutConfigurationDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GraphLayoutConfigurationDialog.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.GraphLayoutConfigurationDialog"/> class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GraphLayoutConfigurationDialog.GraphicContainer">
            <summary>
            Gets or sets the <see cref="P:ILOG.Diagrammer.Windows.Forms.GraphLayoutConfigurationDialog.GraphicContainer"/> whose graph layout properties will be edited.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Printing.DiagramPrintDocument">
             <summary>
             Defines a reusable object to send the contents of a <see cref="T:ILOG.Diagrammer.GraphicContainer"/> to the printer.
             </summary>
             <remarks> 
             <p>This class derives from the <see cref="T:ILOG.Diagrammer.Printing.ExtendedPrintDocument"/> class and allows you to
             send the contents of a <see cref="T:ILOG.Diagrammer.GraphicContainer"/> to the printer.</p>
             <p>Typically you create an instance of the <see cref="T:ILOG.Diagrammer.Printing.DiagramPrintDocument"/> class,
             set the properties that describe how to print, such as the header and footer, and use the <see cref="M:System.Drawing.Printing.PrintDocument.Print">Print</see>
             method to start the printing process.</p>
             <p>The <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Content"/> property is used to specify the <see cref="T:ILOG.Diagrammer.GraphicContainer"/> that will be printed. The
             <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.PrintAll"/> and <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.ContentPrintArea"/> properties are used to determine the area of the container
             that will be printed. The <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Rows"/>, <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Columns"/>, <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Zoom"/> and <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.AutoZoom"/>
             properties can be used to specify the zoom factor at which the printing will occur.</p>
            </remarks>
             <example>
             <para lang="cs,vbnet">The following sample shows how to print a diagram.</para>
             <code lang="cs">
             Group container = new Group();
             Ellipse ellipse = new Ellipse(0, 0, 100, 100);
             container.Objects.Add(ellipse);
             DiagramPrintDocument document = new DiagramPrintDocument(container);
             document.AutoZoom = true;
             document.Rows = 2;
             document.Columns = 2;
             document.PrinterSettings.PrinterName = "MyPrinter";
             document.Print();
             </code>
             <code lang="vbnet">
             Dim container As Group = New Group
             Dim ellipse As Ellipse = New Ellipse(0, 0, 100, 100)
             container.Objects.Add(ellipse)
             Dim document As DiagramPrintDocument = New DiagramPrintDocument(container)
             document.AutoZoom = true
             document.Rows = 2
             document.Columns = 2
             document.PrinterSettings.PrinterName = "MyPrinter"
             document.Print()
             </code>
             </example>
             <seealso cref="T:ILOG.Diagrammer.Printing.HeaderFooter"/>
             <seealso cref="T:ILOG.Diagrammer.Windows.Forms.DiagramPageSetupDialog"/>
             <seealso cref="T:ILOG.Diagrammer.Windows.Forms.DiagramPrintPreviewDialog"/>
        </member>
        <member name="F:ILOG.Diagrammer.Printing.DiagramPrintDocument._realContentPrintArea">
            <summary>
            The area of the graphic container that will be printed
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Printing.DiagramPrintDocument._realColumns">
            <summary>
            The number of columns of the final print.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Printing.DiagramPrintDocument._realRows">
            <summary>
            The number of rows of the final print.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Printing.DiagramPrintDocument._alignmentOffset">
            <summary>
            The offset that comes from the alignment field
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Printing.DiagramPrintDocument._pageScale">
            <summary>
            The zoom factor to apply to each page.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.DiagramPrintDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Printing.DiagramPrintDocument"/> class.
            </summary>
            <remarks>
             A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> object must be associated with the document
             before any use.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.DiagramPrintDocument.#ctor(ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Printing.DiagramPrintDocument"/> class.
            </summary>
            <param name="contents">The <see cref="T:ILOG.Diagrammer.GraphicContainer"/> object to be associated with the document.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.DiagramPrintDocument.#ctor(ILOG.Diagrammer.GraphicContainer,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Printing.DiagramPrintDocument"/> class.
            </summary>
            <param name="contents">The <see cref="T:ILOG.Diagrammer.GraphicContainer"/> object to be associated with the document.</param>
            <param name="area">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure that represents the area to be printed.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.DiagramPrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Drawing.Printing.PrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">PrintDocument.OnBeginPrint</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.DiagramPrintDocument.OnPrintPageContent(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Prints the contents of a page.
            </summary>
            <param name="ppea">
            A <see cref="T:System.Drawing.Printing.PrintPageEventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.DiagramPrintDocument.GetPageBounds(System.Int32,System.Int32)">
            <summary>
            Gets the bounds of the specified page in <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Content"/> coordinates.
            </summary>
            <param name="column">An index that represents the column of the page.</param>
            <param name="row">An index that represents the row of the page.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.DiagramPrintDocument.GetPageBounds(System.Int32)">
            <summary>
            Gets the bounds of the specified page in <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Content"/> coordinates.
            </summary>
            <param name="page">An index that represents the page.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.DiagramPrintDocument.OnInitialized(System.EventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.Printing.DiagramPrintDocument.Initialized"/> event.
            </summary>
            <param name="args">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Printing.DiagramPrintDocument.FormatPageIndex">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Printing.ExtendedPrintDocument.FormatPageIndex">ExtendedPrintDocument.FormatPageIndex</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.IsInitialized">
            <summary>
            Indicates whether the print document has already been initialized with the printer settings.
            </summary>
            <value><see langword="true"/> if the print document has already been initialized;
            otherwise <see langword="false"/>.</value>
            <remarks>When this property returns <see langword="false"/>, using the <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.PrintedRows"/> or <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.PrintedColumns"/>
            properties will raised an exception.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Columns">
            <summary>
            Gets or sets the number of pages per band to print.
            </summary>
            <value>The number of pages per band to print.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The property value 
            is negative.</exception>
            <remarks>
            <p>When the <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.AutoZoom"/> property is set to <see langword="true"/>, the zoom factor used when printing the
            document is computed so that the result will fit in the pages defined by the <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Rows"/> 
            and <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Columns"/> properties.</p>
            <p>When the <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.AutoZoom"/> property is set to <see langword="false"/>, the number of pages needed will be automatically 
            computed using the <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Zoom"/> property.</p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Rows"/>
            <seealso cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.AutoZoom"/>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Rows">
            <summary>
            Gets or sets the number of pages per band to print.
            </summary>
            <value>The number of pages per band to print.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The property value 
            is negative.</exception>
            <remarks>
            <p>When the <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.AutoZoom"/> property is set to <see langword="true"/>, the zoom factor used when printing the
            document is computed so that the result will fit in the pages defined by the <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Rows"/> 
            and <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Columns"/> properties.</p>
            <p>When the <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.AutoZoom"/> property is set to <see langword="false"/>, the number of pages needed will be automatically 
            computed using the <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Zoom"/> property.</p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Columns"/>
            <seealso cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.AutoZoom"/>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.PrintAll">
            <summary>
            Gets or sets a value that indicates whether the whole area of the diagram 
            must be printed.
            </summary>
            <value><see langword="true"/> if the document will print the whole diagram,
            otherwise <see langword="false"/>. The default value 
            is <see langword="true"/>. </value>
            <remarks>When this property is set to <see langword="false"/>, the <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.ContentPrintArea"/> property
            is used to determine which area will be printed.</remarks>
            <seealso cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.ContentPrintArea"/>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Content">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.GraphicContainer"/> object to print.
            </summary>
            <value>The <see cref="T:ILOG.Diagrammer.GraphicContainer"/> object to print.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.ContentPrintArea">
            <summary>
            Gets or sets the area of the <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Content"/> that will be printed.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure that represents the area of the <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Content"/> that will be printed.</value>
            <remarks>This value is only used when the <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.PrintAll"/> property is set to <see langword="false"/>.</remarks>
            <seealso cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.PrintAll"/>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.AutoZoom">
            <summary>
            Gets or sets a value that indicates whether the zoom factor used for printing will be automatically 
            adjusted.
            </summary>
            <value><see langword="true"/> if the zoom factor used for printing will be automatically 
            adjusted, otherwise <see langword="false"/>. The default value 
            is <see langword="false"/>.</value>
            <remarks>
            <p>When this property is set to <see langword="true"/>, the zoom factor used when printing the
            document is computed so that the result will fit in the pages defined by the <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Rows"/> 
            and <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Columns"/> properties.</p>
            <p>When this property is set to <see langword="false"/>, the number of pages needed will be automatically 
            computed using the <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Zoom"/> property.</p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Zoom"/>
            <seealso cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Rows"/>
            <seealso cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Columns"/>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.Zoom">
            <summary>
            Gets or sets the zoom factor used when printing the document.
            </summary>
            <value>A <see cref="T:System.Single"/> value that represents the zoom factor used when printing the document.
            The default value is <strong>1</strong>, which means that no zoom factor will be applied.</value>
            <remarks>This value is only used when the <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.AutoZoom"/> property is set to <see langword="false"/>.</remarks>
            <seealso cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.AutoZoom"/>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.ContentAlignment">
            <summary>
            Gets or sets the alignment of the drawing when it is smaller than the printing area.
            </summary>
            <value>One of the <see cref="T:System.Drawing.ContentAlignment"/> values. 
            The default value is <see cref="F:System.Drawing.ContentAlignment.MiddleCenter"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.PrintedRows">
            <summary>
            Gets the number of rows on which the printing will be achieved, taking into account the <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.AutoZoom"/> feature.
            </summary>
            <value>A <see cref="T:System.Int32"/> that represents the number of rows on which the printing will be achieved.</value>
            <remarks>This method should only be called after the document has been initialized during the printing process, or an exception will be thrown.
            See the <see cref="E:ILOG.Diagrammer.Printing.DiagramPrintDocument.Initialized"/> events.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.PrintedColumns">
            <summary>
            Gets the number of columns on which the printing will be achieved, , taking into account the <see cref="P:ILOG.Diagrammer.Printing.DiagramPrintDocument.AutoZoom"/> feature.
            </summary>
            <value>A <see cref="T:System.Int32"/> that represents the number of columns on which the printing will be achieved.</value>
            <remarks>This method should only be called after the document has been initialized during the printing process, or an exception will be thrown.
            See the <see cref="E:ILOG.Diagrammer.Printing.DiagramPrintDocument.Initialized"/> events.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Printing.DiagramPrintDocument.Initialized">
            <summary>
            Occurs when the document has been initialized during the printing process.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.GraphModelData">
            <summary>
            <strong>GraphModelData</strong> is a data extension needed for eac
            graph model. It is stored as property in each graph model.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelData.#ctor(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            Private constructor
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelData.Get(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Returns the graph model data of a graph model.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelData.SetInternalGraphModelChecking(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Boolean)">
            <summary>
            This is only here for translation purpose.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.Internal.GraphModelData.InternalGraphModelChecking">
            <summary>
            Gets whether the extended checking of internally created
            graph models is enabled.
            </summary>
            <remarks>
            If a grapher is attached directly, a graph model is created
            internally. Internally created graph models are automatically
            disposed of when no longer needed. If the checking is enabled,
            exceptions are thrown in certain situations that are a potential
            misuse of the internally created graph model, since it may be
            disposed of too early.
            The option is enabled by default.
            Normally, you should not disable this option.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.Internal.GraphModelData.DuringRecursiveLayout">
            <summary>
            Gets whether we are inside a recursive layout.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.Direction">
            <summary>
            The C# replacement of IlvDirection. For internal use only.
            This shared enum ensures that, for instance, TreeLayoutFlowDirection.Left 
            has the same int value as TreeLayoutLevelJustification.Left, such that we
            can translate the Java usages of IlvDirection.Left into Direction.Left without
            needing to choose among TreeLayoutFlowDirection.Left or TreeLayoutLevelJustification.Left
            depending on the context.
            <remarks>
            Not all values of Direction are supported by all layout properties
            taking such an argument!!! In particular, the value "Center" is
            supported by some, but not by others.
            </remarks>
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.Direction.Left">
            <summary>
            The left direction.        
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.Direction.Right">
            <summary>
            The right direction.        
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.Direction.Top">
            <summary>
            The top direction.        
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.Direction.Bottom">
            <summary>
            The bottom direction.        
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.Direction.Center">
            <summary>
            The center direction.        
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.Direction.BadPosition">
            <summary>
            The center direction.        
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.LinkStyles">
            <summary>
            All the constants used for any link styles.
            This ensures that ALL individual and global link styles of ALL layout
            algorithms share the same values.
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.LinkStyles.NoReshapeStyle">
            <summary>
            No reshape style.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.LinkStyles.StraightLineStyle">
            <summary>
            Straight line style.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.LinkStyles.OrthogonalStyle">
            <summary>
            Orthogonal style.
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.LinkStyles.PolylineStyle">
            <summary>
            Polyline style.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.LinkStyles.DirectStyle">
            <summary>
            Direct style.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.LinkStyles.TwoBendsOrthogonalStyle">
            <summary>
            Two bends orthogonal style.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.LinkStyles.ThreeBendsOrthogonalStyle">
            <summary>
            Three bends orthogonal style.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.LinkStyles.MixedStyle">
            <summary>
            Mixed style.        
            </summary>           
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.ReshapeModes">
            <summary>
            All the constants used for reshape modes.    
            This ensures that ALL reshape modes of ALL layout
            algorithms share the same values.
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.ReshapeModes.FixedShapeTypeMode">
            <summary>
            Fixed shape type mode.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.ReshapeModes.FixedNodeSidesMode">
            <summary>
            Fixed node sides mode.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.ReshapeModes.FixedConnectionPointsMode">
            <summary>
            Fixed connection points mode.
            </summary>   
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions">
            <summary>
            All constants used for any alignment options.
            This ensures that ALL setAlignment or setGlobalAlignment of ALL layout
            algorithms use the same constants.    
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Unspecified">
            <summary>
            Unspecified.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Center">
            <summary>
            Center.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Left">
            <summary>
            Left.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Right">
            <summary>
            Right.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Top">
            <summary>
            Top.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Bottom">
            <summary>
            Bottom.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.BorderCenter">
            <summary>
            BorderCenter.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.East">
            <summary>
            Unspecified.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.West">
            <summary>
            West.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.North">
            <summary>
            Unspecified.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.South">
            <summary>
            South.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.TipOver">
            <summary>
            TipOver.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.TipOverBothSides">
            <summary>
            Unspecified.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.MixedStyle">
            <summary>
            MixedStyle.        
            </summary>           
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Mixed">
            <summary>
            Mixed.        
            </summary>   
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.ConnectorStyles">
            <summary>
            All the constants used for connector styles.
            Currently, hierarchical layout, tree layout and short link layout
            use the connector styles.
            It ensures that they all use the same coding. Notice that the different
            layouts may support the same set of values.  
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.ConnectorStyles.Automatic">
            <summary>
            AutomaticPins.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.ConnectorStyles.Centered">
            <summary>
            CenteredPins.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.ConnectorStyles.Clipped">
            <summary>
            ClippedPins.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.ConnectorStyles.EvenlySpaced">
            <summary>
            EvenlySpacedPins.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.ConnectorStyles.FixedOffset">
            <summary>
            FixedOffsetPins.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.ConnectorStyles.MixedStyle">
            <summary>
            MixedStyle.        
            </summary>   
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.TLayoutModes">
            <summary>
            The constants used for the tree layout modes.   
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.TLayoutModes.Free">
            <summary>
            Free.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.TLayoutModes.Level">
            <summary>
            Level.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.TLayoutModes.Radial">
            <summary>
            Radial.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.TLayoutModes.AlternatingRadial">
            <summary>
            AlternatingRadial.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.TLayoutModes.TipLeavesOver">
            <summary>
            TipLeavesOver.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.TLayoutModes.TipRootsOver">
            <summary>
            TipRootsOver.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.TLayoutModes.TipRootsAndLeavesOver">
            <summary>
            TipRootsAndLeavesOver.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.TLayoutModes.TipOver">
            <summary>
            TipOver.        
            </summary>   
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.ConnectionPointModes">
            <summary>
            The constants used for connection point modes.
            the tree layout modes.
            </summary>   
            <remarks>
            This ensures that ALL setOrigin/DestinationPointMode or 
            setGlobalOrigin/DestinationPointMode of ALL layout
            algorithms share the same values. 
            </remarks>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.ConnectionPointModes.FreeMode">
            <summary>
            Free mode.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.ConnectionPointModes.FixedMode">
            <summary>
            Fixed mode.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.ConnectionPointModes.MixedMode">
            <summary>
            Mixed mode.        
            </summary>   
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.RLayoutPropagateCodes">
            <summary>
            The constants used for recursive layout propagate methods.
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.RLayoutPropagateCodes.Success">
            <summary>
            This bit indicates that the method was found and successfully
            invoked and executed by reflection.
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.RLayoutPropagateCodes.Ambiguous">
            <summary>
            This bit indicates an ambiguous situation. Several method were
            found with the same name and matching parameter types.
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.RLayoutPropagateCodes.ClassMismatch">
            <summary>
            This bit indicates that the object has not the required class to
            invoke the method by reflection.
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.RLayoutPropagateCodes.MethodMismatch">
            <summary>
            This bit indicates that the no appropriate method was found to be
            invoked. Note that the reason could be that the security manager
            forbids the reflection API.
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.RLayoutPropagateCodes.Exception">
            <summary>
            This bit indicates that the method was found and invoked, but its
            execution throwed an exception.
            </summary>   
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.RLayout.RLayoutModes">
            <summary>
            The constants used for recursive layout modes.
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.RLayout.RLayoutModes.ReferenceLayoutMode">
            <summary>
            The reference layout is used.
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.RLayout.RLayoutModes.InternalProviderMode">
            <summary>
            The internal provider is used.
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.RLayout.RLayoutModes.SpecifiedProviderMode">
            <summary>
            The specified provider is used.
            </summary>   
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphLayoutConstraintCollection`1">
            <summary>
            This class defines a collection of graph layout constraints.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutConstraintCollection`1.InsertItem(System.Int32,ILOG.Diagrammer.GraphLayout.IGraphLayoutConstraint)">
            <summary>
            Invoked when an item is inserted.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutConstraintCollection`1.RemoveItem(System.Int32)">
            <summary>
            Invoked when an item is removed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutConstraintCollection`1.SetItem(System.Int32,ILOG.Diagrammer.GraphLayout.IGraphLayoutConstraint)">
            <summary>
            Invoked when an item is replaced.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutConstraintCollection`1.ClearItems">
            <summary>
            Invoked when the collection is cleared.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.PathDataConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Not used because GetCreateInstanceSupported returns false.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.SubgraphCorrectionBoundsFixed">
            <summary>
            This subgraph correction strategy keeps the bounds of a subgraph
            fixed during recursive layout.
            </summary>
            <remarks>
            This works only if the graph model is an instance of
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/> and
            the subgraph is an instance of
            <see cref="T:ILOG.Diagrammer.GraphicObject"/>. Otherwise it behaves
            like <see cref="T:ILOG.Diagrammer.GraphLayout.SubgraphCorrectionBarycenterFixed"/>. While the
            strategy <see cref="T:ILOG.Diagrammer.GraphLayout.SubgraphCorrectionBarycenterFixed"/> only affects
            the position of the subgraph, this strategy potentially affects the
            zoom level of the subgraph as well. 
            <p>
            If you use a Recursive Layout (see <see cref="T:ILOG.Diagrammer.GraphLayout.RecursiveLayout"/>) on
            a nested graph and all subgraphs are laid out completely, and the
            layout mode of all layouts is not incremental, then you do not need
            to install any subgraph correction at the Recursive Layout. However,
            in the following situations, it is useful to install this subgraph
            correction strategy: 
            <UL>
            <LI> The subgraph is laid out, but its parent graph is not laid out
            (because no layout is specified for the parent graph).</LI> 
            <LI> The subgraph is laid out, but the subgraph is specified as fixed
            inside the parent graph (for instance by
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetFixed(System.Object)"/>).</LI>
            
            <LI> The subgraph and its parent graph are laid out, but the layout
            of the parent graph uses an incremental mode that analyzes the old
            position of the subgraph (see for instance
            <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.IncrementalMode"/>
            or
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>).
            </LI> 
            </UL>
            If subgraphs of type <see cref="T:ILOG.Diagrammer.GraphicContainer"/>
            are used, the layout of the subgraph affects the bounding box of the
            subgraph. The subgraph may appear at a completely different position
            after layout, even though no layout of the parent graph was performed
            that contains the subgraph as a node, and even though
            <see cref="M:ILOG.Diagrammer.GraphicObject.Move(ILOG.Diagrammer.Point2D)"/> was never
            called for the subgraph.  By installing this subgraph correction
            strategy, this effect is eliminated because the subgraphs are moved
            back to their bounds after layout. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SubgraphCorrectionInterface"/>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.SubgraphCorrectionBarycenterFixed">
            <summary>
            This subgraph correction strategy keeps the barycenter of a subgraph
            fixed during recursive layout.
            </summary>
            <remarks> 
            <p>
            If you use a Recursive Layout (see <see cref="T:ILOG.Diagrammer.GraphLayout.RecursiveLayout"/>) on
            a nested graph and all subgraphs are laid out completely, and the
            layout mode of all layouts is not incremental, then you do not need
            to install any subgraph correction at the Recursive Layout. However,
            in the following situations, it is useful to install this subgraph
            correction strategy: 
            <UL>
            <LI> The subgraph is laid out, but its parent graph is not laid out
            (because no layout is specified for the parent graph).</LI> 
            <LI> The subgraph is laid out, but the subgraph is specified as fixed
            inside the parent graph (for instance by
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetFixed(System.Object)"/>).</LI>
            
            <LI> The subgraph and its parent graph are laid out, but the layout
            of the parent graph uses an incremental mode that analyzes the old
            position of the subgraph (see for instance
            <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.IncrementalMode"/>
            or
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.IncrementalMode"/>).
            </LI> 
            </UL>
            If subgraphs of type <see cref="T:ILOG.Diagrammer.GraphicContainer"/>
            are used, the layout of the subgraph affects the bounding box of the
            subgraph. The subgraph may appear at a completely different position
            after layout, even though no layout of the parent graph was performed
            that contains the subgraph as a node, and even though
            <see cref="M:ILOG.Diagrammer.GraphicObject.Move(ILOG.Diagrammer.Point2D)"/> was never
            called for the subgraph.  By installing this subgraph correction
            strategy, this effect is eliminated because the subgraphs are moved
            back to their old barycenter after layout. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SubgraphCorrectionInterface"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.SubgraphCorrectionBarycenterFixed.#ctor">
            <summary>
            Creates a new <strong>SubgraphCorrectionBarycenterFixed</strong>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.SubgraphCorrectionBarycenterFixed.Correct(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Corrects the subgraph position by moving its center to the center of
            the input bounding box.
            </summary>
            <remarks>
            This is called by the Recursive Layout (see
            <see cref="T:ILOG.Diagrammer.GraphLayout.RecursiveLayout"/>) immediately after the layout of the
            subgraph has finished.
            <p>
            </p>
            </remarks>
            <param name="subgraph"> The subgraph that has been laid out.
            </param>
            <param name="layout"> The layout that has been performed on the
            subgraph.
            </param>
            <param name="boundingBox"> The former bounding box of the subgraph
            at the point in time before the layout.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SubgraphCorrectionInterface"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.SubgraphCorrectionBoundsFixed.#ctor">
            <summary>
            Creates a new <strong>SubgraphCorrectionBoundsFixed</strong>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.SubgraphCorrectionBoundsFixed.Correct(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayout,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Corrects the subgraph bounds by trying to reshape the subgraph to
            the input bounding box.
            </summary>
            <remarks>
            The success depends on various modes of
            <see cref="T:ILOG.Diagrammer.GraphicContainer"/> that permit or forbid
            movements or zoom level changes. This is called by the Recursive
            Layout (see <see cref="T:ILOG.Diagrammer.GraphLayout.RecursiveLayout"/>) immediately after the
            layout of the subgraph has finished.
            <p>
            </p>
            </remarks>
            <param name="subgraph"> The subgraph that has been laid out.
            </param>
            <param name="layout"> The layout that has been performed on the
            subgraph.
            </param>
            <param name="boundingBox"> The former bounding box of the subgraph
            at the point in time before the layout.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.RecursiveLayout.SubgraphCorrectionInterface"/>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ViewChangeEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.Windows.Forms.ViewInteractor.ViewChanged"/> event of a <see cref="T:ILOG.Diagrammer.Windows.Forms.ViewInteractor"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.Windows.Forms.ViewInteractor.ViewChanged"/> and <see cref="E:ILOG.Diagrammer.Windows.Forms.ViewInteractor.ViewChanging"/> events
            of the <see cref="T:ILOG.Diagrammer.Windows.Forms.ViewInteractor"/> class.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs._old">
            <summary>
            The view that was previously attached to this interactor.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs._new">
            <summary>
            The new view that is (or about to be) attached to this interactor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs.#ctor(ILOG.Diagrammer.Windows.Forms.DiagramView,ILOG.Diagrammer.Windows.Forms.DiagramView)">
            <summary>
            internal contructor
            </summary>
            <param name="oldView">The view that was previously attached to this interactor.</param>
            <param name="newView">The new view that is attached to this interactor.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs.OldView">
            <summary>
            The view that was previously attached to this interactor.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs.NewView">
            <summary>
            The new view that is attached to this interactor.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> instance.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.GraphicObjectCreatedEventHandler">
            <summary>
            Represents the method that handles the 
            <see cref="E:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.ObjectCreated">CreateGraphicObjectInteractor.ObjectCreated</see> event of 
            a <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.GraphicObjectCreatedEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor.ObjectCreated">CreateGraphicObjectInteractor.ObjectCreated</see> event of a <see cref="T:ILOG.Diagrammer.Windows.Forms.CreateGraphicObjectInteractor"/>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GraphicObjectCreatedEventArgs._object">
            <summary>
            The created graphic object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GraphicObjectCreatedEventArgs.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.GraphicObjectCreatedEventArgs"/> class.
            </summary>
            <param name="newObject">The <see cref="P:ILOG.Diagrammer.Windows.Forms.GraphicObjectCreatedEventArgs.GraphicObject"/> that has been created.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GraphicObjectCreatedEventArgs.GraphicObject">
            <summary>
            The object that has been created.
            </summary>
            <value>A <see cref="P:ILOG.Diagrammer.Windows.Forms.GraphicObjectCreatedEventArgs.GraphicObject"/> instance.</value>
        </member>
        <member name="M:ILOG.Diagrammer.Util.DiagramUtil.PrepareLinksForDuplication(System.Collections.ICollection)">
            <summary>
            Sets the "DontSerializeStart/EndAnchor" properties on links when necessary.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Util.DiagramUtil.CleanupDuplicatedLinks(System.Collections.ICollection)">
            <summary>
            Cleans up the "DontSerializeStart/EndAnchor" properties on links when necessary.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Util.DiagramUtil.CollectionContains(System.Collections.ICollection,ILOG.Diagrammer.GraphicObject)">
            <summary>
            Used by the previous methods.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.SolidFill">
            <summary>
            Defines a solid color fill.
            </summary>
            <remarks><see cref="T:ILOG.Diagrammer.SolidFill"/> allows filling an area with a <see cref="T:System.Drawing.Color"/>. You
            specify the color through the <see cref="P:ILOG.Diagrammer.SolidFill.Color"/> property.</remarks>
            <example>
            <para lang="cs,vbnet">
            The following example creates an ellipse filled with a blue solid fill.
            </para>
            <code lang="cs">     
            Ellipse CreateEllipseWithSolidFill()
            {
                Ellipse ellipse = new Ellipse(0, 0, 100, 100);
                SolidFill myFill = new SolidFill(Color.Blue);
                ellipse.Fill = myFill;
                return ellipse;
            }
            </code>
            <code lang="vbnet">
            Function CreateEllipseWithSolidFill() As Ellipse 
                Dim ellipse As Ellipse = New Ellipse(0, 0, 100, 100) 
                Dim myFill As SolidFill = New SolidFill(Color.Blue) 
                ellipse.Fill = myFill 
                Return ellipse 
            End Function
            </code>
            <para lang="cs,vbnet">This example will produce the following image:</para>
            <br/><img src="images/SolidFill.png"/>
            </example>
            <seealso cref="T:ILOG.Diagrammer.LinearGradientFill"/>
            <seealso cref="T:ILOG.Diagrammer.PathGradientFill"/>
            <seealso cref="T:ILOG.Diagrammer.HatchFill"/>
            <seealso cref="T:ILOG.Diagrammer.TextureFill"/>
        </member>
        <member name="M:ILOG.Diagrammer.SolidFill.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.SolidFill"/> class.
            </summary>
            <remarks>The default color is black.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.SolidFill.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.SolidFill"/> class using the specified parameters.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color"/> that 
            represents the color of the fill.</param>
        </member>
        <member name="M:ILOG.Diagrammer.SolidFill.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.SolidFill"/> class using red, green and blue color components.
            </summary>
             <param name="red">The red component value for the color. Valid values are 0 through 255.</param>
             <param name="green">The green component value for the color. Valid values are 0 through 255.</param>
             <param name="blue">The blue component value for the color. Valid values are 0 through 255.</param>
        </member>
        <member name="M:ILOG.Diagrammer.SolidFill.#ctor(System.Drawing.Color,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.SolidFill"/> class using the specified parameters.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color"/> that 
            represents the color of the fill.</param>
            <param name="opacity">A <see cref="T:System.Single"/> in the range [0..1]. <strong>0</strong> means transparent, and 
            <strong>1</strong> means opaque.</param>
        </member>
        <member name="M:ILOG.Diagrammer.SolidFill.GetBrush(ILOG.Diagrammer.Rectangle2D,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Fill.GetBrush(ILOG.Diagrammer.Rectangle2D,System.Drawing.Drawing2D.GraphicsPath)">Fill.GetBrush</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SolidFill.GetHashCode">
            <summary>
            Computes the hashcode for the object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SolidFill.Equals(System.Object)">
            <summary>
            Tests whether <paramref name="obj"/> is a <see cref="T:ILOG.Diagrammer.SolidFill"/> with 
            the same definition of this <see cref="T:ILOG.Diagrammer.SolidFill"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
        </member>
        <member name="M:ILOG.Diagrammer.SolidFill.ToString">
            <summary>
            This member overrides <see cref="M:System.Object.ToString">Object.ToString</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.SolidFill.Color">
            <summary>
            Gets or sets the fill color.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that 
            represents the color of the fill. The default value is black.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.PanInteractor">
            <summary>
            An interactor to pan a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.PanInteractor._defHoverCursor">
            <summary>
            The handUp default cursor
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.PanInteractor._defPanCursor">
            <summary>
            The 'HandDown' default cursor
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.PanInteractor._hoverCursor">
            <summary>
            The cursor when the mouse hovers the view.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.PanInteractor._panCursor">
            <summary>
            The cursor when the view is panning
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.PanInteractor._startPt">
            <summary>
            The starting location of the interaction.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.PanInteractor._prevPt">
            <summary>
            the previous cursor location
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.PanInteractor._prevTransform">
            <summary>
            The initial view transform
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.PanInteractor._bbox">
            <summary>
            The ghost rectangle
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.PanInteractor._opaqueEdit">
            <summary>
            whether the transformation is applied during the interaction
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.PanInteractor"/> PanInteractor class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.#ctor(System.Windows.Forms.MouseButtons)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.PanInteractor"/> PanInteractor class.
            </summary>
            <param name="buttons">The button that starts the interaction.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.OnGhostColorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.GhostColor"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>GhostColor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.OnDashStyleChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.DashStyle"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>DashStyle</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.OnOpaqueEditChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.OpaqueEdit"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>OpaqueEdit</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.ShouldSerializeHoverCursor">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.HoverCursor"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.ResetHoverCursor">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.HoverCursor"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.OnHoverCursorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.HoverCursor"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>ZoomCursor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.ShouldSerializePanCursor">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.PanCursor"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.ResetPanCursor">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.PanCursor"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.OnPanCursorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.PanCursor"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>PanCursor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.OnViewChanged(ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs)">
            <summary>
            Invoked when this interactor is connected to or disconnected from a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseDown</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseMove</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseUp(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseUp</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">ViewInteractor.OnKeyDown</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.TranslateView(System.Single,System.Single)">
            <summary>
            Translates the view by the specified amount.
            </summary>
            <param name="dx">The x translation in the view coordinate system.</param>
            <param name="dy">The y translation in the view coordinate system.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.StartInteraction">
            <summary>
             Invoked when the interaction starts.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.StopInteraction(System.Boolean)">
            <summary>
             Invoked when the interaction ends.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.UpdateStatusBarText">
            <summary>
            This method overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.UpdateStatusBarText">ViewInteractor.UpdateStatusBarText</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.PanInteractor.DrawGhost(ILOG.Diagrammer.DrawingContext)">
            <summary>
            Draws the dragged rectangle.
            </summary>
            <param name="context">The graphics context.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.GhostColor">
            <summary>
            Gets or sets the color of the dragged rectangle.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the color of the dragged rectangle.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.PanInteractor.GhostColorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.GhostColor"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.DashStyle">
            <summary>
            Gets or sets the dash style of the ghost.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the dash style of the ghost.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.PanInteractor.DashStyleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.DashStyle"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.OpaqueEdit">
            <summary>
            Gets or sets whether the translation is applied during the interaction.
            </summary>
            <value><see langword='true'/>if the translation is applied during the interaction; 
            <see langword='false'/> if the translation is applied once the interaction is completed.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.PanInteractor.OpaqueEditChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.OpaqueEdit"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.HoverCursor">
            <summary>
            Gets or sets the cursor used when the mouse moves over the view.
            </summary>
            <value>The cursor used when the mouse moves over the view.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.PanInteractor.HoverCursorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.HoverCursor"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.PanCursor">
            <summary>
            Gets or sets the cursor used when panning the view.
            </summary>
            <value>The cursor used when panning the view.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.PanInteractor.PanCursorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.PanInteractor.PanCursor"/> property is changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Serialization.ExtendedPropertyBinding">
            <summary>
            Defines a binding between an IExtenderProvider property
            and a target object.
            </summary>
            <remarks>The property is described as an XmlNode and can be either an
            XmlAttribute or an XmlElement.<BR/>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ExtendedPropertyBinding.#ctor(System.Object,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Serialization.ExtendedPropertyBinding"/> class.
            </summary>
            <param name="extendee"> The object that is extended by this property.</param>
            <param name="propertyNode">The node describing the property.</param>
        </member>
        <member name="T:ILOG.Diagrammer.Serialization.XmlSerializationManager">
            <summary>
            An implementation of <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager"/> specialized in XML serialization.
            </summary>
            <remarks>
            The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> class provide supports for XML serialization in
            a XAML-like format.
            
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.XmlSerializationManager._defaultAssembly">
            <summary>
            the default assembly (the one associated with the default namespace)
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.XmlSerializationManager._nameToDefTypes">
            <summary>
            the Types contained in the default assembly
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.XmlSerializationManager._prefix">
            <summary>
            the hashtable for prefix--namespace mapping 
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.XmlSerializationManager._assemblyMapping">
            <summary>
            the hashtable for type resolution 
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.XmlSerializationManager._elementsToObj">
            <summary>
            a hashtable for XmlElement--instance mapping
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.XmlSerializationManager._references">
            <summary>
            a hashtable for instance--XmlElement mapping
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.XmlSerializationManager._names">
            <summary>
            a hashtable for shared instances naming
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.XmlSerializationManager._defNameMapping">
            <summary>
            a hashtable for def:Name to XmlElement mapping
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.XmlSerializationManager._definitions">
            <summary>
            a list containing orphan definitions (that is instance that are reference
            but not serialized.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.XmlSerializationManager._inSession">
            <summary>
            a flag indicating whether we are in a session.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.XmlSerializationManager._extendedProperties">
            <summary>
            a list of extended property late invokation.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> class
            with an optional service provider.
            </summary>
            <param name="provider">An <see cref="T:System.IServiceProvider"/>.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.OnSessionCreated(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)">DesignerSerializationManager.OnSessionCreated</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.OnSessionDisposed(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)">DesignerSerializationManager.OnSessionDisposed</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.Reset">
            <summary>
            Resets this manager in its default state.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.CleanInternals">
            <summary>
            Clean the various internal tables and lists.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.GetType(System.String)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType(System.String)">DesignerSerializationManager.GetType</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.AddExtenderProvidedProperty(System.Object,System.Xml.XmlNode)">
            <summary>
            Registers the specified <see cref="T:System.ComponentModel.IExtenderProvider"/> property for late invokation on the given target.
            </summary>
            <remarks>The xml node can either be an <see cref="T:System.Xml.XmlElement"/> or an <see cref="T:System.Xml.XmlAttribute"/>.
            The node name must respect the following format: <i><b>providerRef</b></i>.<i><b>propertyName</b></i>, where:
            <ul><li><i>providerRef</i> is the name of the provider instance in the xml document (the name of an instance
            is defined by a def:Name attribute on its corresponding XmlElement).</li>
            <li><i>propertyName</i> is the name of the extended property.</li>
            </ul>
            This method cannot be called outside of a serialization session.
            </remarks>
            <param name="target">The target instance of this extended property.</param>
            <param name="propertyNode">An <see cref="T:System.Xml.XmlNode"/> describing the extended property.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.SetElement(System.Object,System.Xml.XmlElement)">
            <summary>
            Associates the specified instance to the specified <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <remarks>This method cannot be called outside of a serialization session.</remarks>
            <param name="obj">The instance created from the element.</param>
            <param name="element">The element describing the instance.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.GetElement(System.Object)">
            <summary>
            Returns the <see cref="T:System.Xml.XmlElement"/> associated with the specified instance.
            </summary>
            <param name="obj">An <see cref="T:System.Object"/>.</param>
            <returns>The <see cref="T:System.Xml.XmlElement"/> associated with the instance.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.GetInstance(System.Xml.XmlElement)">
            <summary>
            Returns the <see cref="T:System.Object"/> associated with the specified <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="element">An <see cref="T:System.Xml.XmlElement"/>.</param>
            <returns>The <see cref="T:System.Object"/> associated with the specified element.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.AddDefinition(System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Adds a new <see cref="T:System.Xml.XmlElement"/> to the orphan definitions list. Such
            definitions are defined as instances referenced in the serialized graph but not part 
            of the serialization graph.
            </summary>
            <remarks>This method cannot be called outside of a serialization session.</remarks>
            <param name="obj">An instance.</param>
            <param name="document">The document being serialized.</param>
            <param name="element">The <see cref="T:System.Xml.XmlElement"/> representing the xml declaration of the given instance.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.RemoveDefinition(System.Xml.XmlElement)">
            <summary>
            Removes the given element from the orphan definitions list.
            </summary>
            <remarks>This method cannot be called outside of a serialization session.</remarks>
            <param name="element">The <see cref="T:System.Xml.XmlElement"/> to remove.</param>
            <see cref="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.AddDefinition(System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.IsDefinition(System.Xml.XmlElement)">
            <summary>
            Returns whether the given element is an orhan definition.
            </summary>
            <remarks>This method cannot be called outside of a serialization session.</remarks>
            <param name="element">An <see cref="T:System.Xml.XmlElement"/></param>
            <returns><see langword="true"/> if the given element is an orphan definition,
            <see langword="false"/> otherwise.</returns>
            <see cref="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.AddDefinition(System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)"/>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.GetDefinitionsEnumerator">
            <summary>
            Gets an <see cref="T:System.Collections.IEnumerator"/> on the orphan definitions.
            </summary>
            <remarks>This method cannot be called outside of a serialization session.</remarks>
            <returns>an <see cref="T:System.Collections.IEnumerator"/> on the orphan definitions.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.CreateClassElement(System.Xml.XmlDocument,System.Type)">
            <summary>
            Creates an <see cref="T:System.Xml.XmlElement"/> that represents the declaration of an instance
            of the given type.
            </summary>
            <remarks>The element is qualified using:
            <ul><li>the default xml namespace if the given type is declared in the default assembly.</li>
            <li>the xml namespace associated with this type. Such a namespace is automatically generated
            and a prefix is set.</li>
            </ul>
            </remarks>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/> used to create the element.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of the instance.</param> 
            <returns>An <see cref="T:System.Xml.XmlElement"/> that represents the declaration of an instance
            of the given type.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.CreateNullElement(System.Xml.XmlDocument)">
            <summary>
            Creates an <see cref="T:System.Xml.XmlElement"/> representing a <see langword="null"/> value.
            </summary>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/> used to create the element.</param>
            <returns>An <see cref="T:System.Xml.XmlElement"/> representing a <see langword="null"/> value.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.IsNullElement(System.Xml.XmlElement)">
            <summary>
            Returns whether the specified element represents a <see langword="null"/> value.
            </summary>
            <param name="element">An <see cref="T:System.Xml.XmlElement"/> to test.</param>
            <returns><see langword="true"/> if the specified element represents a <see langword="null"/> value;
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.GetPrefix(System.Type)">
            <summary>
            Gets an xml prefix for the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">A <see cref="T:System.Type"/>.</param>
            <returns>An xml prefix for the given <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.ResolveType(System.Xml.XmlElement)">
            <summary>
            Returns the <see cref="T:System.Type"/> represented by the specified <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="classElement">An <see cref="T:System.Xml.XmlElement"/> that represents a class declaration.</param>
            <returns>The <see cref="T:System.Type"/> represented by the specified <see cref="T:System.Xml.XmlElement"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.GetAssemblyFromXmlns(System.String)">
            <summary>
            Returns the assembly full name contained the given xmlns declaration.
            </summary>
            <param name="xmlns">An xmlns declaration.</param>
            <returns>The assembly full name contained the xmlns declaration.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.GetNamespaceFromXmlns(System.String)">
            <summary>
            Returns the namespace name contained in the given xmlns declaration.
            </summary>
            <param name="xmlns">An xmlns declaration.</param>
            <returns>The namespace name contained in the given xmlns declaration</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.GetDefName(System.Xml.XmlDocument,System.Object,System.Boolean)">
            <summary>
            Returns the definition identifier associated with the given instance.
            </summary>
            <remarks>The definition identifier is defined as the value of the "def:Name" <see cref="T:System.Xml.XmlAttribute"/>
            of a class declaration <see cref="T:System.Xml.XmlElement"/></remarks>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/> containing the <see cref="T:System.Xml.XmlElement"/> corresponding to this instance.</param>
            <param name="obj">The instance</param>
            <param name="createAttribute"><see langword="true"/> if the definition <see cref="T:System.Xml.XmlAttribute"/> should be created if it has not been yet,
            <see langword="false"/> otherwise.</param>
            <returns>The definition identifier associated with the given instance or <see langword="null"/> if none is found.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.GenerateId(System.Object)">
            <summary>
            Generates an identifier for the given instance.
            </summary>
            <remarks>The id is guaranteed to be unique within a session.</remarks>
            <param name="obj">The instance.</param>
            <returns>The identifier referencing the given instance.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.GetAssemblyMapping(System.Type,System.Boolean)">
            <summary>
            Returns the xml mapping information for the specified <see cref="T:System.Type"/>.
            </summary>
            <remarks>A <see cref="T:System.Type"/> is defined in the xml document by an xml namespace and
            a corresponding prefix. This xml namespace is computed from the <see cref="T:System.Reflection.Assembly"/>
            and the CLR namespace where this type is defined, and allows Type resolution during
            the deserialization process.<BR/>
            The xmlns declaration corresponding to a Type definition is defined as: xmlns:<i><b>prefix</b></i>="<i><b>namespace</b></i>,<i><b>assemblyFullName</b></i>.
            </remarks>
            <param name="type">an <see cref="T:System.Type"/></param>
            <param name="create"><see langword="true"/> if a xml mapping information should be created if none already exists;
            <see langword="false"/> otherwise.</param>
            <returns>The xml mapping information for the specified <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.RegisterAssemblyMapping(ILOG.Diagrammer.Serialization.AssemblyMapping)">
            <summary>
            Registers the specified  <see cref="T:ILOG.Diagrammer.Serialization.AssemblyMapping"/> for future type resolution.
            </summary>
            <param name="mapping">The <see cref="T:ILOG.Diagrammer.Serialization.AssemblyMapping"/> to map.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.RegisterAssemblyMapping(System.String,ILOG.Diagrammer.Serialization.AssemblyMapping)">
            <summary>
            Registers the specified  <see cref="T:ILOG.Diagrammer.Serialization.AssemblyMapping"/> for future type resolution.
            </summary>
            <param name="mapping">The <see cref="T:ILOG.Diagrammer.Serialization.AssemblyMapping"/> to map.</param>
            <param name="key">The binding key.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.GetAssemblyMappingEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> on the assembly mappings.
            </summary>
            <returns>an <see cref="T:System.Collections.IEnumerator"/> on the assembly mappings.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationManager.GetSerializer(System.ComponentModel.PropertyDescriptor,System.Type)">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> for the given property descriptor.
            </summary>
            <remarks>If a <paramref name="descriptor"/> is specified, this method first checks whether 
            a <see cref="T:ILOG.Diagrammer.Serialization.PropertyDesignerSerializerAttribute"/> is set on this property and returns the
            corresponding serializer, if any. Otherwise, it returns a serializer for the given <paramref name="customType"/>
            if specified, or for the property type otherwise.</remarks>
            <param name="descriptor">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> instance.</param>
            <param name="customType">A <see cref="T:System.Type"/> instance.</param>
            <returns>The <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> for the given property descriptor.</returns>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.XmlSerializationManager.ExtendedProperties">
            <summary>
            Gets the list of extended properties that have been registered for a late binding.
            </summary>
            <remarks>This method cannot be called outside of a serialization session.</remarks>
            <value>A <see cref="T:System.Collections.IList"/> containing the extended properties.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.XmlSerializationManager.SerializedInstances">
            <summary>
            Returns the internal collection instance !!!
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.XmlSerializationManager.DefinitionsCount">
            <summary>
            Gets the number of orphan definitions.
            </summary>
            <value>The number of orphan definitions.</value>
            <remarks>This method cannot be called outside of a serialization session.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.XmlSerializationManager.DefaultAssembly">
            <summary>
            Gets or sets the default assembly.
            </summary>
            <remarks>The default assembly is associated with the default xml namespace.</remarks>
            <value>An <see cref="T:System.Reflection.Assembly"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.XmlSerializationManager.DefNameMapping">
            <summary>
            Gets the mapping def:Name to XmlElement
            </summary>
            <remarks>This mapping might be used by serializers to resolve id references.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Serialization.XmlSerializationManager.MappingKey">
            <summary>
            the key for assembly mapping (the same namespace can be found in several assemblies,
            so we need to have both the assembly and the namespace to resolve a type.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Serialization.XmlSerializationManager.RefKey">
            <summary>
            the key for object--XmlElement mapping  
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Serialization.AssemblyMapping">
            <summary>
            A class that holds information about an assembly and its
            associated xml qualification (namespace + prefix).
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.AssemblyMapping.prefix">
            <summary>
            The prefix
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.AssemblyMapping.assembly">
            <summary>
            The assembly full name
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.AssemblyMapping.ns">
            <summary>
            The .NET namespace
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.AssemblyMapping.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Serialization.AssemblyMapping"/> class.
            </summary>
            <param name="prefix">The xml prefix.</param>
            <param name="assembly">The assembly full name.</param>
            <param name="ns">The .NET namespace.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.AssemblyMapping.XmlnsValue">
            <summary>
            Gets the xmlns value corresponding to this mapping.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Serialization.ExtenderSite">
            <summary>
            A ISite implementation to take into account IExtenderProvider.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.ExtenderSite._providers">
            <summary>
            The IExtenderProvider's 
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.ExtenderSite._serviceContainer">
            <summary>
            The delegate for GetService().
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.ExtenderSite._component">
            <summary>
            The sited component.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ExtenderSite.#ctor(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Serialization.ExtenderSite"/> class.
            </summary>
            <remarks>This constructor initializes the site with no IExtenderProviders.</remarks>
            <param name="component">The component associated with this site.</param>
            <param name="container">A container.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ExtenderSite.#ctor(System.ComponentModel.IComponent,System.ComponentModel.IContainer,System.ComponentModel.IExtenderProvider[])">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Serialization.ExtenderSite"/> class
            with the specified <see cref="T:System.ComponentModel.IExtenderProvider"/>s.
            </summary>
            <param name="component">The component associated with this site.</param>
            <param name="container">A container.</param>
            <param name="providers">An array of <see cref="T:System.ComponentModel.IExtenderProvider"/> instances.</param>
        </member>
        <member name="T:ILOG.Diagrammer.Serialization.ExtendedPropertyDescriptor">
            <summary>
            A <see cref="T:System.ComponentModel.PropertyDescriptor"/> wrapper for extender properties.
            </summary>
            <remarks>This wrapper delegates all method invokations to the
            wrapped PropertyDescriptor, except for the name that is initialized
            as <i>providerId</i>.<i>propertyName</i></remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ExtendedPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">PropertyDescriptor.CanResetValue</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ExtendedPropertyDescriptor.GetValue(System.Object)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">PropertyDescriptor.GetValue</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ExtendedPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">PropertyDescriptor.ResetValue</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ExtendedPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">PropertyDescriptor.SetValue</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ExtendedPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">PropertyDescriptor.ShouldSerializeValue</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.ExtendedPropertyDescriptor.Attributes">
            <summary>
            This member overrides <see cref="P:System.ComponentModel.MemberDescriptor.Attributes">MemberDescriptor.Attributes</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.ExtendedPropertyDescriptor.ComponentType">
            <summary>
            This member overrides <see cref="P:System.ComponentModel.PropertyDescriptor.ComponentType">PropertyDescriptor.ComponentType</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.ExtendedPropertyDescriptor.IsReadOnly">
            <summary>
            This member overrides <see cref="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">PropertyDescriptor.IsReadOnly</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.ExtendedPropertyDescriptor.PropertyType">
            <summary>
            This member overrides <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType">PropertyDescriptor.PropertyType</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Serialization.DiagramXmlSerializer">
            <summary>
            A class that performs XML serialization. 
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.GrapherElementName">
            <summary>
            The name of the grapher element (the root)
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.DefinitionsElementName">
            <summary>
            The name of the "orphan" definitions element
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.nsUrn">
            <summary>
            The namespace of the idn
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.DiagramXmlSerializer._manager">
            <summary>
            The SerializationManager 
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Serialization.DiagramXmlSerializer"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.#ctor(ILOG.Diagrammer.Serialization.XmlSerializationManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Serialization.DiagramXmlSerializer"/> class
            using the specified <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> serialization manager.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Serialization.DiagramXmlSerializer"/> class
            using the specified <see cref="T:System.IServiceProvider"/> service provider.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the given instance to the given stream.
            </summary>
            <param name="obj">An instance to serialize.</param>
            <param name="output">The output stream</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.Serialize(System.Object,System.IO.Stream,ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase)">
            <summary>
            Serialize the given instance to the given <see cref="T:System.IO.Stream"/> using the
            specified <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> to serialize the instance.
            </summary>
            <remarks>If no <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> is specified (i.e. the parameter value
            is <see langword="null"/>, then a serializer will be automatically selected depending on the
            type of the object to serialize.</remarks>
            <param name="obj">An instance to serialize.</param>
            <param name="output">The output <see cref="T:System.IO.Stream"/></param>
            <param name="serializer">The <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> to use to serialize the instance.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.Serialize(System.Object,System.IO.Stream,System.Text.Encoding,ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase)">
            <summary>
            Serialize the given instance to the given <see cref="T:System.IO.Stream"/> using the
            specified <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> to serialize the instance.
            </summary>
            <remarks>If no <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> is specified (i.e. the parameter value
            is <see langword="null"/>, then a serializer will be automatically selected depending on the
            type of the object to serialize.</remarks>
            <param name="obj">An instance to serialize.</param>
            <param name="output">The output <see cref="T:System.IO.Stream"/></param>
            <param name="encoding">The character encoding to use.</param>
            <param name="serializer">The <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> to use to serialize the instance.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.Serialize(System.Object,System.Xml.XmlDocument,ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase)">
            <summary>
            Serialize the given instance to an Xml document using the
            specified <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> to serialize the instance.
            </summary>
            <remarks>If no <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> is specified (i.e. the parameter value
            is <see langword="null"/>, then a serializer will be automatically selected depending on the
            type of the object to serialize.</remarks>
            <param name="obj">An instance to serialize.</param>
            <param name="document">The output <see cref="T:System.Xml.XmlDocument"/></param>
            <param name="serializer">The <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> to use to serialize the instance.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the object graph from the given stream.
            </summary>
            <param name="input">The input stream.</param>
            <returns>The object graph.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.Deserialize(System.IO.Stream,ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase)">
            <summary>
            Deserializes the object graph from the given <see cref="T:System.IO.Stream"/> using
            the specified <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/>.
            </summary>
            <remarks>If no <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> is specified (i.e. the parameter value
            is <see langword="null"/>, then a serializer will be automatically selected depending on the
            type of the object to deserialize.</remarks>
            <param name="input">The xml source.</param>
            <param name="serializer">The <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> to use.</param>
            <returns>The object graph.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.Deserialize(System.IO.Stream,System.Text.Encoding,ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase)">
            <summary>
            Deserializes the object graph from the given <see cref="T:System.IO.Stream"/> using
            the specified <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/>.
            </summary>
            <remarks>If no <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> is specified (i.e. the parameter value
            is <see langword="null"/>, then a serializer will be automatically selected depending on the
            type of the object to deserialize.</remarks>
            <param name="input">The xml source.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="serializer">The <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> to use.</param>
            <returns>The object graph.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.Deserialize(System.Xml.XmlDocument)">
            <summary>
            Deserializes the object graph from the given <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
            <param name="document">The xml document.</param>
            <returns>The object graph.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.Deserialize(System.Xml.XmlDocument,ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase)">
            <summary>
            Deserializes the object graph from the given <see cref="T:System.Xml.XmlDocument"/> using
            the specified <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/>.
            </summary>
            <remarks>If no <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> is specified (i.e. the parameter value
            is <see langword="null"/>, then a serializer will be automatically selected depending on the
            type of the object to deserialize.</remarks>
            <param name="document">The xml document.</param>
            <param name="serializer">The <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> to use.</param>
            <returns>The object graph.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.LoadMappingAssembly(System.String)">
            <summary>
            Loads an assembly that is referenced in an XML namespace mapping.
            </summary>
            <param name="assemblyName">The full name of the assembly</param>
            <returns>If the assembly is an older version of an IBM ILOG Diagram assembly, loads the current version.</returns>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.Container">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.IContainer"/> instance used to store <see cref="T:System.ComponentModel.IComponent"/> instances
            during the serialization.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.SerializationManager">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> that is used during the serialization.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.UseCompression">
            <summary>
            Gets or sets whether the output is compressed.
            </summary>
            <remarks>When this property is <see langword="true"/> the xml output is compressed using
            the GZIP algorithm.</remarks>
            <value>A <see cref="T:System.Boolean"/> indicating whether the output is compressed.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.DiagramXmlSerializer.Formatting">
            <summary>
            Gets or sets how the output is formatted.
            </summary>
            <value>A <see cref="T:System.Xml.Formatting"/> value that indicates how the output is formatted.</value>
        </member>
        <member name="T:ILOG.Diagrammer.ContentChangeEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.IDiagramView.ContentChanged"/> event of a <see cref="T:ILOG.Diagrammer.IDiagramView"/>
            </summary>
            <remarks>A <strong>ContentChanged</strong> event is raised when the contents in an
            <see cref="T:ILOG.Diagrammer.IDiagramView"/> changes.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.ContentChangeEventArgs.#ctor(ILOG.Diagrammer.GraphicContainer,ILOG.Diagrammer.GraphicContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.ContentChangeEventArgs"/> class.
            </summary>
            <param name="oldContent">The old <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.</param>
            <param name="newContent">The new <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.</param>
        </member>
        <member name="P:ILOG.Diagrammer.ContentChangeEventArgs.OldContent">
            <summary>
            Gets the old <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ContentChangeEventArgs.NewContent">
            <summary>
            Gets the new <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> instance.</value>
        </member>
        <member name="T:ILOG.Diagrammer.ContentChangeEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ILOG.Diagrammer.IDiagramView.ContentChanged"/>event 
            of the <see cref="T:ILOG.Diagrammer.IDiagramView"/> class. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ILOG.Diagrammer.ContentChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ILOG.Diagrammer.TransformChangeEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.IDiagramView.TransformChanging"/> and
            <see cref="E:ILOG.Diagrammer.IDiagramView.TransformChanged"/> events of a <see cref="T:ILOG.Diagrammer.IDiagramView"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.TransformChangeEventArgs.#ctor(ILOG.Diagrammer.Transform)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.TransformChangeEventArgs"/> class.
            </summary>
            <param name="transform">The new <see cref="P:ILOG.Diagrammer.TransformChangeEventArgs.Transform"/>.</param>
        </member>
        <member name="P:ILOG.Diagrammer.TransformChangeEventArgs.Transform">
            <summary>
            Gets or sets the new transform applied to the view.
            </summary>
            <value>A <see cref="P:ILOG.Diagrammer.TransformChangeEventArgs.Transform"/> structure.</value>
        </member>
        <member name="P:ILOG.Diagrammer.TransformChangeEventArgs.Cancel">
            <summary>
            Indicates whether the event should be canceled. 
            </summary>
            <value>
            <see langword="true"/> if the event should be canceled; otherwise, 
            <see langword="false"/>.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.TransformChangeEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ILOG.Diagrammer.IDiagramView.TransformChanging"/> and
             <see cref="E:ILOG.Diagrammer.IDiagramView.TransformChanged"/> events
            of the <see cref="T:ILOG.Diagrammer.IDiagramView"/> class. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ILOG.Diagrammer.TransformChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.IPathDataShape">
            <summary>
            Defines an interface implemented by graphic objects that are defined by 
            a <see cref="T:ILOG.Diagrammer.PathData"/>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.IPathDataShape.PathData">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.PathData"/> that define the shape of the object.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Path">
             <summary>
             Represents a graphic object that can display any type of shape.
             </summary>
             <remarks>
             The shape of the <see cref="T:ILOG.Diagrammer.Graphic.Path"/> object is specified by a <see cref="T:ILOG.Diagrammer.PathData"/> object.
             You specify the shape of the path through the <see cref="P:ILOG.Diagrammer.Graphic.Path.Data"/> property.
             </remarks>
             <example>
             <para lang="cs,vbnet">
             The following example creates a path object that displays a triangle.
             </para>
             <code lang="cs">
             Path CreatePath()
             {
                Path path = new Path();
                path.Fill = new SolidFill(Color.Blue);
                path.Stroke = new Stroke(Color.Red, 2);
                path.FillMode = FillMode.Alternate;
                path.Data.Segments.AddRange(new PathSegment[] {
                    new StartSegment(50, 0),
                    new LineSegment(100, 100),
                    new LineSegment(0, 100),
                    new CloseSegment()});
            
               return path;
             }
             </code>
             <code lang="vbnet">
             Function CreatePath() As Path 
                 Dim path As Path = New Path 
                 path.Fill = New SolidFill(Color.Blue) 
                 path.Stroke = New Stroke(Color.Red, 2) 
                 path.FillMode = FillMode.Alternate 
                 path.Data.Segments.AddRange(New PathSegment() {_
                      New StartSegment(50, 0), _
                      New LineSegment(100, 100), _
                      New LineSegment(0, 100), _
                      New CloseSegment}) 
                 Return path 
             End Function
             </code>
             </example>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Path._pathData">
            <summary>
            The data of the path.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Path._fillMode">
            <summary>
            fill mode of the path
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.Path._boundsOrig">
            <summary>
            A cache for the styled bounds of this composite at different transformers
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Path.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Path"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Path.#ctor(ILOG.Diagrammer.PathData)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Path"/> class using the 
            specified parameter.
            </summary>
            <param name="data">A <see cref="T:ILOG.Diagrammer.PathData"/> object that 
            represents the shape of the object.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Path.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.Dispose(System.Boolean)">GraphicObject.Dispose</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Path.OnCanEditPathChanged(System.Boolean,System.Boolean)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Path.CanEditPath"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Path.PathDataIsChanging(System.Object,System.EventArgs)">
            <summary>
            Invoked when data changes.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Path.PathDataHasChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when data changes.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Path.OnDataChanged">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Path.Data"/> collection has changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Path.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Shape.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">Shape.UpdateGraphicsPath</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Path.OnFillModeChanged(System.Drawing.Drawing2D.FillMode,System.Drawing.Drawing2D.FillMode)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Path.FillMode"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Path.OnTransformChanged(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnTransformChanged(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Transform)">GraphicObject.OnTransformChanged</see>.
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Path.GetBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Path.GetGeometryBounds">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetGeometryBounds">GraphicObject.GetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Path.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Path.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Path.GetDefaultAnchors">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetDefaultAnchors">GraphicObject.GetDefaultAnchors</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Path.CanEditPath">
            <summary>
            Gets or sets a value that indicates whether or not the object can be reshaped
            during an interaction.
            </summary>
            <value><see langword="true"/> if the object can be reshaped; Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Path.CanEditPathChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Path.CanEditPath"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Path.Data">
            <summary>
            Gets the data that defines the shape of the path.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Path.DataChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Path.Data"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Path.FillMode">
            <summary>
            Gets or sets the filling mode of the path.
            </summary>
            <value>One of the <see cref="T:System.Drawing.Drawing2D.FillMode"/> values. 
            The default value is <see cref="F:System.Drawing.Drawing2D.FillMode.Alternate"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Path.FillModeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Path.FillMode"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Path.IsVisible">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.IsVisible">GraphicObject.IsVisible</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Path.IsCollapsed">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.IsCollapsed">GraphicObject.IsCollapsed</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.PathSelectionGraphic">
            <summary>
            The selection class dedicated to objects that implement the <see cref="T:ILOG.Diagrammer.Graphic.IPolyPointsShape"/> interface.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.IsTypeSupported(System.Type)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.SelectionGraphic.IsTypeSupported(System.Type)">SelectionGraphic.IsTypeSupported</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">DefaultSelectionGraphic.GetHandleDescription</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.OnSelectedObjectChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.SelectionGraphic.OnSelectedObjectChanged(ILOG.Diagrammer.GraphicChangeEventArgs)">SelectionGraphic.OnSelectedObjectChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.GetHandlePoints">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandlePoints">DefaultSelectionGraphic.GetHandlePoints</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.GetHandleType(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleType(System.Int32)">DefaultSelectionGraphic.GetHandleType</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.GetHandleCursor(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleCursor(System.Int32)">DefaultSelectionGraphic.GetHandleCursor</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.GetHandleMovingCursor(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleMovingCursor(System.Int32)">DefaultSelectionGraphic.GetHandleMovingCursor</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.IsHandleVisible(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.IsHandleVisible(System.Int32)">DefaultSelectionGraphic.IsHandleVisible</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.ObjectReselected(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.SelectionGraphic.ObjectReselected(ILOG.Diagrammer.GraphicObject)">SelectionGraphic.ObjectReselected</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.MoveHandle(System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.MoveHandle(System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">DefaultSelectionGraphic.MoveHandle</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.OnMouseClick(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseClick(ILOG.Diagrammer.ObjectMouseEventArgs)">GraphicObject.OnMouseClick</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.OnInteractionStarted">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.ReshapeSelectionGraphic.OnInteractionStarted">ReshapeSelectionGraphic.OnInteractionStarted</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.OnInteractionValidated">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnInteractionValidated">DefaultSelectionGraphic.OnInteractionValidated</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.RaisePathDataChanging">
            <summary>
            Is called to notify that the points of the path are about to change.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.RaisePathDataChanged">
            <summary>
            Is called to notify that the points of the path have changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.ValidateGhostGraphic(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.ValidateGhostGraphic(ILOG.Diagrammer.GraphicObject)">DefaultSelectionGraphic.ValidateGhostGraphic</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.DoMovePoint(System.Int32,ILOG.Diagrammer.Point2D)">
            <summary>
            Is called when the handle corresponding to the specified point is moved.
            </summary>
            <param name="index">The zero-based index of the point of the selected object being moved.</param>
            <param name="point">The new location for the specified point of the selected object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.DoRemovePoint(System.Int32)">
            <summary>
            Is called to remove a point from the selected object.
            </summary>
            <param name="index">The zero-based index of the point to remove.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.DoAddSegment(System.Int32,ILOG.Diagrammer.PathSegment)">
            <summary>
            Is called to add a new segment to the <see cref="T:ILOG.Diagrammer.PathData"/>.
            </summary>
            <param name="index">The zero-based index of the segment to add.</param>
            <param name="segment">The <see cref="T:ILOG.Diagrammer.PathSegment"/> to add.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.DoReplaceSegment(System.Int32,ILOG.Diagrammer.PathSegment)">
            <summary>
            Is called to replace a segment of the <see cref="T:ILOG.Diagrammer.PathData"/>.
            </summary>
            <param name="index">The zero-based index of the segment to add.</param>
            <param name="segment">The <see cref="T:ILOG.Diagrammer.PathSegment"/> to add.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.DoRemoveSegment(System.Int32)">
            <summary>
            Is called to remove a segment of the <see cref="T:ILOG.Diagrammer.PathData"/>.
            </summary>
            <param name="index">The zero-based index of the segment to remove.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.PaintCore(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)">GraphicObject.PaintCore</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PathSelectionGraphic.CanEditSelectedObjectPath">
            <summary>
            Gets a value indicating whether it's possible to edit the path.
            </summary>
            <value><see langword="true"/> to enable path edition; Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PathSelectionGraphic.CanRemovePoints">
            <summary>
            Gets a value indicating whether it's possible to remove points from the selected object
            by clicking the corresponding selection handle with the <strong>CTRL-key</strong> pressed.
            </summary>
            <value><see langword="true"/> to enable point deletion; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PathSelectionGraphic.CanAddPoints">
            <summary>
            Gets a value indicating whether it's possible to add points to the selected object.
            </summary>
            <value><see langword="true"/> to enable point addition; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PathSelectionGraphic.EditMode">
            <summary>
            Gets or sets the edit mode for the selected graphic object.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PathSelectionGraphic.CanRotateSelectedObject">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.DefaultSelectionGraphic.CanRotateSelectedObject">DefaultSelectionGraphic.CanRotateSelectedObject</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PathSelectionGraphic.CanMoveSelectedObject">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.DefaultSelectionGraphic.CanMoveSelectedObject">DefaultSelectionGraphic.CanMoveSelectedObject</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PathSelectionGraphic.CanResizeSelectedObject">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.ReshapeSelectionGraphic.CanResizeSelectedObject">ReshapeSelectionGraphic.CanResizeSelectedObject</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PathSelectionGraphic.CanReparentSelectedObject">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.DefaultSelectionGraphic.CanReparentSelectedObject">DefaultSelectionGraphic.CanReparentSelectedObject</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PathSelectionGraphic.PathDataPropertyName">
            <summary>
            Gets the name of the property that gives access to the <see cref="T:ILOG.Diagrammer.PathData"/>.
            </summary>
            <remarks>The default value returns <strong>Data</strong>.</remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.PathSelectionGraphic.PathEditMode">
            <summary>
            Describes the edition mode of the <see cref="T:ILOG.Diagrammer.Graphic.PathSelectionGraphic"/>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.PathSelectionGraphic.PathEditMode.EditBounds">
            <summary>
            The selection graphic objects allows to edit the object bounds.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.PathSelectionGraphic.PathEditMode.EditPath">
            <summary>
            The selection graphic objects allows to edit the path.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphicChangeEventHandler">
            <summary>
            Represents the method that handles the 
            <see cref="E:ILOG.Diagrammer.GraphicObject.Changed">GraphicObject.Changed</see>,
            <see cref="E:ILOG.Diagrammer.GraphicObject.Changing">GraphicObject.Changing</see>,
            <see cref="E:ILOG.Diagrammer.GraphicObject.ParentChanged">GraphicObject.ParentChanged</see>,
            <see cref="E:ILOG.Diagrammer.GraphicObject.ParentChanging">GraphicObject.ParentChanging</see>,
            <see cref="E:ILOG.Diagrammer.GraphicContainer.ChildChanged">GraphicContainer.ChildChanged</see> and
            <see cref="E:ILOG.Diagrammer.GraphicContainer.ChildChanging">GraphicContainer.ChildChanging</see> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:ILOG.Diagrammer.GraphicChangeEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:ILOG.Diagrammer.GraphicChangeEventArgs">
            <summary>
            Provides data for the 
            <see cref="E:ILOG.Diagrammer.GraphicObject.Changed">GraphicObject.Changed</see>,
            <see cref="E:ILOG.Diagrammer.GraphicObject.Changing">GraphicObject.Changing</see>,
            <see cref="E:ILOG.Diagrammer.GraphicObject.ParentChanged">GraphicObject.ParentChanged</see>,
            <see cref="E:ILOG.Diagrammer.GraphicObject.ParentChanging">GraphicObject.ParentChanging</see>,
            <see cref="E:ILOG.Diagrammer.GraphicContainer.ChildChanged">GraphicContainer.ChildChanged</see> and
            <see cref="E:ILOG.Diagrammer.GraphicContainer.ChildChanging">GraphicContainer.ChildChanging</see> events.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicChangeEventArgs.#ctor(ILOG.Diagrammer.GraphicObject,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.GraphicChangeEventArgs"/> class.
            </summary>
            <param name="source">The event source.</param>
            <param name="property">The property that was changed.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicChangeEventArgs.#ctor(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.GraphicChange,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.GraphicChangeEventArgs"/> class.
            </summary>
            <param name="source">The event source.</param>
            <param name="type">One of the <see cref="P:ILOG.Diagrammer.GraphicChangeEventArgs.GraphicChange"/> values.</param>
            <param name="property">The property that was changed.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicChangeEventArgs.#ctor(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.GraphicChange)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.GraphicChangeEventArgs"/> class.
            </summary>
            <param name="source">The event source.</param>
            <param name="type">One of the <see cref="P:ILOG.Diagrammer.GraphicChangeEventArgs.GraphicChange"/> values.</param>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicChangeEventArgs.GraphicChange">
            <summary>
            Gets the change the occurred on the graphic object.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.GraphicChange"/> values.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicChangeEventArgs.IsUpdateEvent">
            <summary>
            Indicates whether the graphic object change is part of a begin/end update cycle.
            </summary>
            <value><see langword="true"/> if the graphic object change is part of a begin/end update cycle.
            Otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicChangeEventArgs.IsStyledBoundsChangeEvent">
            <summary>
            Indicates whether the graphic object change has modified the object styled bounds.
            </summary>
            <value><see langword="true"/> if the graphic object change has modified the object styled bounds;
            Otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicChangeEventArgs.IsVisibilityChangeEvent">
            <summary>
            Indicates whether the graphic object change has modified the object visibility.
            </summary>
            <value><see langword="true"/> if the graphic object change has modified the object visibility;
            Otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicChangeEventArgs.IsGeometryChangeEvent">
            <summary>
            Indicates whether the graphic object change has modified the object geometry.
            </summary>
            <value><see langword="true"/> if the graphic object change has modified the object geometry;
            Otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicChangeEventArgs.IsGeometryBoundsChangeEvent">
            <summary>
            Indicates whether the graphic object change has modified the object geometry bounds.
            </summary>
            <value><see langword="true"/> if the graphic object change has modified the object geometry;
            Otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicChangeEventArgs.IsBoundsChangeEvent">
            <summary>
            Indicates whether the graphic object change has modified the object bounds.
            </summary>
            <value><see langword="true"/> if the graphic object change has modified the object bounds;
            Otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicChangeEventArgs.IsPropertyChangeEvent">
            <summary>
            Indicates whether the graphic object change is the result of a property change.
            </summary>
            <value><see langword="true"/> if the graphic object change is the result of a property change;
            Otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicChangeEventArgs.Source">
            <summary>
            Gets the graphic object that has changed.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicChangeEventArgs.Bounds">
            <summary>
            Gets the new bounds of the graphic object that has changed.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</value>
            <remarks>Use this property only if <see cref="P:ILOG.Diagrammer.GraphicChangeEventArgs.IsBoundsChangeEvent"/> is
            <see langword="true"/>.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.GraphicChangeEventArgs.Property">
            <summary>
            Gets the name of the property that has changed.
            </summary>
            <value>A <see cref="T:System.String"/> that represents the name of the property that
            has changed.</value>
            <remarks>Use this property only if <see cref="P:ILOG.Diagrammer.GraphicChangeEventArgs.IsPropertyChangeEvent"/> is
            <see langword="true"/>.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.StylePropertyAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.StylePropertyAttribute"/> with the type name
            of the selection graphic object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.StylePropertyAttribute.Equals(System.Object)">
            <summary>
            This member overrides <see cref="M:System.Attribute.Equals(System.Object)">Attribute.Equals</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.StylePropertyAttribute.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.CreateObjectInteractorAttribute">
            <summary>
            Specifies the type of <see cref="T:ILOG.Diagrammer.Windows.Forms.ViewInteractor"/> used to create a graphic object
            in a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.CreateObjectInteractorAttribute._typeName">
            <summary>
            The type of the interactor
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CreateObjectInteractorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.CreateObjectInteractorAttribute"/> with the type name
            of the selection graphic object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CreateObjectInteractorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.CreateObjectInteractorAttribute"/> with the type
            of the selection graphic object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CreateObjectInteractorAttribute.Equals(System.Object)">
            <summary>
            This member overrides <see cref="M:System.Attribute.Equals(System.Object)">Attribute.Equals</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CreateObjectInteractorAttribute.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.CreateObjectInteractorAttribute.ViewInteractorType">
            <summary>
            Gets the name of the interactor 
            class in the <see cref="P:System.Type.AssemblyQualifiedName"/> format. 
            </summary>
            <value>A <see cref="T:System.String"/> object.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeImage">
            <summary>
            Defines a filter effect that creates an image from a bitmap or 
            a graphic object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeImage.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeImage"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeImage.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeImage"/> object with the specified image.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeImage.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeImage"/> object with the specified graphic object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeImage.#ctor(System.Uri)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeImage"/> object with the specified image.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeImage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeImage"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeImage.Clone">
            <summary>
            Creates a copy of the filter effect.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeImage.ToString">
            <summary>
            Returns a short description of this filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeImage.Graphic">
            <summary>
            Gets or sets a graphic object that will drawn in the filter region.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeImage.Image">
            <summary>
            Gets or sets an image that will be drawn in the filter region.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeImage.KeepAspectRatio">
            <summary>
            Gets or sets the type of alignment of the image in the filter effect region.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeImage.Slice">
            <summary>
            Gets or sets the mode used to stretch the image in the filter effect region.
            </summary>
            <value>When the value is <see langword="true"/>, the image is stretched to respect the value of the
            <see cref="P:ILOG.Diagrammer.Filters.FeImage.KeepAspectRatio"/> property and the image will cover the filter effect region, 
            thus some part of the image might not be inside the filter effect region. When the value is <see langword="false"/> (the default),
            the image will be stretched to respect the value of the
            <see cref="P:ILOG.Diagrammer.Filters.FeImage.KeepAspectRatio"/> property and the image will be fully drawn inside the filter effect region, thus
            some part of the filter effect region might not be filled with the image.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeImage.Inputs">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.FilterEffect.Inputs">FilterEffect.Inputs</see>
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeComponentTransfer">
            <summary>
            Defines the component transfer filter effect.
            </summary>
            <remarks>
            The component transfer filter effect.
            This filter effect performs component-wise remapping of data as follows:
            <pre>
            R' = feFuncR( R )
            G' = feFuncG( G )
            B' = feFuncB( B )
            A' = feFuncA( A )
            </pre>
            for every pixel. It enables operations like brightness adjustment, 
            contrast adjustment, color balance or thresholding.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.FeComponentTransfer._feA">
            <summary>
            Component transfer functions.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.FeComponentTransfer._feR">
            <summary>
            Component transfer functions.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.FeComponentTransfer._feG">
            <summary>
            Component transfer functions.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.FeComponentTransfer._feB">
            <summary>
            Component transfer functions.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeComponentTransfer.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeComponentTransfer"/> filter effect.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeComponentTransfer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeColorMatrix"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeComponentTransfer.Clone">
            <summary>
            Creates a copy of the filter effect.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeComponentTransfer.ToString">
            <summary>
            Returns a short description of this filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeComponentTransfer.FeFuncR">
            <summary>
            Gets the component transfer function for the red component.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Filters.FeComponentTransferFunc"/> that represents the component transfer function for
            the red component.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeComponentTransfer.FeFuncG">
            <summary>
            Gets the component transfer function for the green component.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Filters.FeComponentTransferFunc"/> that represents the component transfer function for
            the green component.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeComponentTransfer.FeFuncB">
            <summary>
            Gets the component transfer function for the blue component.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Filters.FeComponentTransferFunc"/> that represents the component transfer function for
            the blue component.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeComponentTransfer.FeFuncA">
            <summary>
            Gets the component transfer function for the alpha component.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Filters.FeComponentTransferFunc"/> that represents the component transfer function for
            the alpha component.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeComponentTransfer.Inputs">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.FilterEffect.Inputs">FilterEffect.Inputs</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeComponentTransfer.In">
            <summary>
            Gets or sets the source of this filter effect.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeComponentTransferFunc">
            <summary>
            Defines a component transfer function for the <see cref="T:ILOG.Diagrammer.Filters.FeComponentTransfer"/> filter.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeComponentTransferFunc.#ctor(ILOG.Diagrammer.Filters.FeComponentTransfer)">
            <summary>
            Creates a component transfer function with the specified type.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeComponentTransferFunc.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeComponentTransferFunc"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeComponentTransferFunc.BuildLookUpTable">
            <summary>
            Creates the lookup table depending of the type.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeComponentTransferFunc.ToString">
            <summary>
            Returns a short description of the object.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeComponentTransferFunc.Type">
            <summary>
            Gets or sets the type of the function.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Filters.FeComponentTransferFuncType"/> values. The
            default value is <see cref="F:ILOG.Diagrammer.Filters.FeComponentTransferFuncType.Identity"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeComponentTransferFunc.Offset">
            <summary>
            Gets or sets the offset of the gamma function when the type is
            <see cref="F:ILOG.Diagrammer.Filters.FeComponentTransferFuncType.Gamma"/>.
            </summary>
            <value>A float value that represents the offset of the gamma function when the type is
            <see cref="F:ILOG.Diagrammer.Filters.FeComponentTransferFuncType.Gamma"/>. 
            The default value is <strong>0</strong>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeComponentTransferFunc.Slope">
            <summary>
            Gets or sets the slope of the linear function when the type is 
            <see cref="F:ILOG.Diagrammer.Filters.FeComponentTransferFuncType.Linear"/>.
            </summary>
            <value>
            A float value that represents the slope of the linear function when the type is 
            <see cref="F:ILOG.Diagrammer.Filters.FeComponentTransferFuncType.Linear"/>. 
            The default value is <strong>1</strong>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeComponentTransferFunc.Amplitude">
            <summary>
            Gets or sets the amplitude of the gamma function when the type is
            <see cref="F:ILOG.Diagrammer.Filters.FeComponentTransferFuncType.Gamma"/>.
            </summary>
            <value>
            The amplitude of the gamma function when the type is
            <see cref="F:ILOG.Diagrammer.Filters.FeComponentTransferFuncType.Gamma"/>. The default value is 
            <strong>1</strong>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeComponentTransferFunc.TableValues">
            <summary>
            Gets or sets the table values defining the lookup table when the type is
            <see cref="F:ILOG.Diagrammer.Filters.FeComponentTransferFuncType.Table"/> or 
            <see cref="F:ILOG.Diagrammer.Filters.FeComponentTransferFuncType.Discrete"/>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeComponentTransferFunc.Intercept">
            <summary>
            Gets or sets the intercept of the linear function when the type is 
            <see cref="F:ILOG.Diagrammer.Filters.FeComponentTransferFuncType.Linear"/>.
            </summary>
            <value>
            The intercept of the linear function when the type is 
            <see cref="F:ILOG.Diagrammer.Filters.FeComponentTransferFuncType.Linear"/>. The default value is <strong>0</strong>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeComponentTransferFunc.Exponent">
            <summary>
            Gets or sets the exponent of the gamma function when the type is
            <see cref="F:ILOG.Diagrammer.Filters.FeComponentTransferFuncType.Gamma"/>. 
            </summary>
            <value>
            The exponent of the gamma function when the type is
            <see cref="F:ILOG.Diagrammer.Filters.FeComponentTransferFuncType.Gamma"/>.The default value is <strong>1</strong>.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeComponentTransferFuncType">
            <summary>
            Defines the type of component transfer functions for a <see cref="T:ILOG.Diagrammer.Filters.FeComponentTransferFunc"/> object.
            </summary>
            <remarks>Use the value of this enumeration to define the type of component transfer function in the
            <see cref="P:ILOG.Diagrammer.Filters.FeComponentTransferFunc.Type"/> property of 
            the <see cref="T:ILOG.Diagrammer.Filters.FeComponentTransferFunc"/> class.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.FeComponentTransferFuncType.Identity">
            <summary>
            Defines the identity transfer function. 
            The transfer function is :
            <pre> C' = C </pre>
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.FeComponentTransferFuncType.Table">
            <summary>
            Defines the table transfer function.
            For table, the function is defined by linear interpolation 
            into a lookup table by 
            attribute <strong>TableValues</strong>, which provides a list of n+1
            values (that is, v 0 to v n ) in order to identify n 
            interpolation ranges. Interpolations use the following formula.
            <pre>
            For a value C pick a k such that:
            
            k/N &lt;= C &lt; (k+1)/N
            The result C' is given by:
            C' = v k + (C - k/N)*N * (v k+1 - v k )
            </pre>
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.FeComponentTransferFuncType.Discrete">
             <summary>
             Defines the discrete transfer function.
             The function is defined by the step function defined by attribute <strong>TableValues</strong>, 
             which provides a list of n values (that is, v 0 to v n-1 ) in order to 
             identify a step function consisting of n steps. The step function is defined by the following formula.
             <pre>
             For a value C pick a k such that:
            
             k/N &lt;= C &lt; (k+1)/N
             The result C' is given by:
             C' = v k
            </pre>
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.FeComponentTransferFuncType.Linear">
            <summary>
            Defines the linear transfer function.
            The function is defined by the following linear equation:
            <pre>
            C' = slope * C + intercept
            </pre>
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.FeComponentTransferFuncType.Gamma">
            <summary>
            Defines the gamma transfer function.
            The function is defined by the following exponential function:
            <pre>
            C' = amplitude * pow(C, exponent) + offset
            </pre>
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DetailedMessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DetailedMessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DetailedMessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData">
            <summary>
            An container class that collects and delivers the node and link data
            of subgraphs. It kind of flattens all subgraph models into one.
            </summary>
            <remarks>
            The main problem of the IGraphModel is, that the end nodes of intergraph
            links are not in the same graph model, hence we cannot ask their
            coordinates, and the nodes of a subgraph are not known to the intergraph
            link that does not belong to the subgraph, but must route through it
            because it ends inside.
            <p>
            All coordinates of the subgraph data are stored and delivered in
            view coordinates, hence we don't have to bother with the fact that
            each subgraph has its own local coordinate system.
            </p>
            <p>
            It kind of looks like duplicating data that is anyway already in the
            nested graphers. But unfortunately, graph layout has to work with any
            graph model, not just with grapher adapters, hence the additional
            effort.
            </p>
            <p>
            The class implements a graph model such that we easily can use a
            graph layout algorithm. The nodes and links in this graph model are
            dummy objects of type NodeData and LinkData, that correspond to a
            flattened view of the nested nodes and links.
            </p>
            <p>
            If the information is derived from a grapher adapter, the class works
            only if this grapher adapter has a view, because it takes this view as
            reference for the coordinate transformations. The layout is either done
            in ViewCoordinates or in InverseViewCoordinates. The coordinates mode
            LocalCoordinates is handled as InverseViewCoordinates, because due to
            the nesting, there is not just one manager to deal with.
            If the customer specified an explicit reference transformer, this one is
            ignored (for technical reasons).
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.#ctor">
            <summary>
            Creates a new subgraph data model.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.SetNormalLinksFixed(System.Boolean)">
            <summary>
            Sets whether normal links should be considered fixed such that only
            intergraph links are routed. If passed false, both intergraph links
            and normal links are considered nonfixed and can be routed at the same
            time.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.GetOriginalModel">
            <summary>
            Returns the original graph model.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.Clean">
            <summary>
            Cleans the model. This must be called after collectData, otherwise the
            graph models will remain in unclean state.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.CollectData(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Collects all data for the input graph model and all subgraph models
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.CollectNodes(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.NodeData,System.Collections.Hashtable)">
            <summary>
            Collects all nodes for the input graph model and all subgraph models
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.CollectLinks(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.NodeData,System.Collections.Hashtable)">
            <summary>
            Collects all links for the input graph model and all subgraph models
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.AddNode(System.Object,ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.NodeData)">
            <summary>
            Adds the data for a new node.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.AddLink(System.Object,ILOG.Diagrammer.Point2D[],System.Single,System.Boolean,ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.NodeData,ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.NodeData,ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.NodeData)">
            <summary>
            Adds link data for a new link.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.BeforeCollect(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Ugly hack for the coordinate problem with IlvGraphers.
            It ensures that we are in views coordinates and use the correct view.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.AfterCollect(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Ugly hack for the coordinate problem with IlvGraphers.
            It sets back to the old coordinates mode.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.AfterCreation(ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.NodeData)">
            <summary>
            Transforms the coordinates of a node into manager coordinates if
            the coordinates mode requires it. Note that during creation, we
            deal only with view coordinates.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.ConvertCoordinateSystem(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Transforms a rectangle from view coordinates to the coordinate system
            of this model. This is public because we need it when dealing with
            link connection box interfaces and such stuff.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.AfterCreation(ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.LinkData)">
            <summary>
            Transforms the coordinates of a link into manager coordinates if
            the coordinates mode requires it. Note that during creation, we
            deal only with view coordinates.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.GetNodeBox(ILOG.Diagrammer.GraphLayout.INodeBoxProvider,System.Object)">
            <summary>
            Returns the node box from a node box interface for a node.
            The returned node box is in the coordinate system of this model.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.GetTangentialOffset(ILOG.Diagrammer.GraphLayout.ILinkConnectionBoxProvider,System.Object,ILOG.Diagrammer.GraphLayout.Internal.Direction)">
            <summary>
            Returns the tangential offset from a link connection box interface
            for a node. The returned value is in the coordinate system of this
            model.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.GetTangentialOffset(ILOG.Diagrammer.GraphLayout.ILinkConnectionBoxProvider,System.Object,ILOG.Diagrammer.GraphLayout.NodeSide)">
            <summary>
            Returns the tangential offset from a link connection box interface
            for a node. The returned value is in the coordinate system of this
            model.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.Dispose">
            <summary>
            Disposes of this <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/> and releases any
            resources that it is using.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.IsFixedLink(System.Object)">
            <summary>
            Returns true if intergraph link routing should consider this link as
            fixed. All links that don't belong to the main graph model are
            considered fixed. This method is used in the link layouts.
            </summary>
            <param name="link">The link.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.GetLinksFrom(System.Object)">
            <summary>
            Returns all the links that have <strong>node</strong>
            as their origin.
            </summary>
            <param name="node">The origin node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.GetLinksTo(System.Object)">
            <summary>
            Returns all the links that have <strong>node</strong>
            as their destination.
            </summary>
            <param name="node">The origin node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.GetFrom(System.Object)">
            <summary>
            Returns the origin node of a link.
            </summary>
            <param name="link">The link.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.GetTo(System.Object)">
            <summary>
            Returns the destination node of a link.
            </summary>
            <param name="link">The link.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.NodeInsideGraph(System.Object,System.Object)">
            <summary>
            Returns true if node is inside the graph.
            This is used in the link layouts.
            </summary>
            <param name="node">The node.
            </param>
            <param name="graph">The graph.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.Inside(ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.NodeData,ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.NodeData)">
            <summary>
            Returns true if node is nested inside the graph.
            </summary>
            <param name="node">The node.
            </param>
            <param name="graph">The graph.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.FromEndsInside(System.Object,System.Object)">
            <summary>
            Returns true if the from side of the link ends inside the input node.
            </summary>
            <param name="link">The link.
            </param>
            <param name="node">The node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.ToEndsInside(System.Object,System.Object)">
            <summary>
            Returns true if the to side of the link ends inside the input node.
            </summary>
            <param name="link">The link.
            </param>
            <param name="node">The node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.IsNode(System.Object)">
            <summary>
            Returns <see langword="true"/> if an object is a valid node, and
            <see langword="false"/> otherwise.
            </summary>
            <param name="obj">The object to test.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.IsLink(System.Object)">
            <summary>
            Returns <see langword="true"/> if the object is a valid normal link,        /// and <see langword="false"/> otherwise.
            </summary>
            <param name="obj">The object to test.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a property for a node or a link.
            </summary>
            <remarks>
            If <strong>val</strong> is <see langword="null"/>, the property is
            removed.
            Otherwise, the property value is set to <strong>val</strong>.
            This method should be called only after <see cref="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.CollectData(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            </remarks>
            <param name="nodeOrLink">The node or link for which the property
            is to be set.
            </param>
            <param name="key">The key string for the property.
            </param>
            <param name="val">The new value of the property.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.GetProperty(System.Object,System.String)">
            <summary>
            Returns the value of a property.
            </summary>
            <remarks>
            The method returns <see langword="null"/> if the property does
            not exist.
            This method should be called only after <see cref="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.CollectData(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            </remarks>
            <param name="nodeOrLink">The node or link for which the property
            is to be retrieved.
            </param>
            <param name="key">The key string for the property.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.SetProperty(System.String,System.Object)">
            <summary>
            Sets the value of a property for the graph model.
            </summary>
            <remarks>
            If <strong>val</strong> is <see langword="null"/>, the property is
            removed.
            Otherwise, the property value is set to <strong>val</strong>.
            </remarks>
            <param name="key">The key string for the property.
            </param>
            <param name="val">The new value of the property.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.GetProperty(System.String)">
            <summary>
            Returns the value of a property of the graph model.
            </summary>
            <remarks>
            The method returns <see langword="null"/> if the property does
            not exist.
            </remarks>
            <param name="key">The key string for the property.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.MoveNode(System.Object,System.Single,System.Single)">
            <summary>
            Changes the position of the specified node.
            Not needed for link routing.
            </summary>
            <param name="node">The node.
            </param>
            <param name="x">The new <strong>x</strong> position of the node.
            </param>
            <param name="y">The new <strong>y</strong> position of the node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.BoundingBox(System.Object)">
            <summary>
            Returns the bounding rectangle of a node or a link.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.GetLinkPoints(System.Object)">
            <summary>
            Returns the points that define a link.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)">
             <summary>
             Reshapes a link.
             </summary>
             <remarks>
             The method must work for normal links and intergraph links.
             <p>
             The link style represents the style of the shape of the
             link. The details of the shape of the link are given by
             the further arguments of the method.
             If the new shape of the link must be a straight-line link without
             any intermediate points, call the method with an empty array      
             for the <strong>points</strong> argument, or with the value 
             <strong>0</strong> for the <strong>length</strong> argument.
             In this case, the values of the arguments <strong>startIndex</strong>
             and <strong>length</strong> are ignored.
             </p><p>
             The mode parameters determine how the <paramref name="fromPoint"/>
             and <paramref name="toPoint"/> should be used:
             <ul>
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Ignore"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout does not
             specify how the corresponding origin or destination point of 
             the link should be determined.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Move"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains a meaningful value. The layout wants to
             move the corresponding origin or destination point of the link
             to the specified point.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Fix"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout wants to
             keep the previous corresponding origin or destination point of
             the link fixed, relative to the node position.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Clip"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout wants to
             clip the corresponding origin or destination point of
             the link against the border of the node.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.MoveAndClip"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains a meaningful value. The layout wants to
             clip the corresponding origin or destination point of
             the link against the border of the node, but the link should
             go though the specified point.</li>
            
             </ul>
             </p>
             </remarks>
             <param name="link">The link to be reshaped.
             </param>
             <param name="style">The style of the shape of the link.
             </param>
             <param name="fromPoint">The connection point of the link on the
             origin node.
             </param>
             <param name="fromPointMode">The mode that indicates how the
             <paramref name="fromPoint"/> should be used.
             </param>
             <param name="points">The array of intermediate points. Ignored
             if <strong>length</strong> is <strong>0</strong>."/&gt;
             </param>
             <param name="startIndex">The starting position in the array of
             points.
             </param>
             <param name="length">The number of intermediate points.
             </param>
             <param name="toPoint">The connection point of the link on the
             destination node.
             </param>
             <param name="toPointMode">The mode that indicates how the
             <paramref name="toPoint"/> should be used.
             </param>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.IsLink(System.Object)">
             </seealso>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)">
             </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.HasMoveableConnectionPoint(System.Object,System.Boolean)">
            <summary>
            Returns whether the connection point of a link can be moved.
            </summary>
            <param name="link">The link.
            </param>
            <param name="origin">Set to <see langword="true"/> if the connection
            point is on the origin and <see langword="false"/> otherwise.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.HasPinnedConnectionPoint(System.Object,System.Boolean)">
            <summary>
            Returns whether the connection point of a link is pinned.
            </summary>
            <param name="link">The link.
            </param>
            <param name="origin">Set to <see langword="true"/> if the connection
            point is on the origin and <see langword="false"/> otherwise.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.GetLinkWidth(System.Object)">
            <summary>
            Returns the width of a link.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.GetOriginal(System.Object)">
            <summary>
            Returns the original object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.GetOriginalGraphModel(System.Object)">
            <summary>
            Returns the graph model of the original object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.GetParent(System.Object)">
            <summary>
            Returns the parent of the node or link.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.GetChildren(System.Object)">
            <summary>
            Returns the children nodes of the input node.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.Nodes">
            <summary> Gets the nodes.</summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.Internal.SubgraphData.Links">
            <summary>
            Gets the normal links.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Design.XmlObjectConverter">
            <summary>
            Represents a type converter to convert from and to a string any object using the <see cref="T:ILOG.Diagrammer.Serialization.DiagramXmlSerializer"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.XmlObjectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">TypeConverter.CanConvertFrom</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.XmlObjectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">TypeConverter.CanConvertTo</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.XmlObjectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">TypeConverter.ConvertFrom</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.XmlObjectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">TypeConverter.ConvertTo</see>
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.ClipPath">
             <summary>
             Defines a clip path to clip a graphic object.
             </summary>
             <remarks>This class is used to clip a graphic object by setting the 
             <see cref="P:ILOG.Diagrammer.GraphicObject.Clip"/> property.</remarks>
             <example>
             <para>The following sample shows how to create a group clipped by an ellipse.</para>
             <code lang="cs">
             Group group = new Group();
             Rect rect = new Rect(0,0, 200,200);
             rect.Fill = new SolidFill(Color.Blue);
             Circle circle = new Circle(100,100, 50);
             circle.Fill = new SolidFill(Color.Black);
             group.Objects.Add(rect);
             group.Objects.Add(circle);
            
             // clip with an ellipse
             ClipPath clip = new ClipPath();
             clip.Path.AddEllipse(new Rectangle2D(0, 50, 200, 100));
             
             group.Clip = clip;
             </code>
             <code lang="vbnet">
             Dim group As Group = New Group 
             Dim rect As Rect = New Rect(0, 0, 200, 200) 
             rect.Fill = New SolidFill(Color.Blue) 
             Dim circle As Circle = New Circle(100, 100, 50) 
             circle.Fill = New SolidFill(Color.Black) 
             group.Objects.Add(rect) 
             group.Objects.Add(circle)
             ' clip with an ellipse
             Dim clip As ClipPath = New ClipPath 
             clip.Path.AddEllipse(New Rectangle2D(0, 50, 200, 100)) 
             group.Clip = clip
             </code>
             </example>
             <seealso cref="T:ILOG.Diagrammer.PathData"/>
        </member>
        <member name="M:ILOG.Diagrammer.ClipPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.ClipPath"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ClipPath.GetClipRegion">
            <summary>
            Computes the clipping region.
            </summary>
            <returns>A <see cref="T:System.Drawing.Region"/> instance that contains the clipping path.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.ClipPath.Clone">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.StyleBase.Clone">StyleBase.Clone</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ClipPath.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.ClipPath.Path">
            <summary>
            Gets the data that defines the shape to clip with.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.PathData"/> instance.</value>
            <seealso cref="P:ILOG.Diagrammer.ClipPath.ClipMode"/>
        </member>
        <member name="P:ILOG.Diagrammer.ClipPath.ClipMode">
            <summary>
            Gets or sets the fill mode of the clipping path.
            </summary>
            <value>One of the <see cref="T:System.Drawing.Drawing2D.FillMode"/> values. 
            The default value is <see cref="F:System.Drawing.Drawing2D.FillMode.Winding"/>.</value>
            <seealso cref="P:ILOG.Diagrammer.ClipPath.Path"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.BestNeighborOptimization.GetVariantsCount(System.Object)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.BestNeighborOptimization.GetCost(System.Object)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.SLLayout.BestNeighborOptimization.ApplyVariant(System.Object,System.Int32,System.Int32)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.RowColumnGrid.Graph.BasicSortNodes.Compare(System.Object,System.Object)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.RowColumnGrid.GraphOnMatrix.GetVerticalIndividualAlignment(System.Object)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.RowColumnGrid.GraphOnMatrix.GetNodeIndex(System.Object)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.RowColumnGrid.GraphOnMatrix.GetHorizontalIndividualAlignment(System.Object)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.RowColumnGrid.GraphOnMatrix.MayContinue">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.RowColumnGrid.GraphOnMatrix.LayoutStepPerformed">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.LabelledDivider">
            <summary>
            A divider line with a label.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.LabelledDivider.m_gap">
            <summary>
            The gap between label and line.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.LabelledDivider.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Label.OnPaint(System.Windows.Forms.PaintEventArgs)">Label.OnPaint</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.LabelledDivider.DrawLine(System.Drawing.Graphics)">
            <summary>
            Draws the line.
            </summary>
            <param name="g">The Graphics context.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.LabelledDivider.GetHorizontalAlignment">
            <summary>
              Gets the horizontal alignment depending on <see cref="P:System.Windows.Forms.Label.TextAlign"/> and
              <see cref="T:System.Windows.Forms.RightToLeft"/> properties.
            </summary>
            <returns>
              One of the <see cref="T:System.Windows.Forms.HorizontalAlignment"/> values.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.LabelledDivider.Draw3DLine(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Draws 3D horizontal divider line
            </summary>
            <param name="g">
              <c>Graphics</c> object.
            </param>
            <param name="x1">
              x-coordinate of the first point.
            </param>
            <param name="y1">
              y-coordinate of the first point.
            </param>
            <param name="x2">
              x-coordinate of the second point. 
            </param>
            <param name="y2">
              y-coordinate of the second point.
            </param>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.LabelledDivider.Gap">
            <summary>
              Gets or sets the gap (in pixels) between label and line.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.SVG.LengthTypes">
             <summary>
                This enumeration lists the SVG length types.
             </summary>
            
        </member>
        <member name="F:ILOG.Diagrammer.SVG.LengthTypes.Number">
            <summary>
               The default unit type.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.LengthTypes.Percentage">
            <summary>
               Percentage values 
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.LengthTypes.Ems">
            <summary>
               The 'font-size' of the relevant font.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.LengthTypes.Exs">
            <summary>
               The 'x-height' of the relevant font.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.LengthTypes.Px">
            <summary>
               Pixels, relative to the viewing device.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.LengthTypes.Cm">
            <summary>
               Centimeters. 
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.LengthTypes.Mm">
            <summary>
               Millimeters. 
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.LengthTypes.In">
            <summary>
               Inches -- 1 inch is equal to 2.54 centimeters. 
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.LengthTypes.Pt">
            <summary>
               Points -- the points used by CSS2 are equal to 1/72th of an inch.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.LengthTypes.Pc">
            <summary>
               Picas -- 1 pica is equal to 12 points. 
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.SVG.LengthDirections">
            <summary>
               Defines the different possible directions for a length or a
               coordinate.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.LengthDirections.Horizontal">
            <summary>
               The direction for x-coordinate or width value. Specifies
               that the length is relative to the actual width of the
               nearest containing viewport.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.LengthDirections.Vertical">
            <summary>
               The direction for y-coordinate or height value. Specifies
               that the length is relative to the actual height of the
               nearest containing viewport.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.LengthDirections.Other">
            <summary>
               Any other type of length.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.SVGLengthUtil.CSSUNITNAMES">
            An array of the CSS units.
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGLengthUtil.GetXLength(System.Xml.XmlElement,System.String,ILOG.Diagrammer.SVG.SVGReader)">
            Returns the horizontal length corresponding to the given value according
            to the current context.
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGLengthUtil.GetYLength(System.Xml.XmlElement,System.String,ILOG.Diagrammer.SVG.SVGReader)">
            Returns the vertical length corresponding to the given value according
            to the current context.
        </member>
        <member name="M:ILOG.Diagrammer.SVG.SVGLengthUtil.GetXYLength(System.Xml.XmlElement,System.String,ILOG.Diagrammer.SVG.SVGReader)">
            Returns the diagonal length corresponding to the given value according
            to the current context.
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactPatternChooser.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactPatternChooser.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactPatternChooser.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactPatternChooser.updateControl">
            <summary>
            Updates UI Controls.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactPatternChooser.FillLists">
            <summary>
            Fills the UI lists with each available HatchStyle
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactPatternChooser.updatePatternItems">
            <summary>
            Updates PatternItem with the current ForeColor and BackColor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactPatternChooser.updateColors">
            <summary>
            Updates Color controls with the fill ForeColor and BackColor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactPatternChooser.updateOpacity">
            <summary>
            Updates the opacity control value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactPatternChooser.DrawListItems(System.Object,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Draws a PatternItem in the list.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.CompactPatternChooser.Fill">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.HatchFill"/> to edit.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Serialization.PropertyDesignerSerializerAttribute">
            <summary>
            Indicates a serializer for the serialization manager to use to serialize the properties
            this attribute is applied to.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.PropertyDesignerSerializerAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initialize a new instance of the <see cref="T:ILOG.Diagrammer.Serialization.PropertyDesignerSerializerAttribute"/> class.
            </summary>
            <param name="serializerType">The data type of the serializer.</param>
            <param name="baseSerializerType">The base data type of the serializer.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.PropertyDesignerSerializerAttribute.SerializerType">
            <summary>
            Gets the data type of the serializer.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.PropertyDesignerSerializerAttribute.BaseSerializerType">
            <summary>
            Gets the base data type of the serializer.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.TextOnPath">
             <summary>
             Represents a text drawn along a path.
             </summary>
             <remarks>
             Represents a text drawn along a path specified through the <see cref="P:ILOG.Diagrammer.Graphic.TextOnPath.Path"/> property. The
             text is specified through the <see cref="P:ILOG.Diagrammer.GraphicObject.Text"/> property. The text is drawn along the path after
             the offset specified by the <see cref="P:ILOG.Diagrammer.Graphic.TextOnPath.StartOffset"/> property. An additional spacing between letters can be specified using the
             <see cref="P:ILOG.Diagrammer.Graphic.TextOnPath.LetterSpacing"/> property.
             </remarks>
             <example>
             <code lang="cs">
             TextOnPath CreateTextOnPath()
             {
            
                TextOnPath textOnPath = new TextOnPath();
                textOnPath.Text = "Diagram for .NET";
                textOnPath.Font = new Font("Garamond", 35F, FontStyle.Bold);
            
                LinearGradientFill gradient 
                    = new LinearGradientFill(new Point2D(0, 0), 
                                             new Point2D(0, 1), 
                                             Color.Yellow, 
                                             Color.Red);
                textOnPath.Fill = gradient;
                textOnPath.Stroke = new Stroke(Color.Olive);
            
                textOnPath.Path.SetGeometry(
                     "M100 200 C 100 100 250 100 250 200 S400 300 400 200");
            
                return textOnPath;
             }
             </code>
             <code lang="vbnet">
             Function CreateTextOnPath() As TextOnPath
                 Dim textOnPath As TextOnPath = New TextOnPath
                 textOnPath.Text = "Diagram for .NET"
                 textOnPath.Font = New Font("Garamond", 35.0F, FontStyle.Bold)
             
                 Dim gradient As LinearGradientFill = _
                           New LinearGradientFill(New Point2D(0, 0), _
                                                  New Point2D(0, 1), _
                                                  Color.Yellow, _
                                                  Color.Red)
                 textOnPath.Fill = gradient
                 textOnPath.Stroke = New Stroke(Color.Olive)
                 textOnPath.Path.SetGeometry( _
                       "M100 200 C 100 100 250 100 250 200 S400 300 400 200")
             
                 Return textOnPath
             End Function
             </code>
             </example>
             <seealso cref="T:ILOG.Diagrammer.Graphic.Text"/>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.TextOnPath._glyphPath">
            <summary>
            GraphicsPath containing the text.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.TextOnPath._visualBounds">
            <summary>
            GraphicsPath containing the text.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.TextOnPath._letterSpacing">
            <summary>
            Text to display
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.TextOnPath._pathDefinition">
            <summary>
            Definition of path where the text is drawn.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.TextOnPath"/> class.
            </summary>
            <overloads>
             Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.TextOnPath"/> class.
            </overloads>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.#ctor(ILOG.Diagrammer.PathData)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.TextOnPath"/> class with the specified path.
            </summary>
            <param name="path">A <see cref="T:ILOG.Diagrammer.PathData"/> object that defines the path on which the text is drawn.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.#ctor(ILOG.Diagrammer.PathData,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.TextOnPath"/> class with the specified path and text.
            </summary>
            <param name="path">A <see cref="T:ILOG.Diagrammer.PathData"/> object that defines the path on which the text is drawn.</param>
            <param name="text">The text to display.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.Dispose(System.Boolean)">GraphicObject.Dispose</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.OnPathChanged">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.TextOnPath.Path"/> collection has changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.OnLetterSpacingChanged(System.Single,System.Single)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.TextOnPath.LetterSpacing"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.OnStartOffsetChanged(System.Single,System.Single)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.TextOnPath.StartOffset"/> property is changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.GetPathLength">
            <summary>
            Computes the length of the path defined by the <see cref="P:ILOG.Diagrammer.Graphic.TextOnPath.Path"/> property.
            </summary>
            <returns>The length of the path defined by the <see cref="P:ILOG.Diagrammer.Graphic.TextOnPath.Path"/> property.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.PaintCore(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)">GraphicObject.PaintCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestCore</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">GraphicObject.IntersectsCore</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.GetGeometryBounds">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetGeometryBounds">GraphicObject.GetGeometryBounds</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.GetBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetBounds</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.ComputeStyledBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetStyledBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetStyledBounds</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.OnTextChanged(System.String,System.String)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnTextChanged(System.String,System.String)">GraphicObject.OnTextChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.OnHorizontalAlignmentChanged(ILOG.Diagrammer.HorizontalTextAlignment,ILOG.Diagrammer.HorizontalTextAlignment)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.TextBase.OnHorizontalAlignmentChanged(ILOG.Diagrammer.HorizontalTextAlignment,ILOG.Diagrammer.HorizontalTextAlignment)">TextBase.OnHorizontalAlignmentChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.OnVerticalAlignmentChanged(ILOG.Diagrammer.VerticalTextAlignment,ILOG.Diagrammer.VerticalTextAlignment)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.TextBase.OnVerticalAlignmentChanged(ILOG.Diagrammer.VerticalTextAlignment,ILOG.Diagrammer.VerticalTextAlignment)">TextBase.OnVerticalAlignmentChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPath.OnFontChanged(System.Drawing.Font,System.Drawing.Font)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.TextBase.OnFontChanged(System.Drawing.Font,System.Drawing.Font)">TextBase.OnFontChanged</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextOnPath.Path">
            <summary>
            Gets the path on which the text is drawn.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.PathData"/> object that defines the path on which 
            the text is drawn.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.TextOnPath.PathChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.TextOnPath.Path"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextOnPath.LetterSpacing">
            <summary>
            Gets or sets an amount of space that is to be added between text characters.
            </summary>
            <value>Represents an amount of space that is added between text characters. The
            default value is <strong>0</strong>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.TextOnPath.StartOffset"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.TextOnPath.LetterSpacingChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.TextOnPath.LetterSpacing"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextOnPath.StartOffset">
            <summary>
            Gets or sets an offset from the start of the path for the initial current text position.
            </summary>
            <value>Represents an offset from the start of the path for the initial current text position. The
            default value is zero.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.TextOnPath.LetterSpacing"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.TextOnPath.StartOffsetChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.TextOnPath.StartOffset"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextOnPath.EndPoint">
            <summary>
            Gets the last point where text is drawn.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the last point where the text is drawn.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.TextOnPathSelectionGraphic">
            <summary>
            The selection class dedicated to <see cref="T:ILOG.Diagrammer.Graphic.TextOnPath"/> objects.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPathSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.TextOnPathSelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPathSelectionGraphic.IsTypeSupported(System.Type)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.SelectionGraphic.IsTypeSupported(System.Type)">SelectionGraphic.IsTypeSupported</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPathSelectionGraphic.RaisePathDataChanging">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.RaisePathDataChanging">PathSelectionGraphic.RaisePathDataChanging</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPathSelectionGraphic.RaisePathDataChanged">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.PathSelectionGraphic.RaisePathDataChanged">PathSelectionGraphic.RaisePathDataChanged</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.TextOnPathSelectionGraphic.PaintCore(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)">GraphicObject.PaintCore</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextOnPathSelectionGraphic.SelectedObjectResizeMode">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.ReshapeSelectionGraphic.SelectedObjectResizeMode">ReshapeSelectionGraphic.SelectedObjectResizeMode</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextOnPathSelectionGraphic.KeepAspectRatio">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.ReshapeSelectionGraphic.KeepAspectRatio">ReshapeSelectionGraphic.KeepAspectRatio</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.TextOnPathSelectionGraphic.ShowMiddleHandles">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.ReshapeSelectionGraphic.ShowMiddleHandles">ReshapeSelectionGraphic.ShowMiddleHandles</see>
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.IArcShape">
            <summary>
            Defines an interface implemented by graphic objects representing an arc.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.IArcShape.StartAngle">
            <summary>
            Gets or sets the start angle of the arc in degrees.
            </summary>
            <value>A <see cref="T:System.Single"/> that represents the start angle of the arc in degrees.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.IArcShape.SweepAngle">
            <summary>
            Gets or sets the sweep angle of the arc in degrees.
            </summary>
            <value>A <see cref="T:System.Single"/> that represents the sweep angle of the arc in degrees.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ArcBase">
            <summary>
            Defines the <see langword="abstract"/> base class of graphic objects representing an arc.
            </summary>
            <remarks>
            <see cref="T:ILOG.Diagrammer.Graphic.ArcBase"/> is the <see langword="abstract"/> base class of graphic objects representing an arc such as <see cref="T:ILOG.Diagrammer.Graphic.Arc"/>
            and <see cref="T:ILOG.Diagrammer.Graphic.Pie"/>. The arc is defined by a bounding rectangle (property <see cref="P:ILOG.Diagrammer.Graphic.BoundedShape.Rectangle"/>, a start angle 
            and a sweep angle in degree (properties <see cref="P:ILOG.Diagrammer.Graphic.ArcBase.StartAngle"/> and <see cref="P:ILOG.Diagrammer.Graphic.ArcBase.SweepAngle"/>).
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ArcBase._startAngle">
            <summary>
            The start angle.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ArcBase._sweepAngle">
            <summary>
            The sweep angle.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ArcBase.#ctor(ILOG.Diagrammer.Rectangle2D,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.ArcBase"/> class.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> object that defines the bounding rectangle
            of the ellipse that defines the arc.</param>
            <param name="startAngle">The start angle or the arc.</param>
            <param name="sweepAngle">The sweep angle of the arc.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ArcBase.OnStartAngleChanged(System.Single,System.Single)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.ArcBase.StartAngle"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ArcBase.OnSweepAngleChanged(System.Single,System.Single)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.ArcBase.SweepAngle"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ArcBase.GetBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetBounds</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ArcBase.StartAngle">
            <summary>
            Gets or sets the start angle of the arc in degrees.
            </summary>
            <value>The start angle of the arc in degrees. The default value is <strong>0</strong>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ArcBase.SweepAngle"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ArcBase.StartAngleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ArcBase.StartAngle"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ArcBase.SweepAngle">
            <summary>
            Gets or sets the sweep angle of the arc in degrees.
            </summary>
            <value>The sweep angle of the arc in degrees. The default value is 0.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ArcBase.StartAngle"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ArcBase.SweepAngleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ArcBase.SweepAngle"/> property has changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Arc">
            <summary>
            Defines a graphic object that represent an arc.
            </summary>
            <remarks>
            <see cref="T:ILOG.Diagrammer.Graphic.Arc"/> is a graphic object that represents an arc. The arc is defined by a bounding rectangle (property <see cref="P:ILOG.Diagrammer.Graphic.BoundedShape.Rectangle"/>, 
            a start angle and a sweep angle (properties <see cref="P:ILOG.Diagrammer.Graphic.ArcBase.StartAngle"/> and <see cref="P:ILOG.Diagrammer.Graphic.ArcBase.SweepAngle"/>.
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample creates an arc with a black border.</para>
            <code lang="cs"> 
            Arc CreateArc()
            {
                Arc arc = new Arc();
                arc.Rectangle = new Rectangle2D(0, 0, 100, 100);
                arc.StartAngle = 10;
                arc.SweepAngle = 45;
                arc.Stroke = new Stroke(Color.Black, 2);
                return arc;
            }
            </code>
            <code lang="vbnet">
            Function CreateArc() As Arc 
                Dim arc As Arc = New Arc 
                arc.Rectangle = New Rectangle2D(0, 0, 100, 100) 
                arc.StartAngle = 10 
                arc.SweepAngle = 45 
                arc.Stroke = New Stroke(Color.Black, 2) 
                Return arc 
            End Function
            </code>
            </example>    
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Arc.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Arc"/> class.
            </summary>
            <overloads>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Arc"/> class.
            </overloads>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Arc.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Arc"/> class by specifying the coordinates of the bounding rectangle, the start and sweep angle.
            </summary>
            <param name="x">The x coordinate of the top left corner of the rectangle that defines the ellipse defining the arc.</param>
            <param name="y">The y coordinate of the top left corner of the rectangle that defines the ellipse defining the arc.</param>
            <param name="width">The width of the rectangle that defines the ellipse defining the arc.</param>
            <param name="height">The height of the rectangle that defines the ellipse defining the arc.</param>
            <param name="startAngle">The start angle or the arc.</param>
            <param name="sweepAngle">The sweep angle of the arc.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Arc.#ctor(ILOG.Diagrammer.Rectangle2D,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Arc"/> class by specifying the bounding rectangle, the start and sweep angle.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> object that represents the rectangle 
            that defines the ellipse defining the arc.</param>
            <param name="startAngle">The start angle or the arc.</param>
            <param name="sweepAngle">The sweep angle of the arc.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Arc.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Shape.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">Shape.UpdateGraphicsPath</see>
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Pie">
            <summary>
            Defines a graphic object that represent a pie.
            </summary>
            <remarks>
            <see cref="T:ILOG.Diagrammer.Graphic.Pie"/> is a graphic object that represents a pie.  The pie is defined by a 
            bounding rectangle (property <see cref="P:ILOG.Diagrammer.Graphic.BoundedShape.Rectangle"/>), a 
            start angle and a sweep angle in degrees (properties <see cref="P:ILOG.Diagrammer.Graphic.ArcBase.StartAngle"/> and <see cref="P:ILOG.Diagrammer.Graphic.ArcBase.SweepAngle"/>).
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample creates a light blue pie with a black border.</para>
            <code lang="cs"> 
            Pie CreatePie()
            {
                Pie pie = new Pie();
                pie.Rectangle = new Rectangle2D(0, 0, 100, 100);
                pie.StartAngle = 10;
                pie.SweepAngle = 45;
                pie.Fill = new SolidFill(Color.LightBlue);
                pie.Stroke = new Stroke(Color.Black, 2);
                return pie;
            }
            </code>
            <code lang="vbnet">
            Function CreatePie() As Pie 
                Dim pie As Pie = New Pie 
                pie.Rectangle = New Rectangle2D(0, 0, 100, 100) 
                pie.StartAngle = 10 
                pie.SweepAngle = 45 
                pie.Fill = New SolidFill(Color.LightBlue) 
                pie.Stroke = New Stroke(Color.Black, 2) 
                Return pie 
            End Function
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Pie.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Pie"/> class.
            </summary>
            <overloads>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Pie"/> class.
            </overloads>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Pie.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Pie"/> class.
            </summary>
            <param name="x">The x coordinate of the top left corner of the rectangle that defines the ellipse defining the arc.</param>
            <param name="y">The y coordinate of the top left corner of the rectangle that defines the ellipse defining the arc.</param>
            <param name="width">The width of the rectangle that defines the ellipse defining the arc.</param>
            <param name="height">The height of the rectangle that defines the ellipse defining the arc.</param>
            <param name="startAngle">The start angle or the arc.</param>
            <param name="sweepAngle">The sweep angle of the arc.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Pie.#ctor(ILOG.Diagrammer.Rectangle2D,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Pie"/> class.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> object that represents the rectangle 
            that defines the ellipse defining the arc.</param>
            <param name="startAngle">The start angle or the arc.</param>
            <param name="sweepAngle">The sweep angle of the arc.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Pie.OnHoleRadiusChanged(System.Single,System.Single)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Pie.HoleRadius"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Pie.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Shape.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">Shape.UpdateGraphicsPath</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Pie.HoleRadius">
            <summary>
            Gets or sets the size (in percentage) of the central hole in the pie.
            </summary>
            <value>A floating point value between 0 and 1 that represents the size (in percentage of the pie radius) of
            the central hole. The default value is zero.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Pie.HoleRadiusChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Pie.HoleRadius"/> property has changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ArcSelectionGraphic">
            <summary>
            The selection class dedicated to objects implementing the <see cref="T:ILOG.Diagrammer.Graphic.IArcShape"/> interface.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ArcSelectionGraphic.FirstHandleIndex">
            <summary>
            The index of the first handle for this class.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ArcSelectionGraphic.MoveStartAngleHandleIndex">
            <summary>
            The index of the handle that allows to move the left side of the object.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ArcSelectionGraphic.MoveSweepAngleHandleIndex">
            <summary>
            The index of the handle that allows to move the left side of the object.
            </summary>        
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ArcSelectionGraphic.LastHandleIndex">
            <summary>
            The index of the last handle for this class.
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ArcSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.ArcSelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ArcSelectionGraphic.IsTypeSupported(System.Type)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.SelectionGraphic.IsTypeSupported(System.Type)">SelectionGraphic.IsTypeSupported</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ArcSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">DefaultSelectionGraphic.GetHandleDescription</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ArcSelectionGraphic.IsHandleVisible(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.IsHandleVisible(System.Int32)">DefaultSelectionGraphic.IsHandleVisible</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ArcSelectionGraphic.GetHandleCursor(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleCursor(System.Int32)">DefaultSelectionGraphic.GetHandleCursor</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ArcSelectionGraphic.GetHandlePoints">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandlePoints">DefaultSelectionGraphic.GetHandlePoints</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ArcSelectionGraphic.OnInteractionStarted">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnInteractionStarted">DefaultSelectionGraphic.OnInteractionStarted</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ArcSelectionGraphic.OnInteractionValidated">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnInteractionValidated">DefaultSelectionGraphic.OnInteractionValidated</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ArcSelectionGraphic.DoMoveAngles(System.Single,System.Single)">
            <summary>
            Is called to move the angles of the selected object.
            </summary>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ArcSelectionGraphic.ValidateGhostGraphic(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.ValidateGhostGraphic(ILOG.Diagrammer.GraphicObject)">DefaultSelectionGraphic.ValidateGhostGraphic</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ArcSelectionGraphic.MoveHandle(System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.MoveHandle(System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">DefaultSelectionGraphic.MoveHandle</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ArcSelectionGraphic.SnapHandlePoint(System.Int32,ILOG.Diagrammer.Point2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.SnapHandlePoint(System.Int32,ILOG.Diagrammer.Point2D)">DefaultSelectionGraphic.SnapHandlePoint</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ArcSelectionGraphic.CanEditSelectedObjectAngles">
            <summary>
            Gets a value indicating whether it's possible to edit the arc angles.
            </summary>
            <value><see langword="true"/> to enable arc angles edition; Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ArcSelectionGraphic.ShowMiddleHandles">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.ReshapeSelectionGraphic.ShowMiddleHandles">ReshapeSelectionGraphic.ShowMiddleHandles</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeSourceAlpha">
            <summary>
            Represents the alpha channel of the graphic object to which the filter was set.
            </summary>
            <remarks>
            <strong>FeSourceAlpha</strong> has all of the same
            rules as <see cref="T:ILOG.Diagrammer.Filters.FeSourceGraphic"/> except that only the alpha channel is used. 
            The resulting image is an RGBA image consisting of implicitly black
            color values for the RGB channels, but whose alpha channel is the same as <see cref="T:ILOG.Diagrammer.Filters.FeSourceGraphic"/>.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeSourceGraphic">
            <summary>
            Represents the graphic object to which the filter was set.
            </summary>
            <remarks>
            The graphic object will be rasterized into an initially clear RGBA raster in image space.
            Pixels left untouched by the original graphic
            will be left clear. The image is specified to be rendered in linear RGBA pixels. 
            The alpha channel of this image captures any
            anti-aliasing. 
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.IStandardInput">
            <summary>
            Defines the interface for all filter standard inputs.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeSourceGraphic.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeSourceGraphic"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeSourceGraphic.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeSourceGraphic"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeSourceGraphic.ToString">
            <summary>
            Returns a short description of this filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeSourceGraphic.Inputs">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.FilterEffect.Inputs">FilterEffect.Inputs</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeSourceAlpha.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeSourceAlpha"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeSourceAlpha.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeSourceAlpha"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeSourceAlpha.ToString">
            <summary>
            Returns a short description of this filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeSourceAlpha.ExtractAlpha">
            <summary>
            FeSourceAlpha may not extract the alpha value
            if the filter applied is optimized for alpha channel.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeMerge">
            <summary>
            This filter effect composites input image layers on top of each other 
            using the over operator with <strong>Input1</strong> at the bottom and the last 
            specified input, <strong>InputN</strong> at the top.
            </summary>
            <remarks>
            Many effects produce a number of intermediate layers to create 
            the final output image. This filter allows us to collapse those into a single
            image. 
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeMerge.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeMerge"/> filter effect.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeMerge.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeMerge"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeMerge.ToString">
            <summary>
            Returns a short description of this filter effect.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeMerge.Apply(ILOG.Diagrammer.FilterPaintContext,System.Drawing.Bitmap[])">
            <summary>
            Applies the filter.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeGaussianBlur">
            <summary>
            Represents a filter effect that applies a Gaussian Blur on the input image.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeGaussianBlur.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeGaussianBlur"/> object with deviation of zero.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeGaussianBlur.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeGaussianBlur"/> object.
            </summary>
            <param name="deviationX">The standard deviation along the x-axis.</param>
            <param name="deviationY">The standard deviation along the y-axis.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeGaussianBlur.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeGaussianBlur"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeGaussianBlur.ToString">
            <summary>
            Returns a short description of this filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeGaussianBlur.DeviationX">
            <summary>
            Gets or sets the standard deviation along the x-axis.
            </summary>
            <value>The standard deviation along the x-axis. The default value is zero.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeGaussianBlur.DeviationY">
            <summary>
            Gets or sets the standard deviation along the y-axis.
            </summary>
            <value>The standard deviation along the y-axis. The default value is zero.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeGaussianBlur.Inputs">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.FilterEffect.Inputs">FilterEffect.Inputs</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeGaussianBlur.In">
            <summary>
            Gets or sets the source of this filter effect.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.Channel">
            <summary>
            Represents a color channel for the <see cref="T:ILOG.Diagrammer.Filters.FeDisplacementMap"/> filter effect.
            </summary>
            <remarks>Use the value of this enumeration to define the X and Y color channel of the displacement in the
            <see cref="P:ILOG.Diagrammer.Filters.FeDisplacementMap.XChannel"/> and <see cref="P:ILOG.Diagrammer.Filters.FeDisplacementMap.YChannel"/> properties of 
            the <see cref="T:ILOG.Diagrammer.Filters.FeDisplacementMap"/> class.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.Channel.Red">
            <summary>
            The red channel.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.Channel.Green">
            <summary>
            The green channel.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.Channel.Blue">
            <summary>
            The blue channel.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.Channel.Alpha">
            <summary>
            The alpha channel.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeDisplacementMap">
            <summary>
            Displacement map filter effect.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeDisplacementMap.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeDisplacementMap"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeDisplacementMap.#ctor(ILOG.Diagrammer.Filters.Channel,ILOG.Diagrammer.Filters.Channel,System.Single)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeDisplacementMap"/> object.
            </summary>
            <param name="xChannel">A <see cref="T:ILOG.Diagrammer.Filters.Channel"/> value that represents the channel from the second input image to use to 
            displace the pixels of the first image along the x-axis.</param>
            <param name="yChannel">A <see cref="T:ILOG.Diagrammer.Filters.Channel"/> value that represents the channel from the second input image to use to 
            displace the pixels of the first image along the y-axis.</param>
            <param name="scale">The displacement map scale factor.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeDisplacementMap.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeDisplacementMap"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeDisplacementMap.ToString">
            <summary>
            Returns a short description of this filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeDisplacementMap.Scale">
            <summary>
            Gets or sets the displacement scale factor.
            </summary>
            <value>
            The displacement scale factor. When the value of the property is zero, this operation has 
            no effect on the source image.
            The default value is zero.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeDisplacementMap.YChannel">
            <summary>
            Gets or sets which channel from the second input image to use to 
            displace the pixels of the first image along the y-axis.
            </summary>
            <value>
            The channel from the second input image to use to 
            displace the pixels of the first image along the y-axis.
            The default value is <see cref="F:ILOG.Diagrammer.Filters.Channel.Alpha"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeDisplacementMap.XChannel">
            <summary>
            Gets or sets which channel from the second input image to use to 
            displace the pixels of the first image along the x-axis.
            </summary>
            <value>
            The channel from the second input image to use to 
            displace the pixels of the first image along the x-axis.
            The default value is <see cref="F:ILOG.Diagrammer.Filters.Channel.Alpha"/>.
            </value>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ConstraintTypeChooser.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ConstraintTypeChooser.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ConstraintTypeChooser.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ConstraintEditor">
            <summary>
            The <see cref="T:ILOG.Diagrammer.Windows.Forms.ConstraintEditor"/> component is used to define
            the constraints of a <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayout"/> algorithm.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ConstraintEditor.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.ConstraintEditor"/> class.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ConstraintEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ConstraintEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ConstraintEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ConstraintEditor.DiagramView">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> that is used to select
            the graphic objects on which the constraints are applied.
            </summary>
            <remarks>
            The <see cref="P:ILOG.Diagrammer.Windows.Forms.ConstraintEditor.DiagramView"/> property must be set to a non-null value,
            otherwise the constraint editor will not be functional.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ConstraintEditor.GraphLayout">
            <summary>
            Gets or sets the graph layout algorithm whose constraints must be edited.
            </summary>
            <remarks>
            This property must be set only if the graph layout whose constraints must be edited
            is not the same as the value of the <see cref="P:ILOG.Diagrammer.GraphicContainer.GraphLayout"/> property of the
            graphic container attached to the view stored in the <see cref="P:ILOG.Diagrammer.Windows.Forms.ConstraintEditor.DiagramView"/>
            property.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ConstraintEditor.HelpVisible">
            <summary>
            Determines whether the help text box is visible or not.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.StyleChangeType">
            <summary>
            Defines the type of modification of a <see cref="T:ILOG.Diagrammer.StyleBase"/> object.
            </summary>
            <seealso cref="T:ILOG.Diagrammer.StyleChangeEventArgs"/>
        </member>
        <member name="F:ILOG.Diagrammer.StyleChangeType.Appearance">
            <summary>
            The change affects the appearance of the object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.StyleChangeType.Bounds">
            <summary>
            The change affects the bounding box of the object.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.StyleChangeEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.StyleBase.Changing"/> and <see cref="E:ILOG.Diagrammer.StyleBase.Changed"/>
            events of a <see cref="T:ILOG.Diagrammer.StyleBase"/> object.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.StyleChangeEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.StyleBase.Changing"/> and <see cref="E:ILOG.Diagrammer.StyleBase.Changed"/> events of a <see cref="T:ILOG.Diagrammer.StyleBase"/> object.
            </summary>
            <remarks>The <see cref="P:ILOG.Diagrammer.StyleChangeEventArgs.ChangeType"/> property gives the type of change.</remarks>
        </member>
        <member name="F:ILOG.Diagrammer.StyleChangeEventArgs._type">
            <summary>
            The type of change.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.StyleChangeEventArgs.ChangeType">
            <summary>
            Gets the type of the modification.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.StyleChangeType"/> values.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Design.ImageObjectXmlSerializer">
            <summary>
            Custom XML serializer to serialize <see cref="T:ILOG.Diagrammer.Graphic.SubDiagramIcon"/> image definitions as base64 strings.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.ColorUtil">
            <summary>
             Regroups utility methods for colors.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ColorUtil.Lighter(System.Drawing.Color,System.Single)">
            <summary>
            Computes a lighter color from a specified color.
            </summary>
            <param name="color">The original color.</param>
            <param name="percent">The percentage of additional light (ex: 0.1 for 10 percent).</param>
        </member>
        <member name="M:ILOG.Diagrammer.ColorUtil.Darker(System.Drawing.Color,System.Single)">
            <summary>
            Computes a darker color from a specified color.
            </summary>
            <param name="color">The original color.</param>
            <param name="percent">The percentage of light to remove (ex: 0.1 for 10 percent).</param>
        </member>
        <member name="T:ILOG.Diagrammer.ColorSpaceType">
            <summary>
            Specifies a color space type.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.ColorSpaceType.RGB">
            <summary>
            Specifies the RGB color space.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.ColorSpaceType.HSB">
            <summary>
            Specifies the HSB color space.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.ColorSpaceType.HSL">
            <summary>
            Specifies the HSL color space.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.ColorComponentType">
            <summary>
            Specified a color component. Several color spaces are used (RGB, HSL, HSB)
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.ColorComponentType.Alpha">
            <summary>
            Specifies the alpha component of a color.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.ColorComponentType.Red">
            <summary>
            Specifies the red component of a color.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.ColorComponentType.Green">
            <summary>
            Specifies the green component of a color.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.ColorComponentType.Blue">
            <summary>
            Specifies the blue component of a color.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.ColorComponentType.Hue">
            <summary>
            Specifies the hue component of a color.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.ColorComponentType.HSLSaturation">
            <summary>
            Specifies the saturation component (in the HSL color space) of a color.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.ColorComponentType.HSBSaturation">
            <summary>
            Specifies the saturation component (in the HSB color space) of a color.		
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.ColorComponentType.Brightness">
            <summary>
            Specifies the brightness component of a color.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.ColorComponentType.Luminance">
            <summary>
            Specifies the luminance component of a color.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.HSLColor">
            <summary>
            Represents a color specified in the HSL color model.
            </summary>
            <remarks>Represents a color specified in the HSL color model.
            Each component is a float in the range [0..1].
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.ToColor">
            <summary>
            Converts this <see cref="T:ILOG.Diagrammer.HSLColor"/> to a <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <returns>A <see cref="T:System.Drawing.Color"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.op_Implicit(ILOG.Diagrammer.HSLColor)~System.Drawing.Color">
            <summary>
            Converts the specified <see cref="T:ILOG.Diagrammer.HSLColor"/> to a <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color">The <see cref="T:ILOG.Diagrammer.HSLColor"/> to convert.</param>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.FromAhsl(System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.HSLColor"/> structure from the AHSL components (Alpha, Hue,
            Saturation, Luminance)
            </summary>
            <param name="h">The Hue component</param>
            <param name="s">The Saturation component</param>
            <param name="l">The Luminance component</param>
            <returns>A new <see cref="T:ILOG.Diagrammer.HSLColor"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.FromAhsl(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.HSLColor"/> structure from the AHSL components (Alpha, Hue,
            Saturation, Luminance)
            </summary>
            <param name="a">The Alpha component</param>
            <param name="h">The Hue component</param>
            <param name="s">The Saturation component</param>
            <param name="l">The Luminance component</param>
            <returns>A new <see cref="T:ILOG.Diagrammer.HSLColor"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.FromAhsl(System.Single[])">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.HSLColor"/> structure from the AHSL components (Alpha, Hue,
            Saturation, Luminance)
            </summary>
            <param name="ahsl">The AHSL components</param>
            <returns>A new <see cref="T:ILOG.Diagrammer.HSLColor"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.FromColor(System.Drawing.Color)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.HSLColor"/> structure from a <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> structure</param>
            <returns>A new <see cref="T:ILOG.Diagrammer.HSLColor"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.HSLColor"/> structure from RGB components.
            </summary>
            <param name="r">The Red component</param>
            <param name="g">The Green component</param>
            <param name="b">The Blue component</param>
            <returns>A new <see cref="T:ILOG.Diagrammer.HSLColor"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.HSLColor"/> structure from ARGB components.
            </summary>
            <param name="a">The Alpha component</param>
            <param name="r">The Red component</param>
            <param name="g">The Green component</param>
            <param name="b">The Blue component</param>
            <returns>A new <see cref="T:ILOG.Diagrammer.HSLColor"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.ToColor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:System.Drawing.Color"/> structure from AHSL components.
            </summary>
            <param name="h">The Hue component</param>
            <param name="s">The Saturation component</param>
            <param name="l">The Luminance component</param>
            <returns>A new <see cref="T:System.Drawing.Color"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.ToColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:System.Drawing.Color"/> structure from AHSL components.
            </summary>
            <param name="a">The Alpha component</param>
            <param name="h">The Hue component</param>
            <param name="s">The Saturation component</param>
            <param name="l">The Luminance component</param>
            <returns>A new <see cref="T:System.Drawing.Color"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.ToColor(System.Single[])">
            <summary>
            Creates a <see cref="T:System.Drawing.Color"/> structure from AHSL components.
            </summary>
            <param name="ahsl">The AHSL components</param>
            <returns>A new <see cref="T:System.Drawing.Color"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.ColortoHSL(System.Drawing.Color,System.Single[])">
            <summary>
            Returns AHSL components from a <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> structure</param>
            <param name="hslvals">An array that will be used to store the AHSL components.
            if <see langword="null"/> is passed, then the array will be created.</param>
            <returns>An array containing the AHSL components</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.RGBtoHSL(System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>
            Returns AHSL components from RGB components.
            </summary>
            <param name="r">The Red component</param>
            <param name="g">The Green component</param>
            <param name="b">The Blue component</param>
            <param name="hslvals">An array that will be used to store the AHSL components.
            if <see langword="null"/> is passed, then the array will be created.</param>
            <returns>An array containing the AHSL components</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.RGBtoHSL(System.Int32,System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>
            Returns AHSL components from ARGB components.
            </summary>
            <param name="a">The Alpha component</param>
            <param name="r">The Red component</param>
            <param name="g">The Green component</param>
            <param name="b">The Blue component</param>
            <param name="hslvals">An array that will be used to store the AHSL components.
            if <see langword="null"/> is passed, then the array will be created.</param>
            <returns>An array containing the AHSL components</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.HSLtoRGB(System.Single,System.Single,System.Single)">
            <summary>
            Returns ARGB components from a HSL components.
            </summary>
            <param name="h">The Hue component</param>
            <param name="s">The Saturation component</param>
            <param name="l">The Luminance component</param>
            <returns>An ARGB color</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.HSLtoRGB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns ARGB components from a HSL components.
            </summary>
            <param name="a">The Alpha component</param>
            <param name="h">The Hue component</param>
            <param name="s">The Saturation component</param>
            <param name="l">The Luminance component</param>
            <returns>An ARGB color</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.HSLtoRGB(System.Single[])">
            <summary>
            Returns ARGB components from a HSL components.
            </summary>
            <param name="ahsl">An array containing AHSL components</param>
            <returns>An ARGB color</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.Equals(ILOG.Diagrammer.HSLColor)">
            <summary>
            Returns <see langword="true"/> if the specified color equals this color.
            </summary>
            <param name="color">The color</param>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if the specified object equals this color.
            </summary>
            <param name="o">The object</param>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.ToString">
            <summary>
            Converts the color to a human readable string.
            </summary>
            <returns>The string conversion of the color</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSLColor.Parse(System.String)">
            <summary>
            Creates an <see cref="T:ILOG.Diagrammer.HSLColor"/> structure from a string.
            </summary>
            <param name="value">The string</param>
            <returns>A new <see cref="T:ILOG.Diagrammer.HSLColor"/> structure</returns>
        </member>
        <member name="P:ILOG.Diagrammer.HSLColor.A">
            <summary>
            Gets the alpha component value of this <see cref="T:ILOG.Diagrammer.HSLColor"/> structure.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.HSLColor.H">
            <summary>
            Gets the hue component value of this <see cref="T:ILOG.Diagrammer.HSLColor"/> structure.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.HSLColor.S">
            <summary>
            Gets the saturation component value of this <see cref="T:ILOG.Diagrammer.HSLColor"/> structure.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.HSLColor.L">
            <summary>
            Gets the luminance component value of this <see cref="T:ILOG.Diagrammer.HSLColor"/> structure.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.HSBColor">
            <summary>
            Represents a color specified in the HSB color space.
            </summary>
            <remarks>Represents a color specified in the HSB color space.
            Each component is a float in the range [0..1].
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.ToColor">
            <summary>
            Converts this <see cref="T:ILOG.Diagrammer.HSBColor"/> to a <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <returns>A <see cref="T:System.Drawing.Color"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.op_Implicit(ILOG.Diagrammer.HSBColor)~System.Drawing.Color">
            <summary>
            Converts the specified <see cref="T:ILOG.Diagrammer.HSBColor"/> to a <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color">The <see cref="T:ILOG.Diagrammer.HSBColor"/> to convert.</param>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.FromAhsb(System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.HSBColor"/> structure from the AHSB components (Alpha, Hue,
            Saturation, Brightness)
            </summary>
            <param name="h">The Hue component</param>
            <param name="s">The Saturation component</param>
            <param name="b">The Brightness component</param>
            <returns>A new <see cref="T:ILOG.Diagrammer.HSBColor"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.FromAhsb(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.HSBColor"/> structure from the AHSB components (Alpha, Hue,
            Saturation, Brightness)
            </summary>
            <param name="a">The Alpha component</param>
            <param name="h">The Hue component</param>
            <param name="s">The Saturation component</param>
            <param name="b">The Brightness component</param>
            <returns>A new <see cref="T:ILOG.Diagrammer.HSBColor"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.FromAhsb(System.Single[])">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.HSBColor"/> structure from the AHSB components (Alpha, Hue,
            Saturation, Brightness)
            </summary>
            <param name="ahsb">The AHSB components</param>
            <returns>A new <see cref="T:ILOG.Diagrammer.HSBColor"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.FromColor(System.Drawing.Color)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.HSBColor"/> structure from a <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> structure</param>
            <returns>A new <see cref="T:ILOG.Diagrammer.HSBColor"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.HSBColor"/> structure from RGB components.
            </summary>		 
            <param name="r">The Red component</param>
            <param name="g">The Green component</param>
            <param name="b">The Blue component</param>
            <returns>A new <see cref="T:ILOG.Diagrammer.HSBColor"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.HSBColor"/> structure from ARGB components.
            </summary>
            <param name="a">The Alpha component</param>
            <param name="r">The Red component</param>
            <param name="g">The Green component</param>
            <param name="b">The Blue component</param>
            <returns>A new <see cref="T:ILOG.Diagrammer.HSBColor"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.ToColor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:System.Drawing.Color"/> structure from AHSB components.
            </summary>
            <param name="h">The Hue component</param>
            <param name="s">The Saturation component</param>
            <param name="b">The Brightness component</param>
            <returns>A new <see cref="T:System.Drawing.Color"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.ToColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:System.Drawing.Color"/> structure from AHSB components.
            </summary>
            <param name="a">The Alpha component</param>
            <param name="h">The Hue component</param>
            <param name="s">The Saturation component</param>
            <param name="b">The Brightness component</param>
            <returns>A new <see cref="T:System.Drawing.Color"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.ToColor(System.Single[])">
            <summary>
            Creates a <see cref="T:System.Drawing.Color"/> structure from AHSB components.
            </summary>
            <param name="ahsb">The AHSB components</param>
            <returns>A new <see cref="T:System.Drawing.Color"/> structure</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.ColortoHSB(System.Drawing.Color,System.Single[])">
            <summary>
            Returns AHSB components from a <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> structure</param>
            <param name="hsbvals">An array that will be used to store the AHSB components.
            if <see langword="null"/> is passed, then the array will be created.</param>
            <returns>An array containing the AHSB components</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.RGBtoHSB(System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>
            Returns AHSB components from RGB components.
            </summary>
            <param name="r">The Red component</param>
            <param name="g">The Green component</param>
            <param name="b">The Blue component</param>
            <param name="hsbvals">An array that will be used to store the AHSB components.
            if <see langword="null"/> is passed, then the array will be created.</param>
            <returns>An array containing the AHSB components</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.RGBtoHSB(System.Int32,System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>
            Returns AHSB components from ARGB components.
            </summary>
            <param name="a">The Alpha component</param>
            <param name="r">The Red component</param>
            <param name="g">The Green component</param>
            <param name="b">The Blue component</param>
            <param name="hsbvals">An array that will be used to store the AHSB components.
            if <see langword="null"/> is passed, then the array will be created.</param>
            <returns>An array containing the AHSB components</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.HSBtoRGB(System.Single,System.Single,System.Single)">
            <summary>
            Returns ARGB components from a HSB components.
            </summary>
            <param name="h">The Hue component</param>
            <param name="s">The Saturation component</param>
            <param name="b">The Brightness component</param>
            <returns>An ARGB color</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.HSBtoRGB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns ARGB components from a HSB components.
            </summary>
            <param name="a">The Alpha component</param>
            <param name="h">The Hue component</param>
            <param name="s">The Saturation component</param>
            <param name="b">The Brightness component</param>
            <returns>An ARGB color</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.HSBtoRGB(System.Single[])">
            <summary>
            Returns ARGB components from a HSB components.
            </summary>
            <param name="ahsb">An array containing AHSB components</param>
            <returns>An ARGB color</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.Equals(ILOG.Diagrammer.HSBColor)">
            <summary>
            Returns <see langword="true"/> if the specified color equals this color.
            </summary>
            <param name="color">The color</param>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if the specified object equals this color.
            </summary>
            <param name="o">The object</param>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.ToString">
            <summary>
            Converts the color to a human readable string.
            </summary>
            <returns>The string conversion of the color</returns>
        </member>
        <member name="M:ILOG.Diagrammer.HSBColor.Parse(System.String)">
            <summary>
            Creates an <see cref="T:ILOG.Diagrammer.HSBColor"/> structure from a string.
            </summary>
            <param name="value">The string</param>
            <returns>A new <see cref="T:ILOG.Diagrammer.HSBColor"/> structure</returns>
        </member>
        <member name="P:ILOG.Diagrammer.HSBColor.A">
            <summary>
            Gets the alpha component value of this <see cref="T:ILOG.Diagrammer.HSBColor"/> structure.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.HSBColor.H">
            <summary>
            Gets the hue component value of this <see cref="T:ILOG.Diagrammer.HSBColor"/> structure.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.HSBColor.S">
            <summary>
            Gets the saturation component value of this <see cref="T:ILOG.Diagrammer.HSBColor"/> structure.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.HSBColor.B">
            <summary>
            Gets the brightness component value of this <see cref="T:ILOG.Diagrammer.HSBColor"/> structure.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GenericColor">
            <summary>
            A color that uses several color spaces (RGB, HSL, HSB)
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GenericColor.FromColor(System.Drawing.Color)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.GenericColor"/> structure from a <see cref="T:System.Drawing.Color"/> structure.
            </summary>
            <param name="rgb">The <see cref="T:System.Drawing.Color"/> structure</param>
        </member>
        <member name="M:ILOG.Diagrammer.GenericColor.FromHSBColor(ILOG.Diagrammer.HSBColor)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.GenericColor"/> structure from a <see cref="T:ILOG.Diagrammer.HSBColor"/> structure.
            </summary>
            <param name="hsb">The <see cref="T:ILOG.Diagrammer.HSBColor"/> structure</param>
        </member>
        <member name="M:ILOG.Diagrammer.GenericColor.FromHSLColor(ILOG.Diagrammer.HSLColor)">
            <summary>
            Creates a <see cref="T:ILOG.Diagrammer.GenericColor"/> structure from a <see cref="T:ILOG.Diagrammer.HSLColor"/> structure.
            </summary>
            <param name="hsl">The <see cref="T:ILOG.Diagrammer.HSLColor"/> structure</param>
        </member>
        <member name="M:ILOG.Diagrammer.GenericColor.op_Implicit(ILOG.Diagrammer.GenericColor)~System.Drawing.Color">
            <summary>
            Converts the specified <see cref="T:ILOG.Diagrammer.GenericColor"/> to a <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color">The <see cref="T:ILOG.Diagrammer.GenericColor"/> to convert.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GenericColor.op_Implicit(ILOG.Diagrammer.GenericColor)~ILOG.Diagrammer.HSLColor">
            <summary>
            Converts the specified <see cref="T:ILOG.Diagrammer.GenericColor"/> to a <see cref="T:ILOG.Diagrammer.HSLColor"/>.
            </summary>
            <param name="color">The <see cref="T:ILOG.Diagrammer.GenericColor"/> to convert.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GenericColor.op_Implicit(ILOG.Diagrammer.GenericColor)~ILOG.Diagrammer.HSBColor">
            <summary>
            Converts the specified <see cref="T:ILOG.Diagrammer.GenericColor"/> to a <see cref="T:ILOG.Diagrammer.HSBColor"/>.
            </summary>
            <param name="color">The <see cref="T:ILOG.Diagrammer.GenericColor"/> to convert.</param>
        </member>
        <member name="M:ILOG.Diagrammer.GenericColor.ToHSLColor">
            <summary>
            Converts this color to a <see cref="T:ILOG.Diagrammer.HSLColor"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GenericColor.ToHSBColor">
            <summary>
            Converts this color to a <see cref="T:ILOG.Diagrammer.HSBColor"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GenericColor.ToColor">
            <summary>
            Converts this color to a <see cref="T:System.Drawing.Color"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GenericColor.GetColorComponent(ILOG.Diagrammer.ColorComponentType)">
            <summary>
            Gets the specified component of this <see cref="T:ILOG.Diagrammer.GenericColor"/>.
            </summary>
            <param name="type">One of the <see cref="T:ILOG.Diagrammer.ColorComponentType"/> value indicating the component to evaluate.</param>
            <returns>The value of the specified component of this color.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GenericColor.SetColorComponent(ILOG.Diagrammer.ColorComponentType,System.Single)">
            <summary>
            Sets the specified component of this color to the given value.
            </summary>
            <param name="type">One of the <see cref="T:ILOG.Diagrammer.ColorComponentType"/> value indicating the component to set.</param>
            <param name="v">The new value of this component</param>
            <returns>A new <see cref="T:ILOG.Diagrammer.GenericColor"/> instance.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GenericColor.Equals(ILOG.Diagrammer.GenericColor)">
            <summary>
            Returns <see langword="true"/> if the specified color equals this color.
            </summary>
            <param name="color">The color</param>
        </member>
        <member name="M:ILOG.Diagrammer.GenericColor.Equals(System.Object)">
            <summary>
            Returns <see langword="true"/> if the specified object equals this color.
            </summary>
            <param name="o">The object</param>
        </member>
        <member name="M:ILOG.Diagrammer.GenericColor.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GenericColor.ToString">
            <summary>
            This member overrides <see cref="M:System.Object.ToString">Object.ToString</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GenericColor.Parse(System.String)">
            <summary>
            Converts the specified color string representation into a GenericColor instance.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GenericColor.ColorSpaceType">
            <summary>
            Gets the color space on which this color is based on.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.ColorSelectionModel">
            <summary>
            A data model that contains a <see cref="T:ILOG.Diagrammer.GenericColor"/> structure, and that notity
            registered listeners each time the color is changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ColorSelectionModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.ColorSelectionModel"/> class.
            The default color is Black.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ColorSelectionModel.#ctor(ILOG.Diagrammer.GenericColor)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.ColorSelectionModel"/> class with 
            the specified color.
            </summary>
            <param name="color">The <see cref="T:ILOG.Diagrammer.GenericColor"/> structure</param>
        </member>
        <member name="M:ILOG.Diagrammer.ColorSelectionModel.OnColorChanged">
            <summary>
            Is called each time the color of the data model is changed.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.ColorSelectionModel.ColorChanged">
            <summary>
            Event fired each time the data model changes.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.ColorSelectionModel.Color">
            <summary>
            Gets or sets the <see cref="T:ILOG.Diagrammer.GenericColor"/> structure of the model.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs">
            <summary>
            Provides data for the layout step event on layout instances.
            </summary>
            <remarks>
            If you install a <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventHandler"/>
            on a layout  instance, a <strong>LayoutStepPerformed</strong> event
            is delivered to the handlers each time the method 
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)"/>
            is called by the layout algorithms.  This allows you to obtain the
            layout report (using
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs.LayoutReport"/>) more
            than once during the layout and to be informed of the behavior of the
            layout algorithm before its completion. You can, for example,
            implement a progress bar and update it each time you receive the
            layout event. 
            <p>
            Note that the layout event is delivered only if the method 
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)"/>
            is called. This depends on the implementation of the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Layout"/>. 
            </p>
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventHandler"/>
            <seealso cref="E:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutStepPerformed"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs.#ctor(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Creates the event.
            </summary>
            <param name='layout'> The layout instance source of the event
            </param>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs.LayoutStarted">
            <summary>
            Gets whether the layout just has started.
            </summary>
            <remarks>
            Returns <see langword="true"/> if this event is the first event at
            the beginning of the layout process of a graph, and
            <see langword="false"/> otherwise. 
            <p>
            If this property returns <see langword="true"/>, the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs.LayoutFinished"/>
            called on the same event instance returns <see langword="false"/>. 
            </p>
            <p>
            You can use this property to detect the first event sent by the
            layout process of a graph, for instance, in order to print a message
            or to give feedback to the end user. Note that the property returns
            <see langword="false"/> for the events that follow the first event. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs.LayoutFinished"/>
            <value>Whether the layout just has started.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs.LayoutFinished">
            <summary>
            Gets whether the layout just has finished.
            </summary>
            <remarks>
            Returns <see langword="true"/> if this event is sent at the end of
            the  layout process of a graph, and <see langword="false"/>
            otherwise. You can use this property to detect the last event sent
            by the layout process of a graph, and to get the corresponding
            layout report code from it using
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>.  
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs.LayoutStarted"/>
            <value>Whether the layout just has finished.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs.LayoutReport">
            <summary>
             Gets the graph layout report contained in the event.
            </summary>
            <remarks>
            It simply returns the layout report by calling the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetLayoutReport"/>
            on the layout instance that is the source of the event.  
            <p>
            Note that if a subclass of <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs.GraphLayout"/> overrides the
            method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CreateLayoutReport"/>,
            this  method can return an instance of a subclass of
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayoutReport"/>,  depending on the class of layout
            report created.  
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.CreateLayoutReport"/>
            <value>The graph layout report contained in the event.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs.GraphLayout">
            <summary>
            Gets the graph layout that is the source of the event.
            </summary>
            <value>The graph layout that is the source of the event.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphLayoutPropertyChangedEventArgs">
            <summary>
            Provides data for the property event on layout instances.
            </summary>
            <remarks>
            If you install a <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayoutPropertyChangedEventHandler"/>
            on a layout  instance, a <strong>PropertyChanged</strong> event is
            delivered to the handler each time the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/>
            is changed; that is, each time a layout parameter changes and each
            time the layout is successfully performed. This allows you to react
            when a layout parameter changes; for instance, to update a display
            that shows the current values of the layout parameters or to update a
            flag indicating whether the set of layout parameters must be saved to
            file. 
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.GraphLayoutPropertyChangedEventHandler"/>
            <seealso cref="E:ILOG.Diagrammer.GraphLayout.GraphLayout.PropertyChanged"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutPropertyChangedEventArgs.#ctor(ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.String,System.Boolean)">
            <summary>
            Creates the event.
            </summary>
            <param name='layout'> The layout instance source of the event.
            </param>
            <param name='nodeOrLink'> The node or link that is affected, or
            <see langword='null'/> if all nodes and links are affected.
            </param>
            <param name='parameterName'> The name of the layout parameter that
            has changed, or <see langword='null'/>, when the layout was
            successfully performed.
            </param>
            <param name='parametersUpToDate'> <see langword='true'/> if the
            layout parameters are set up-to-date; <see langword='false'/> if a
            layout parameter changed.
            </param>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayoutPropertyChangedEventArgs.GraphLayout">
            <summary>
             Gets the graph layout instance of the event.
            </summary>
            <value>The graph layout instance of the event.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayoutPropertyChangedEventArgs.ParametersUpToDate">
            <summary>
             Gets whether the parameters are up to date.
            </summary>
            <remarks>
            Returns <see langword="true"/> if
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/>
            was called with a <see langword="true"/> argument. This usually
            happens only after the layout was successfully performed.<br/>
            Returns <see langword="false"/> if
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/>
            was called with a <see langword="false"/> argument. This usually
            happens when a layout parameter changed. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/>
            <value>Whether the parameters are up to date.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayoutPropertyChangedEventArgs.ParameterName">
            <summary>
            Gets the name of the parameter that has been changed.
            </summary>
            <remarks>
            Returns <see langword='null'/> if the layout became up to date but
            no specific parameter has changed. 
            </remarks>
            <value>The name of the parameter that has been changed.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphLayoutPropertyChangedEventArgs.NodeOrLink">
            <summary>
            Gets the node or link that is affected by the layout parameter.
            </summary>
            <remarks>
            For layout parameters that affect a single node or link, this node
            or link is returned. Returns <see langword='null'/> if the layout
            parameter is global or affects many or all nodes and links. 
            </remarks>
            <value>The node or link that is affected by the layout parameter.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Anchor_BoundsAnchorFormat">
            <summary>
              Looks up a localized string similar to {0} anchor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Anchor_DelegateAnchorFormat">
            <summary>
              Looks up a localized string similar to Delegate Anchor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Anchor_PolylineAnchorFormat">
            <summary>
              Looks up a localized string similar to Polyline anchor at position {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Anchor_PolylineAnchorPointFormat">
            <summary>
              Looks up a localized string similar to Polyline anchor on point {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Anchor_PolyPointsAnchorFormat">
            <summary>
              Looks up a localized string similar to Polypoints anchor on edge {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Anchor_ShapeAnchorFormat">
            <summary>
              Looks up a localized string similar to Floating anchor on shape.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ArcSelectionGraphic_MoveAngleHandleDescription">
            <summary>
              Looks up a localized string similar to Move angle on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ArcSelectionGraphic_MoveAngleHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to change the angle of the arc. Press Alt to prevent angle snapping..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ArcSelectionGraphic_MoveAngleHandleToolTip">
            <summary>
              Looks up a localized string similar to Move angle.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Basic2DShapeSelectionGraphic_ControlHandleDescription">
            <summary>
              Looks up a localized string similar to Change control point on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Basic2DShapeSelectionGraphic_ControlHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to move the control point of this shape. Press Alt to prevent grid snapping..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Basic2DShapeSelectionGraphic_ControlHandleToolTip">
            <summary>
              Looks up a localized string similar to Control point.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.BezierSelectionGraphic_MoveControlPointHandleDescription">
            <summary>
              Looks up a localized string similar to Move control point on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.BezierSelectionGraphic_MoveControlPointHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to change the bezier control point. Press Alt to prevent grid snapping..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.BezierSelectionGraphic_MoveControlPointHandleToolTip">
            <summary>
              Looks up a localized string similar to Move control point.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CircleSelectionGraphic_ChangeRadiusHandleDescription">
            <summary>
              Looks up a localized string similar to Change radius on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CircleSelectionGraphic_ChangeRadiusHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to change the circle&apos;s radius. Press Alt to prevent grid snapping..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CircleSelectionGraphic_ChangeRadiusHandleToolTip">
            <summary>
              Looks up a localized string similar to Change radius.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_EastNeighbor">
            <summary>
              Looks up a localized string similar to East neighbor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_ExtremityNode">
            <summary>
              Looks up a localized string similar to Extremity node.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_FirstNode">
            <summary>
              Looks up a localized string similar to First node.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_Help_Initial">
            <summary>
              Looks up a localized string similar to Select a constraint in the list, or click the &quot;+&quot; button to add a new constraint..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_Help_NoLayout">
            <summary>
              Looks up a localized string similar to The constraint editor can be used only when the GraphLayout property is set to a Hierarchical or a Tree layout..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_Help_SelectedOneSubject">
            <summary>
              Looks up a localized string similar to Select the objects in the view to specify which nodes the constraint applies to..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_Help_SelectedTwoSubjects">
            <summary>
              Looks up a localized string similar to Select the node or node group to edit using the combo box. Then select the objects in the view to specify which nodes the constraint applies to..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_Help_SelectionChanged">
            <summary>
              Looks up a localized string similar to Click the &quot;Update from Current Selection&quot; button to apply the constraint to the currently selected objects..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_HierarchicalExtremityConstraintDescription">
            <summary>
              Looks up a localized string similar to Keeps a node at an extremity of the graph..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_HierarchicalExtremityConstraintName">
            <summary>
              Looks up a localized string similar to Extremity.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_HierarchicalGroupSpreadConstraintDescription">
            <summary>
              Looks up a localized string similar to Keeps a group of nodes on successive levels (without specifying the levels explicitly)..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_HierarchicalGroupSpreadConstraintName">
            <summary>
              Looks up a localized string similar to Group Spread.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_HierarchicalLevelRangeConstraintDescription">
            <summary>
              Looks up a localized string similar to Keeps a group of nodes on successive, explicitly specified levels..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_HierarchicalLevelRangeConstraintName">
            <summary>
              Looks up a localized string similar to Level Range.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_HierarchicalRelativeLevelConstraintDescription">
            <summary>
              Looks up a localized string similar to Keeps a node or a group of nodes at a higher level than another node or group of nodes..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_HierarchicalRelativeLevelConstraintName">
            <summary>
              Looks up a localized string similar to Relative Level.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_HierarchicalRelativePositionConstraintDescription">
            <summary>
              Looks up a localized string similar to Keeps a node or a group of nodes at a higher position than another node or group of nodes..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_HierarchicalRelativePositionConstraintName">
            <summary>
              Looks up a localized string similar to Relative Position.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_HierarchicalSameLevelConstraintDescription">
            <summary>
              Looks up a localized string similar to Keeps a group of nodes at the same level..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_HierarchicalSameLevelConstraintName">
            <summary>
              Looks up a localized string similar to Same Level.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_HierarchicalSideBySideConstraintDescription">
            <summary>
              Looks up a localized string similar to Keeps two nodes side-by-side..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_HierarchicalSideBySideConstraintName">
            <summary>
              Looks up a localized string similar to Side-by-side.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_HierarchicalSwimLaneConstraintDescription">
            <summary>
              Looks up a localized string similar to Keeps a group of nodes in the same &quot;swim lane&quot;. Swim lanes are horizontal or vertical stripes that divide the graph, like the swim lanes of a pool..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_HierarchicalSwimLaneConstraintName">
            <summary>
              Looks up a localized string similar to Swim Lane.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_LevelRangeGroup">
            <summary>
              Looks up a localized string similar to Level range group.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_ListFormat">
            <summary>
              Looks up a localized string similar to {0} {1}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_LowerGroup">
            <summary>
              Looks up a localized string similar to Lower group.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_NodeGroupsNotSupported">
            <summary>
              Looks up a localized string similar to This type of constraint does not support node groups - select only one node..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_NotANodeFormat">
            <summary>
              Looks up a localized string similar to The object {0} is not in a node of the graph. Constraints can only be applied to nodes (not links)..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_SecondNode">
            <summary>
              Looks up a localized string similar to Second node.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_SideBySideGroup">
            <summary>
              Looks up a localized string similar to Side-by-side group.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_SpreadGroup">
            <summary>
              Looks up a localized string similar to Spread group.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_SwimLaneGroup">
            <summary>
              Looks up a localized string similar to Swim lane group.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_TreeConstraintDescription">
            <summary>
              Looks up a localized string similar to Keeps two nodes side-by-side in a tree..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_TreeConstraintName">
            <summary>
              Looks up a localized string similar to East-West Neighboring.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_UpperGroup">
            <summary>
              Looks up a localized string similar to Upper group.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ConstraintEditor_WestNeighbor">
            <summary>
              Looks up a localized string similar to West neighbor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Convert_Category">
            <summary>
              Looks up a localized string similar to Convert.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateArcButton_Tooltip">
            <summary>
              Looks up a localized string similar to Create an Arc.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateCloseSplineButton_Tooltip">
            <summary>
              Looks up a localized string similar to Create a Closed Curve.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateEllipseButton_Tooltip">
            <summary>
              Looks up a localized string similar to Create an Ellipse.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateFilledArcButton_Tooltip">
            <summary>
              Looks up a localized string similar to Create a Filled Arc.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateFilledCloseSplineButton_Tooltip">
            <summary>
              Looks up a localized string similar to Create a Filled Closed Curve.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateFilledEllipseButton_Tooltip">
            <summary>
              Looks up a localized string similar to Create a Filled Ellipse.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateFilledPolygonButton_Tooltip">
            <summary>
              Looks up a localized string similar to Create a Filled Polygon.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateFillRectangleButton_Tooltip">
            <summary>
              Looks up a localized string similar to Create a Filled Rectangle.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateGraphicObjectInteractor_Status_InOp">
            <summary>
              Looks up a localized string similar to Drag to define the new object size. Shift-Drag to maintain aspect ratio. Alt-Drag to prevent grid snapping. Esc to cancel..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateGraphicObjectInteractor_Status_NoOp">
            <summary>
              Looks up a localized string similar to Click and drag to create an object. Shift-Drag to maintain aspect ratio. Alt-Drag to prevent grid snapping..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateLinkButton_Tooltip">
            <summary>
              Looks up a localized string similar to Create a Link.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateLinkInteractor_CreateLinkTransactionDescription">
            <summary>
              Looks up a localized string similar to Create Link.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateLinkInteractor_MovableAnchorTooltipFormat">
            <summary>
              Looks up a localized string similar to {0} (Press Shift to move, Control to duplicate).
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateLinkInteractor_ReconnectLinkTransactionDescription">
            <summary>
              Looks up a localized string similar to Reconnect Link.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateLinkInteractor_Status_MovingAnchor">
            <summary>
              Looks up a localized string similar to Drag the anchor to its new location..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateLinkInteractor_Status_OverAnchor">
            <summary>
              Looks up a localized string similar to Click or release to connect to this anchor..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateLinkInteractor_Status_OverEmptySpace">
            <summary>
              Looks up a localized string similar to Move the mouse over a node to connect to an anchor, or click over empty space to define the start or end point..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateLinkInteractor_Status_OverMovableAnchor">
            <summary>
              Looks up a localized string similar to Click or release to connect to this anchor. Shift-drag to move the anchor. Control-drag to duplicate and move the anchor..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateLinkInteractor_Status_OverNode">
            <summary>
              Looks up a localized string similar to Move the mouse over an anchor..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateOrthogonalLinkButton_Tooltip">
            <summary>
              Looks up a localized string similar to Create an Orthogonal Link.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreatePieButton_Tooltip">
            <summary>
              Looks up a localized string similar to Create a Pie.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreatePolygonButton_Tooltip">
            <summary>
              Looks up a localized string similar to Create a Polygon.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreatePolylineButton_Tooltip">
            <summary>
              Looks up a localized string similar to Create a Polyline.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreatePolyPointsInteractor_Status_EndOnRightClick">
            <summary>
              Looks up a localized string similar to Right-click to end..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreatePolyPointsInteractor_Status_InOp_Freehand">
            <summary>
              Looks up a localized string similar to Drag to draw the polyline. Esc to cancel..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreatePolyPointsInteractor_Status_InOp_NoFreehand">
            <summary>
              Looks up a localized string similar to Click to add a new point. Double-Click to end. Esc to cancel. .
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreatePolyPointsInteractor_Status_NoOp_Freehand">
            <summary>
              Looks up a localized string similar to Click and drag to draw the polyline..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreatePolyPointsInteractor_Status_NoOp_NoFreehand">
            <summary>
              Looks up a localized string similar to Click to add a new point..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreatePolyPointsShape_Tooltip">
            <summary>
              Looks up a localized string similar to Create Polypoints Shapes.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateRectangleButton_Tooltip">
            <summary>
              Looks up a localized string similar to Create a Rectangle.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateRectangularShape_Tooltip">
            <summary>
              Looks up a localized string similar to Create Rectangular Shapes.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CreateSplineButton_Tooltip">
            <summary>
              Looks up a localized string similar to Create a Curve.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CustomLineCapConverter_FilledFormat">
            <summary>
              Looks up a localized string similar to {0}x{1} arrow.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CustomLineCapConverter_FilledFormat1">
            <summary>
              Looks up a localized string similar to {0}x{1} arrow.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CustomLineCapConverter_OpenFormat">
            <summary>
              Looks up a localized string similar to {0}x{1} open arrow.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.CustomLineCapConverter_OpenFormat1">
            <summary>
              Looks up a localized string similar to {0}x{1} open arrow.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.DefaultSelectionGraphic_MoveRotationCenterHandleDescription">
            <summary>
              Looks up a localized string similar to Move rotation center on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.DefaultSelectionGraphic_MoveRotationCenterHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to move the rotation center. Press Alt to prevent grid snapping..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.DefaultSelectionGraphic_MoveRotationCenterHandleToolTip">
            <summary>
              Looks up a localized string similar to Move rotation center.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.DefaultSelectionGraphic_RotateHandleDescription">
            <summary>
              Looks up a localized string similar to Rotate {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.DefaultSelectionGraphic_RotateHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to rotate the object. Press Alt to prevent grid snapping..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.DefaultSelectionGraphic_RotateHandleToolTip">
            <summary>
              Looks up a localized string similar to Rotate.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.EditAnchorsInteractor_AddAnchorTooltip">
            <summary>
              Looks up a localized string similar to Control-click to create a new anchor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.EditAnchorsInteractor_EditAnchorsTransactionDescription">
            <summary>
              Looks up a localized string similar to Edit Anchors.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.EditAnchorsInteractor_MovableAnchorTooltipFormat">
            <summary>
              Looks up a localized string similar to {0} (Click and drag to move, Control-drag to duplicate, Control-click to remove).
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.EditAnchorsInteractor_MovableDefaultAnchorTooltipFormat">
            <summary>
              Looks up a localized string similar to {0} (Click and drag to move, Control-drag to duplicate).
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.EditAnchorsInteractor_Status_MovingAnchor">
            <summary>
              Looks up a localized string similar to Drag the anchor to its new location..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.EditAnchorsInteractor_Status_OverEmptySpace">
            <summary>
              Looks up a localized string similar to Move the mouse over a node to edit its anchors..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.EditAnchorsInteractor_Status_OverMovableAnchor">
            <summary>
              Looks up a localized string similar to Click and drag to move the anchor. Control-drag to duplicate and move the anchor. Control-click to remove anchor..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.EditAnchorsInteractor_Status_OverMovableDefaultAnchor">
            <summary>
              Looks up a localized string similar to Click and drag to move the anchor. Control-drag to duplicate and move the anchor..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.EditAnchorsInteractor_Status_OverNode">
            <summary>
              Looks up a localized string similar to Move the mouse over an anchor, or Control-click to create a new anchor..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.EditGradientInteractor_Ready">
            <summary>
              Looks up a localized string similar to Click on graphic objects to edit their gradient. Double-click on graphic objects to show the brush editor dialog..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ExpertPropertiesTab_TabName">
            <summary>
              Looks up a localized string similar to Expert Properties.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FillDialog_gradientTypeCircle">
            <summary>
              Looks up a localized string similar to Circle.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FillDialog_gradientTypeCurrentShape">
            <summary>
              Looks up a localized string similar to Current Shape.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FillDialog_gradientTypeEllipse">
            <summary>
              Looks up a localized string similar to Ellipse.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FillDialog_gradientTypeLinear">
            <summary>
              Looks up a localized string similar to Linear.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FillDialog_gradientTypeRectangle">
            <summary>
              Looks up a localized string similar to Rectangle.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FillDialogAdvancedPage">
            <summary>
              Looks up a localized string similar to Advanced.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FillDialogGradientPage">
            <summary>
              Looks up a localized string similar to Gradient.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FillDialogPatternPage">
            <summary>
              Looks up a localized string similar to Pattern.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FillDialogSolidPage">
            <summary>
              Looks up a localized string similar to Solid.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FillDialogTexturePage">
            <summary>
              Looks up a localized string similar to Texture.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_AllEdges3x3">
            <summary>
              Looks up a localized string similar to All Edges 3x3.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_AllEdges5x5">
            <summary>
              Looks up a localized string similar to All Edges 5x5.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Blur1">
            <summary>
              Looks up a localized string similar to Blur 1.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Blur10">
            <summary>
              Looks up a localized string similar to Blur 10.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Blur2">
            <summary>
              Looks up a localized string similar to Blur 2.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Blur3">
            <summary>
              Looks up a localized string similar to Blur 3.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Blur4">
            <summary>
              Looks up a localized string similar to Blur 4.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Blurs">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
            &lt;filters&gt;
              
              &lt;desc&gt;Applies a gaussian blur effect with radius 1&lt;/desc&gt;
              &lt;filter id=&quot;FilterDialog_Blur1&quot; x=&quot;-5%&quot; y=&quot;-5%&quot; width=&quot;1.1&quot; height=&quot;1.1&quot;&gt;
                &lt;feGaussianBlur in=&quot;SourceGraphic&quot; stdDeviation=&quot;1&quot;/&gt;
              &lt;/filter&gt;
              
              &lt;desc&gt;Applies a gaussian blur effect with radius 2&lt;/desc&gt;
              &lt;filter id=&quot;FilterDialog_Blur2&quot; x=&quot;-15%&quot; y=&quot;-15%&quot; width=&quot;130%&quot; height=&quot;130%&quot;&gt;
                &lt;feGaussianBlur in=&quot;SourceGraphic&quot; stdDeviation=&quot;2&quot;/&gt;
              &lt;/filter&gt;
              
              &lt;desc&gt;Applies a gaussian blur effect wit [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_BlursCategory">
            <summary>
              Looks up a localized string similar to Blurs.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_BoxBlur3">
            <summary>
              Looks up a localized string similar to BoxBlur 3.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_BoxBlur5">
            <summary>
              Looks up a localized string similar to BoxBlur 5.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_BumpIn">
            <summary>
              Looks up a localized string similar to Bump In.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_BumpOut">
            <summary>
              Looks up a localized string similar to Bump Out.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Colors">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
            &lt;filters&gt;
                &lt;desc&gt;Inverts the colors&lt;/desc&gt;
                &lt;filter id=&quot;FilterDialog_Negate&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot;&gt;
                    &lt;feComponentTransfer&gt;
                        &lt;feFuncR type=&quot;table&quot; tableValues=&quot;1,0&quot;/&gt;
                        &lt;feFuncG type=&quot;table&quot; tableValues=&quot;1,0&quot;/&gt;
                        &lt;feFuncB type=&quot;table&quot; tableValues=&quot;1,0&quot;/&gt;
                    &lt;/feComponentTransfer&gt;
                &lt;/filter&gt;
                &lt;desc&gt;Applies a sepia coloration&lt;/desc&gt;
                &lt;filter id=&quot;FilterDialog_Sepia&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot;&gt;
            
                     [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_ColorsCategory">
            <summary>
              Looks up a localized string similar to Colors.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_ConvertToGray">
            <summary>
              Looks up a localized string similar to Convert To Gray.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Convolutions">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
            &lt;filters&gt;
                &lt;desc&gt;Box blur 3x3&lt;/desc&gt;
                &lt;filter id=&quot;FilterDialog_BoxBlur3&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot;&gt;
            
                    &lt;feConvolveMatrix in=&quot;SourceGraphic&quot; order=&quot;3&quot; divisor=&quot;9&quot; kernelMatrix=&quot;1,1,1,1,1,1,1,1,1&quot;/&gt;
              &lt;/filter&gt;
                &lt;desc&gt;Box blur 5x5&lt;/desc&gt;
                &lt;filter id=&quot;FilterDialog_BoxBlur5&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot;&gt;
            
                    &lt;feConvolveMatrix in=&quot;SourceGraphic&quot; order=&quot;5&quot; divisor=&quot;25&quot; 
                                  kernelMatrix=&quot;1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_ConvolutionsCategory">
            <summary>
              Looks up a localized string similar to Convolutions.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_DropShadow">
            <summary>
              Looks up a localized string similar to Drop Shadow.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_DropShadowLight">
            <summary>
              Looks up a localized string similar to Light Drop Shadow.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_DropShadows">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
            &lt;filters&gt;
              
              &lt;desc&gt;Applies a drop shadow effect&lt;/desc&gt;
              &lt;filter id=&quot;FilterDialog_FastSmallDropShadow&quot; x=&quot;-10%&quot; y=&quot;-10%&quot; width=&quot;125%&quot; height=&quot;125%&quot;&gt;
                &lt;feColorMatrix in=&quot;SourceAlpha&quot; type=&quot;matrix&quot; result=&quot;grey&quot;
                           values=&quot;0.2125,0.7154,0.0721,0,0,0.2125,0.7154,0.0721,0,0,0.2125,0.7154,0.0721,0,0,0,0,0,0.7,0&quot;/&gt;
                &lt;feOffset dx=&quot;3&quot; dy=&quot;3&quot; result=&quot;offsetBlur&quot;/&gt;
                &lt;feMerge&gt;
                  &lt;feMergeNode in=&quot;offsetBlur&quot;/&gt;
                  &lt;feMergeNode in=&quot;SourceGraphic&quot;/&gt;
                &lt;/feMe [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_DropShadowsCategory">
            <summary>
              Looks up a localized string similar to Drop Shadows.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_EdgeEnhance">
            <summary>
              Looks up a localized string similar to Edge Enhance.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Emboss">
            <summary>
              Looks up a localized string similar to Emboss.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_EmbossDropShadow">
            <summary>
              Looks up a localized string similar to Emboss And Drop Shadow.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_EmbossDropShadowLight">
            <summary>
              Looks up a localized string similar to Emboss And Light Drop Shadow.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_FastDropShadow">
            <summary>
              Looks up a localized string similar to Drop Shadow (basic).
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_FastDropShadowLight">
            <summary>
              Looks up a localized string similar to Light Drop Shadow (basic).
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_FastSmallDropShadow">
            <summary>
              Looks up a localized string similar to Small Drop Shadow (basic).
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_FastSmallDropShadowLight">
            <summary>
              Looks up a localized string similar to Small Light Drop Shadow (basic).
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Fuzzy">
            <summary>
              Looks up a localized string similar to Fuzzy.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Glow">
            <summary>
              Looks up a localized string similar to Glow.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Gold">
            <summary>
              Looks up a localized string similar to Gold.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Holes">
            <summary>
              Looks up a localized string similar to Holes.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_HolesComplement">
            <summary>
              Looks up a localized string similar to Holes Complement.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_HorizontalEdges">
            <summary>
              Looks up a localized string similar to Horizontal Edges.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_HueRotate120">
            <summary>
              Looks up a localized string similar to Hue Rotate 120.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_HueRotate180">
            <summary>
              Looks up a localized string similar to Hue Rotate 180.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_HueRotate270">
            <summary>
              Looks up a localized string similar to Hue Rotate 270.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_HueRotate60">
            <summary>
              Looks up a localized string similar to Hue Rotate 60.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Impressionist">
            <summary>
              Looks up a localized string similar to Impressionist.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Laplacian3x3">
            <summary>
              Looks up a localized string similar to Laplacian 3x3.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_LargeEmboss">
            <summary>
              Looks up a localized string similar to Large Emboss.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_LargeEmbossDropShadow">
            <summary>
              Looks up a localized string similar to Large Emboss And Drop Shadow.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_LargeEmbossDropShadowLight">
            <summary>
              Looks up a localized string similar to Large Emboss And Light Drop Shadow.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Melting">
            <summary>
              Looks up a localized string similar to Metling.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Misc">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
            &lt;filters&gt;
            
              &lt;desc&gt;Does nothing&lt;/desc&gt;
              &lt;filter id=&quot;FilterDialog_None&quot;&gt;
              &lt;/filter&gt;
            
            
              &lt;desc&gt;Applies an emboss effect with a drop shadow&lt;/desc&gt;
              &lt;filter id=&quot;FilterDialog_ThinEmbossDropShadow&quot; x=&quot;-5%&quot; y=&quot;-5%&quot; width=&quot;120%&quot; height=&quot;120%&quot;&gt;
            
                &lt;feGaussianBlur in=&quot;SourceAlpha&quot; stdDeviation=&quot;1&quot; result=&quot;blur&quot;/&gt;
                &lt;feOffset in=&quot;blur&quot; dx=&quot;6&quot; dy=&quot;6&quot; result=&quot;offsetBlur&quot;/&gt;
                &lt;feSpecularLighting in=&quot;blur&quot; surfaceScale=&quot;8&quot; specularConstant=&quot;1&quot;
            		        specularExponent=&quot;12&quot; re [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_MiscelleanousCategory">
            <summary>
              Looks up a localized string similar to Miscelleanous.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Negate">
            <summary>
              Looks up a localized string similar to Negate.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_None">
            <summary>
              Looks up a localized string similar to None.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Paper">
            <summary>
              Looks up a localized string similar to Paper.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Reliefs">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
            &lt;filters&gt;
              &lt;desc&gt;Applies a bump effect&lt;/desc&gt;
              &lt;filter id=&quot;FilterDialog_BumpIn&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot;&gt;
                &lt;feColorMatrix in=&quot;SourceGraphic&quot; type=&quot;luminanceToAlpha&quot; result=&quot;lumalpha&quot;/&gt;
                &lt;feComponentTransfer in=&quot;lumalpha&quot; result=&quot;invertedalpha&quot;&gt;
                  &lt;feFuncA type=&quot;table&quot; tableValues=&quot;1,0&quot;/&gt;
                &lt;/feComponentTransfer&gt;
                &lt;feDiffuseLighting in=&quot;invertedalpha&quot; lighting-color=&quot;rgb(60%, 60%, 60%)&quot; result=&quot;diffuse&quot; surfaceScale=&quot;5&quot;&gt;
                  &lt;feDistantLight azimuth=&quot;1 [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_ReliefsCategory">
            <summary>
              Looks up a localized string similar to Reliefs.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Sepia">
            <summary>
              Looks up a localized string similar to Sepia.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_ShowBlue">
            <summary>
              Looks up a localized string similar to Show Blue.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_ShowBlueAsGrey">
            <summary>
              Looks up a localized string similar to Show Blue As Grey.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_ShowGreen">
            <summary>
              Looks up a localized string similar to Show Green.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_ShowGreenAsGrey">
            <summary>
              Looks up a localized string similar to Show Green As Grey.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_ShowRed">
            <summary>
              Looks up a localized string similar to Show Red.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_ShowRedAsGrey">
            <summary>
              Looks up a localized string similar to Show Red As Grey.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_SmallDropShadow">
            <summary>
              Looks up a localized string similar to Small Drop Shadow.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_SmallDropShadowLight">
            <summary>
              Looks up a localized string similar to Small Light Drop Shadow.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Swirl">
            <summary>
              Looks up a localized string similar to Swirl.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Swirl2">
            <summary>
              Looks up a localized string similar to Swirl 2.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_Textures">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot;?&gt;
            &lt;filters&gt;
                &lt;desc&gt;Applies a paper effect&lt;/desc&gt;
                &lt;filter id=&quot;FilterDialog_Paper&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;1&quot; height=&quot;1&quot;&gt;
            
                    &lt;feTurbulence type=&quot;turbulence&quot; baseFrequency=&quot;0.01&quot; numOctaves=&quot;5&quot; 
                              result=&quot;texture&quot;/&gt; 
                &lt;feDiffuseLighting in=&quot;texture&quot; result=&quot;diffuse&quot; surfaceScale=&quot;-10&quot;&gt;
                  &lt;feDistantLight azimuth=&quot;135&quot; elevation=&quot;60&quot; /&gt;
                &lt;/feDiffuseLighting&gt;
                &lt;feComposite in=&quot;diffuse&quot; in2=&quot;SourceGraphic&quot; 
                             operator=&quot;arithmetic&quot; k [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_TexturesCategory">
            <summary>
              Looks up a localized string similar to Textures.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_ThinEmboss">
            <summary>
              Looks up a localized string similar to Thin Emboss.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_ThinEmbossDropShadow">
            <summary>
              Looks up a localized string similar to Thin Emboss And Drop Shadow.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_ThinEmbossDropShadowLight">
            <summary>
              Looks up a localized string similar to Thin Emboss And Light Drop Shadow.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_VerticalEdges">
            <summary>
              Looks up a localized string similar to Vertical Edges.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.FilterDialog_VeryFuzzy">
            <summary>
              Looks up a localized string similar to Very Fuzzy.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GradientSelectionGraphic_GradientStopHandleDescription">
            <summary>
              Looks up a localized string similar to Move gradient stop on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GradientSelectionGraphic_GradientStopHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to move the gradient stop. Press Alt to prevent handle snapping. Double-click to edit the gradient stop color. Press Ctrl to create a new gradient stop. Press Ctrl + Click to remove the gradient stop..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GradientSelectionGraphic_GradientStopHandleToolTip">
            <summary>
              Looks up a localized string similar to Move gradient stop.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicContainerDesigner_ConfigureGraphLayout_Description">
            <summary>
              Looks up a localized string similar to Configures the graph layout algorithms for this container..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicContainerDesigner_ConfigureGraphLayout_MethodItem">
            <summary>
              Looks up a localized string similar to Configure Graph Layout....
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicContainerDesigner_GraphLayoutCategory">
            <summary>
              Looks up a localized string similar to Graph Layout.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicContainerDesigner_PerformGraphLayout_Description">
            <summary>
              Looks up a localized string similar to Performs the graph layout defined by the GraphLayout and/or LinkLayout properties..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicContainerDesigner_PerformGraphLayout_MethodItem">
            <summary>
              Looks up a localized string similar to Perform Graph Layout.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicObjectDesigner_AppearanceCategory">
            <summary>
              Looks up a localized string similar to Appearance.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicObjectDesigner_BehaviorCategory">
            <summary>
              Looks up a localized string similar to Behavior.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicObjectDesigner_ConvertToPath_Description">
            <summary>
              Looks up a localized string similar to Convert To Path.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicObjectDesigner_ConvertToPath_MethodItem">
            <summary>
              Looks up a localized string similar to Convert To Path.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicObjectDesigner_ConvertToPolyPoints_Description">
            <summary>
              Looks up a localized string similar to Convert To PolyPoints.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicObjectDesigner_ConvertToPolyPoints_MethodItem">
            <summary>
              Looks up a localized string similar to Convert To PolyPoints.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicObjectDesigner_EditAnchors_Description">
            <summary>
              Looks up a localized string similar to Edit Anchors.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicObjectDesigner_EditAnchors_MethodItem">
            <summary>
              Looks up a localized string similar to Edit Anchors....
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicObjectDesigner_EditFilters_Description">
            <summary>
              Looks up a localized string similar to Edit Filters.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicObjectDesigner_EditFilters_MethodItem">
            <summary>
              Looks up a localized string similar to Edit Filters....
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicObjectDesigner_ResizeMode_Description">
            <summary>
              Looks up a localized string similar to Sets the resize mode..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicObjectDesigner_ResizeMode_PropertyItem">
            <summary>
              Looks up a localized string similar to Resize mode.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicObjectDesigner_SmartTagTitle">
            <summary>
              Looks up a localized string similar to {0} Tasks.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicObjectDesigner_Text_Description">
            <summary>
              Looks up a localized string similar to Sets the shape text..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphicObjectDesigner_Text_PropertyItem">
            <summary>
              Looks up a localized string similar to Text.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayout_GraphLayoutTransactionDescription">
            <summary>
              Looks up a localized string similar to Graph Layout.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutConverter_Enabled">
            <summary>
              Looks up a localized string similar to enabled.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutConverter_None">
            <summary>
              Looks up a localized string similar to (none).
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_DefaultConfiguration">
            <summary>
              Looks up a localized string similar to (default configuration).
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_ForceDirected_Description">
            <summary>
              Looks up a localized string similar to The force-directed layout arranges the nodes as if the links applied an attraction force to them..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_ForceDirected_Name">
            <summary>
              Looks up a localized string similar to Force-Directed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Grid_Description">
            <summary>
              Looks up a localized string similar to The grid layout arranges the nodes in rows and columns..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Grid_Name">
            <summary>
              Looks up a localized string similar to Grid.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Hierarchical_Default_Description">
            <summary>
              Looks up a localized string similar to Arranges the nodes as a hierarchy whose roots are on the left and the leaves on the right, with polyline links..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Hierarchical_Default_Name">
            <summary>
              Looks up a localized string similar to Left-to-Right (default configuration).
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Hierarchical_Description">
            <summary>
              Looks up a localized string similar to The Hierarchical layout arranges the nodes of the graph as a vertical or horizontal hierarchy..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Hierarchical_LeftRightOrthogonal_Description">
            <summary>
              Looks up a localized string similar to Arranges the nodes as a hierarchy whose roots are on the left and the leaves on the right, with orthogonal links..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Hierarchical_LeftRightOrthogonal_Name">
            <summary>
              Looks up a localized string similar to Left-to-Right, Orthogonal.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Hierarchical_LeftRightStraight_Description">
            <summary>
              Looks up a localized string similar to Arranges the nodes as a hierarchy whose roots are on the left and the leaves on the right, with straight links..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Hierarchical_LeftRightStraight_Name">
            <summary>
              Looks up a localized string similar to Left-to-Right, Straight.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Hierarchical_Name">
            <summary>
              Looks up a localized string similar to Hierarchical.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Hierarchical_TopBottom_Description">
            <summary>
              Looks up a localized string similar to Arranges the nodes as a hierarchy whose roots are at the top and the leaves at the bottom, with polyline links..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Hierarchical_TopBottom_Name">
            <summary>
              Looks up a localized string similar to Top-to-Bottom.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Hierarchical_TopBottomOrthogonal_Description">
            <summary>
              Looks up a localized string similar to Arranges the nodes as a hierarchy whose roots are at the top and the leaves at the bottom, with orthogonal links..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Hierarchical_TopBottomOrthogonal_Name">
            <summary>
              Looks up a localized string similar to Top-to-Bottom, Orthogonal.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Hierarchical_TopBottomStraight_Description">
            <summary>
              Looks up a localized string similar to Arranges the nodes as a hierarchy whose roots are at the top and the leaves at the bottom, with straight links..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Hierarchical_TopBottomStraight_Name">
            <summary>
              Looks up a localized string similar to Top-to-Bottom, Straight.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_HierarchicalLink_Default_Description">
             <summary>
               Looks up a localized string similar to Routes the links according to the hierarchy of the nodes, assuming the root of the hierarchy is on the left and the leaves on the right.
            
            Note: if you also set the GraphLayout property to a Hierarchical layout, make sure the flow directions are the same in both layouts..
             </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_HierarchicalLink_Default_Name">
            <summary>
              Looks up a localized string similar to Left-to-Right (default configuration).
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_HierarchicalLink_Description">
            <summary>
              Looks up a localized string similar to The Hierarchical link layout routes the links according to the hierarchy of the nodes..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_HierarchicalLink_Name">
            <summary>
              Looks up a localized string similar to Hierarchical Link Routing.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_HierarchicalLink_TopBottom_Description">
             <summary>
               Looks up a localized string similar to Routes the links according to the hierarchy of the nodes, assuming the root of the hierarchy is at the top and the leaves at the bottom.
            
            Note: if you also set the GraphLayout property to a Hierarchical layout, make sure the flow directions are the same in both layouts..
             </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_HierarchicalLink_TopBottom_Name">
            <summary>
              Looks up a localized string similar to Top-to-Bottom.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_InvalidValueMessage">
            <summary>
              Looks up a localized string similar to Property value is not valid..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_InvalidValueTitle">
            <summary>
              Looks up a localized string similar to Invalid Value.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_LongLink_Description">
            <summary>
              Looks up a localized string similar to The &quot;long&quot; link layout routes links so that they avoid crossing nodes and other links. This algorithm places the link segments on a grid. The number of crossings is usually smaller than with a &quot;short&quot; link layout, but links may have more bend points..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_LongLink_Name">
            <summary>
              Looks up a localized string similar to Long Link Routing.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Random_Description">
            <summary>
              Looks up a localized string similar to The random layout places nodes at random positions..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Random_Name">
            <summary>
              Looks up a localized string similar to Random.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_ShortLink_Description">
            <summary>
              Looks up a localized string similar to The &quot;short&quot; link layout routes links so that they avoid crossing nodes and other links. This algorithm tries predefined link shapes with a maximum of 4 bends..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_ShortLink_Name">
            <summary>
              Looks up a localized string similar to Short Link Routing.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Tree_Default_Description">
            <summary>
              Looks up a localized string similar to Arranges the nodes as a tree whose root is on the left and the leaves on the right, with straight links..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Tree_Default_Name">
            <summary>
              Looks up a localized string similar to Left-to-Right (default configuration).
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Tree_Description">
            <summary>
              Looks up a localized string similar to The Tree layout arranges the nodes of the graph as a vertical or horizontal tree..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Tree_LeftRightOrthogonal_Description">
            <summary>
              Looks up a localized string similar to Arranges the nodes as a tree whose root is on the left and the leaves on the right, with orthogonal links..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Tree_LeftRightOrthogonal_Name">
            <summary>
              Looks up a localized string similar to Left-to-Right, Orthogonal.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Tree_Name">
            <summary>
              Looks up a localized string similar to Tree.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Tree_Radial_Description">
            <summary>
              Looks up a localized string similar to Arranges the nodes as a circular tree whose root is at the center..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Tree_Radial_Name">
            <summary>
              Looks up a localized string similar to Radial.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Tree_TipOver_Description">
            <summary>
              Looks up a localized string similar to Arranges the nodes as a tree, with children placed sequentially to reduce the size of the tree..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Tree_TipOver_Name">
            <summary>
              Looks up a localized string similar to Tip-Over.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Tree_TopBottom_Description">
            <summary>
              Looks up a localized string similar to Arranges the nodes as a tree whose root is at the top and the leaves at the bottom, with straight links..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Tree_TopBottom_Name">
            <summary>
              Looks up a localized string similar to Top-to-Bottom.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Tree_TopBottomOrthogonal_Description">
            <summary>
              Looks up a localized string similar to Arranges the nodes as a tree whose root is at the top and the leaves at the bottom, with orthogonal links..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.GraphLayoutDialog_Tree_TopBottomOrthogonal_Name">
            <summary>
              Looks up a localized string similar to Top-to-Bottom, Orthogonal.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.LinearGradientSelectionGraphic_MoveHandleDescription">
            <summary>
              Looks up a localized string similar to Move gradient brush on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.LinearGradientSelectionGraphic_MoveHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to move the gradient brush. Press Alt to prevent grid snapping. Press Ctrl + Click to add a new gradient stop..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.LinearGradientSelectionGraphic_MoveHandleToolTip">
            <summary>
              Looks up a localized string similar to Move gradient brush.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.LinearGradientSelectionGraphic_PointHandleDescription">
            <summary>
              Looks up a localized string similar to Move linear gradient point  on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.LinearGradientSelectionGraphic_PointHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to move the point of the linear gradient. Press Alt to prevent grid snapping. Press Shift to keep the center of the segment fixed. Press Ctrl to create a new gradient stop..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.LinearGradientSelectionGraphic_PointHandleToolTip">
            <summary>
              Looks up a localized string similar to Move linear gradient point.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.LinearGradientSelectionGraphic_RotateHandleDescription">
            <summary>
              Looks up a localized string similar to Rotate gradient brush on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.LinearGradientSelectionGraphic_RotateHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to rotate the gradient brush. Press Alt to prevent angle snapping..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.LinearGradientSelectionGraphic_RotateHandleToolTip">
            <summary>
              Looks up a localized string similar to Rotate gradient brush.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Link_FilledCapFormat">
            <summary>
              Looks up a localized string similar to {0}x{1} filled cap.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Link_OpenCapFormat">
            <summary>
              Looks up a localized string similar to {0}x{1} open cap.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Link_ShapeArrowFormat">
            <summary>
              Looks up a localized string similar to {0} shape.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.LinkSelectionGraphic_BreakSegmentHandleDescription">
            <summary>
              Looks up a localized string similar to Break Segment on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.LinkSelectionGraphic_BreakSegmentHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to break the link segment. Press Alt to prevent grid snapping..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.LinkSelectionGraphic_BreakSegmentHandleToolTip">
            <summary>
              Looks up a localized string similar to Break Segment.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.LinkSelectionGraphic_MoveSegmentHandleDescription">
            <summary>
              Looks up a localized string similar to Move Segment on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.LinkSelectionGraphic_MoveSegmentHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to move the link segment. Press Alt to prevent grid snapping..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.LinkSelectionGraphic_MoveSegmentHandleToolTip">
            <summary>
              Looks up a localized string similar to Move Segment.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PanButton_ToolTip">
            <summary>
              Looks up a localized string similar to Pan.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PanInteractor_Status_InOp">
            <summary>
              Looks up a localized string similar to Drag the mouse to pan the view. Release to validate the new visible area. Esc to cancel..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PanInteractor_Status_NoOp">
            <summary>
              Looks up a localized string similar to Click and drag the mouse to pan the view..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathDataSelectionGraphic_BezierSegmentAddPointDescription">
            <summary>
              Looks up a localized string similar to Move control point on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathDataSelectionGraphic_BezierSegmentAddPointStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to move the control point. Press Alt to prevent grid snapping, Shift to create smooth curves. Ctrl + Click to convert the segment to a quadratic curve..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathDataSelectionGraphic_BezierSegmentAddPointToolTip">
            <summary>
              Looks up a localized string similar to Move control point.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathDataSelectionGraphic_LineSegmentAddPointDescription">
            <summary>
              Looks up a localized string similar to Add point on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathDataSelectionGraphic_LineSegmentAddPointStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to add a new point at this location. Press Alt to prevent grid snapping, Ctrl to create a curve..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathDataSelectionGraphic_LineSegmentAddPointToolTip">
            <summary>
              Looks up a localized string similar to Add point.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathDataSelectionGraphic_MoveHandleDescription">
            <summary>
              Looks up a localized string similar to Move point on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathDataSelectionGraphic_MoveHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to move the path point. Press Alt to prevent grid snapping, Ctrl to add a new point. Ctrl + Click to remove the point..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathDataSelectionGraphic_MoveHandleToolTip">
            <summary>
              Looks up a localized string similar to Move point.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathDataSelectionGraphic_QuadSegmentAddPointDescription">
            <summary>
              Looks up a localized string similar to Move control point on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathDataSelectionGraphic_QuadSegmentAddPointStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to move the control point. Press Alt to prevent grid snapping, Ctrl to create a bezier curve, Shift to create smooth curves. Ctrl + Click to convert the segment to a line..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathDataSelectionGraphic_QuadSegmentAddPointToolTip">
            <summary>
              Looks up a localized string similar to Move control point.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathGradientSelectionGraphic_CenterPointHandleDescription">
            <summary>
              Looks up a localized string similar to Move gradient brush focus on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathGradientSelectionGraphic_CenterPointHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to move the gradient brush focus. Press Alt to prevent grid snapping. Double click to edit the color..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathGradientSelectionGraphic_CenterPointHandleToolTip">
            <summary>
              Looks up a localized string similar to Move gradient focus.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathGradientSelectionGraphic_MoveAndCreateHandleDescription">
            <summary>
              Looks up a localized string similar to Move gradient brush on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathGradientSelectionGraphic_MoveAndCreateHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to move the gradient brush. Press Alt to prevent grid snapping. Press Ctrl + Click to add a new gradient stop..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathGradientSelectionGraphic_MoveAndCreateHandleToolTip">
            <summary>
              Looks up a localized string similar to Move gradient brush.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathGradientSelectionGraphic_MoveHandleDescription">
            <summary>
              Looks up a localized string similar to Move gradient brush on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathGradientSelectionGraphic_MoveHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to move the gradient brush. Press Alt to prevent grid snapping..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathGradientSelectionGraphic_MoveHandleToolTip">
            <summary>
              Looks up a localized string similar to Move gradient brush.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathGradientSelectionGraphic_ResizeHandleDescription">
            <summary>
              Looks up a localized string similar to Resize gradient brush on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathGradientSelectionGraphic_ResizeHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to resize the gradient brush. Press Alt to prevent grid snapping. Press Ctrl to keep the center fixed. Press shift to keep the focus point fixed..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathGradientSelectionGraphic_ResizeHandleToolTip">
            <summary>
              Looks up a localized string similar to Resize gradient brush.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathGradientSelectionGraphic_RotateHandleDescription">
            <summary>
              Looks up a localized string similar to Rotate gradient brush on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathGradientSelectionGraphic_RotateHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to rotate the gradient brush. Press Alt to prevent angle snapping..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathGradientSelectionGraphic_RotateHandleToolTip">
            <summary>
              Looks up a localized string similar to Rotate gradient brush.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathGradientSelectionGraphic_StartPointHandleDescription">
            <summary>
              Looks up a localized string similar to Edit gradient brush start color on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathGradientSelectionGraphic_StartPointHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Double click to edit the gradient brush start color..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PathGradientSelectionGraphic_StartPointHandleToolTip">
            <summary>
              Looks up a localized string similar to Edit start color.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Point2DOrRectangle2DConverter_Unspecified">
            <summary>
              Looks up a localized string similar to (unspecified).
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PolyPointsSelectionGraphic_AddPointHandleDescription">
            <summary>
              Looks up a localized string similar to Add point on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PolyPointsSelectionGraphic_AddPointHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to add a new point at this location. Press Alt to prevent grid snapping..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PolyPointsSelectionGraphic_AddPointHandleToolTip">
            <summary>
              Looks up a localized string similar to Add point.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PolyPointsSelectionGraphic_MoveHandleDescription">
            <summary>
              Looks up a localized string similar to Move point on {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PolyPointsSelectionGraphic_MoveHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to move the point. Press Alt to prevent grid snapping..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.PolyPointsSelectionGraphic_MoveHandleToolTip">
            <summary>
              Looks up a localized string similar to Move point.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Printing_authorPattern">
            <summary>
              Looks up a localized string similar to &amp;[Author].
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Printing_datePattern">
            <summary>
              Looks up a localized string similar to &amp;[Date].
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Printing_documentPattern">
            <summary>
              Looks up a localized string similar to &amp;[Document].
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Printing_fileNamePattern">
            <summary>
              Looks up a localized string similar to &amp;[File].
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Printing_none">
            <summary>
              Looks up a localized string similar to (none).
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Printing_pagePattern">
            <summary>
              Looks up a localized string similar to &amp;[Page].
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Printing_pagesPattern">
            <summary>
              Looks up a localized string similar to &amp;[Pages].
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Printing_pageX">
            <summary>
              Looks up a localized string similar to Page &amp;[Page].
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Printing_pageXofY">
            <summary>
              Looks up a localized string similar to Page &amp;[Page] of &amp;[Pages].
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Printing_preparedBy">
            <summary>
              Looks up a localized string similar to Prepared by &amp;[Author].
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.Printing_timePattern">
            <summary>
              Looks up a localized string similar to &amp;[Time].
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ResetZoomButton_ToolTip">
            <summary>
              Looks up a localized string similar to Reset Zoom.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ReshapeSelectionGraphic_ResizeHandleDescription">
            <summary>
              Looks up a localized string similar to Resize {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ReshapeSelectionGraphic_ResizeHandleStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to resize the graphic object. Press Alt to prevent grid snapping, Shift to keep aspect ratio, Ctrl to keep object&apos;s center fixed..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ReshapeSelectionGraphic_ResizeHandleToolTip">
            <summary>
              Looks up a localized string similar to Resize.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.RotateButton_ToolTip">
            <summary>
              Looks up a localized string similar to Rotate the View.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.RotateViewInteractor_Status_InOperation">
            <summary>
              Looks up a localized string similar to Drag the mouse to modify the rotation angle. Release the mouse button to set the angle. Esc to cancel..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.RotateViewInteractor_Status_Over">
            <summary>
              Looks up a localized string similar to Click in the view to define the rotation angle..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.SelectButton_ToolTip">
            <summary>
              Looks up a localized string similar to Select Objects.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.SelectInteractor_MoveObjectsTransactionDescription">
            <summary>
              Looks up a localized string similar to Move Objects.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.SelectInteractor_Status_Copying">
            <summary>
              Looks up a localized string similar to Drag to duplicate selection. Alt-Drag to prevent grid snapping. Esc to cancel..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.SelectInteractor_Status_CopyingReparenting">
            <summary>
              Looks up a localized string similar to Drag to duplicate selection and move it to the hovered container. Alt-Drag to prevent grid snapping. Esc to cancel..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.SelectInteractor_Status_DragRect">
            <summary>
              Looks up a localized string similar to Drag the mouse to define the selection area. Release to select. Esc to cancel..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.SelectInteractor_Status_Moving">
            <summary>
              Looks up a localized string similar to Drag to move selection inside the selection parent container. Alt-Drag to prevent grid snapping. Esc to cancel..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.SelectInteractor_Status_NoOp">
            <summary>
              Looks up a localized string similar to Click an object to select it. Click the view and drag to select objects intersecting the area. Ctrl-Click to add to/remove from selection. Ctrl-drag to duplicate. Shift-drag to move inside the object container..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.SelectInteractor_Status_Reparenting">
            <summary>
              Looks up a localized string similar to Drag to move selection to the hovered container. Alt-Drag to prevent grid snapping. Esc to cancel..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.SelectionGraphic_ChangeDescription">
            <summary>
              Looks up a localized string similar to Change {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.SelectionGraphic_ChangeToolTip">
            <summary>
              Looks up a localized string similar to Change.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.SelectionGraphic_MoveDescription">
            <summary>
              Looks up a localized string similar to Move {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.SelectionGraphic_MoveStatusBarText">
            <summary>
              Looks up a localized string similar to Click and drag to move the object. Press Alt to prevent grid snapping..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.SelectionGraphic_MoveToolTip">
            <summary>
              Looks up a localized string similar to Move.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.SelectionStyle_ChildSelectionModifierDescription">
            <summary>
              Looks up a localized string similar to The modifier key that allows to select container children..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.SelectionStyle_CopyModifierDescription">
            <summary>
              Looks up a localized string similar to The modifier key that enables the copy of the selected object..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.SelectionStyle_NoReparentModifierDescription">
            <summary>
              Looks up a localized string similar to The modifier key that prevents to change the parent container of the selected object..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.SelectionStyle_NoSnapModifierDescription">
            <summary>
              Looks up a localized string similar to The modifier key that prevents the grid snapping while moving the selection..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ViewInteractor_CreateObjectTransactionDescription">
            <summary>
              Looks up a localized string similar to Create {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ViewInteractor_RemoveObjectTransactionDescription">
            <summary>
              Looks up a localized string similar to Remove {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ZoomButton_ToolTip">
            <summary>
              Looks up a localized string similar to Zoom a Rectangular Area.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ZoomInButton_ToolTip">
            <summary>
              Looks up a localized string similar to Zoom In.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ZoomInteractor_Status_InOp">
            <summary>
              Looks up a localized string similar to Drag the mouse to define the area. Release the mouse to validate. Esc to cancel..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ZoomInteractor_Status_NoOp">
            <summary>
              Looks up a localized string similar to Click and drag the mouse to define the zoom-in area. {0}-drag to zoom out..
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ZoomOutButton_ToolTip">
            <summary>
              Looks up a localized string similar to Zoom Out.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Properties.Resources.ZoomToFitButton_ToolTip">
            <summary>
              Looks up a localized string similar to Show All.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphicObjectCollection">
            <summary>
            Represents a collection of <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphicObjectCollection.RemoveRange(ILOG.Diagrammer.GraphicObject[])">
            <summary>
            Removes a range of <see cref="T:ILOG.Diagrammer.GraphicObject"/> from the collection.
            </summary>
            <param name="objs">An array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> to be removed from the collection.</param>
        </member>
        <member name="T:ILOG.Diagrammer.Internal.CryptUtil">
            <summary>
            Utility class to encrypt/decrypt
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Internal.Key">
            <summary>
            Represent an ILM license key.
            </summary>
            <remarks>
            This implementation is a limited implementation of ILM.
            It does not implement the client-server functionality.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Internal.Key._siteName">
            <summary>
            name of the site
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Internal.Key._keyType">
            <summary>
            Type of ILM key.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Internal.Key._optionalKey">
            <summary>
            optional key parameters
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Internal.Key._optionalArg">
            <summary>
            Optional arguments for key.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Internal.Key._expirationDate">
            <summary>
            Optional Expiration date.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Internal.Key._expires">
            <summary>
            Does this key expires.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Internal.Key._feature">
            <summary>
            The Product or feature name.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Internal.Key._version">
            <summary>
            Version of the feature.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Internal.Key._code">
            <summary>
            Code of the key.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Internal.Key._options">
            <summary>
            List of options of the key.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Internal.Key._licenseText">
            <summary>
            Text of licence.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Internal.Key.months">
            <summary>
            Short month names used in key date.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Internal.Key.#ctor(System.String)">
            <summary>
            Creates a Key Object from a ILM Key string.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Internal.Key.ParseOptionsString(System.String)">
            <summary>
            Parses the option string to create Option objects.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Internal.Key.GetOptionString">
            <summary>
            Get the option string from _optArg and _optKey
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Internal.Key.HasOption(System.String,System.Int32@)">
            <summary>
            Indicates whether the key has the specified option defined.
            </summary>
            <param name="name">The name of the option.</param>
            <param name="value">The value of the option.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Internal.Key.StringToDate(System.String)">
            <summary>
            Transform a date in ILM string format to a DateTime.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Internal.Key.MonthToInt(System.String)">
            <summary>
            Transform a month in ILM format to an int (0 is January).
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Internal.Key.KeyTypeFromString(System.String)">
            <summary>
            Get the key type from a string.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Internal.Key.Crypt">
            <summary>
            Create the code of the key.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Internal.Key.Expires">
            <summary>
            Indicates whether the key will expire on day.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Internal.Key.ExpirationDate">
            <summary>
            The expiration date, valid only if the Expires property is true.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Internal.Key.DateQuantieme">
            <summary>
            Get the expiration date quantieme used in ILM coding.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Internal.Key.KeyType">
            <summary>
            Type of key.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Internal.Key.Option">
            <summary>
            A key option.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Internal.LicenseDatabase">
            <summary>
            Represent the object that can read/write keys into registries.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphLayoutRegionMode">
            <summary>
            Specifies how the layout region is computed.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegionMode"/>        
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphLayoutRegionMode.RectangleInGraphicContainerCoordinates">
            <summary>
            The layout region is specified by the <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/>
            property, in the coordinate system of the graphic container.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphLayoutRegionMode.RectangleInViewCoordinates">
            <summary>
            The layout region is specified by the <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/>
            property, in the coordinate system of the reference view 
            (<seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.ReferenceView"/>).        
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphLayoutRegionMode.ViewBounds">
            <summary>
            The layout region is the whole area of the reference view. 
            The <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/> property is ignored.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.NodeSide">
            <summary>
            The four node sides.     
            </summary>   
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ILinkConnectionBoxProvider.GetTangentialOffset(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object,ILOG.Diagrammer.GraphLayout.NodeSide)"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.NodeSide.Left">
            <summary>
            The left side.        
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.NodeSide.Right">
            <summary>
            The right side.        
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.NodeSide.Top">
            <summary>
            The top side.        
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.NodeSide.Bottom">
            <summary>
            The bottom direction.        
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.ConnectionPointMode">
            <summary>
            The modes how the layout algorithms handle the connection points of
            links at nodes.
            </summary>
            <remarks>
            These modes are supported by <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalLayout"/>, 
            <see cref="T:ILOG.Diagrammer.GraphLayout.ShortLinkLayout"/>, and
            <see cref="T:ILOG.Diagrammer.GraphLayout.LongLinkLayout"/>. 
            The modes specify whether the layout needs to keep the connection
            points of links fixed or whether it is allowed to move them.
            If it is allowed to move them, the link must have an anchor that
            can be moved.
            The specification makes sense for connection points that are not
            pinned (<see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)"/>),
            to fine tune whether connection points that are in principle movable
            should actually be moved by the layout algorithm. 
            Pinned connection points however are never moved by the layout
            algorithms.
            <p>
            Connection point modes can be specified globally for all links,
            for instance by <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.OriginPointMode"/>,
            or locally for individual links, for instance by
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>.
            If you want to specify the mode for individual links, you need to
            set the global mode to <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>.
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.OriginPointMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.DestinationPointMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.OriginPointMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.DestinationPointMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.OriginPointMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.DestinationPointMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free">
            <summary>
            Free movement mode.
            </summary>
            <remarks>
            When this mode is used, the layout is free to choose the appropriate
            position of the connection points, except for "pinned" connection
            points (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)"/>).
            This mode can be used as global mode affecting all links, or as
            local mode affecting only individual links.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Fixed">
            <summary>
            Fixed movement mode.
            </summary>
            <remarks>
            When this mode is used, the layout must keep the current position of
            the connection point.
            This mode can be used as global mode affecting all links, or as
            local mode affecting only individual links.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed">
            <summary>
            Mixed movement mode.
            </summary>
            <remarks>
            This mode can only be used as global mode affecting all links.
            When this mode is used as global mode, it is possible to specify
            individual movement modes per link.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.LayoutFlowDirection">
            <summary>
            The flow directions for the layout algorithm.
            </summary>
            <remarks>
            The flow direction is supported by <see cref="T:ILOG.Diagrammer.GraphLayout.HierarchicalLayout"/>
            and <see cref="T:ILOG.Diagrammer.GraphLayout.TreeLayout"/>.
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.FlowDirection"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.FlowDirection"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.LayoutFlowDirection.Left">
            <summary>
            Left direction.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.LayoutFlowDirection.Right">
            <summary>
            Right direction.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.LayoutFlowDirection.Top">
            <summary>
            Top direction.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.LayoutFlowDirection.Bottom">
            <summary>
            Bottom direction.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.CoordinatesMode">
            <summary>
            The modes for the coordinates for the layout algorithm.
            </summary>
            <remarks>
            These modes are used to specify which coordinates are used when
            computing the geometry of the graph. Layout spacing parameters
            are interpreted with respect to the coordinates mode. In view
            coordinates mode, a spacing of 40 means 40 pixel on the screen.
            In graphic container coordinates mode, a spacing of 40 mean 40 
            units relative to the units system used for graphic objects
            inside the graphic container; on the screen, this appears zoomed
            by the zoom factor of the view.
            In inverse view coordinates mode, a spacing of 40 means 40 units
            like in graphic container coordinates mode, however size and 
            position of objects are calculated by inversing the coordinates
            system of the view. The difference between graphic container 
            coordinates and inverse view coordinates is visible if the graphic
            container contains objects that don't follow the zoom level of the
            view proportionally.
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.CoordinatesMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.CoordinatesMode"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.CoordinatesMode.InverseViewCoordinates">
            <summary>
            Inverse view coordinates mode.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.CoordinatesMode.GraphicContainerCoordinates">
            <summary>
            Graphic container coordinates mode.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.CoordinatesMode.ViewCoordinates">
            <summary>
            View coordinates mode.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Design.ArrowSizeConverter">
            <summary>
            This converter is only used by the FormatLinkDialog
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.AnimationStatus">
            <summary>
            Specifies the status of an <see cref="T:ILOG.Diagrammer.Animation"/> object.
            </summary>
            <remarks>This enumeration is used by the <see cref="P:ILOG.Diagrammer.Animation.Status"/> property.</remarks>
        </member>
        <member name="F:ILOG.Diagrammer.AnimationStatus.Started">
            <summary>
            The animation has been started.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AnimationStatus.Suspended">
            <summary>
            The animation has been suspended.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AnimationStatus.Stopped">
            <summary>
            The animation has been stopped.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Animator">
            <summary>
            Represents the animation engine responsible for animating <see cref="T:ILOG.Diagrammer.Animation"/> objects.
            </summary>
            <remarks><p>The <see cref="T:ILOG.Diagrammer.Animator"/> class has only static methods and events that enables to control animation at
            the application level.</p>
            <p>The <see cref="E:ILOG.Diagrammer.Animator.BeforeAnimation"/> and <see cref="E:ILOG.Diagrammer.Animator.AfterAnimation"/> events can be used to be notified each time the animation
            engine runs animations.</p>
            <p>The <see cref="P:ILOG.Diagrammer.Animator.FramesPerSeconds"/> property allows to control the refresh rate of animations.</p>
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Animator._worker">
            <summary>
            The background thread.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Animator._enabled">
            <summary>
            Indicates whether animations should be running or not.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Animator._framesPerSeconds">
            <summary>
            The frame rate.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Animator._animations">
            <summary>
            The list  of animations.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Animator._syncContext">
            <summary>
            The synchronization context.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Animator._syncLock">
            <summary>
            The lock object on the SynchronizationContext.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Animator.SetSynchronizationContext(System.Threading.SynchronizationContext)">
            <summary>
            Sets the synchronization context that defines the animation executing thread.
            </summary>
            <remarks>The synchronization context defines the thread in which animations are
            executed. By default, it is initialized to the WinForms synchronization context by
            the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> constructor.
            </remarks>
            <value>A <see cref="T:System.Threading.SynchronizationContext"/> instance that defines the animation executing thread.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Animator.BeforeAnimation">
            <summary>
            Occurs before the animation engine runs animations.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Animator.AfterAnimation">
            <summary>
            Occurs after the animation engine has run animations.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Animator.FramesPerSeconds">
            <summary>
            Gets or sets the frames rate
            </summary>
            <value>A <see cref="T:System.Int32"/> value that represents the number of frames per second.
            The default value is <strong>25</strong>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Animator.Enabled">
            <summary>
            Gets or sets a value indicating whether the animation engine is running.
            </summary>
            <value><see langword="true"/> if the animation engine is running; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.AnimationGroup">
            <summary>
            Represents a group of <see cref="T:ILOG.Diagrammer.Animation"/> objects.
            </summary>
            <remarks><p>Grouping animations allows to create complex animations that can be see a single animation.</p>
            <p>Use the <see cref="M:ILOG.Diagrammer.AnimationGroup.Add(ILOG.Diagrammer.Animation)"/> and <see cref="M:ILOG.Diagrammer.AnimationGroup.Remove(ILOG.Diagrammer.Animation)"/> methods to add or remove an animation from the group.</p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.AnimationGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.AnimationGroup"/> class.
            </summary>      
        </member>
        <member name="M:ILOG.Diagrammer.AnimationGroup.Animate(System.TimeSpan)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.Animate(System.TimeSpan)">Animation.Animate</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.AnimationGroup.IsOver(System.TimeSpan)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.IsOver(System.TimeSpan)">Animation.IsOver</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.AnimationGroup.GetActualDuration">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.GetActualDuration">Animation.GetActualDuration</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.AnimationGroup.OnStarted">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.OnStarted">Animation.OnStarted</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.AnimationGroup.OnResumed">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.OnResumed">Animation.OnResumed</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.AnimationGroup.OnStopped">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.OnStopped">Animation.OnStopped</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.AnimationGroup.OnSuspended">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.OnSuspended">Animation.OnSuspended</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.AnimationGroup.OnFinished">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Animation.OnFinished">Animation.OnFinished</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.AnimationGroup.Add(ILOG.Diagrammer.Animation)">
            <summary>
            Adds an <see cref="T:ILOG.Diagrammer.Animation"/> to this group.
            </summary>
            <param name="item">A <see cref="T:ILOG.Diagrammer.Animation"/> instance.</param>
        </member>
        <member name="M:ILOG.Diagrammer.AnimationGroup.Clear">
            <summary>
            Removes all the animations from this group.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.AnimationGroup.Contains(ILOG.Diagrammer.Animation)">
            <summary>
            Indicates whether the specified <see cref="T:ILOG.Diagrammer.Animation"/> is located in this group.
            </summary>
            <param name="item">A <see cref="T:ILOG.Diagrammer.Animation"/> reference.</param>
            <returns><see langword="true"/> if the animation is located in this group; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.AnimationGroup.CopyTo(ILOG.Diagrammer.Animation[],System.Int32)">
            <summary>
            Copies the animations of the group into the specified array.
            </summary>
            <param name="array">An array of <see cref="N:ILOG.Diagrammer.Animations"/> objects.</param>
            <param name="arrayIndex">The zero-based index at which copy will take place in the array.</param>
        </member>
        <member name="M:ILOG.Diagrammer.AnimationGroup.Remove(ILOG.Diagrammer.Animation)">
            <summary>
            Remove the specified <see cref="T:ILOG.Diagrammer.Animation"/> from the group.
            </summary>
            <param name="item">The <see cref="T:ILOG.Diagrammer.Animation"/> to remove.</param>
            <returns><see langword="true"/> if the <see cref="T:ILOG.Diagrammer.Animation"/> was removed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:ILOG.Diagrammer.AnimationGroup.Count">
            <summary>
            Gets the number of animations of this group.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.TreeLayout">
            <summary>
            The main class for the Tree Layout algorithm.
            </summary>
            <remarks> 
            <p>
            The Tree Layout algorithm places the nodes of a tree starting from
            the <I>root</I> of the tree to the <I>leaves.</I> If the graph has
            parts that are disconnected, it arranges each connected component as
            an individual tree. The Tree Layout algorithm is primarily designed
            for a forest of pure trees. In a tree, each node except the root has
            a <I>parent</I> node. All the nodes that have the same parent are
            called <I>children</I> with respect to the parent and <I>siblings</I>
            with respect to each other. The Tree Layout algorithm can also be
            used for non-trees (for example, cyclic graphs). In this case, the
            layout algorithm ignores those links that violate the tree structure
            and takes only the <I>spanning tree</I> of the graph into account. 
            </p>
            <p>
            The algorithm has several layout modes: 
            <UL>
            <LI> The nodes can be arranged freely in a horizontal or vertical
            way. This is suitable for a graph with a large variation of node
            sizes.</LI> 
            <LI> The nodes can be arranged in horizontal or vertical levels. This
            is suitable for a graph that contains nodes of approximately the same
            size.</LI> 
            <LI> The nodes can be arranged radially on concentric circles or on
            ellipses around the root of the tree.</LI> 
            </UL>
            To simplify the explanations of the layout parameters, we use the
            compass directions <I>north, south, east</I>, and <I>west</I>. The
            center of the root node of a tree is the north pole. If the root node
            is placed at the top border, north is always upwards, south towards
            the bottom, west towards the left, and east towards the right side of
            the layout. If the root node is placed at the left border, north is
            left and south is right. In radial mode, the root is placed in the
            center, and so the notation of north and south depends on where a
            node is placed relative to the root. The north side of any node is
            the side that is closer to the root and the south side is the side
            that is farther away from the root. 
            </p>
            <p>
            Several alignment options are provided. In particular, the free
            layout mode allows the <I>tip-over alignment</I>, which means that
            subtrees are arranged serially rather than in parallel. If the
            subtrees starting at one node are normally arranged horizontally, the
            tip-over alignment arranges them vertically. The tree layout provides
            layout modes that automatically adapt the tip-over alignment to best
            fit the layout to a given aspect ratio. 
            </p>
            <p>
            The following sample drawings are produced by the Tree Layout
            algorithm. The left drawing uses the level layout mode. The flow
            direction of the links is towards the bottom, and the nodes are
            south-justified (that is, they are aligned to the bottom) within each
            level. The right drawing is the same tree in free layout mode (which
            always uses north level alignment): <CENTER>
            <A HREF="images/GraphLayout/layout-Tree-level-free.gif">
            <IMG SRC="images/GraphLayout/layout-Tree-level-free.gif" BORDER="0" ALIGN="BOTTOM" WIDTH="100%"/></A>
            </CENTER> <FONT SIZE="-2">Click on the image to see it in normal
            size.</FONT> 
            </p>
            <p>
            Here is another sample drawing in free layout mode with the tip-over
            alignment at some leaf nodes: <CENTER>
            <A HREF="images/GraphLayout/layout-Tree-tipover.gif">
            <IMG SRC="images/GraphLayout/layout-Tree-tipover.gif" BORDER="0" ALIGN="BOTTOM" WIDTH="80%"/></A>
            </CENTER> <FONT SIZE="-2">Click on the image to see it in normal
            size.</FONT> 
            </p>
            <p>
            The following are two sample drawings in the two radial layout modes.
            The normal radial mode in the left drawing places the nodes of the
            same level on a circle around the root node. The alternating radial
            mode in the right drawing places the nodes of the same level
            alternating on two circles around the root node. This results in
            better usage of the space. <CENTER>
            <A HREF="images/GraphLayout/layout-Tree-radial.gif">
            <IMG SRC="images/GraphLayout/layout-Tree-radial.gif" BORDER="0" ALIGN="BOTTOM" WIDTH="100%"/></A>
            </CENTER> <FONT SIZE="-2">Click on the image to see it in normal
            size.</FONT> 
            </p>
            <p>
            In nonradial layout modes, the Tree Layout algorithm supports
            different styles of links in the same drawing. The following sample
            drawing shows orthogonal and straight-line links. It also shows nodes
            that are aligned to the center (see the red nodes), to the east
            (green), and to the west (blue) of their children. The drawing was
            created by the free layout mode with the link flow direction to the
            right, and so north is to the left. <CENTER>
            <A HREF="images/GraphLayout/layout-Tree-mixedlinks.gif">
            <IMG SRC="images/GraphLayout/layout-Tree-mixedlinks.gif" BORDER="0" ALIGN="BOTTOM" WIDTH="80%"/></A>
            </CENTER> <FONT SIZE="-2">Click on the image to see it in normal
            size.</FONT> 
            </p>
            <p>
            The Tree Layout algorithm supports node neighboring in all modes. The
            following sample drawing shows a tree layout with the flow direction
            towards the top. Some nodes are not placed as children but rather as
            neighbors at the same level as the corresponding parent node. The red
            links, which are perpendicular to the flow direction, are between
            nodes that were specified as neighbored. <CENTER>
            <A HREF="images/GraphLayout/layout-Tree-attachments.gif">
            <IMG SRC="images/GraphLayout/layout-Tree-attachments.gif" BORDER="0" ALIGN="BOTTOM" WIDTH="100%"/></A>
            </CENTER> <FONT SIZE="-2">Click on the image to see it in normal
            size.</FONT> 
            </p>
            <p>
            See the corresponding chapter of the User's Manual for details on the
            algorithm, the types of graphs for which this algorithm can be used,
            the features and limitations, code samples, and so on. 
            </p>
            <p>
            Note the following points: 
            <UL>
            <LI>  If no root node is specified, the layout algorithm takes the
            direction of links into account to calculate a root node. Other than
            that, the direction of links does not affect the layout.</LI> 
            <LI>  The layout algorithm has an incremental mode that is designed
            to be stable when incremental changes are made. If nodes are added or
            removed after a layout, the next layout uses a heuristic to try to
            adjust the layout only minimally and to avoid major structural
            reorganization.</LI> 
            <LI>  In incremental mode, the initial position of the nodes (at the
            moment you start the layout) affects the resulting layout because the
            algorithm tries to preserve the relative order of the children on
            incremental changes.</LI> 
            </UL> 
            </p>
            <p>
            </p>
            </remarks>
            <example>
            <para lang='cs,vbnet'>The following example shows how to apply 
            the Tree Layout.</para>
            <code lang='cs'>
            using System;
            using ILOG.Diagrammer;
            using ILOG.Diagrammer.Graphic;
            using ILOG.Diagrammer.GraphLayout; 
            
            Group group = new Group();
            
            // Fill the group with nodes and links here
            
            TreeLayout layout = new TreeLayout();
            group.GraphLayout = layout;
            group.PerformGraphLayout(); 
            </code>
            <code lang='vbnet'>
            Imports System
            Imports ILOG.Diagrammer
            Imports ILOG.Diagrammer.Graphic
            Imports ILOG.Diagrammer.GraphLayout
            
            Dim group As Group = New Group 
            
            ' Fill the group with nodes and links here
            
            Dim layout As TreeLayout = New TreeLayout
            group.GraphLayout = layout
            group.PerformGraphLayout
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.#ctor">
            <summary>
            Creates a new instance of the Tree Layout algorithm.
            </summary>
            <remarks>
            <br/> To indicate the graphic container you want to lay out, use the
            method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>.
            <br/> To indicate the graph model you want to lay out, use the
            method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            <br/> To perform the layout, use the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            <br/> To modify the layout parameters, use the different methods
            provided in this class and its superclass. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.#ctor(ILOG.Diagrammer.GraphLayout.TreeLayout)">
            <summary>
            Creates a new layout instance by copying an existing one.
            </summary>
            <remarks>
            This constructor is used by the <see cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.Copy"/>
            method. Any subclass should provide a copy constructor. 
            <p>
            The parameters of the <strong>source</strong> layout are copied
            using the method <see cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="source"> The layout instance that is copied.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.Copy"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.Init">
            <summary>
            Initializes instance variables.
            </summary>
            <remarks> 
            <p>
            You should not call this method directly. The method is called
            internally by the constructor without arguments and by the copy
            constructor. The method must be overridden by subclasses that need
            to initialize additional instance variables. 
            </p>
            <p>
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.Copy">
            <summary>
            Copies the layout instance.
            </summary>
            <remarks> 
            <p>
            This method copies the layout instance by calling the copy
            constructor. 
            </p>
            <p>
            When performing a recursive layout of a nested graph, this method is
            used by <see cref="T:ILOG.Diagrammer.GraphLayout.ILayoutProvider"/> to
            "clone" the layout instance of a parent graph. Note that the
            parameters which are specific to a node or a link are not copied.
            Only the global parameters are copied. The layout position is not
            copied. 
            </p>
            <p>
            </p>
            </remarks>
            <returns>A copy of the layout instance.
            </returns>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.Position"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetPosition(ILOG.Diagrammer.Point2D,System.Boolean)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Copies the parameters from a given layout instance.
            </summary>
            <remarks> 
            <p>
            Note that the parameters which are specific to a node or a link are
            not copied. Only the global parameters are copied. The layout
            position is not copied. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="source"> The layout instance from which the parameters
            are copied.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.Copy"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.Position"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetPosition(ILOG.Diagrammer.Point2D,System.Boolean)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.Layout">
            <summary>
            Computes the layout using the Tree Layout algorithm.
            </summary>
            <remarks>
            To start the layout, call the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.Detach">
            <summary>
            Detaches the graph model from the layout instance.
            </summary>
            <remarks>
            When you attach a new graph model to the layout instance, you do not
            need to detach the old graph model because this is done
            automatically when you call
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            The detach method performs cleaning operations on the graph model.
            In addition to the cleaning operations in the base class, the Tree
            Layout removes the alignment, root preference, and node neighboring
            specifications of individual nodes, and the link style
            specifications of individual links. 
            <p>
            Note that you must call this method when you no longer need the
            layout instance. Otherwise, some objects may not be garbage
            collected. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetAlignment(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRootPreference(System.Object,System.Int32)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetEastWestNeighboring(System.Object,System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.CleanNode(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)">
            <summary>
            Cleans a node.
            </summary>
            <remarks>
            This method removes any data that has been stored by the layout
            algorithm on a node. In addition to the cleaning operations in the
            base class, Tree Layout removes the root node preference and the
            alignment and east/west attachment settings from the nodes. 
            <p>
            Subclasses can override this method to remove additional information
            stored in the nodes. 
            </p>
            </remarks>
            <param name="graphModel"> The graph model to which
            <paramref name="node"/> belongs.
            </param>
            <param name="node"> The node to be cleaned.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.Detach"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.CleanLink(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)">
            <summary>
            Cleans a link.
            </summary>
            <remarks>
            This method removes any data that has been stored by the layout
            algorithm on a link. In addition to the cleaning operations in the
            base class, Tree Layout removes the link style settings from the
            nodes. 
            <p>
            Subclasses can override this method to remove additional information
            stored in the links. 
            </p>
            </remarks>
            <param name="graphModel"> The graph model to which
            <paramref name="link"/> belongs.
            </param>
            <param name="link"> The link to be cleaned.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.Detach"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SupportsPreserveFixedNodes">
            <summary>
            Indicates that this layout class allows the user to specify fixed
            nodes.
            </summary>
            <remarks>
            Fixed nodes are not moved during the layout if the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/>
            is set to <see langword="true"/>. Links that are incident to fixed
            nodes are not reshaped during the layout. Fixed nodes are ignored by
            the Tree Layout algorithm, which may lead to node overlaps. The
            effect is very similar to the effect when the node is filtered
            during layout. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/>
            '/&gt;
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SupportsPreserveFixedLinks">
            <summary>
            Indicates that this layout class allows the user to specify fixed
            links.
            </summary>
            <remarks>
            Fixed links are not reshaped during the layout if the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/>
            is set to <see langword="true"/>. Fixed links are ignored by the
            Tree Layout algorithm, which may lead to overlaps. The effect is
            very similar to the effect when the link is filtered during layout. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/>
            '/&gt;
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LinkStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle)"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SupportsAllowedTime">
            <summary>
            Indicates that this layout class can stop the layout computation in
            a proper manner when the user-defined allowed time is exceeded.
            </summary>
            <remarks>
            If the allowed time elapses before termination of the Tree Layout
            algorithm, the nodes and links are not moved and remain at the same
            position as before the start of the algorithm. The result code in
            the layout report is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/> in this case. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/>
            '/&gt;
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SupportsStopImmediately">
            <summary>
            Indicates that this layout class can interrupt the current run of
            the layout immediately in a controlled way.
            </summary>
            <remarks>
            If the algorithm is stopped before termination of the Tree Layout
            algorithm, the nodes and links are not moved and remain at the same
            position as before the start of the algorithm. The result code in
            the layout report is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/> in this case. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.StopImmediately"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsStoppedImmediately"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.StopImmediately">
            <summary>
            Stops the running layout algorithm as soon as possible.
            </summary>
            <remarks>
            The Tree Layout algorithm has several steps. During the first steps,
            the layout algorithm can be stopped and the method returns
            <see langword='true'/>. In the very last step, the layout algorithm
            cannot be stopped and the method returns <see langword='false'/>. 
            <p>
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SupportsPercentageComplete">
            <summary>
            Indicates that this layout class can estimate the percentage of
            completion during the run of the layout.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IncreasePercentageComplete(System.Int32)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.PercentageComplete"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SupportsLayoutOfConnectedComponents">
            <summary>
            Indicates that this layout class can use the generic connected
            component layout mechanism of the <strong>GraphLayout</strong> base
            class.
            </summary>
            <remarks>
            This mechanism cuts the attached graph into connected components,
            applies itself to each connected component separately, and then uses
            the layout instance returned by the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents"/>
            to position the connected components. By default, this layout is an
            instance of <see cref="T:ILOG.Diagrammer.GraphLayout.GridLayout"/>
            that can be customized as needed. 
            <p>
            The generic connected component layout mechanism has the
            disadvantage that it moves connected components completely. Fixed
            nodes within a component do not preserve their old positions, and
            the resulting layout may be unstable on incremental changes in
            incremental mode, depending on which layout instance is used for the
            component layout. 
            </p>
            <p>
            If the generic connected component layout mechanism is disabled, the
            algorithm uses its own specialized internal mechanism instead of the
            generic mechanism to lay out each component as a separate tree. This
            is usually faster and more stable on incremental changes than the
            generic mechanism. In addition, it enables the user to set the
            position of the layout. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.IncrementalMode"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SupportsLinkConnectionBox">
            <summary>
            Indicates that this layout class can use a link connection box
            provider to calculate the end points of links.
            </summary>
            <remarks>
            The link connection box provider is an object that provides the
            rectangle to which the links are connected for each node and the
            tangential shift offset at each side for the connection points. This
            is useful if the connection points of the links at a node should be
            relative to a rectangle that is smaller or larger than the real
            bounding box of the node. 
            <p>
            Link connection points are not calculated for links that have the
            no-reshape link style, that are fixed, or that are not tree links.
            Only the connection points of reshapeable tree links are calculated.
            
            </p>
            <p>
            If a connection box provider object is set at the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>,
            the layout algorithm uses this object together with the connector
            style to calculate the connection points for links. 
            </p>
            <p>
            If the link clip mode is set additionally, the layout algorithm
            calculates the initial connection points at the node boxes with the
            link connection box provider and the connector style and tells the
            graph model to obtain the final connection points by clipping
            against the shape of the nodes via the reshape mode of
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/>.
            This works well particularly if the node box obtained by the link
            connection box provider is smaller than the real bounding box of the
            node. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkClipping"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.ConnectorStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcNonTreeLinks"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetAspectRatio(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Sets the aspect ratio for the layout from a given rectangle.
            </summary>
            <remarks>
            This can be useful if the graph contains just one single tree and
            should be fit into the input rectangle. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.AspectRatio"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetAspectRatio(ILOG.Diagrammer.IDiagramView)">
            <summary>
            Sets the aspect ratio for the layout from a given view.
            </summary>
            <remarks>
            This can be useful if the graph contains just one single tree and
            should be fit into the input view. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.AspectRatio"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle)">
            <summary>
            Sets the style of the shape of an individual link.
            </summary>
            <remarks>
            This link style is used only if the global link style is set to
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle.Mixed"/> and the link is part of the
            spanning tree. If the global link style is not
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle.Mixed"/>, all links of the spanning
            tree have the style that is specified as the global link style.
            Links that are not part of the spanning tree have the link style
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle.NoReshape"/>. 
            <p>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle.Orthogonal"/> - the link has an
            orthogonal shape, that is, a shape consisting of a sequence of
            orthogonal line segments. This option is not available for the
            radial layout modes.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle.Straight"/> - the link has a
            straight-line shape.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle.NoReshape"/> - no reshape is
            performed on the link.</LI> 
            </UL> 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle.Straight"/>.  
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetLinkStyle(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LinkStyle"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetLinkStyle(System.Object)">
            <summary>
            Returns the style of the shape of an individual link.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LinkStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetEastWestNeighboring(System.Object,System.Object)">
            <summary>
            Creates an east-west neighboring of two nodes.
            </summary>
            <remarks>
            The <paramref name="westNode"/> is placed as the first neighbor on
            the same level to the west of the <paramref name="eastNode"/>. This
            implies, conversely, that the <paramref name="eastNode"/> is the
            first neighbor on the same level to the east of the
            <paramref name="westNode"/>. 
            <p>
            For instance, in free layout mode and with the flow direction
            towards the bottom, the east node is placed as the immediate
            neighbor to the right of the west node at approximately the same
            <strong>y</strong> coordinate. A link between both nodes is routed
            as a straight horizontal line between both nodes. In radial layout
            mode, the east node is placed as the immediate neighbor in the same
            circle as the west node. A link between both nodes is routed
            tangentially to the node circle as a straight line. 
            </p>
            <p>
            Note that each node can have at most one east neighbor and one west
            neighbor. For technical reasons, children of tip-over alignments
            have special area requirements, and, therefore, they can have a west
            neighbor but not an east neighbor. This means that if the parent
            node of the <paramref name="westNode"/> has tip-over alignment, the
            east-west neighboring is ignored. Similarly, children of
            tip-over-both-sides alignments cannot have an east neighbor or a
            west neighbor. 
            </p>
            <p>
            East-west neighboring is possible even though there is no link
            between both nodes. The layout algorithm considers both nodes as if
            they were conceptually connected by a link. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="eastNode"> The east neighbor of the
            <paramref name="westNode"/>.
            </param>
            <param name="westNode"> The west neighbor of the
            <paramref name="eastNode"/>.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetEastNeighbor(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetWestNeighbor(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetWestEastNeighboring(System.Object,System.Object)">
            <summary>
            Creates an east-west neighboring of two nodes.
            </summary>
            <remarks>
            The <paramref name="westNode"/> is placed as the first neighbor on
            the same level to the west of the <paramref name="eastNode"/>. This
            implies, conversely, that the <paramref name="eastNode"/> is the
            first neighbor on the same level to the east of the
            <paramref name="westNode"/>. 
            <p>
            This method is identical to
            <see cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetEastWestNeighboring(System.Object,System.Object)"/> with
            a reversed argument order, and is provided for convenience. Note
            that, for instance, when the flow direction is towards the bottom,
            east is to the right of west, and therefore resembles more the
            argument order of <strong>SetWestEastNeighboring</strong>. When the
            flow direction is towards the top, east is to the left of west, and
            therefore resembles more the argument order of
            <strong>SetEastWestNeighboring</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="westNode"> The west neighbor of the
            <paramref name="eastNode"/>.
            </param>
            <param name="eastNode"> The east neighbor of the
            <paramref name="westNode"/>.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetEastNeighbor(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetWestNeighbor(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetEastNeighbor(System.Object)">
            <summary>
            Returns the specified east neighbor node of the input node, or
            <see langword="null"/> if none was specified.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetWestNeighbor(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetEastWestNeighboring(System.Object,System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetWestNeighbor(System.Object)">
            <summary>
            Returns the specified west neighbor node of the input node, or
            <see langword="null"/> if none was specified.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetEastNeighbor(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetEastWestNeighboring(System.Object,System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRoot(System.Object)">
            <summary>
            Allows you to specify the root(s) of the tree.
            </summary>
            <remarks>
            If more than one connected component exists, it is possible to
            select a root for each component. If no root is specified, an
            appropriate node is automatically selected as root. For a directed
            tree, the canonical root node with degree 0 is selected unless
            otherwise specified. 
            <p>
            Setting the root node by this method is identical to setting the
            root preference of this node to 10000. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcRoots"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetSpecRoots"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRootPreference(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetSpecRoots">
            <summary>
            Returns the nodes that were specified as root.
            </summary>
            <remarks>
            Note that this does not necessarily mean that these nodes are
            selected as real roots, because the specification may have conflicts
            (for example, each connected component can only have one root, thus
            specifying two roots for the same connected component causes a
            conflict). To retrieve the nodes that were really used as roots
            during the layout, call the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcRoots"/>. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcRoots"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.IsSpecRoot(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRoot(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRootPreference(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.IsSpecRoot(System.Object)">
            <summary>
            Returns <see langword="true"/> if the input node was specified as
            root.
            </summary>
            <remarks>
            Note that this does not necessarily mean that this node is selected
            as real root, because the specification may have conflicts (for
            example, each connected component can only have one root, thus
            specifying two roots for the same connected component causes a
            conflict). To check whether the node was really used as root during
            the layout, call the method <see cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.IsCalcRoot(System.Object)"/>. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetSpecRoots"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.IsCalcRoot(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRoot(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRootPreference(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcRoots">
            <summary>
            Returns the nodes that were used as roots during layout.
            </summary>
            <remarks>
            This can be called after the layout. If more than one connected
            component exists, each component has a root. If no root was
            specified, the layout algorithm automatically selects an appropriate
            node. If too many roots were specified, some specified roots will
            not become calculated roots during layout. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetSpecRoots"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRoot(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRootPreference(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.IsCalcRoot(System.Object)">
            <summary>
            Returns <see langword="true"/> if the input node was used as root
            during layout.
            </summary>
            <remarks>
            This can be called after the layout. If more than one connected
            component exists, each component has a root. If no root was
            specified, the layout algorithm automatically selects an appropriate
            node. If too many roots were specified, some specified roots will
            not become calculated roots during layout. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcRoots"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRoot(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRootPreference(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRootPreference(System.Object,System.Int32)">
            <summary>
            Specifies the preference of the node to become root node.
            </summary>
            <remarks>
            The higher the preference, the more likely the node will be selected
            as root node. 
            <p>
            If a negative value is passed as input, the preference of the node
            is unspecified. In this case, the algorithm calculates a preference
            so that for directed trees the canonical root nodes with degree 0
            have the highest preference. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcRoots"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetSpecRoots"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetRootPreference(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRoot(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetRootPreference(System.Object)">
            <summary>
            Returns the specified preference of the node to become root node.
            </summary>
            <remarks>
            The higher the preference, the more likely the node will be selected
            as root node. If no preference is specified for the node, it returns
            <strong>-1</strong>. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRoot(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRootPreference(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetPosition(ILOG.Diagrammer.Point2D,System.Boolean)">
            <summary>
            Sets the position of the layout.
            </summary>
            <remarks>
            This can be used if connected component processing is disabled, or
            if the graph is fully connected. It has no effect otherwise. 
            <p>
            If no position is specified, the layout algorithm keeps the position
            of the first root node unchanged. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="point"> The position.
            </param>
            <param name="isRootPosition"> If <see langword="true"/>, it
            specifies the position of the first root node. This is useful in
            incremental mode. If <see langword="false"/>, it specifies the
            position of the top-left border of the layout.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.Position"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRoot(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.IncrementalMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcForwardTreeLinks">
            <summary>
            Returns the forward links that were used as part of the spanning
            tree during the layout.
            </summary>
            <remarks>
            This can be called <I>after</I> the layout if the link
            categorization option was set to <see langword="true"/>
            <I>before</I> the layout by the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.CategorizingLinks"/>. 
            <p>
            The forward tree links have the property that the "from" node is the
            parent of the "to" node in the tree layout. These links are reshaped
            by the layout algorithm. 
            </p>
            <p>
            If the graph was not a tree, some links will not be part of the
            spanning tree that forms the base structure for the layout. If the
            graph was not a directed tree, some links need to be reversed to
            form the spanning tree. These links are not part of this
            enumeration. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcBackwardTreeLinks"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcNonTreeLinks"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRoot(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcBackwardTreeLinks">
            <summary>
            Returns the backward links that were used in the reverse direction
            as part of the spanning tree during layout.
            </summary>
            <remarks>
            This can be called <I>after</I> the layout if the link
            categorization option was set to <see langword="true"/>
            <I>before</I> the layout by the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.CategorizingLinks"/>. 
            <p>
            The backward tree links have the property that the "to" node is the
            parent of the "from" node in the tree layout. These links are
            reshaped by the layout algorithm. 
            </p>
            <p>
            If the graph was not a tree, some links will not be part of the
            spanning tree that forms the base structure for the layout. These
            links are not part of this enumeration. Also, the links that need
            not to be reversed but form the spanning tree are not part of this
            enumeration. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcForwardTreeLinks"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcNonTreeLinks"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRoot(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcNonTreeLinks">
            <summary>
            Returns the links that were neither forward nor backward links in
            the spanning tree during layout.
            </summary>
            <remarks>
            This can be called <I>after</I> the layout if the link
            categorization option was set to <see langword="true"/>
            <I>before</I> the layout by the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.CategorizingLinks"/>. 
            <p>
            The non-tree tree links have the property that neither the "from"
            node is the parent of the "to" node nor the "to" node is the parent
            of the "from" node in the tree layout. These links are not reshaped
            by the layout algorithm. 
            </p>
            <p>
            If the graph was not a tree, some links will not be part of the
            spanning tree that forms the base structure for the layout. Only
            these links are part of this enumeration. If necessary, they can be
            treated by a link routing layout algorithm after the tree layout
            (for example, by
            <see cref="T:ILOG.Diagrammer.GraphLayout.LongLinkLayout"/>). 
            </p>
            <p>
            Note that links that are removed by a layout filter, and links that
            are specified as fixed links or that are adjacent to fixed nodes,
            are not part of this enumeration even though they are also not part
            of the spanning tree. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcForwardTreeLinks"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcBackwardTreeLinks"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRoot(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/>
            '/&gt;
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetAlignment(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment)">
            <summary>
            Sets the alignment option of an individual node.
            </summary>
            <remarks>
            This alignment option is used only if the global alignment is set to
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.Mixed"/>. Otherwise, all nodes have
            the alignment that is specified as the global alignment. 
            <p>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.Center"/> - the node is centered
            with respect to the centers of its children.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.BorderCenter"/> - the node is
            centered with respect to the border of its children.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.East"/> - the node is aligned to
            the border of its easternmost child.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.West"/> - the node is aligned to
            the border of its westernmost child.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.TipOver"/> - a parent is outside
            the border of the children, while the children are placed
            sequentially instead of in parallel.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.TipOverBothSides"/> - similar to
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.TipOver"/> but the children are
            arranged in pairs at both sides of the link segment that starts at
            the parent node. This alignment option is not possible in the radial
            or level layout modes. </LI> 
            </UL> 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.Center"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetAlignment(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.Alignment"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetAlignment(System.Object)">
            <summary>
            Returns the local alignment option of the node.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetAlignment(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.Alignment"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.OnLayoutStepPerformed(System.Boolean,System.Boolean)">
            <summary>
            Fires a graph layout <strong>LayoutStepPerformed</strong> event.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeLayout.OnConstraintsChanged">
            <summary>
            Invoked when the content of the <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.Constraints"/> property change.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LinkStyle">
            <summary>
            Gets or sets the global style of the shapes of links.
            </summary>
            <remarks>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle.Orthogonal"/> - all links have
            an orthogonal shape, that is, a shape consisting of a sequence of
            orthogonal line segments. This option is not available for the
            radial layout modes.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle.Straight"/> - all links have a
            straight-line shape.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle.NoReshape"/> - no reshape is
            performed on any link.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle.Mixed"/> - each link can have a
            different link style. The style of each individual link can be set
            by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle)"/> so
            that different link shapes can occur in the same graph.</LI> 
            </UL> 
            <p>
            Unless the global link style is
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle.Mixed"/>, all links have the same
            shape style. 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle.Straight"/>.  
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>
            <value>The global style of the shapes of links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.ConnectorStyle">
            <summary>
            Gets or sets the style of the connectors.
            </summary>
            <remarks>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutConnectorStyle.Centered"/> - the link
            connection points are placed in the center of the border of the node
            bounding box to which the link is attached.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutConnectorStyle.Clipped"/> - each link
            pointing to the center of the node is clipped at the bounding box of
            the node. This style affects straight links; it behaves like
            centered connection points for orthogonal links.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutConnectorStyle.EvenlySpaced"/> - the link
            connection points are evenly spaced along the border of the node
            bounding box.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutConnectorStyle.Automatic"/> - the
            connector style is selected depending on the link style.</LI> 
            </UL> 
            <p>
            The default value is
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutConnectorStyle.Automatic"/>. 
            </p>
            <p>
            The connector style is ignored in the radial layout modes because
            clipped pins are always used in this case. The placement of
            connection points also depends on the link clip interface and the
            connection box interface, in the following way: <ol> 
            <li> First, the bounding box of an end node is obtained. If a link
            connection box interface was set via
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>,
            the bounding box and offsets are delivered by that interface.
            Otherwise, the node bounding box delivered by the graph model (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.BoundingBox(System.Object)"/>)
            is used. </li> 
            <li> Next, the initial connection point of the link is placed at
            this bounding box in the manner specified by the connector style.
            </li> 
            <li> Finally, if the link clip mode was set via
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkClipping"/>,
            the layout tells the graph model to obtain the final connection
            points by clipping against the shape of the nodes via the reshape
            mode of
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/>.
            </li>
            </ol>  
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SupportsLinkConnectionBox"/>
            <value>The style of the connectors.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.FlowDirection">
            <summary>
            Gets or sets the direction of the flow.
            </summary>
            <remarks>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.LayoutFlowDirection.Right"/> - the root is on the
            left and the links flow to the right.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.LayoutFlowDirection.Left"/> - the root is on the
            right and the links flow to the left.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.LayoutFlowDirection.Bottom"/> - the root is at the
            top and the links flow to the bottom.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.LayoutFlowDirection.Top"/> - the root is at the
            bottom and the links flow to the top.</LI> 
            </UL> 
            <p>
            Note that except for the radial layout modes, the compass direction
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLevelAlignment.South"/> is identical to the
            flow direction. 
            </p>
            <p>
            In the radial layout modes, all links flow radially from the center
            of the root outward. If connected component processing is disabled,
            the flow direction affects only the arrangement of disconnected
            trees in the radial modes. 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.LayoutFlowDirection.Right"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>
            <value>The direction of the flow.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode">
            <summary>
            Gets or sets the layout mode.
            </summary>
            <remarks>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.Free"/> - all links flow roughly in
            the flow direction. Nodes of different tree branches (that is, nodes
            with a different parent node) are not justified to each other;
            therefore, the level alignment parameter is ignored. Tip-over
            alignment is possible if specified as alignment. All link styles are
            possible. The aspect ratio is ignored.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.Level"/> - all links flow roughly in
            the flow direction. Nodes are organized in levels and are justified
            to their borders or centered according to the level alignment
            parameter. Tip-over alignment is not possible, but all link styles
            are possible. The aspect ratio is ignored.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipOver"/> - similar to the mode
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.Free"/>. However, in mode
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipOver"/>, the algorithm tries to
            optimize the layout to automatically fit best to the specified
            aspect ratio. Using a fast heuristic, it chooses the local alignment
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipOver"/> for some nodes but keeps the
            alignment of all other nodes as specified. This heuristic is a fast
            compromise between the modes
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipLeavesOver"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipRootsOver"/>, and
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipRootsAndLeavesOver"/>.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipLeavesOver"/> - similar to the
            mode <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipOver"/>. The algorithm tries to
            optimize the layout to automatically fit best to the specified
            aspect ratio. This slow heuristic tries to tip over beginning with
            the leaves and then chooses the best layout. It checks the alignment
            mode <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipOver"/>, but not
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.TipOverBothSides"/>. It keeps the
            alignment of all nodes close to the root as specified.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipRootsOver"/> - similar to the mode
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipOver"/>. The algorithm tries to
            optimize the layout to automatically fit best to the specified
            aspect ratio. This slow heuristic tries to tip over beginning with
            the roots and then chooses the best layout. It checks the alignment
            mode <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipOver"/>, but not
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.TipOverBothSides"/>. It keeps the
            alignment of all nodes close to the leaves as specified.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipRootsAndLeavesOver"/> - similar to
            the mode <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipOver"/>. The algorithm tries
            to optimize the layout to automatically fit best to the specified
            aspect ratio. This slow heuristic tries to tip over beginning with
            the roots and with the leaves, and then chooses the best layout. It
            checks the alignment mode <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipOver"/>, but
            not <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.TipOverBothSides"/>. It keeps the
            alignment of all nodes in the middle between roots and leaves as
            specified.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.Radial"/> - the root node is in the
            center, the links flow radially away from the center, and the nodes
            are placed in circular layers around the root node according to the
            level alignment. Tip-over alignment and orthogonal link styles are
            not possible. Clipped connection points are used as the connector
            style. If an aspect ratio is specified, the layers are ellipses
            around the center.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.AlternatingRadial"/> - this is the
            same as mode <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.Radial"/>, with the exception
            that children of the same node are placed alternating in different
            circular layers when this results in a smaller radius and better
            usage of the space. Tip-over alignment and orthogonal link styles
            are not possible. Clipped connection points are used as the
            connector style. If an aspect ratio is specified, the layers are
            ellipses around the center.</LI> 
            </UL> 
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.Free"/>. 
            </p>
            <p>
            Note that the tip-over layout modes work best if the node sizes are
            respected during layout. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.FlowDirection"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LevelAlignment"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.ConnectorStyle"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LinkStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.Alignment"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetAlignment(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.AspectRatio"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetAspectRatio(ILOG.Diagrammer.IDiagramView)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetAspectRatio(ILOG.Diagrammer.Rectangle2D)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.RespectNodeSizes"/>
            <value>The layout mode.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.IncrementalMode">
            <summary>
            Gets or sets the incremental mode.
            </summary>
            <remarks> 
            <p>
            If the incremental mode is enabled, the algorithm tries to preserve
            the relative order of the children on incremental changes. The
            logical order of children of nodes in the tree is calculated from
            their coordinates. In this case, the layout is stable when
            incremental changes are made. If nodes are added or removed after a
            layout, the next layout uses a heuristic to try to adjust the layout
            only minimally and to avoid major structural reorganization. 
            </p>
            <p>
            If the incremental mode is disabled, the algorithm calculates the
            logical order of children of nodes in the tree by using the order in
            which nodes are returned by <see cref="P:ILOG.Diagrammer.GraphLayout.IGraphModel.Nodes"/>. 
            </p>
            <p>
            The incremental mode is enabled by default. 
            </p>
            <p>
            </p>
            </remarks>
            <value>The incremental mode.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.AllLevelsAlternating">
            <summary>
            Gets or sets whether at all levels, nodes are forced into
            alternating circular layers.
            </summary>
            <remarks> 
            <p>
            This option has only an effect in layout mode
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.AlternatingRadial"/>. Alternating
            placement means that the nodes of one level are placed alternating
            in two circular layers. Nonalternating placement means that the
            nodes of one level are placed in one circular layer. Normally, the
            layout analyses which levels must use the alternating placement in
            order to optimize space. If the alternating placement of a level
            does not improve the space usage, the nonalternating placement is
            used for the level even in alternating radial layout mode. 
            </p>
            <p>
            This option allows to change this behavior: if the option is
            enabled, all levels use the alternating placement even if the
            alternating placement uses more space than the nonalternating
            placement. 
            </p>
            <p>
            The option is disabled by default. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>
            <value>Whether at all levels, nodes are forced into alternating
            circular layers.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.RespectNodeSizes">
            <summary>
            Gets or sets whether the algorithm must try to respect the size of
            the nodes.
            </summary>
            <remarks>
            If the argument is <see langword="true"/>, the spacing parameters
            are interpreted as the minimum distance between the node borders. If
            the argument is <see langword="false"/>, the spacing parameters are
            interpreted as the minimum distance between the node centers. 
            <p>
            If respecting node sizes is disabled, the level alignment option has
            no effect. 
            </p>
            <p>
            This is an expert option. The default is <see langword="true"/>. It
            makes sense to switch this option off only if all nodes already have
            approximately the same size and the spacing parameters are larger
            than the largest node. If the option is switched off, large nodes
            may otherwise overlap. In particular, it is recommended keeping the
            option enabled if orthogonal links are used. 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LevelAlignment"/>
            <value>Whether the algorithm must try to respect the size of the
            nodes.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LevelAlignment">
            <summary>
            Gets or sets the alignment within the levels.
            </summary>
            <remarks>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLevelAlignment.Center"/></LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLevelAlignment.North"/></LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLevelAlignment.South"/></LI> 
            </UL> 
            <p>
            This feature sets the alignment of the nodes within each level. It
            can be used in layout modes <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.Level"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.Radial"/>, and
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.AlternatingRadial"/>. It has an effect
            only if the respect node sizes option is enabled. 
            </p>
            <p>
            If the nodes are center-justified, all nodes of the same level are
            placed with their centers along a line. Otherwise, all nodes of the
            same level are placed with the specified border justified to a line.
            For instance, if the link flow direction is to the right, the
            alignment <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLevelAlignment.North"/> means that
            the nodes are justified to the left and the alignment
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLevelAlignment.South"/> means that the nodes
            are justified to the right. 
            </p>
            <p>
            In the radial layout modes, the alignment
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLevelAlignment.North"/> means that the nodes
            are aligned along a circle with the border that is closer to the
            root, and the alignment <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLevelAlignment.South"/>
            means that the nodes are aligned along a circle with the border that
            is farther away from the root. 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutLevelAlignment.Center"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.FlowDirection"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.RespectNodeSizes"/>
            <value>The alignment within the levels.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.Alignment">
            <summary>
            Gets or sets the global alignment option.
            </summary>
            <remarks>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.Center"/> - a parent is centered
            above its children, taking the center of the children into
            account.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.BorderCenter"/> - a parent is
            centered above its children, taking the border of the children into
            account. This differs from the alignment
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.Center"/> if the respect node sizes
            option is enabled.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.East"/> - a parent is aligned to
            the border of its easternmost child.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.West"/> - a parent is aligned to
            the border of its westernmost child.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.TipOver"/> - a parent is outside
            the border of the children, while the children are placed
            sequentially instead of in parallel. This alignment option is not
            possible in the radial or level layout modes.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.TipOverBothSides"/> - similar to
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.TipOver"/>, but the children are
            arranged in pairs at both sides of the link segment that starts at
            the parent node. This alignment option is not possible in the radial
            or level layout modes.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.Mixed"/> - each node can have a
            different alignment option. The alignment of each individual node
            can be set by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetAlignment(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment)"/> so
            that different alignments can occur in the same graph.</LI> 
            </UL> 
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment.Center"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetAlignment(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.RespectNodeSizes"/>
            <value>The global alignment option.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.SiblingOffset">
            <summary>
            Gets or sets the minimal offset between siblings, that is, between
            nodes that have the same parent in the tree structure.
            </summary>
            <remarks> 
            <p>
            If the flow direction is towards the top or bottom and the layout
            mode is not radial, this is a horizontal offset. If the flow
            direction is towards the left or right and the layout mode is not
            radial, this is a vertical offset. If the layout mode is radial,
            this is an offset tangential to the circles or ellipses. 
            </p>
            <p>
            If the respect node sizes option is enabled, this is the minimal
            offset between node borders; otherwise, it is the minimal offset
            between node centers. 
            </p>
            <p>
            The default value is <strong>40</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.FlowDirection"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.RespectNodeSizes"/>
            <value>The minimal offset between siblings, that is, between nodes
            that have the same parent in the tree structure.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.ParentChildOffset">
            <summary>
            Gets or sets the minimal offset between a parent and its children.
            </summary>
            <remarks> 
            <p>
            If the flow direction is towards the top or bottom and the layout
            mode is not radial, this is a vertical offset. If the flow direction
            is towards the left or right and the layout mode is not radial, this
            is a horizontal offset. If the layout mode is radial, this is an
            offset radial to the circle or ellipses. 
            </p>
            <p>
            If the respect node sizes option is enabled, this is the minimal
            offset between node borders; otherwise, it is the minimal offset
            between node centers. 
            </p>
            <p>
            The default value is <strong>40</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.FlowDirection"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.RespectNodeSizes"/>
            <value>The minimal offset between a parent and its children.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.BranchOffset">
            <summary>
            Gets or sets the minimal offset between neighbor nodes that belong
            to different branches in the tree.
            </summary>
            <remarks>
            This is the offset between neighbor nodes that are not siblings. The
            offset is in the opposite direction of the link flow. 
            <p>
            If the flow direction is towards the top or bottom and the layout
            mode is not radial, this is a horizontal offset. If the flow
            direction is towards the left or right and the layout mode is not
            radial, this is a vertical offset. If the layout mode is radial,
            this is an offset tangential to the circles or ellipses. 
            </p>
            <p>
            If the respect node sizes option is enabled, this is the minimal
            offset between node borders; otherwise, it is the minimal offset
            between node centers. 
            </p>
            <p>
            The default value is <strong>40</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.FlowDirection"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.RespectNodeSizes"/>
            <value>The minimal offset between neighbor nodes that belong to
            different branches in the tree.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.TipOverBranchOffset">
            <summary>
            Gets or sets the minimal offset in the flow direction between
            neighbor nodes that belong to different branches in the tree.
            </summary>
            <remarks>
            This offset is used to separate the branches if their common parent
            node has tip-over alignment. It has no effect if the layout mode is
            radial or if no tip-over alignment occurs. 
            <p>
            If the flow direction is towards the top or bottom, this is a
            vertical offset. If the flow direction is towards the left or right,
            this is a horizontal offset. 
            </p>
            <p>
            If the respect node sizes option is enabled, this is the minimal
            offset between node borders; otherwise, it is the minimal offset
            between node centers. 
            </p>
            <p>
            The default value is <strong>40</strong>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.FlowDirection"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.RespectNodeSizes"/>
            <value>The minimal offset in the flow direction between neighbor
            nodes that belong to different branches in the tree.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.AspectRatio">
            <summary>
            Gets or sets the aspect ratio for the layout.
            </summary>
            <remarks>
            This is the ratio <strong>width / height</strong> of the desired
            layout region. 
            <p>
            The effect of the aspect ratio depends on the layout mode: 
            <UL>
            <LI> In layout modes <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.Radial"/> and
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.AlternatingRadial"/>, the nodes are placed
            in circular layers if the aspect ratio is <strong>1</strong>.
            Otherwise, they are placed in elliptical layers.</LI> 
            <LI> In layout modes <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipOver"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipRootsOver"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipLeavesOver"/>, and
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipRootsAndLeavesOver"/>, the nodes are
            placed as in in free mode, but local tip-over alignments are
            automatically added to better fit the layout to the aspect
            ratio.</LI> 
            <LI> The aspect ratio has no effect in other layout modes.</LI> 
            </UL> 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetAlignment(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutAlignment)"/>
            <value>The aspect ratio for the layout.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.OverlapPercentage">
            <summary>
            Gets or sets the percentage for which a node is considered smaller
            in the flow direction.
            </summary>
            <remarks>
            This allows nodes to be placed closer together. However, in layout
            modes <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.Free"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipOver"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipRootsOver"/>,
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipLeavesOver"/>, and
            <see cref="F:ILOG.Diagrammer.GraphLayout.TreeLayoutMode.TipRootsAndLeavesOver"/>, outgoing links
            of a node may, in rare cases, cross the neighbor leaf nodes if the
            overlap percentage is high. To avoid this, set the parameter to
            <strong>0</strong>%. 
            <p>
            The default value is <strong>30</strong>%, which is a good
            compromise for many graphs between wasting space and the risk of
            having links cross nodes. 
            </p>
            <p>
            This is an expert option. In all normal cases, it is not necessary
            to change the option. It is recommended choosing an orthogonal fork
            percentage that is always larger than the overlap percentage to
            obtain a good layout. 
            </p>
            <p>
            This option has no effect if the respect node sizes option is
            disabled. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.OrthForkPercentage"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.RespectNodeSizes"/>
            <value>The percentage for which a node is considered smaller in the
            flow direction.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.MaxChildrenAngle">
            <summary>
            Gets or sets the maximal angle for children that are placed in
            radial mode.
            </summary>
            <remarks>
            This is the maximal angle between the two rays from the parent to
            its two outermost children. The angle must be between 0 and 360
            degrees. The angle 0 means that the angle is unspecified, 
            <p>
            The default value is 0. 
            </p>
            <p>
            In radial mode, children of a single node may cover nearly
            completely one circular layer. This sometime appears to be
            unbalanced, in particular because the links from the node to its
            outermost children are likely to cross other nodes. To avoid this
            effect, a maximal angle can be specified so that the children are
            placed more in the same direction and are not spread too widely
            around the parent. This angular restriction is applied to all
            children except the children of the root node. As a side effect,
            specifying a small maximal children angle enlarges the radius of the
            circles. 
            </p>
            <p>
            It is recommended choosing a value between <strong>30</strong> and
            <strong>180</strong> degrees for good results. The algorithm uses a
            heuristic that has precision deviations below <strong>30</strong>
            degrees and above <strong>180</strong> degrees. If an aspect ratio
            is specified, the layout algorithm uses ellipses instead of circles.
            In this case, precision deviations may occur as well. 
            </p>
            <p>
            This is an expert option. It has no effect in layout modes other
            than radial. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.AspectRatio"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetAspectRatio(ILOG.Diagrammer.IDiagramView)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetAspectRatio(ILOG.Diagrammer.Rectangle2D)"/>
            <value>The maximal angle for children that are placed in radial
            mode.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.FirstCircleEvenlySpacing">
            <summary>
            Gets or sets whether the nodes on the first circle must be evenly
            spaced in radial mode.
            </summary>
            <remarks> 
            <p>
            By default, all nodes are placed as close as possible according to
            the offset parameters. In radial mode, this may cause the first
            circle to be only partially filled (that is, all nodes are placed
            close together at one part of the circle and there is a larger gap
            in another part of the circle). 
            </p>
            <p>
            To avoid this effect, you can enable the evenly spacing of the first
            circle. In this case, the children of the root node are placed such
            that their centers are approximately evenly spaced on the first
            circle, filling the entire circle. This may, however, cause the
            final result to waste much more space on the other circles. 
            </p>
            <p>
            It is disabled by default. 
            </p>
            <p>
            This is an expert option. It has no effect in layout modes other
            than radial. If there is east-west neighboring of the nodes in the
            first circle, these neighbors will not be equally spaced. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.SiblingOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.BranchOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.ParentChildOffset"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetEastWestNeighboring(System.Object,System.Object)"/>
            <value>Whether the nodes on the first circle must be evenly spaced
            in radial mode.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.OrthForkPercentage">
            <summary>
            Gets or sets the percentage of the parent-child offset that
            determines the location where the orthogonal link routing places the
            bends in order to fork the routing towards the children.
            </summary>
            <remarks>
            This has an effect only if the orthogonal link style is chosen. 
            <p>
            The default value is <strong>45</strong>%. 
            </p>
            <p>
            This is an expert option. In all normal cases, it is not necessary
            to change the option. It is recommended choosing an orthogonal fork
            percentage that is always larger than the overlap percentage to
            obtain a good layout. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LinkStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.ParentChildOffset"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.OverlapPercentage"/>
            <value>The percentage of the parent-child offset that determines the
            location where the orthogonal link routing places the bends in order
            to fork the routing towards the children.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.Position">
            <summary>
            Gets or sets the position of the layout.
            </summary>
            <remarks>
            This can be used if connected component processing is disabled, or
            if the graph is fully connected. It has no effect otherwise. 
            <p>
            The meaning of the position depends on the flag
            <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.RootPosition"/>. If the flag is
            <see langword="true"/>, it specifies the position of the first root
            node. This is useful in incremental mode. If the flag is
            <see langword="false"/>, it specifies the position of the top-left
            border of the layout. 
            </p>
            <p>
            If no position is specified, the layout algorithm keeps the position
            of the first root node unchanged. 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.RootPosition"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRoot(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.IncrementalMode"/>
            <value>The position of the layout.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.RootPosition">
            <summary>
            Gets or sets the meaning of the specified position.
            </summary>
            <remarks>
            The specified position is the one that can be obtained from
            <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.Position"/>. If passed <see langword="true"/>
            the specified position means the position of the root node.
            Otherwise, it means the position of the top-left border of the
            layout. This can be used if connected component processing is
            disabled, or if the graph is fully connected. It has no effect
            otherwise. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetPosition(ILOG.Diagrammer.Point2D,System.Boolean)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.Position"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRoot(System.Object)"/>
            <value>The meaning of the specified position.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.InvisibleRootUsed">
            <summary>
            Gets or sets whether an invisible root is used to combine components
            that are disconnected from each other.
            </summary>
            <remarks>
            The roots that are specified by <see cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRoot(System.Object)"/> or
            <see cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRootPreference(System.Object,System.Int32)"/> are the roots of each
            individual component. If an invisible root is used, all roots of
            each individual component are added as children to an invisible
            dummy node and the layout is performed on the resulting connected
            graph. By doing this, the components are arranged in the same global
            structure. In particular, this is useful for the radial layout modes
            to fit all components into the same global circular layer structure
            instead of generating an individual circular layer structure for
            each component. 
            <p>
            Note that the layout is no longer stable on incremental changes if
            an invisible root is used. The layout heuristic cannot preserve the
            relative order of the components in this case. This means that the
            order of the components may change in subsequent layouts, and hence
            the next layout may look very different from the previous layout. 
            </p>
            <p>
            The default value is <see langword="false"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRoot(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetRootPreference(System.Object,System.Int32)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.IncrementalMode"/>
            <value>Whether an invisible root is used to combine components that
            are disconnected from each other.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.CategorizingLinks">
            <summary>
            Gets or sets whether the layout algorithm stores the categorization
            of links into forward, backward, and non-tree links.
            </summary>
            <remarks>
            If <see langword="true"/>, the next run of the layout algorithm
            makes the link categorization available through the methods
            <see cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcForwardTreeLinks"/>,
            <see cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcBackwardTreeLinks"/>, and
            <see cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcNonTreeLinks"/>. If
            <see langword="false"/>, the link categorization is not made
            available. This saves memory and is faster. In this case, the
            methods <see cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcForwardTreeLinks"/>,
            <see cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcBackwardTreeLinks"/>, and
            <see cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcNonTreeLinks"/> will return empty
            enumerations. 
            <p>
            The default value is <see langword="false"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <value>Whether the layout algorithm stores the categorization of
            links into forward, backward, and non-tree links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.NonTreeLinksStraight">
            <summary>
            Gets or sets whether all non-tree links that
            don't have the no-reshape link style and that are not fixed and are not incident to fixed nodes are reshaped to be straight.
            </summary>
            <remarks>
            Otherwise, the non-tree links are not changed at all. 
            <p>
            This option is disabled by default. When disabled, the tree layout only routes the links of the spanning tree, but no other link. When enabled, the tree layout iterates over the links obtained by <see cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcNonTreeLinks"/> and makes them straight. 
            </p>
            <p>
            It obeys the link clip interface and the link connection box interface when making the non-tree links straight. The tree layout can only obey the link style and the connector style of the tree links but not of the non-tree links. In particular, it is not able to route non-tree links orthogonally. Only tree-links can be routed orthogonally. Usually it is recommended to apply an additional link layout to the non-tree links if there are any. However, if the non-tree links should just be straight, this option comes in handy since an additional link layout can be omitted in this case. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.GetCalcNonTreeLinks"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LinkStyle"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.ConnectorStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.TreeLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.TreeLayoutLinkStyle)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/>
            '/&gt;
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>
            <value>Whether all non-tree links that
            don't have the no-reshape link style and that are not fixed and are not incident to fixed nodes are reshaped to be straight.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.PreserveFixedNodes">
            <summary>
            Gets or sets whether the layout avoids movement of fixed nodes.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/> for details.
            </remarks>
            <value>Whether the layout avoids movement of fixed nodes.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.PreserveFixedLinks">
            <summary>
            Gets or sets whether the layout avoids movement of fixed links.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/> for details.
            </remarks>
            <value>Whether the layout avoids movement of fixed links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.AllowedTime">
            <summary>
            Gets or sets the upper limit for the duration of the layout
            algorithm.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/> for details.
            </remarks>
            <value>The upper limit for the duration of the layout algorithm.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LayoutOfConnectedComponentsEnabled">
            <summary>
            Gets or sets whether the generic connected component layout
            mechanism is enabled.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/> for
            details.
            </remarks>
            <value>Whether the generic connected component layout mechanism is
            enabled.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.LinkConnectionBoxProvider">
            <summary>
            Gets or sets the link connection box interface for the connection
            points of links.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/> for details.
            </remarks>
            <value>The link connection box interface for the connection points
            of links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeLayout.Constraints">
            <summary>
            Gets a collection of constraints for the tree layout.
            </summary>
            <remarks>
            Constraints let the user customize the layout so that some graphic objects
            are kept side-by-side.
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.GraphLayout.TreeLayout.ConstraintsChanged">
            <summary>
            Occurs when the content of the <see cref="P:ILOG.Diagrammer.GraphLayout.TreeLayout.Constraints"/> property change.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.RulerVisibility">
            <summary>
            Specifies the visibility of rulers in a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> control.
            </summary>
            <remarks>
            Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.HRuler"/> 
            and <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.VRuler"/> properties of a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.RulerVisibility.Visible">
            <summary>
            The ruler is visible.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.RulerVisibility.Hidden">
            <summary>
            The ruler is hidden.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ScrollBarVisibility">
            <summary>
            Specifies how scrollbars will be displayed in a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> control.
            </summary>
            <remarks>
            Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.HScrollBar"/> 
            and <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramView.VScrollBar"/> properties
            of a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ScrollBarVisibility.Visible">
            <summary>
            The scrollbar is always visible.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ScrollBarVisibility.Hidden">
            <summary>
            The scrollbar is always hidden.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ScrollBarVisibility.AsNeeded">
            <summary>
            The scrollbar is visible only when needed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.GraphicObjectEditTextEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.GraphicObjectTextEditing"/> and
            <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.GraphicObjectTextEdited"/>
            events of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GraphicObjectEditTextEventArgs.CreateDefaultEditControl">
            <summary>
            Sets the <see cref="P:ILOG.Diagrammer.Windows.Forms.GraphicObjectEditTextEventArgs.EditControl"/> property to a default edit control.
            </summary>
            <remarks>The default implementation sets the <see cref="P:ILOG.Diagrammer.Windows.Forms.GraphicObjectEditTextEventArgs.EditControl"/> property to a <see cref="T:System.Windows.Forms.TextBox"/> control.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GraphicObjectEditTextEventArgs.ValidateTextEditing">
            <summary>
            Validates the text editing.
            </summary>
            <remarks>This method should be called only from a <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.GraphicObjectTextEdited"/> event handler.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GraphicObjectEditTextEventArgs.CancelTextEditing">
            <summary>
            Cancels the text editing.
            </summary>
            <remarks>This method should be called only from a <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.GraphicObjectTextEdited"/> event handler.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GraphicObjectEditTextEventArgs.GraphicObject">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.GraphicObject"/> being edited.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GraphicObjectEditTextEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the interaction should be canceled.
            </summary>
            <value><see langword="true"/> to specify that the interaction should be canceled; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GraphicObjectEditTextEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event has been handled.
            </summary>
            <value><see langword="true"/> to specify that the event was handled; otherwise, <see langword="false"/>.</value>
            <remarks>This property is used only with the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.GraphicObjectTextEdited"/> event.
            Set this property to <see langword="true"/> to indicate that text validation was handled.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GraphicObjectEditTextEventArgs.ValidateEditing">
            <summary>
            Gets or sets a value indicating whether the text editing should be validated.
            </summary>
            <value><see langword="true"/> to specify that the interaction should be validated; otherwise, <see langword="false"/>.</value>
            <remarks>This property is used only with the  <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.GraphicObjectTextEdited"/> event.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GraphicObjectEditTextEventArgs.EditControl">
            <summary>
            Gets or sets the control used to edit the text of the <see cref="P:ILOG.Diagrammer.Windows.Forms.GraphicObjectEditTextEventArgs.GraphicObject"/>.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Control"/> instance.</value>
            <remarks>The default value for this property is <see langword="null"/>. In this case, a default ghost graphic will be used.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GraphicObjectEditTextEventArgs.Bounds">
            <summary>
            Gets the bounds of the <see cref="P:ILOG.Diagrammer.Windows.Forms.GraphicObjectEditTextEventArgs.GraphicObject"/> in the view.
            </summary>
            <value>A <see cref="T:System.Drawing.Rectangle"/> structure.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.CreateGhostGraphicEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.CreateGhostGraphic"/>
            event of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CreateGhostGraphicEventArgs.CreateDefaultGhostGraphic">
            <summary>
            Sets the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGhostGraphicEventArgs.GhostGraphic"/> property to a default ghost graphic object.
            </summary>
            <remarks>The default implementation sets the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGhostGraphicEventArgs.GhostGraphic"/> property to a clone of <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGhostGraphicEventArgs.GraphicObject"/>, with a transparency
            of 50%.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreateGhostGraphicEventArgs.GraphicObject">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.GraphicObject"/> for which the ghost graphic is required.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CreateGhostGraphicEventArgs.GhostGraphic">
            <summary>
            Gets or sets the ghost graphic for the <see cref="P:ILOG.Diagrammer.Windows.Forms.CreateGhostGraphicEventArgs.GraphicObject"/> object.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>
            <remarks>The default value for this property is <see langword="null"/>. In this case, a default ghost graphic will be used.</remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ObjectMoveEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectMoving"/> and
            <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectMoved"/> events of a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ObjectMoveEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectMoving"/> and
            <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectMoved"/> events of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ObjectMoveEventArgs.GraphicObject">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.GraphicObject"/> being moved.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ObjectMoveEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the graphic object will be moved.
            </summary>
            <value><see langword="true"/> to specify that the graphic object will be moved; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ObjectMoveEventArgs.Location">
            <summary>
            Gets or sets the new location for the <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ObjectReparentEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectReparenting"/> and
            <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectReparented"/> events of a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ObjectReparentEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectReparenting"/> and
            <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectReparented"/> events of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ObjectReparentEventArgs.GraphicObject">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.GraphicObject"/> being reparented.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ObjectReparentEventArgs.DropTarget">
            <summary>
            Gets or sets the target container <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ObjectReparentEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the graphic object will be reparented.
            </summary>
            <value><see langword="true"/> to specify that the graphic object will be reparented; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ObjectReparentEventArgs.Location">
            <summary>
            Gets or sets the location where the <see cref="T:ILOG.Diagrammer.GraphicObject"/> is being dropped.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> structure, expressed in view coordinates.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ObjectCopyEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectCopying"/> and
            <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectCopied"/> events of a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ObjectCopyEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectCopying"/> and
            <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectCopied"/> events of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ObjectCopyEventArgs.GraphicObject">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.GraphicObject"/> being copied.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ObjectCopyEventArgs.Clone">
            <summary>
            Gets or sets the copy of <see cref="T:ILOG.Diagrammer.GraphicObject"/> that will be added.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ObjectCopyEventArgs.TargetContainer">
            <summary>
            Gets or sets the target <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ObjectCopyEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the graphic object will be copied.
            </summary>
            <value><see langword="true"/> to specify that the graphic object will be copied; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ObjectCopyEventArgs.Location">
            <summary>
            Gets or sets the location where the <see cref="T:ILOG.Diagrammer.GraphicObject"/> is being dropped.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> structure, expressed in view coordinates.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ObjectResizeEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectResizing"/> and
            <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectResized"/> events of a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ObjectResizeEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectResizing"/> and
            <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.SelectedObjectResized"/> events of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ObjectResizeEventArgs.GraphicObject">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.GraphicObject"/> being resized.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ObjectResizeEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the graphic object will be resized.
            </summary>
            <value><see langword="true"/> to specify that the graphic object will be resized; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ObjectResizeEventArgs.Bounds">
            <summary>
            Gets or sets the new bounds of the <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.QueryDropTargetEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.QueryDropTarget"/>
            event of a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.QueryDropTargetEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.QueryDropTarget"/>
            event of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.QueryDropTargetEventArgs.Source">
            <summary>
            Gets the graphic object being drag and dropped.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>        
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.QueryDropTargetEventArgs.Type">
            <summary>
            Gets the type of the graphic object being drag and dropped.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>        
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.QueryDropTargetEventArgs.DropTarget">
            <summary>
            Gets or sets the target container <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicContainer"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.QueryDropTargetEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the current interaction.
            </summary>
            <value><see langword="true"/> to cancel the current interaction; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.QueryDropTargetEventArgs.Location">
            <summary>
            Gets or sets the location where the graphic object is being dropped.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> structure, expressed in view coordinates.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.QuerySelectedObjectEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.QuerySelectedObject"/>
            event of a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.QuerySelectedObjectEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.QuerySelectedObject"/>
            event of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.QuerySelectedObjectEventArgs.Target">
            <summary>
            Gets the target of the selection.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>
            <remarks>This property references the object that was clicked on.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.QuerySelectedObjectEventArgs.SelectedObject">
            <summary>
            Gets or sets the selected object.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> instance.</value>
            <remarks>This property references the object that will be selected, considering the <see cref="P:ILOG.Diagrammer.Windows.Forms.QuerySelectedObjectEventArgs.Target"/> property.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.QuerySelectedObjectEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether to cancel the current interaction.
            </summary>
            <value><see langword="true"/> to cancel the current interaction; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.ResizeMode">
            <summary>
            Describes the different mode for resizing <see cref="T:ILOG.Diagrammer.GraphicObject"/> objects.
            </summary>
            <remarks>
            Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.GraphicObject.ResizeMode"/> 
            property of a <see cref="T:ILOG.Diagrammer.GraphicObject"/> object.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.ResizeMode.Resize">
            <summary>
            Specifies that resizing an object will change its geometry.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.ResizeMode.Zoom">
            <summary>
            Specifies that resizing an object will change its transform.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Orientation">
            <summary>
            Describes an enumeration that contains the vertical and horizontal orientations.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Orientation.Horizontal">
            <summary>
            Specifies the horizontal direction.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Orientation.Vertical">
            <summary>
            Specifies the vertical direction.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.VerticalTextAlignment">
            <summary>
            Defines vertical alignment values for text.
            </summary>
            <remarks>
            Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.TextAppearance.VerticalAlignment"/> 
            property of a <see cref="T:ILOG.Diagrammer.TextAppearance"/> object.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.VerticalTextAlignment.Baseline">
            <summary>
            Text is aligned on its baseline.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.VerticalTextAlignment.Center">
            <summary>
            Text is centered vertically.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.VerticalTextAlignment.Top">
            <summary>
            Text is aligned on top.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.VerticalTextAlignment.Bottom">
            <summary>
            Text is aligned on the bottom.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.HorizontalTextAlignment">
            <summary>
            Defines horizontal alignment values for text.
            </summary>
            <remarks>
            Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.TextAppearance.HorizontalAlignment"/> 
            property of a <see cref="T:ILOG.Diagrammer.TextAppearance"/> object.
            </remarks> 
        </member>
        <member name="F:ILOG.Diagrammer.HorizontalTextAlignment.Center">
            <summary>
            Text is centered horizontally.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.HorizontalTextAlignment.Left">
            <summary>
            Text is aligned on left.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.HorizontalTextAlignment.Right">
            <summary>
            Text is aligned on the right.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.LinkType">
            <summary>
            The link type passed to <see cref="M:ILOG.Diagrammer.GraphicObject.GetLinks(ILOG.Diagrammer.LinkType)"/>, used to select links
            starting on the object, ending on the object, or all links.
            </summary>
            <remarks>
            Use the values of this enumeration when calling the <see cref="M:ILOG.Diagrammer.GraphicObject.GetLinks(ILOG.Diagrammer.LinkType)"/> method
            on a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </remarks> 
        </member>
        <member name="F:ILOG.Diagrammer.LinkType.Starting">
            <summary>
            Returns links starting on the graphic object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.LinkType.Ending">
            <summary>
            Returns links ending on the graphic object.
            </summary>		
        </member>
        <member name="F:ILOG.Diagrammer.LinkType.StartingOrEnding">
            <summary>
            Returns all the links connected to the graphic object.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Visibility">
            <summary>
            Specifies the visibility of a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
            <remarks>
            Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.GraphicObject.Visibility"/> property
            of a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Visibility.Visible">
            <summary>
            The graphic object is visible.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Visibility.Hidden">
            <summary>
            The graphic object is not visible.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Visibility.Collapsed">
            <summary>
            The graphic object is not visible, and its bounds are not used anymore.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.CoordinateSpace">
            <summary>
            Represents the coodinate space in which some properties of the <see cref="T:ILOG.Diagrammer.Fill"/> or
            <see cref="T:ILOG.Diagrammer.Filter"/> class are expressed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.CoordinateSpace.UserSpaceOnUse">
            <summary>
            Represents the current coordinate space.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.CoordinateSpace.ObjectBBox">
            <summary>
            Represents a coordinate space where units are expressed relatively to the bounding
            box of the current graphic object. In this coordinate system (0,0) is mapped to the top-left
            corner of the graphic object and (1,1) to the bottom-right corner of the graphic object.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphicChange">
            <summary>
            Specifies the type of change that can occur on a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </summary>
            <remarks>
            Use the values of this enumeration when notifying a change in a graphic object by calling the
            <see cref="M:ILOG.Diagrammer.GraphicObject.OnGraphicChanging(ILOG.Diagrammer.GraphicChange)"/> and 
            <see cref="M:ILOG.Diagrammer.GraphicObject.OnGraphicChanged(ILOG.Diagrammer.GraphicChange)"/> method of a <see cref="T:ILOG.Diagrammer.GraphicObject"/>.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.AppearanceMask">
            <summary>
            The mask used to test graphic object appearance changes.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.StyledBoundsMask">
            <summary>
            The mask used to test graphic object styled bounds changes.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.BoundsMask">
            <summary>
            The mask used to test graphic object bounds changes.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.GeometryBoundsMask">
            <summary>
            The mask used to test graphic object geometry bounds changes.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.GeometryMask">
            <summary>
            The mask used to test graphic object geometry changes.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.TransformMask">
            <summary>
            The mask used to test graphic object transfomer changes.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.VisibilityMask">
            <summary>
            The mask used to test graphic object visibility changes.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.ZOrderMask">
            <summary>
            The mask used to test graphic object z-order changes.
            </summary>		
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.HierarchyMask">
            <summary>
            The mask used to test graphic object hierarchy changes.
            </summary>		
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.PropertyMask">
            <summary>
            The mask used to test property change events.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.BeginUpdateMask">
            <summary>
            The mask used to test begin update events.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.EndUpdateMask">
            <summary>
            The mask used to test end update events.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.UpdateMask">
            <summary>
            The mask used to test update events.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.None">
            <summary>
            The graphic object has not changed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.Appearance">
            <summary>
            The graphic object appearance has changed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.StyledBounds">
            <summary>
            The graphic object styled bounds have changed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.Bounds">
            <summary>
            The graphic object bounds has changed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.GeometryBounds">
            <summary>
            The graphic object geometry bound have changed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.Geometry">
            <summary>
            The graphic object geometry bounds have changed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.Transform">
            <summary>
            The graphic object transformer has changed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.Property">
            <summary>
            A graphic object property has changed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.BeginUpdate">
            <summary>
            A graphic object has started an update cycle.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphicChange.EndUpdate">
            <summary>
            A graphic object has started an update cycle.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FloatPercentConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.FloatPercentConverter"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FloatPercentConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">TypeConverter.CanConvertFrom</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FloatPercentConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">TypeConverter.CanConvertTo</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FloatPercentConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">TypeConverter.ConvertFrom</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FloatPercentConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">TypeConverter.ConvertTo</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.FloatPercentConverter.ParsePercent(System.String,System.Globalization.CultureInfo)">
            <summary>
            Parses the specified string into a <see cref="T:System.Single"/>.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="info">The culture.</param>
            <returns>A <see cref="T:System.Single"/> number.</returns>
            <remarks>The percent symbol is removed from the specified string. Then the string is converted to a 
            float, and the result is divided by <strong>100</strong>.</remarks>
        </member>
        <member name="T:ILOG.Diagrammer.ZoomConverter">
            <summary>
            Represents a type converter used to diaplay zoo factors as percentages.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.CornerRadius">
            <summary>
            Represents the radii of a rectangle's corners.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CornerRadius.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.CornerRadius"/> structure with the specified parameter.
            </summary>
            <param name="radius">The value for the bottom left, bottom right, top left and bottom right radii.</param>
        </member>
        <member name="M:ILOG.Diagrammer.CornerRadius.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.CornerRadius"/> structure with the specified parameter.
            </summary>
            <param name="topLeft">The top left radius.</param>
            <param name="topRight">The top right radius.</param>
            <param name="bottomLeft">the bottom left radius.</param>
            <param name="bottomRight">The bottom right radius.</param>
        </member>
        <member name="M:ILOG.Diagrammer.CornerRadius.Equals(System.Object)">
            <summary>
            This member overrides <see cref="M:System.Object.Equals(System.Object)">Object.Equals</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CornerRadius.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CornerRadius.ToString">
            <summary>
            This member overrides <see cref="M:System.Object.ToString">Object.ToString</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CornerRadius.op_Inequality(ILOG.Diagrammer.CornerRadius,ILOG.Diagrammer.CornerRadius)">
            <summary>
            Tests whether two <see cref="T:ILOG.Diagrammer.CornerRadius"/> structures have equal values.
            </summary>
            <param name="left">The <see cref="T:ILOG.Diagrammer.CornerRadius"/> structure that is to the left of the equality operator.</param>
            <param name="right">The <see cref="T:ILOG.Diagrammer.CornerRadius"/> structure that is to the right of the equality operator.</param>
            <returns><see langword="true"/> if the two specified <see cref="T:ILOG.Diagrammer.CornerRadius"/> structures have equal values;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.CornerRadius.op_Equality(ILOG.Diagrammer.CornerRadius,ILOG.Diagrammer.CornerRadius)">
            <summary>
            Tests whether two <see cref="T:ILOG.Diagrammer.CornerRadius"/> structures differ in radii values.
            </summary>
            <param name="left">The <see cref="T:ILOG.Diagrammer.CornerRadius"/> structure that is to the left of the inequality operator.</param>
            <param name="right">The <see cref="T:ILOG.Diagrammer.CornerRadius"/> structure that is to the right of the inequality operator.</param>
            <returns><see langword="true"/> if the two specified <see cref="T:ILOG.Diagrammer.CornerRadius"/> structures are unequal;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="F:ILOG.Diagrammer.CornerRadius.Empty">
            <summary>
            Represents an instance of the <see cref="T:ILOG.Diagrammer.CornerRadius"/> class with its members uninitialized.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.CornerRadius.TopLeft">
            <summary>
            Gets or sets the radius of the top left corner.
            </summary>
            <value>The radius of the top left corner.</value>
        </member>
        <member name="P:ILOG.Diagrammer.CornerRadius.TopRight">
            <summary>
            Gets or sets the radius of the top right corner.
            </summary>
            <value>The radius of the top right corner.</value>
        </member>
        <member name="P:ILOG.Diagrammer.CornerRadius.BottomLeft">
            <summary>
            Gets or sets the radius of the bottom left corner.
            </summary>
            <value>The radius of the bottom left corner.</value>
        </member>
        <member name="P:ILOG.Diagrammer.CornerRadius.BottomRight">
            <summary>
            Gets or sets the radius of the bottom right corner.
            </summary>
            <value>The radius of the bottom right corner.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Serialization.XmlSerializationProvider">
            <summary>
            A class that enables access to <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> implementations.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
            <summary>
            Gets a serializer using the specified attributes.
            </summary>
            <param name="manager">The serialization manager requesting the serializer.</param>
            <param name="currentSerializer">An instance of the current serializer of the specified type. This can be a 
            <see langword="null"/> reference if no serializer of the specified type exists.</param> 
            <param name="objectType">The data type of the object to serialize. </param>
            <param name="serializerType">The data type of the serializer to create.</param>
            <returns>An instance of a serializer of the type requested.</returns>
        </member>
        <member name="T:ILOG.Diagrammer.Serialization.XmlSerializationScopes">
            <summary>
            Defines the scopes of a serialization operation.
            </summary>
            <seealso cref="T:ILOG.Diagrammer.Serialization.XmlSerializerContext"/>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.XmlSerializationScopes.None">
            <summary>
            Specifies that the serialization operation should not serialize any information.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.XmlSerializationScopes.Properties">
            <summary>
            Specifies that the serialization operation should serialize only properties of the
            serialized instance.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.XmlSerializationScopes.Declaration">
            <summary>
            Specifies that the serialization operation should serialize only the class declaration 
            of the serialized instance.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Serialization.XmlSerializationScopes.Full">
            <summary>
            Specifies that the serialization operation should serialize both the class declaration
            and the properties of the serialized instance.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Serialization.XmlSerializerContext">
            <summary>
            Provides contextual information to the <see cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/> during a serialization operation.
            </summary>
            <remarks>A <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializerContext"/> can be used by serializers to exchange information with
            nested serializers. The current context, if any, is accessible from the <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context"/>
            property.<br/>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlSerializerContext.#ctor(System.ComponentModel.PropertyDescriptor,System.Object,ILOG.Diagrammer.Serialization.XmlSerializationScopes)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializerContext"/> class.
            </summary>
            <remarks>A <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializerContext"/> initialize with a <see cref="P:ILOG.Diagrammer.Serialization.XmlSerializerContext.PropertyDescriptor"/> 
            instance indicates that the current serialization operation describes a property.</remarks>
            <param name="descriptor">An optional <see cref="P:ILOG.Diagrammer.Serialization.XmlSerializerContext.PropertyDescriptor"/> instance.</param>
            <param name="instance">The instance being serialized.</param>
            <param name="scopeFlag">The serialization scope.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.XmlSerializerContext.SerializeClass">
            <summary>
            Gets whether the class declaration should be serialized by the current serialization operation.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.XmlSerializerContext.SerializeProperties">
            <summary>
            Gets whether the instance properties should be serialized by the current serialization operation.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.XmlSerializerContext.PropertyDescriptor">
            <summary>
            Gets the <see cref="T:System.ComponentModel.PropertyDescriptor"/> instance attached to this context.
            </summary>
            <remarks>A <see cref="T:System.ComponentModel.PropertyDescriptor"/> instance set on the serialization
            context indicates that the current serialization operation describes a property.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Serialization.XmlSerializerContext.Instance">
            <summary>
            Gets the instance being serialized.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Serialization.StringXmlSerializer">
            <summary>
            A class to serialize object that supports bi-directionnal string convertion.
            </summary>
            <remarks>The <see cref="T:ILOG.Diagrammer.Serialization.StringXmlSerializer"/> class uses the <see cref="T:System.ComponentModel.TypeConverter"/>
            associated with the data type of the object to serialize to perform the convertion from or
            to string.
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/>
            <seealso cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.StringXmlSerializer.Serialize(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Overrides the <see cref="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase.Serialize(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)">ObjectXmlSerializerBase.Serialize</see> member.
            </summary>
            <remarks>
            The <see cref="T:ILOG.Diagrammer.Serialization.StringXmlSerializer"/> class makes the disctinction between a property serialization
            and a stand-alone serialization. If a <see cref="T:System.ComponentModel.PropertyDescriptor"/> is available from the 
            serialization context, then the property value is serialized as a <see cref="T:System.Xml.XmlAttribute"/> of
            the parent node. Otherwise, the instance is serialiazed as an <see cref="T:System.Xml.XmlElement"/> that is appended
            to the parent node.
            </remarks>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="instance">The instance to serialize.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="parent">The parent node of this xml representation.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.StringXmlSerializer.Deserialize(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Overrides the <see cref="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase.Deserialize(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)">ObjectXmlSerializerBase.Deserialize</see> member.
            </summary>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="instance">The instance to initialize or <see langword="null"/> if the instance does not exist yet.</param>
            <param name="objectElement">The root node of this XML representation </param>
            <returns>An instance created and initialized from this XML representation.</returns>
        </member>
        <member name="T:ILOG.Diagrammer.Serialization.ArrayXmlSerializer">
            <summary>
            A class to serialize Array instances.
            </summary>
            <seealso cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/>
            <seealso cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ArrayXmlSerializer.Serialize(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Overrides the <see cref="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase.Serialize(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)">ObjectXmlSerializerBase.Serialize</see> member.
            </summary>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="instance">The instance to serialize.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="parent">The parent node of this xml representation.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ArrayXmlSerializer.Deserialize(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Overrides the <see cref="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase.Deserialize(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)">ObjectXmlSerializerBase.Deserialize</see> member.
            </summary>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="instance">The instance to initialize or <see langword="null"/> if the instance does not exist yet.</param>
            <param name="objectElement">The root node of this XML representation </param>
            <returns>An instance created and initialized from this XML representation.</returns>
        </member>
        <member name="T:ILOG.Diagrammer.Serialization.ListXmlSerializer">
            <summary>
            A class to serialize <see cref="T:System.Collections.IList"/> instances.
            </summary>
            <seealso cref="T:ILOG.Diagrammer.Serialization.ObjectXmlSerializerBase"/>
            <seealso cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ListXmlSerializer.SerializeProperties(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Overrides the <see cref="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializer.SerializeProperties(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Object,System.Xml.XmlDocument,System.Xml.XmlElement)">ObjectXmlSerializer.SerializeProperties</see> member.
            </summary>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="instance">The instance to serialize.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="parent">The parent node of this xml representation.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.ListXmlSerializer.DeserializeProperties(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Xml.XmlDocument,System.Object,System.Xml.XmlElement)">
            <summary>
            Overrides the <see cref="M:ILOG.Diagrammer.Serialization.ObjectXmlSerializer.DeserializeProperties(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Xml.XmlDocument,System.Object,System.Xml.XmlElement)">ObjectXmlSerializer.DeserializeProperties</see> member.
            </summary>
            <param name="manager">The <see cref="T:ILOG.Diagrammer.Serialization.XmlSerializationManager"/> instance that manages the serialization.</param>
            <param name="document">The <see cref="T:System.Xml.XmlDocument"/>.</param>
            <param name="instance">The instance to initialize or <see langword="null"/> if the instance does not exist yet.</param>
            <param name="objectElement">The root node of this XML representation </param>
            <returns>An instance created and initialized from this XML representation.</returns>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Rect">
            <summary>
            Represents a graphic object that displays a rectangle.
            </summary>
            <remarks>
            A <see cref="T:ILOG.Diagrammer.Graphic.Rect"/> object is a graphic object that displays a rectangle. The <see cref="P:ILOG.Diagrammer.Graphic.BoundedShape.Rectangle"/> property defines the geometry of 
            <see cref="T:ILOG.Diagrammer.Graphic.Rect"/> objects. The rectangle can be drawn with round corners through the <see cref="P:ILOG.Diagrammer.Graphic.Rect.Radius"/> property.
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample creates a light blue rounded rectangle with a black border.</para>
            <code lang="cs"> 
            Rect CreateRect()
            {
               Rect rect = new Rect(0, 0, 100, 100);
               rect.Radius = new Size2D(10, 10);
               rect.Fill = new SolidFill(Color.LightBlue);
               rect.Stroke = new Stroke(Color.Black, 2);
               return rect;
            }
            </code>
            <code lang="vbnet">
            Function CreateRect() As Rect 
              Dim rect As Rect = New Rect(0, 0, 100, 100) 
              rect.Radius = New Size2D(10, 10) 
              rect.Fill = New SolidFill(Color.LightBlue) 
              rect.Stroke = New Stroke(Color.Black, 2) 
              Return rect 
            End Function
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Rect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Rect"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Rect.#ctor(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Rect"/> class.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> that defines the object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Rect.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Rect"/> class.
            </summary>
            <param name="x">The x coordinate of the upper left corner.</param>
            <param name="y">The x coordinate of the upper left corner.</param>
            <param name="width">The rectangle width.</param>
            <param name="height">The rectangle height.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Rect.OnRadiusChanged(ILOG.Diagrammer.Size2D,ILOG.Diagrammer.Size2D)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Rect.Radius"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Rect.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Shape.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">Shape.UpdateGraphicsPath</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Rect.GetBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetBounds</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Rect.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestCore</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Rect.Radius">
            <summary>
            Gets or sets the radii of the corners of the rectangle.
            </summary>
            <value>Represents the radii of the corners of the rectangle. 
            The default value is <see cref="F:ILOG.Diagrammer.Size2D.Empty">Size2D.Empty</see>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Rect.RadiusChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Rect.Radius"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Rect.RadiusX">
            <summary>
            Gets or sets the x radius of the corners of the rectangle.
            </summary>
            <value>Represents the x radius of the corners of the rectangle. 
            The default value is <strong>0</strong>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Rect.RadiusY">
            <summary>
            Gets or sets the y radius of the corners of the rectangle.
            </summary>
            <value>Represents the y radius of the corners of the rectangle. 
            The default value is <strong>0</strong>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ILineShape">
            <summary>
            Defines an interface implemented by graphic objects that are defined by two points.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ILineShape.StartPoint">
            <summary>
            Gets or sets the line start point.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ILineShape.EndPoint">
            <summary>
            Gets or sets the line end point.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Line">
            <summary>
            Defines a graphic object that draws a line.
            </summary>
            <remarks><see cref="T:ILOG.Diagrammer.Graphic.Line"/> is a graphic object that represents a simple line. The two points that defines the line
            are represented by the <see cref="P:ILOG.Diagrammer.Graphic.Line.StartPoint"/> and <see cref="P:ILOG.Diagrammer.Graphic.Line.EndPoint"/> properties.</remarks>
            <example>
            <para lang="cs,vbnet">The following sample creates a dashed line from the point (100,100) to the point (200,200).</para>
            <code lang="cs">
            Line CreateLine()
            {
                Line line = new Line();
                line.StartPoint = new Point2D(100, 100);
                line.EndPoint = new Point2D(200, 200);
                line.Stroke = new Stroke(Color.Black, 2, DashStyle.Dash);
                return line;
            }
            </code>
            <code lang="vbnet">
            Function CreateLine() As Line 
                Dim line As Line = New Line 
                line.StartPoint = New Point2D(100, 100) 
                line.EndPoint = New Point2D(200, 200) 
                line.Stroke = New Stroke(Color.Black, 2, DashStyle.Dash) 
                Return line 
            End Function
            </code>
            </example>    
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Line.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Line"/> class using.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Line.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Line"/> class using the
            specified parameters.
            </summary>
            <param name="x1">The x-coordinate of the first point of the line.</param>
            <param name="y1">The y-coordinate of the first point of the line.</param>
            <param name="x2">The x-coordinate of the second point of the line.</param>
            <param name="y2">The y-coordinate of the second point of the line.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Line.#ctor(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Line"/> class using the
            specified parameters.
            </summary>
            <param name="p1">A <see cref="T:ILOG.Diagrammer.Point2D"/> that defines the first point of the line.</param>
            <param name="p2">A <see cref="T:ILOG.Diagrammer.Point2D"/> that defines the second point of the line.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Line.GetBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetBounds</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Line.StartPoint">
            <summary>
            Gets or sets the first point of the line.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> object that represents the first point of the line.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Line.EndPoint"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Line.EndPoint">
            <summary>
            Gets or sets the second point of the line.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> object that represents the second point of the line.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.Line.StartPoint"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Line.Fill">
            <summary>
            This member redefines <see cref="P:ILOG.Diagrammer.Graphic.Shape.Fill">Shape.Fill</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Line.Points">
            <summary>
            This member redefines <see cref="P:ILOG.Diagrammer.Graphic.PolyPoints.Points">PolyPoints.Points</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Line.HasFixedNumberOfPoints">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Graphic.PolyPoints.HasFixedNumberOfPoints">PolyPoints.HasFixedNumberOfPoints</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Line.HasPreferredWidth">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth">GraphicObject.HasPreferredWidth</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Line.HasPreferredHeight">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight">GraphicObject.HasPreferredHeight</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.LineSelectionGraphic">
            <summary>
            The selection class dedicated to objects implementing the <see cref="T:ILOG.Diagrammer.Graphic.ILineShape"/> interface.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LineSelectionGraphic.#ctor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.LineSelectionGraphic"/> class.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is selected.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LineSelectionGraphic.IsTypeSupported(System.Type)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.SelectionGraphic.IsTypeSupported(System.Type)">SelectionGraphic.IsTypeSupported</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LineSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleDescription(System.Int32,ILOG.Diagrammer.DefaultSelectionGraphic.HandleDescriptionType)">DefaultSelectionGraphic.GetHandleDescription</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LineSelectionGraphic.GetHandlePoints">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandlePoints">DefaultSelectionGraphic.GetHandlePoints</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LineSelectionGraphic.GetHandleType(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleType(System.Int32)">DefaultSelectionGraphic.GetHandleType</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LineSelectionGraphic.GetHandleCursor(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleCursor(System.Int32)">DefaultSelectionGraphic.GetHandleCursor</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LineSelectionGraphic.GetHandleMovingCursor(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.GetHandleMovingCursor(System.Int32)">DefaultSelectionGraphic.GetHandleMovingCursor</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LineSelectionGraphic.IsHandleVisible(System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.IsHandleVisible(System.Int32)">DefaultSelectionGraphic.IsHandleVisible</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LineSelectionGraphic.DoMovePoint(System.Boolean,ILOG.Diagrammer.Point2D)">
            <summary>
            Is called when the handle corresponding to the specified point is moved.
            </summary>
            <param name="start"><see langword="true"/> if the point being moved is the start point; Otherwise,
            <see langword="false"/>.</param>
            <param name="point">The new location for the specified point of the selected object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LineSelectionGraphic.MoveHandle(System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.MoveHandle(System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">DefaultSelectionGraphic.MoveHandle</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LineSelectionGraphic.OnInteractionStarted">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnInteractionStarted">DefaultSelectionGraphic.OnInteractionStarted</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LineSelectionGraphic.OnInteractionValidated">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.OnInteractionValidated">DefaultSelectionGraphic.OnInteractionValidated</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LineSelectionGraphic.RaisePointsChanging">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.RaisePointsChanging">PolyPointsSelectionGraphic.RaisePointsChanging</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LineSelectionGraphic.RaisePointsChanged">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.PolyPointsSelectionGraphic.RaisePointsChanged">PolyPointsSelectionGraphic.RaisePointsChanged</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LineSelectionGraphic.ValidateGhostGraphic(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.DefaultSelectionGraphic.ValidateGhostGraphic(ILOG.Diagrammer.GraphicObject)">DefaultSelectionGraphic.ValidateGhostGraphic</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LineSelectionGraphic.CanEditSelectedObjectPoints">
            <summary>
            Gets or sets a value indicating whether it's possible to move points from the selected object
            by clicking the corresponding selection handle and dragging it.
            </summary>
            <value><see langword="true"/> to enable points to be moved; Otherwise, <see langword="false"/>.
            The default value inherits from the
            <see cref="P:ILOG.Diagrammer.SelectionStyle.CanEditShape">SelectionStyle.CanEditShape</see> property.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LineSelectionGraphic.ShowBorder">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.DefaultSelectionGraphic.ShowBorder">DefaultSelectionGraphic.ShowBorder</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LineSelectionGraphic.CanRotateSelectedObject">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.DefaultSelectionGraphic.CanRotateSelectedObject">DefaultSelectionGraphic.CanRotateSelectedObject</see>
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.EdgeMode">
            <summary>
            Defines the edge mode for the <see cref="T:ILOG.Diagrammer.Filters.FeConvolveMatrix"/> filter.
            </summary>
            <remarks>Use the value of this enumeration to define the edge mode for the convolution in the
            <see cref="P:ILOG.Diagrammer.Filters.FeConvolveMatrix.EdgeMode"/> property of 
            the <see cref="T:ILOG.Diagrammer.Filters.FeConvolveMatrix"/> class.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.EdgeMode.Duplicate">
            <summary>
            Indicates that the input image is extended along each of 
            its borders as necessary by duplicating
            the color values at the given edge of the input image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.EdgeMode.Wrap">
            <summary>
            Indicates that the input image is extended 
            by taking the color values from the opposite edge of the image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.EdgeMode.None">
            <summary>
            Indicates that the input image is extended with pixel values of zero for R, G, B and A.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeConvolveMatrix">
            <summary>
            Defines a matrix convolution filter effect.
            </summary>
            <remarks>
            A convolution combines pixels in the input image with neighboring pixels to produce a
            resulting image. A wide variety of imaging operations can be achieved through convolutions,
            including blurring, edge detection, sharpening,
            embossing and beveling.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeConvolveMatrix.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeConvolveMatrix"/> filter effect.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeConvolveMatrix.#ctor(ILOG.Diagrammer.Filters.Kernel)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeConvolveMatrix"/> filter effect with the specified kernel.
            </summary>
            <param name="kernel">The convolution kernel.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeConvolveMatrix.#ctor(ILOG.Diagrammer.Filters.Kernel,System.Single,System.Single)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeConvolveMatrix"/> filter effect with the specified kernel, divisor and bias.
            </summary>
            <param name="kernel">The convolution kernel.</param>
            <param name="divisor">The divisor property.</param>
            <param name="bias">The bias property.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeConvolveMatrix.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeConvolveMatrix"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeConvolveMatrix.Clone">
            <summary>
            Creates a copy of the filter effect.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeConvolveMatrix.ToString">
            <summary>
            Returns a short description of this filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeConvolveMatrix.Kernel">
            <summary>
            Gets or sets the kernel matrix.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Filters.Kernel"/> object
            that represents the kernel matrix of the convolution.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeConvolveMatrix.Divisor">
            <summary>
            Gets or sets the divisor of the convolve operation.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeConvolveMatrix.Bias">
            <summary>
            Gets or sets the bias of the convolve operation.
            </summary>
            <value>
            After applying the kernel matrix to the input image to yield a 
            number and applying the divisor, the bias attribute is
            added to each component. One application of bias is when it is desirable to 
            have .5 gray value be the zero response
            of the filter.  The default value is zero.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeConvolveMatrix.EdgeMode">
            <summary>
            Gets or sets the edge mode that determines how to extend the input 
            image as necessary with color values 
            so that the matrix operations can be applied when the kernel 
            is positioned at or near the edge of the input image.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Filters.EdgeMode"/> values that 
            determines how to extend the input 
            image as necessary with color values 
            so that the matrix operations can be applied when the kernel 
            is positioned at or near the edge of the input image. The
            default value is <see cref="F:ILOG.Diagrammer.Filters.EdgeMode.Duplicate"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeConvolveMatrix.PreserveAlpha">
            <summary>
            Indicates whether the convolution preserve the alpha channel or not.
            </summary>
            <value>
            A value of <see langword="false"/> indicates that the convolution 
            will apply to all channels, including the alpha channel.
            A value of <see langword="true"/> indicates that the convolution 
            will only apply to the color channels. In this case, the 
            filter will temporarily unpremultiply the color component 
            values, apply the kernel, and then re-premultiply at the end.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeConvolveMatrix.Inputs">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.FilterEffect.Inputs">FilterEffect.Inputs</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeConvolveMatrix.In">
            <summary>
            Gets or sets the source of this filter effect.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil">
            <summary>
            <strong>GraphModelUtil</strong> is a collection of static utilities
            for methods on the graph model.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.GetPointAt(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object,System.Int32)">
            <summary>
            Returns the point of a link at a specified index.
            </summary>
            <remarks>
            Returns the point of a link at a specified index.
            The values of indexes start from zero, which must correspond to the
            connection point of the link on its origin node.
            The last point on the link must correspond to the connection point
            of the link on its destination node.
            The method must work for normal links and intergraph links.
            </remarks>
            <param name="model">The graph model.
            </param>
            <param name="link">The link.
            </param>
            <param name="index">The index of the bend or connection point
            of the link.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.ReshapeLink(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout,System.Object,System.Int32,ILOG.Diagrammer.GraphLayout.Internal.InternalPoint,ILOG.Diagrammer.GraphLayout.Internal.InternalPoint[],System.Int32,System.Int32,ILOG.Diagrammer.GraphLayout.Internal.InternalPoint)">
            <summary>
            Reshapes the points of a link.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.DeleteIntermediatePointsOnLinks(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Deletes all the intermediate points (if any) of all the links.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.GetLinkPoints(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)">
            <summary>
            Returns the points of a link as InternalPoint.        
            </summary>        
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.GetNodesAndLinks(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Returns the nodes and links of the graph model.
            </summary>
            <remarks>
            Returns the nodes and links of the graph model.
            Modifying the resulting collection does not modify the graph model.
            </remarks>
            <param name="model">The graph model.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.GetLinks(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)">
            <summary>
            Returns the links incident to a node of the graph model.
            </summary>
            <remarks>
            Returns the links incident to a node of the graph model.
            These are those links that have as origin or destination the
            input node.
            Modifying the resulting collection does not modify the graph model.
            </remarks>
            <param name="model">The graph model.
            </param>
            <param name="node">The node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.GetNeighbors(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)">
            <summary>
            Returns the neighbor nodes of a node.
            </summary>
            <remarks>
            Returns the neighbor nodes of a node.
            These are the nodes that have a common normal link with
            <paramref name='node'/>.
            This method does not consider intergraph links.
            <p>
            In the case where a link that is incident to
            <paramref name='node'/> is a self-link (that is, a link whose
            origin and destination are the same node), the result does not 
            contain <paramref name='node'/>.
            </p><p>
            In the case of multiple links between <paramref name='node'/>
            and one of its neighbors, the neighbor is contained in the
            result the number of times equal to the number of links.
            </p><p>
            Modifying the resulting collection does not modify the graph model.
            </p>
            </remarks>
            <param name="model">The graph model.
            </param>
            <param name="node">The node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.GetNodeDegree(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)">
            <summary>
            Returns the node degree.
            </summary>
            <remarks>
            Returns the node degree.
            This is the number of neighbors of the
            <paramref name='node'/>.
            However, if a node is multiple times a neighbor, it is counted
            only once.
            </remarks>
            <param name="model">The graph model.
            </param>
            <param name="node">The node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.GetOpposite(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object,System.Object)">
            <summary>
            Returns the opposite node on a link.
            </summary>
            <remarks>
            Returns the opposite node on a link.
            This method works for intergraph links as well. Notice that for
            intergraph links, the input node and the returned node may not be
            nodes of this graph model (that is,
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsNode(System.Object)"/> may return
            <see langword="false"/>).
            </remarks>
            <param name="model">The graph model.
            </param>
            <param name="link">The link.
            </param>
            <param name="node">The one end node node.
            </param>
            <returns>
            The other end node.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.IsLinkBetween(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object,System.Object)">
            <summary>
            Tests whether a normal link exists between two nodes. 
            </summary>
            <remarks>
            Tests whether a normal link exists between two nodes. 
            The method does not check for intergraph links.
            </remarks>
            <param name="model">The graph model.
            </param>
            <param name="node1">The first node.
            </param>
            <param name="node2">The second node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.BoundingBox(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Returns the bounding box of all nodes and links.
            </summary>
            <param name="model">The graph model.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.BoundingBoxAsRectangle2D(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Returns the bounding box of all nodes and links.
            </summary>
            <param name="model">The graph model.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.BoundingBox(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)">
            <summary>
            Returns the bounding rectangle of a node or a link.
            </summary>
            <remarks>
            Returns the bounding rectangle of a node or a link.
            The method must work for normal links and intergraph links.
            <p>
            Note that the returned rectangle
            may be modified by internal methods of IBM ILOG Diagram for .NET.
            </p>p&gt;
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsLink(System.Object)">
            </seealso>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)">
            </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.Move(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Single,System.Single)">
            <summary>
            Moves the entire graph.
            </summary>
            <remarks>
            The method moves the nodes and the intermediate
            points of the links so that the new bounding box of the graph
            has the top-left corner at the coordinates <strong>(x, y)</strong>.
            </remarks>
            <param name="model">The graph model.
            </param>
            <param name="x"> The new x position of the graph.
            </param>
            <param name="y"> The new y position of the graph.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.ApplyLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout,System.Boolean)">
            <summary>
            Calls the layout of the input layout. This is the replacement of
            IlvGraphModel.applyLayout(IlvGraphLayout, boolean).
            </summary>      
            <param name="model">The graph model.
            </param>
            <param name="layout"> The layout.
            </param>
            <param name="redraw"> The redraw argument.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.BeforeLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout,System.Boolean)">
            <summary>
            Notifies the graph model that a layout session has been started. 
            This is the replacement of IlvGraphModel.beforeLayout(IlvGraphLayout, boolean).
            </summary>      
            <param name="model">The graph model.
            </param>
            <param name="layout"> The layout.
            </param>
            <param name="redraw"> Whether the graph is redrawn after layout.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.AfterLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphLayout,System.Boolean)">
            <summary>
            Notifies the graph model that a layout session has been finished. 
            This is the replacement of IlvGraphModel.afterLayout(IlvGraphLayout, boolean).
            </summary>      
            <param name="model">The graph model.
            </param>
            <param name="layout"> The layout.
            </param>
            <param name="redraw"> Whether the graph is redrawn after layout.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.PerformLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.ILayoutProvider,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies layout instances recursively to this graph model.
            This is the replacement of 
            IlvGraphModel.performLayout(IlvLayoutProvider layoutProvider,
            boolean force, boolean redraw, boolean traverse).
            </summary>              
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.PerformLayout(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.ILayoutProvider,ILOG.Diagrammer.GraphLayout.GraphLayout,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Applies layout instances recursively to this graph model.
            This is the replacement of 
            IlvGraphModel.performLayout(IlvLayoutProvider layoutProvider,
            IlvGraphLayout recursiveLayout, boolean force, boolean redraw, boolean traverse).
            </summary>       
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.GraphModelUtil.SetContentsAdjusting(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Boolean,System.Boolean)">
            <summary>
            Allows you to start a series of changes. 
            This is the replacement of IlvGraphModel.setContentsAdjusting(boolean, boolean).
            </summary>      
            <param name="model">The graph model.
            </param>
            <param name="adjusting"> Whether it is adjusting.
            </param>
            <param name="withParents"> Whether the parents need adjusting too.
            </param>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.TreeConstraint">
            <summary>
            The <see cref="T:ILOG.Diagrammer.GraphLayout.TreeConstraint"/> class defines a constraint that keeps
            two nodes side-by-side during a <see cref="T:ILOG.Diagrammer.GraphLayout.TreeLayout"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.TreeConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.GraphLayout.TreeConstraint"/> class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeConstraint.FirstSubject">
            <summary>
            Gets or sets the node that must be kept on the West side of the tree.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeConstraint.SecondSubject">
            <summary>
            Gets or sets the node that must be kept on the East side of the tree.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.TreeConstraint.Priority">
            <summary>
            Gets or sets the priority of the constraint.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle">
            <summary>
            Defines the link style options for the link layout algorithms.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.LinkStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.LongLinkLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle)"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Orthogonal">
            <summary>
            Orthogonal link style.
            </summary>
            <remarks>        
            In this style, the links have an orthogonal shape, that is, a shape
            consisting of a sequence of alternating horizontal and vertical
            line segments.
            This style can be used as global mode affecting all links, or as
            local mode affecting only individual links.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Direct">
            <summary>
            Direct link style.
            </summary>
            <remarks>
            In this style,
            the links get a nearly straight-line shape. The shape of the links is
            a polyline composed of a straight-line segment between the end nodes with
            two short horizontal or vertical segments at its ends.
            This style can be used as global mode affecting all links, or as
            local mode affecting only individual links.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Mixed">
            <summary>
            Mixed link style.
            </summary>
            <remarks>
            In this style, each link can have a different link style.       
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.NoReshape">
            <summary>
            No reshape style.
            </summary>
            <remarks>
            In this style, the link is not reshaped.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Design.GraphicContainerDesigner">
            <summary>
            Extends the design mode behavior of a <see cref="T:ILOG.Diagrammer.GraphicContainer"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicContainerDesigner.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Design.GraphicContainerDesigner"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicContainerDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.Design.ComponentDesigner.Initialize(System.ComponentModel.IComponent)">ComponentDesigner.Initialize</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicContainerDesigner.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.Design.ComponentDesigner.Dispose(System.Boolean)">ComponentDesigner.Dispose</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicContainerDesigner.PreFilterProperties(System.Collections.IDictionary)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.Design.ComponentDesigner.PreFilterProperties(System.Collections.IDictionary)">ComponentDesigner.PreFilterProperties</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicContainerDesigner.PostFilterProperties(System.Collections.IDictionary)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.Design.ComponentDesigner.PostFilterProperties(System.Collections.IDictionary)">ComponentDesigner.PostFilterProperties</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicContainerDesigner.RaiseChildrenChanging">
            <summary>
            Must be called before modifying the children collection of the container.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicContainerDesigner.GetChildrenPropertyDescriptor">
            <summary>
            Returns the <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the children of the container.
            </summary>
            <returns>The default behavior tries to locate the <strong>Objects</strong> property on the container.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicContainerDesigner.RaiseChildrenChanged">
            <summary>
            Must be called after modifying the children collection of the container.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicContainerDesigner.OnComponentRemoving(System.Object,System.ComponentModel.Design.ComponentEventArgs)">
            <summary>
            Called when a component is being removed by the designer host.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicContainerDesigner.OnComponentRemoved(System.Object,System.ComponentModel.Design.ComponentEventArgs)">
            <summary>
            Called when a component is removed by the designer host.
            If the component is a graphic object, removes the object from the canvas.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicContainerDesigner.CreateDropHighlightPen">
            <summary>
            Creates and returns a <see cref="T:System.Drawing.Pen"/> that will be used to highlight the container during an interaction.
            </summary>
            <returns>A new <see cref="T:System.Drawing.Pen"/> instance.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicContainerDesigner.GetDropHighlightBounds">
            <summary>
            Returns the bounds of the area to highlight during a reparenting interaction.
            </summary>
            <returns>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicContainerDesigner.OnPaintDropHightlight(System.Drawing.Graphics)">
            <summary>
            Is called to paint highlight of the container during a reparenting interaction.
            </summary>
            <param name="g">The graphic context.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Design.GraphicContainerDesigner.CreateActionList">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Design.GraphicObjectDesigner.CreateActionList"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ILOG.Diagrammer.Design.GraphicContainerDesigner.AssociatedComponents">
            <summary>
            This member overrides <see cref="P:System.ComponentModel.Design.ComponentDesigner.AssociatedComponents">ComponentDesigner.AssociatedComponents</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Design.GraphicContainerDesigner.GraphState">
            <summary>
            This property is used for the implementation of the fast undo/redo of graph layout.
            </summary>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.RandomLayout">
            <summary>
            The main class for the Random Layout algorithm.
            </summary>
            <remarks> 
            <p>
            This is the simplest layout algorithm. The nodes are moved at
            randomly computed positions inside a user-defined region which can be
            specified by the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/>.  
            </p>
            <p>
            Sample drawing produced by the Random Layout algorithm:
            <CENTER><IMG SRC="images/GraphLayout/layout-17-cycles-before.gif" BORDER="0" ALIGN="BOTTOM"/></CENTER>
            
            </p>
            <p>
            See the corresponding chapter of the User's Manual for details on the
            algorithm, the types of graphs for which this algorithm can be used,
            the features and limitations, code samples, and so on. 
            </p>
            <p>
            Note that the initial position of the nodes (at the moment you start
            the layout) does not affect the resulting layout. However, nodes
            specified as fixed are  not moved if you set the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/>
            to <see langword="true"/>. 
            </p>
            </remarks>
            <example>
            <para lang="cs,vbnet">The following example shows how to apply 
            the Random Layout.</para>
            <code lang="cs">
            using System;
            using ILOG.Diagrammer;
            using ILOG.Diagrammer.Graphic;
            using ILOG.Diagrammer.GraphLayout; 
            
            Group group = new Group();
            
            // Fill the group with nodes and links here
            
            RandomLayout layout = new RandomLayout();
            group.GraphLayout = layout;
            group.PerformGraphLayout(); 
            </code>
            <code lang="vbnet">
            Imports System
            Imports ILOG.Diagrammer
            Imports ILOG.Diagrammer.Graphic
            Imports ILOG.Diagrammer.GraphLayout
            
            Dim group As Group = New Group 
            
            ' Fill the group with nodes and links here
            
            Dim layout As RandomLayout = New RandomLayout
            group.GraphLayout = layout
            group.PerformGraphLayout
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RandomLayout.#ctor">
            <summary>
            Creates a new instance of the Random Layout algorithm.
            </summary>
            <remarks>
            <br/>To indicate the graphic container you want to lay out, use the
            method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>.
            <br/>To indicate the graph model you want to lay out, use the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            <br/>To perform the layout, use the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            <br/>To modify the layout parameters, use the different methods
            provided in this class and its superclass. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Filter"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RandomLayout.Init">
            <summary>
            Initializes instance variables.
            </summary>
            <remarks> 
            <p>
            You should not call this method directly. The method is called
            internally by the constructor without arguments and by the copy
            constructor. The method must be overridden by subclasses that need
            to initialize additional instance variables. 
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RandomLayout.#ctor(ILOG.Diagrammer.GraphLayout.RandomLayout)">
            <summary>
            Creates a new layout instance by copying an existing one.
            </summary>
            <remarks>
            This constructor is used by the <see cref="M:ILOG.Diagrammer.GraphLayout.RandomLayout.Copy"/>
            method. Any subclass should provide a copy constructor. 
            <p>
            The parameters of the <strong>source</strong> layout are copied
            using the method <see cref="M:ILOG.Diagrammer.GraphLayout.RandomLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>. 
            </p>
            </remarks>
            <param name="source"> The layout instance that is copied.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RandomLayout.Copy">
            <summary>
            Copies the layout instance.
            </summary>
            <remarks> 
            <p>
            This method copies the layout instance by calling the copy
            constructor. 
            </p>
            <p>
            When performing a recursive layout on a nested graph, this method is
            used by <see cref="T:ILOG.Diagrammer.GraphLayout.ILayoutProvider"/> to
            "clone" the layout instance of a parent graph. 
            </p>
            <p>
            Note that the parameters which are specific to a node or a link are
            not copied. The other parameters, including the layout region
            specification and the link clip and link connection box interfaces,
            are also copied. 
            </p>
            <p>
            If a method of the type <strong>SupportsXXX</strong> is associated
            with a parameter, the parameter is copied only if the corresponding
            method returns <see langword="true"/>. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RandomLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            <returns>A copy of the layout instance.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RandomLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Copies the parameters from a given layout instance.
            </summary>
            <remarks> 
            <p>
            Note that the parameters which are specific to a node or a link are
            not copied. The other parameters, including the layout region
            specification and the customization interfaces, are also copied. 
            </p>
            <p>
            If a method of the type <strong>SupportsXXX</strong> is associated
            with a parameter, the parameter is copied only if the corresponding
            method returns <see langword="true"/>. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.RandomLayout.Copy"/>
            <param name="source"> The layout instance from which the parameters
            are copied.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RandomLayout.Layout">
            <summary>
            Computes the layout using the Random Layout algorithm.
            </summary>
            <remarks>
            To start the layout, call the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RandomLayout.SupportsPreserveFixedNodes">
            <summary>
            Indicates that this layout class allows the user to specify fixed
            nodes.
            </summary>
            <remarks>
            Fixed nodes are not moved during the layout if the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/>
            is set to <see langword="true"/>. 
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/>
            '/&gt;
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RandomLayout.SupportsLayoutRegion">
            <summary>
            Indicates that this layout class can control the size of the drawing
            of the graph to fit (exactly or approximately) a user-defined region
            (a rectangle) or a user-defined view.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetSpecLayoutRegion"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetCalcLayoutRegion"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.GraphLayout"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RandomLayout.SupportsPercentageComplete">
            <summary>
            Indicates that this layout class can estimate the percentage of
            completion during the run of the layout.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IncreasePercentageComplete(System.Int32)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.PercentageComplete"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RandomLayout.SupportsRandomGenerator">
            <summary>
            Indicates that this layout class uses randomly generated numbers
            that can be initialized with a user-defined seed value.
            </summary>
            <remarks>
            When you perform the layout several times on the same graph and use
            the same user-defined seed value, you obtain the same drawing of the
            graph. If you want different drawings each time you perform the
            layout, you should modify the seed value and set the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.UseSeedValueForRandomGenerator"/>
            to <see langword="true"/>. 
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.SeedValueForRandomGenerator"/>
            '/&gt;
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.UseSeedValueForRandomGenerator"/>
            '/&gt;
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RandomLayout.SupportsAllowedTime">
            <summary>
            Indicates that this layout class can stop the layout computation
            when the user-defined allowed time is exceeded.
            </summary>
            <remarks>
            The result code in the layout report is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/> in this case. 
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/>
            '/&gt;
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.RandomLayout.SupportsStopImmediately">
            <summary>
            Indicates that this layout class can interrupt the current run of
            the layout immediately in a controlled way.
            </summary>
            <remarks>
            The result code in the layout report is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/> in this case. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.StopImmediately"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsStoppedImmediately"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RandomLayout.LinkStyle">
            <summary>
            Gets or sets the style of the shape of the links.
            </summary>
            <remarks>
            Valid values are <see cref="F:ILOG.Diagrammer.GraphLayout.RandomLayoutLinkStyle.Straight"/> (the
            links are given a straight-line shape) and
            <see cref="F:ILOG.Diagrammer.GraphLayout.RandomLayoutLinkStyle.NoReshape"/> (no reshape is
            performed on the links). 
            <p>
            This feature can be useful if the graph contains links that have
            intermediate points and are not straight-line links; for instance,
            <see cref="T:ILOG.Diagrammer.Graphic.Link"/> links with shape type
            <see cref="F:ILOG.Diagrammer.Graphic.LinkShapeType.Free"/> with
            intermediate points. 
            </p>
            <p>
             
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.RandomLayoutLinkStyle.Straight"/>. 
            </p>
            </remarks>
            <value>The style of the shape of the links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RandomLayout.PreserveFixedNodes">
            <summary>
            Gets or sets whether the layout avoids movement of fixed nodes.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/> for details.
            </remarks>
            <value>Whether the layout avoids movement of fixed nodes.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RandomLayout.AllowedTime">
            <summary>
            Gets or sets the upper limit for the duration of the layout
            algorithm.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/> for details.
            </remarks>
            <value>The upper limit for the duration of the layout algorithm.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RandomLayout.LayoutRegion">
            <summary>
            Gets or sets the layout region.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/> for details.
            </remarks>
            <value>The layout region.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RandomLayout.LayoutRegionMode">
            <summary>
            Gets or sets the layout region mode.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegionMode"/> for details.
            </remarks>
            <value>The layout region mode.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.RandomLayout.UseSeedValueForRandomGenerator">
            <summary>
            Gets or sets whether the user-defined seed value should be used for
            the random generator.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.UseSeedValueForRandomGenerator"/> for
            details.
            </remarks>
            <value>Whether the user-defined seed value should be used for the
            random generator.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.RandomLayoutLinkStyle">
            <summary>
            The styles that define the shape for the links when using the Random
            layout algorithm.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.RandomLayout.LinkStyle"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.RandomLayoutLinkStyle.Straight">
            <summary>
            Straight-line links shape option.
            </summary>
            <remarks>
            When used as an argument of <see cref="P:ILOG.Diagrammer.GraphLayout.RandomLayout.LinkStyle"/>,
            the links are given a straight-line shape. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.RandomLayoutLinkStyle.NoReshape">
            <summary>
            No links reshape option.
            </summary>
            <remarks>
            When used as an argument of <see cref="P:ILOG.Diagrammer.GraphLayout.RandomLayout.LinkStyle"/>,
            the links are not reshaped. 
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GridLayout">
            <summary>
            The main class for the Grid Layout algorithm.
            </summary>
            <remarks> 
            <p>
            The Grid Layout algorithm has two major modes: <b>grid</b> and
            <b>row/column</b>. (For details, see the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode"/>.) In <b>grid</b> mode, the layout
            arranges the nodes of a graph in the cells of a grid (matrix). If a
            node is too large to fit into one grid cell (with a margin), it
            occupies multiple cells. The size of the grid cells can be specified
            using the properties <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.HorizontalGridOffset"/>
            and <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.VerticalGridOffset"/>. The margins can be
            specified using the properties <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.TopMargin"/>,
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.BottomMargin"/>,
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LeftMargin"/>, and
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.RightMargin"/>. 
            </p>
            <p>
            The following sample drawing shows a layout in the grid mode where
            the grid size has been specified so that each node fits into one grid
            cell. (Usually such layouts are more esthetic and appear to be more
            regular, but a larger area is left empty around the smallest nodes.
            This is generally the best option when all the nodes have the same
            size.) <CENTER>
            <IMG SRC="images/GraphLayout/layout-Grid-Small-Center-Center-MaxNodeSize.gif" BORDER="0" ALIGN="BOTTOM"/>
            </CENTER> The following sample drawing shows a layout in the grid
            mode where the grid size has been specified so that some nodes fit
            into one grid cell and other nodes occupy multiple cells. (Usually
            such layouts take less space if the nodes have a heterogeneous size.)
            <CENTER>
            <IMG SRC="images/GraphLayout/layout-Grid-Small-Center-Center-MeanNodeSize.gif" BORDER="0" ALIGN="BOTTOM"/>
            </CENTER> The following diagram shows the dimensional parameters of
            the layout in grid mode. <CENTER>
            <IMG SRC="images/GraphLayout/layout-Grid-DimensionalParamsWithoutNodeBox.gif" BORDER="0" ALIGN="BOTTOM"/>
            </CENTER> 
            </p>
            <p>
            In <b>row/column</b> mode, the layout arranges the nodes of a graph
            either by rows or by columns (according to the specified option). The
            width of the rows is controlled by the width of the layout region
            parameter. The height of the columns is controlled by the height of
            the layout region parameter. The margins can be specified using the
            properties <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.TopMargin"/>,
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.BottomMargin"/>,
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LeftMargin"/>, and
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.RightMargin"/>. The minimum horizontal distance
            between nodes is equal to the sum of the left and right margins. The
            minimum vertical distance between nodes is equal to the sum of the
            top and bottom margins. 
            </p>
            <p>
            For graphs with nodes of heterogeneous size, the row/column mode
            often allows a more compact layout than the grid mode. 
            </p>
            <p>
            The following sample drawing shows a layout in the row mode. <CENTER>
            <IMG SRC="images/GraphLayout/layout-row-center.gif" BORDER="0" ALIGN="BOTTOM"/>
            </CENTER> The following sample drawing shows a layout in the column
            mode. <CENTER>
            <IMG SRC="images/GraphLayout/layout-column-center.gif" BORDER="0" ALIGN="BOTTOM"/>
            </CENTER> The following diagram shows the dimensional parameters of
            the layout in row mode (the parameters for the column mode are
            analogous). <CENTER>
            <IMG SRC="images/GraphLayout/layout-Rows-DimensionalParams.gif" BORDER="0" ALIGN="BOTTOM"/>
            </CENTER> 
            </p>
            <p>
            The algorithm is primarily designed for graphs without (visible)
            links between the nodes. If links exist, they are ignored by the Grid
            layout. 
            </p>
            <p>
            Several alignment options are provided (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.HorizontalAlignment"/> and
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.VerticalAlignment"/>). The alignment can be
            specified individually for each node (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetHorizontalAlignment(System.Object,ILOG.Diagrammer.GraphLayout.GridLayoutHorizontalAlignment)"/> and
            <see cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetVerticalAlignment(System.Object,ILOG.Diagrammer.GraphLayout.GridLayoutVerticalAlignment)"/>). 
            </p>
            <p>
            An incremental mode is provided (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.IncrementalMode"/>). If the incremental mode is
            enabled, the stability of the layout is preserved as much as possible
            when new nodes are added, existing ones removed, or node sizes
            modified. This means that the nodes are placed at the same location,
            or in the same order, as in the previous layout whenever possible. In
            this mode, the layout algorithm processes the changes incrementally
            rather than redoing the entire layout for every change. 
            </p>
            <p>
            Nodes that the layout algorithm is not allowed to move can be
            specified using the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetFixed(System.Object,System.Boolean)"/>. (See
            also
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/>.)
            In grid mode, nonfixed nodes are placed in such a way that they do
            not overlap the grid cells occupied by other fixed or nonfixed nodes.
            In row/column mode, nonfixed nodes are placed in such a way that they
            do not overlap fixed or nonfixed nodes. Of course, fixed nodes can
            overlap other fixed nodes. 
            </p>
            <p>
            The layout algorithm can take into account a different node size than
            the size corresponding to the bounding box of the node. Using
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.NodeBoxProvider"/>, you can specify an object
            that provides the box that has to be taken into account for each
            node. The following diagram shows the dimensional parameters of the
            layout in grid mode (the row/column case mode is analogous) when a
            node box that is different from the bounding box of the node is used:
            <CENTER>
            <IMG SRC="images/GraphLayout/layout-Grid-DimensionalParamsWithNodeBox.gif" BORDER="0" ALIGN="BOTTOM"/>
            </CENTER> 
            </p>
            <p>
            </p>
            </remarks>
            <example>
            <para lang="cs,vbnet">The following example shows how to apply 
            the Grid Layout.</para>
            <code lang="cs">
            using System;
            using ILOG.Diagrammer;
            using ILOG.Diagrammer.Graphic;
            using ILOG.Diagrammer.GraphLayout; 
            
            Group group = new Group();
            
            // Fill the group with nodes here
            
            GridLayout layout = new GridLayout();
            group.GraphLayout = layout;
            group.PerformGraphLayout(); 
            </code>
            <code lang="vbnet">
            Imports System
            Imports ILOG.Diagrammer
            Imports ILOG.Diagrammer.Graphic
            Imports ILOG.Diagrammer.GraphLayout
            
            Dim group As Group = New Group 
            
            ' Fill the group with nodes here
            
            Dim layout As GridLayout = New GridLayout
            group.GraphLayout = layout
            group.PerformGraphLayout
            </code>
            </example>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayout.NoIndex">
            <summary>
            No index code.
            </summary>
            <remarks>
            This value is returned by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.GetIndex(System.Object)"/> when a node has no index value. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayout.AutomaticOrdering">
            <summary>
            Automatic ordering option.
            </summary>
            <remarks>
            When set to <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.NodeComparator"/>, the algorithm
            is free to choose the order in such a way that it tries to reduce
            the total area occupied by the layout.  
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayout.NoOrdering">
            <summary>
            No ordering option.
            </summary>
            <remarks>
            When set to <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.NodeComparator"/>, the nodes are
            arranged in an arbitrary order. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayout.DescendingHeight">
            <summary>
            Ordering by height option.
            </summary>
            <remarks>
             When set to <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.NodeComparator"/>, the nodes are
            arranged by height, starting at the upper-left corner with the
            tallest node. Ordering the nodes by height can save vertical space
            and produce a more compact layout. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayout.AscendingHeight">
            <summary>
            Ordering by ascending height option.
            </summary>
            <remarks>
             When set to <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.NodeComparator"/>, the nodes are
            arranged by ascending height, starting at the upper-left corner with
            the node of the smallest height. Ordering the nodes by height can
            save vertical space and produce a more compact layout. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayout.AscendingWidth">
            <summary>
            Ordering by ascending width option.
            </summary>
            <remarks>
             When set to <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.NodeComparator"/>, the nodes are
            arranged by ascending width, starting at the upper-left corner with
            the node of the smallest width. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayout.DescendingWidth">
            <summary>
            Ordering by descending width option.
            </summary>
            <remarks>
             When set to <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.NodeComparator"/>, the nodes are
            arranged by width, starting at the upper-left corner with the node
            of the highest width. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayout.AscendingArea">
            <summary>
            Ordering by ascending area option.
            </summary>
            <remarks>
             When set to <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.NodeComparator"/>, the nodes are
            arranged by ascending area, starting at the upper-left corner with
            the node of the smallest area. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayout.DescendingArea">
            <summary>
            Ordering by descending area option.
            </summary>
            <remarks>
             When set to <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.NodeComparator"/>, the nodes are
            arranged by area, starting at the upper-left corner with the node of
            the highest area. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayout.AscendingIndex">
            <summary>
            Ordering by ascending index option.
            </summary>
            <remarks>
            When set to <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.NodeComparator"/>, the nodes are
            arranged in the order of their indexes, starting at the upper-left
            corner with the node with the smallest index. Nodes that do not have
            an index are placed after the nodes for which an index is specified.
            Ordering by index allows you to specify a particular order for the
            nodes. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetIndex(System.Object,System.Int32)"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GridLayout.DescendingIndex">
            <summary>
            Ordering by descending index option.
            </summary>
            <remarks>
            When set to <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.NodeComparator"/>, the nodes are
            arranged in the order of their indexes, starting at the upper-left
            corner with the node with the highest index. Nodes that do not have
            an index are placed after the nodes for which an index is specified.
            Ordering by index allows you to specify a particular order for the
            nodes. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetIndex(System.Object,System.Int32)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GridLayout.#ctor">
            <summary>
            Creates a new instance of the Grid Layout algorithm.
            </summary>
            <remarks>
            <br/> To indicate the graphic container you want to lay out, use the
            method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>.
            <br/> To indicate the graph model you want to lay out, use the
            method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            <br/> To perform the layout, use the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            <br/> To modify the layout parameters, use the different methods
            provided in this class and its superclass. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Filter"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GridLayout.#ctor(ILOG.Diagrammer.GraphLayout.GridLayout)">
            <summary>
            Creates a new layout instance by copying an existing one.
            </summary>
            <remarks>
            This constructor is used by the <see cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.Copy"/>
            method. Any subclass should provide a copy constructor. 
            <p>
            The parameters of the <strong>source</strong> layout are copied
            using the method <see cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.Copy"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            <param name="source"> The layout instance that is copied.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GridLayout.Init">
            <summary>
            Initializes instance variables.
            </summary>
            <remarks> 
            <p>
            You should not call this method directly. The method is called
            internally by the constructor without arguments and by the copy
            constructor. The method must be overridden by subclasses that need
            to initialize additional instance variables. 
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GridLayout.Copy">
            <summary>
            Copies the layout instance.
            </summary>
            <remarks> 
            <p>
            This method copies the layout instance by calling the copy
            constructor. 
            </p>
            <p>
            When performing a recursive layout on a nested graph, this method is
            used by <see cref="T:ILOG.Diagrammer.GraphLayout.ILayoutProvider"/> to
            "clone" the layout instance of a parent graph. 
            </p>
            <p>
            Note that the parameters which are specific to a node or a link are
            not copied. The other parameters, including the layout region
            specification and the node box interface, are also copied. 
            </p>
            <p>
            If a method of the type <strong>SupportsXXX</strong> is associated
            with a parameter, the parameter is copied only if the corresponding
            method returns <see langword="true"/>. 
            </p>
            </remarks>
            <returns>A copy of the layout instance.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GridLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Copies the parameters from a given layout instance.
            </summary>
            <remarks> 
            <p>
            Note that the parameters which are specific to a node or a link are
            not copied. The other parameters, including the layout region
            specification and the node box interface, are also copied. 
            </p>
            <p>
            If a method of the type <strong>SupportsXXX</strong> is associated
            with a parameter, the parameter is copied only if the corresponding
            method returns <see langword='true'/>. 
            </p>
            </remarks>
            <param name='source'> The layout instance from which the parameters
            are copied.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GridLayout.Layout">
            <summary>
            Computes the layout using the Grid Layout algorithm.
            </summary>
            <remarks>
            To start the layout, call the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GridLayout.Detach">
            <summary>
            Detaches the graph model from the layout instance.
            </summary>
            <remarks>
            When you attach a new graph model to the layout instance, you do not
            need to detach the old graph model because this is done
            automatically when you call
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            
            <p>
            The method performs cleaning operations on the graph model. In
            addition to the cleaning operations in the base class, the Grid
            Layout algorithm removes the alignment specifications of individual
            nodes. 
            </p>
            <p>
            Note that you must call this method when you no longer need the
            layout instance. Otherwise, some objects may not be garbage
            collected. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetHorizontalAlignment(System.Object,ILOG.Diagrammer.GraphLayout.GridLayoutHorizontalAlignment)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetVerticalAlignment(System.Object,ILOG.Diagrammer.GraphLayout.GridLayoutVerticalAlignment)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GridLayout.SupportsLayoutRegion">
            <summary>
            Indicates that this layout class can control the size of the graph
            drawing to fit a user-defined region (a rectangle) or a user-defined
            view.
            </summary>
            <remarks> 
            <p>
            If the layout mode (see <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode"/>) is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedWidth"/>, the width of the
            layout region determines the maximum width of the layout (the
            maximum number of columns). 
            </p>
            <p>
            If the layout mode is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedHeight"/>, the height of
            the layout region determines the maximum height of the layout (the
            maximum number of rows). 
            </p>
            <p>
            If the layout mode is <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToRows"/>, the
            width of the layout region determines the maximum width of the rows.
            
            </p>
            <p>
            If the layout mode is <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToColumns"/>,
            the height of the layout region determines the maximum height of the
            columns. 
            </p>
            <p>
            However, if the width of a node is larger than the maximum width of
            the layout or the height of the node is larger than the maximum
            height of the layout, the bounding box of the node will be placed
            partially out of the specified layout region. 
            </p>
            <p>
            In all layout modes, the coordinates of the top-left corner of the
            layout region determines the coordinates of the top-left border of
            the layout. 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetCalcLayoutRegion"/>
            <returns>always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GridLayout.SupportsPreserveFixedNodes">
            <summary>
            Indicates that this layout class allows the user to specify fixed
            nodes.
            </summary>
            <remarks>
            Fixed nodes are not moved during the layout if the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/>
            is set to <see langword="true"/>. Nonfixed nodes are placed in such
            a manner that overlaps with fixed nodes are avoided. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Filter"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/>
            '/&gt;
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GridLayout.SupportsAllowedTime">
            <summary>
            Indicates that this layout class can stop the layout computation in
            a proper manner when the user-defined allowed time is exceeded.
            </summary>
            <remarks>
            If the allowed time elapses before termination of the Grid Layout
            algorithm, the result code in the layout report is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/>. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/>
            '/&gt;
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GridLayout.SupportsStopImmediately">
            <summary>
            Indicates that this layout class can control the current run by
            interrupting the run of the layout immediately.
            </summary>
            <remarks>
            If the algorithm is stopped before termination, the result code in
            the layout report is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/>. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.StopImmediately"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsStoppedImmediately"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetHorizontalAlignment(System.Object,ILOG.Diagrammer.GraphLayout.GridLayoutHorizontalAlignment)">
            <summary>
            Sets the horizontal alignment style of an individual node.
            </summary>
            <remarks>
            This alignment style is used only if the global horizontal alignment
            is set to <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Mixed"/>. Otherwise, all nodes
            have the alignment style that is specified as the global alignment
            style. 
            <p>
            The parameter controls the horizontal alignment of nodes either
            inside their grid cell if the layout mode (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode"/>) is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedWidth"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedHeight"/>, or inside the
            columnrs if the layout mode is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToColumns"/>. 
            </p>
            <p>
            This parameter is not used if the layout mode (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode"/>) is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToRows"/>. 
            </p>
            <p>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Center"/> - the node is centered in
            its grid cell or column.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Left"/> - the node is aligned to
            the left border of the cell or column.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Right"/> - the node is aligned to
            the left border of the cell or column.</LI> 
            </UL> 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Center"/>. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.GetHorizontalAlignment(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.HorizontalAlignment"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GridLayout.GetHorizontalAlignment(System.Object)">
            <summary>
            Returns the local horizontal alignment style of the node.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetHorizontalAlignment(System.Object,ILOG.Diagrammer.GraphLayout.GridLayoutHorizontalAlignment)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.HorizontalAlignment"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetVerticalAlignment(System.Object,ILOG.Diagrammer.GraphLayout.GridLayoutVerticalAlignment)">
            <summary>
            Sets the vertical alignment style of an individual node.
            </summary>
            <remarks>
            This alignment style is used only if the global vertical alignment
            is set to <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Mixed"/>. Otherwise, all nodes
            have the alignment style that is specified as the global alignment
            style. 
            <p>
            The parameter controls the vertical alignment of nodes either inside
            their grid cell if the layout mode (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode"/>) is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedWidth"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedHeight"/>, or inside the
            rows if the layout mode is <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToRows"/>. 
            </p>
            <p>
            This parameter is not used if the layout mode (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode"/>) is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToColumns"/>. 
            </p>
            <p>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Center"/> - the node is centered in
            its grid cell or column.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Top"/> - the node is aligned to the
            top border of the cell or column.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Bottom"/> - the node is aligned to
            the bottom border of the cell or column.</LI> 
            </UL> 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Center"/>. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.GetVerticalAlignment(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.VerticalAlignment"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GridLayout.GetVerticalAlignment(System.Object)">
            <summary>
            Returns the local vertical alignment style of the node.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetVerticalAlignment(System.Object,ILOG.Diagrammer.GraphLayout.GridLayoutVerticalAlignment)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.VerticalAlignment"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetIndex(System.Object,System.Int32)">
            <summary>
            Sets the index of a node.
            </summary>
            <remarks>
            When the layout is performed, the nodes for which indexes have been
            specified are arranged in the order corresponding to their index
            (starting in the upper-left corner with the smallest index). The
            nodes for which indexes have not been specified are arranged after
            them. You can specify the class field
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayout.NoIndex"/> as an index value if you want to
            reset an index you previously specified. 
            <p>
            Note that <paramref name="index"/> must not be negative. The values
            of the indexes for consecutive nodes are not necessarily
            consecutive. Only the order of the values is important. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.GetIndex(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GridLayout.GetIndex(System.Object)">
            <summary>
            Returns the index associated with a node.
            </summary>
            <remarks>
            It returns <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayout.NoIndex"/> if
            <paramref name="node"/> has no index. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetIndex(System.Object,System.Int32)"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode">
            <summary>
            Gets or sets the layout mode.
            </summary>
            <remarks>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedWidth"/> - The nodes
            are placed in the cells of a grid (matrix) that has a fixed maximum
            number of columns. This number is equal to the width of the layout
            region parameter divided by the horizontal grid offset (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.HorizontalGridOffset"/>). </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedHeight"/> - The nodes
            are placed in the cells of a grid (matrix) that has a fixed maximum
            number of rows. This number is equal to the height of the layout
            region parameter divided by the vertical grid offset (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.VerticalGridOffset"/>). </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToRows"/> - The nodes are placed
            in rows. The maximum width of the rows is equal to the width of the
            layout region parameter. The height of each row is the maximum
            height of the nodes contained in the row (plus margins). </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToColumns"/> - The nodes are
            placed in columns. The maximum height of the columns is equal to the
            height of the layout region parameter. The width of each column is
            the maximum width of the nodes contained in the column (plus
            margins). </LI> 
            </UL> 
            <p>
            The default value is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedWidth"/>. 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.HorizontalAlignment"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.VerticalAlignment"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetHorizontalAlignment(System.Object,ILOG.Diagrammer.GraphLayout.GridLayoutHorizontalAlignment)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetVerticalAlignment(System.Object,ILOG.Diagrammer.GraphLayout.GridLayoutVerticalAlignment)"/>
            <value>The layout mode.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GridLayout.IncrementalMode">
            <summary>
            Gets or sets the incremental mode.
            </summary>
            <remarks> 
            <p>
            If the incremental mode is enabled, the stability of the layout is
            preserved as much as possible when new nodes are added, existing
            ones removed, or node sizes modified. This means that the nodes are
            placed at the same location or in the same order as in the previous
            layout whenever possible. In this mode, the layout algorithm
            processes the changes incrementally rather than redoing the entire
            layout for every change. 
            </p>
            <p>
            To preserve the stability, the incremental mode can keep some
            regions free. Therefore, the total area of the layout can be larger
            than when nonincremental mode is used. 
            </p>
            <p>
            Note that the layout is redone from scratch after a change in one of
            the following parameters: 
            <UL>
            <LI> layout region</LI> 
            <LI> grid offset</LI> 
            <LI> layout mode</LI> 
            <LI> margins</LI> 
            </UL> 
            </p>
            <p>
            The default value is <see langword='false'/> (disabled).  
            </p>
            </remarks>
            <value>The incremental mode.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GridLayout.HorizontalAlignment">
            <summary>
            Gets or sets the global horizontal alignment style.
            </summary>
            <remarks>
            This property controls the horizontal alignment of nodes either
            inside their grid cell if the layout mode (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode"/>) is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedWidth"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedHeight"/>, or inside the
            columns if the layout mode is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToColumns"/>. This parameter is not
            used if the layout mode (see <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode"/>) is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToRows"/>. 
            <p>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Center"/> - the node is centered in
            its grid cell or column.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Left"/> - the node is aligned to
            the left border of the cell or column.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Right"/> - the node is aligned to
            the left border of the cell or column.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Mixed"/> - each node can have a
            different alignment option. In this case, the horizontal alignment
            of each individual node can be set by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetHorizontalAlignment(System.Object,ILOG.Diagrammer.GraphLayout.GridLayoutHorizontalAlignment)"/>
            so that different alignments can occur in the same layout.</LI> 
            </UL> 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Center"/>. 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.VerticalAlignment"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetHorizontalAlignment(System.Object,ILOG.Diagrammer.GraphLayout.GridLayoutHorizontalAlignment)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode"/>
            <value>The global horizontal alignment style.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GridLayout.VerticalAlignment">
            <summary>
            Gets or sets the global vertical alignment style.
            </summary>
            <remarks>
            This property controls the vertical alignment of nodes either inside
            their grid cell if the layout mode (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode"/>) is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedWidth"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedHeight"/>, or inside the
            rows if the layout mode is <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToRows"/>.
            This parameter is not used if the layout mode (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode"/>) is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToColumns"/>. 
            <p>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Center"/> - the node is centered in
            its grid cell or column.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Top"/> - the node is aligned to the
            top border of the cell or column.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Bottom"/> - the node is aligned to
            the bottom border of the cell or column.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Mixed"/> - each node can have a
            different alignment option. In this case, the vertical alignment of
            each individual node can be set by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetVerticalAlignment(System.Object,ILOG.Diagrammer.GraphLayout.GridLayoutVerticalAlignment)"/>
            so that different alignments can occur in the same layout.</LI> 
            </UL> 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.AlignmentOptions.Center"/>. 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.HorizontalAlignment"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetVerticalAlignment(System.Object,ILOG.Diagrammer.GraphLayout.GridLayoutVerticalAlignment)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode"/>
            <value>The global vertical alignment style.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GridLayout.NodeComparator">
            <summary>
            Gets or sets the comparator used for sorting the nodes.
            </summary>
            <remarks>
            The valid values are the following: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayout.AutomaticOrdering"/> - The algorithm is
            free to choose the order in such a way that it tries to reduce the
            total area occupied by the layout.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayout.NoOrdering"/> - No ordering is
            performed.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayout.DescendingHeight"/> - The nodes are
            ordered in the descending order of their height.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayout.AscendingHeight"/> - The nodes are
            ordered in the ascending order of their height.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayout.DescendingWidth"/> - The nodes are
            ordered in the descending order of their width.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayout.AscendingWidth"/> - The nodes are ordered
            in the ascending order of their width.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayout.DescendingArea"/> - The nodes are ordered
            in the descending order of their area.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayout.AscendingArea"/> - The nodes are ordered
            in the ascending order of their area.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayout.AscendingIndex"/> - The nodes are ordered
            in the ascending order of their index</LI>
            (see <see cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetIndex(System.Object,System.Int32)"/>). 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayout.DescendingIndex"/> - The nodes are
            ordered in the descending order of their index (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.GridLayout.SetIndex(System.Object,System.Int32)"/>).</LI> 
            <LI> <see langword="null"/> - The nodes are ordered in an arbitrary
            way.</LI> 
            <LI> any other implementation of the
            <see cref="T:System.Collections.IComparer"/> interface - The nodes are
            ordered according to this custom comparator.</LI> 
            </UL>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayout.AutomaticOrdering"/>. 
            <p>
            The ordering of the nodes starts at the upper-left corner. 
            </p>
            <p>
            Note that in incremental mode (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.IncrementalMode"/>) or when nodes are fixed
            (see <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetFixed(System.Object,System.Boolean)"/>)
            the order of the nodes is not guaranteed to obey the comparator,
            since this specification competes with the other constraints. 
            </p>
            <p>
            Note also that, if the layout mode is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedWidth"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedHeight"/>, the order
            options are applied only for nodes whose size (including margins) is
            smaller than the grid cell size (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.HorizontalGridOffset"/> and
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.VerticalGridOffset"/>). 
            </p>
            </remarks>
            <value>The comparator used for sorting the nodes.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GridLayout.HorizontalGridOffset">
            <summary>
            Gets or sets the spacing of the grid lines on the horizontal axis.
            </summary>
            <remarks> 
            <p>
            The default value is <strong>40</strong>. 
            </p>
            <p>
            This parameter is not used if the layout mode (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode"/>) is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToRows"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToColumns"/>. 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode"/>
            <value>The spacing of the grid lines on the horizontal axis.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GridLayout.VerticalGridOffset">
            <summary>
            Gets or sets the spacing of the grid lines on the vertical axis.
            </summary>
            <remarks> 
            <p>
            The default value is <strong>40</strong>. 
            </p>
            <p>
            This parameter is not used if the layout mode (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode"/>) is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToRows"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToColumns"/>. 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutMode"/>
            <value>The spacing of the grid lines on the vertical axis.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GridLayout.TopMargin">
            <summary>
            Gets or sets the top margin parameter.
            </summary>
            <remarks> 
            <p>
            If the layout mode is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedWidth"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedHeight"/>, the top margin
            is the minimum distance between the top border of a node (or its
            user-specified box - see <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.NodeBoxProvider"/>)
            and the top border of the grid cell. 
            </p>
            <p>
            If the layout mode is <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToRows"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToColumns"/>, the minimum vertical
            distance between two nodes (or their user-specified boxes) is the
            sum of the top and bottom margins. 
            </p>
            <p>
            The default value is <strong>5</strong>.  
            </p>
            </remarks>
            <value>The top margin parameter.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GridLayout.BottomMargin">
            <summary>
            Gets or sets the bottom margin parameter.
            </summary>
            <remarks> 
            <p>
            If the layout mode is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedWidth"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedHeight"/>, the bottom
            margin is the minimum distance between the bottom border of a node
            (or its user-specified box - see
            <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.NodeBoxProvider"/>) and the bottom border of
            the grid cell. 
            </p>
            <p>
            If the layout mode is <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToRows"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToColumns"/>, the minimum vertical
            distance between two nodes (or their user-specified boxes) is the
            sum of the top and bottom margins. 
            </p>
            <p>
            The default value is <strong>5</strong>.  
            </p>
            </remarks>
            <value>The bottom margin parameter.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GridLayout.LeftMargin">
            <summary>
            Gets or sets the left margin parameter.
            </summary>
            <remarks> 
            <p>
            If the layout mode is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedWidth"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedHeight"/>, the left margin
            is the minimum distance between the left border of a node (or its
            user-specified box - see <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.NodeBoxProvider"/>)
            and the left border of the grid cell. 
            </p>
            <p>
            If the layout mode is <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToRows"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToColumns"/>, the minimum horizontal
            distance between two nodes (or their user-specified boxes) is the
            sum of the left and right margins. 
            </p>
            <p>
            The default value is <strong>5</strong>.  
            </p>
            </remarks>
            <value>The left margin parameter.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GridLayout.RightMargin">
            <summary>
            Gets or sets the right margin parameter.
            </summary>
            <remarks> 
            <p>
            If the layout mode is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedWidth"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedHeight"/>, the right margin
            is the minimum distance between the right border of a node (or its
            user-specified box - see <see cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.NodeBoxProvider"/>)
            and the right border of the grid cell. 
            </p>
            <p>
            If the layout mode is <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToRows"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToColumns"/>, the minimum horizontal
            distance between two nodes (or their user-specified boxes) is the
            sum of the left and right margins. 
            </p>
            <p>
            The default value is <strong>5</strong>.  
            </p>
            </remarks>
            <value>The right margin parameter.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GridLayout.MaxNumberOfNodesPerRowOrColumn">
            <summary>
            Gets or sets the maximum number of nodes per row or per column.
            </summary>
            <remarks> 
            <p>
             In <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToRows"/> mode, the number is the
            maximum number of nodes per row. In
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToColumns"/> mode, the number is the
            maximum number of nodes per column.  
            </p>
            <p>
            The layout places as many nodes on each row or column as possible
            given the size of the nodes, the dimensional parameters (layout
            region and margins) and the specified maximum number of nodes per
            row or column. 
            </p>
            <p>
            The minimum value is <strong>1</strong>. The default value is
            <strong>Int32.MaxValue</strong>, that is, the number of nodes placed
            in each row or column is bounded only by the size of the nodes and
            the dimensional parameters. The parameter has no effect if the
            layout mode is <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedWidth"/> or
            <see cref="F:ILOG.Diagrammer.GraphLayout.GridLayoutMode.TileToGridFixedHeight"/>. 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetCalcLayoutRegion"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.TopMargin"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.BottomMargin"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.LeftMargin"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GridLayout.RightMargin"/>
            <value>The maximum number of nodes per row or per column.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GridLayout.NodeBoxProvider">
            <summary>
            Gets or sets an object that provides the rectangle defining the
            location and size of each node.
            </summary>
            <remarks> 
            <p>
            This property allows a node size other than the bounding box to be
            taken into account by the layout algorithm. 
            </p>
            <p>
            If you set this property, the layout algorithm uses the bounding box
            of the node (see <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.BoundingBox(System.Object)"/>). 
            </p>
            <p>
            The default value is <see langword="null"/>. You can set this
            property with a <see langword="null"/> argument to restore the
            default behavior. 
            </p>
            </remarks>
            <value>An object that provides the rectangle defining the location
            and size of each node.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GridLayout.AllowedTime">
            <summary>
            Gets or sets the upper limit for the duration of the layout
            algorithm.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/> for details.
            </remarks>
            <value>The upper limit for the duration of the layout algorithm.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutRegion">
            <summary>
            Gets or sets the layout region.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegion"/> for details.
            </remarks>
            <value>The layout region.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GridLayout.LayoutRegionMode">
            <summary>
            Gets or sets the layout region mode.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutRegionMode"/> for details.
            </remarks>
            <value>The layout region mode.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GridLayout.PreserveFixedNodes">
            <summary>
            Gets or sets whether the layout avoids movement of fixed nodes.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedNodes"/> for details.
            </remarks>
            <value>Whether the layout avoids movement of fixed nodes.
            </value>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.RowColumnGrid.GraphOnRowsOrColumns.GetVerticalIndividualAlignment(System.Object)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.RowColumnGrid.GraphOnRowsOrColumns.GetNodeIndex(System.Object)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.RowColumnGrid.GraphOnRowsOrColumns.GetHorizontalIndividualAlignment(System.Object)">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.RowColumnGrid.GraphOnRowsOrColumns.MayContinue">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.RowColumnGrid.GraphOnRowsOrColumns.LayoutStepPerformed">
            <summary>
            Redeclaration of the abstract method.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.Attribute.EXACT">
            Match type: exact match 
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.Attribute.SUBSTRING">
            Match type: substring 
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.Attribute.EXIST">
            Match type: exist 
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.Attribute.BEGIN">
            Match type: begin 
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.Attribute._root">
            (mandatory) root 
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.Attribute._match">
            (optional) match kind 
        </member>
        <member name="F:ILOG.Diagrammer.SVG.Css.Attribute._target">
            (optional) target 
        </member>
        <member name="T:ILOG.Diagrammer.TextureImageXmlSerializer">
            <summary>
            Represents a XML custom serializer for images used as a <see cref="T:ILOG.Diagrammer.TextureFill"/> image.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.TextureFill">
            <summary>
            Defines a sub-class of the <see cref="T:ILOG.Diagrammer.Fill"/> class that allows
            to fill or stroke a graphic object by tiling an image.
            </summary>
            <remarks>
            A <see cref="T:ILOG.Diagrammer.TextureFill"/> is used to fill or stroke
            a graphic object using an image that can be replicated horizontally and vertically to fill
            the areas to be painted. The <see cref="P:ILOG.Diagrammer.TextureFill.Image"/> property represents the image that
            will be tiled. The <see cref="P:ILOG.Diagrammer.TextureFill.Bounds"/> property defines the location and size of the tiles.
            The tiling theoretically extends a series of such rectangles to infinity in X and
            Y (positive and negative), with rectangles starting at (x + m*width, y + n*height) for each
            possible integer value for m and n.
            When the value of <see cref="P:ILOG.Diagrammer.TextureFill.CoordinateSpace"/> property is <see cref="F:ILOG.Diagrammer.CoordinateSpace.ObjectBBox"></see> 
            (the default), the value of the <see cref="P:ILOG.Diagrammer.TextureFill.Bounds"/> property must be interpreted in the coordinate
            system of the graphic object being painted. In this coordinate system (0,0) is mapped to the top-left
            corner of the graphic object and (1,1) to the bottom-right corner of the graphic object. Thus
            when the <see cref="P:ILOG.Diagrammer.TextureFill.Bounds"/> property is (0,0,1,1) the image is stretched to fit the graphic object bounding box.
            </remarks>
            <example>
            <para lang="cs,vbnet">
            The following example creates a rectangle filled with a texture.
            </para>
            <code lang="cs">     
            Rect CreateRectangleWithTextureFill()
            {
                Rect rectangle = new Rect(0, 0, 100, 100);
                TextureFill myFill = new TextureFill();
                myFill.Bounds = new Rectangle2D(0, 0, 1, 1);
                myFill.Image = TextureFill.Wood1;
              
                rectangle.Fill = myFill;
                return rectangle;
            }   
            </code>
            <code lang="vbnet">
            Function CreateRectangleWithTextureFill() As Rect 
               Dim rectangle As Rect = New Rect(0, 0, 100, 100) 
               Dim myFill As TextureFill = New TextureFill 
               myFill.Bounds = New Rectangle2D(0, 0, 1, 1) 
               myFill.Image = TextureFill.Wood1 
               rectangle.Fill = myFill 
               Return rectangle 
            End Function    
            </code>
            <para lang="cs,vbnet">This example will produce the following image:</para>
            <br/><img src="images/TextureFill.png"/>
            </example>
            <seealso cref="T:ILOG.Diagrammer.LinearGradientFill"/>
            <seealso cref="T:ILOG.Diagrammer.PathGradientFill"/>
            <seealso cref="T:ILOG.Diagrammer.HatchFill"/>
            <seealso cref="T:ILOG.Diagrammer.SolidFill"/>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Chips">
            <summary>
            Represents the Chips texture Image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Floor1">
            <summary>
            Represents the Floor1 texture Image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Floor2">
            <summary>
            Represents the Floor2 texture Image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Floor3">
            <summary>
            Represents the Floor3 texture Image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Granit">
            <summary>
            Represents the Granit texture Image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Marble">
            <summary>
            Represents the Marble texture Image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Mesh">
            <summary>
            Represents the Mesh texture Image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Other1">
            <summary>
            Represents the Other1 texture Image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Other3">
            <summary>
            Represents the Other3 texture Image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Other5">
            <summary>
            Represents the Other5 texture Image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Paper1">
            <summary>
            Represents the Paper1 texture Image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Paper2">
            <summary>
            Represents the Paper2 texture Image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Sat">
            <summary>
            Represents the Sat texture Image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Sky">
            <summary>
            Represents the Sky texture Image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Snow">
            <summary>
            Represents the Snow texture Image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Wall">
            <summary>
            Represents the Wall texture Image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Water">
            <summary>
            Represents the Water texture Image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Wood1">
            <summary>
            Represents the Wood1 texture Image.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.TextureFill.Wood2">
            <summary>
            Represents the Wood2 texture Image.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.TextureFill.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.TextureFill"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.TextureFill.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.TextureFill"/> class with the specified image.
            </summary>
            <param name="texture">An <see cref="P:ILOG.Diagrammer.TextureFill.Image"/> object.</param>
        </member>
        <member name="M:ILOG.Diagrammer.TextureFill.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.TextureFill"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.TextureFill.GetBrush(ILOG.Diagrammer.Rectangle2D,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Fill.GetBrush(ILOG.Diagrammer.Rectangle2D,System.Drawing.Drawing2D.GraphicsPath)">Fill.GetBrush</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.TextureFill.GetHashCode">
            <summary>
            This member overrides <see cref="M:System.Object.GetHashCode">Object.GetHashCode</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.TextureFill.Equals(System.Object)">
            <summary>
            This member overrides <see cref="M:System.Object.Equals(System.Object)">Object.Equals</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.TextureFill.ToString">
            <summary>
            This member overrides <see cref="M:System.Object.ToString">Object.ToString</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.TextureFill.Bounds">
            <summary>
            Gets or sets a rectangle that defines the location and size of the <see cref="T:ILOG.Diagrammer.TextureFill"/>.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> that defines the
            location and size of the <see cref="T:ILOG.Diagrammer.TextureFill"/>. The default value is (0,0,1,1).
            </value>
            <remarks>
            The property defines the location and size of the tiles.
            The tiling theoretically extends a series of such rectangles to infinity in X and
            Y (positive and negative), with rectangles starting at (x + m*width, y + n*height) for each
            possible integer value for m and n.
            When the value of <see cref="P:ILOG.Diagrammer.TextureFill.CoordinateSpace"/> property is <see cref="F:ILOG.Diagrammer.CoordinateSpace.ObjectBBox"/> 
            (the default), the value of the <see cref="P:ILOG.Diagrammer.TextureFill.Bounds"/> property must be interpreted in the coordinate
            system of the graphic object being painted. In this coordinate system (0,0) is mapped to the top-left
            corner of the graphic object and (1,1) to the bottom-right corner of the graphic object. Thus
            when the <see cref="P:ILOG.Diagrammer.TextureFill.Bounds"/> property is (0,0,1,1) the image is stretched  to fit the graphic object bounding box.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.TextureFill.CoordinateSpace">
            <summary>
            Defines the coordinate system for the <see cref="P:ILOG.Diagrammer.TextureFill.Bounds"/> property.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.CoordinateSpace"/> values.
            The default value is <see cref="F:ILOG.Diagrammer.CoordinateSpace.ObjectBBox"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.TextureFill.Image">
            <summary>
            Gets or sets the image that will be tiled.
            </summary>
            <value>The <see cref="T:System.Drawing.Image"/> that will be tiled.</value>
        </member>
        <member name="P:ILOG.Diagrammer.TextureFill.WrapMode">
            <summary>
            Gets or sets the wrap mode of the texture fill.
            </summary>
            <value>One of the <see cref="T:System.Drawing.Drawing2D.WrapMode"/> values. The
            default value is <see cref="F:System.Drawing.Drawing2D.WrapMode.Tile"/>
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.CustomColorDialog">
            <summary>
            Represents a common dialog box that displays available colors along with controls that enable the user to define custom colors.
            </summary>
            <remarks>Use the <see cref="P:ILOG.Diagrammer.Windows.Forms.CustomColorDialog.Color"/> property to get or set the edited color.
            <p/>
            <img src="images/Windows/Forms/CustomColorDialog.png"/>
            </remarks>
            <example>
            <para lang="cs,vbnet">
            The following example shows how to use the dialog box.
            </para>
            <code lang="cs">
            CustomColorDialog dialog = new CustomColorDialog();
            dialog.Color = Color.Red;
            if (dialog.ShowDialog == DialogResult.Ok)
            {
                System.Console.WriteLine("Selected Color : " + dialog.Color.ToString());
            }
            
            </code>
            <code lang="vbnet">
            Dim dialog As CustomColorDialog = New CustomColorDialog
            dialog.Color = Color.Red
            If (dialog.ShowDialog = DialogResult.Ok) Then
                System.Console.WriteLine(("Selected Color : " + dialog.Color.ToString()))
            End If
            </code>
            </example>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.CustomColorDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CustomColorDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.CustomColorDialog"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CustomColorDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.CustomColorDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.CustomColorDialog.Color">
            <summary>
            Gets or sets the color selected by the user.
            </summary>
            <value>The <see cref="T:System.Drawing.Color"/> selected by the user.</value>
        </member>
        <member name="T:ILOG.Diagrammer.CreateSelectionGraphicEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.CreateSelectionGraphic"/> event of a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.CreateSelectionGraphicEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.Windows.Forms.DiagramView.CreateSelectionGraphic"/> event 
            of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> class.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.CreateSelectionGraphicEventArgs._obj">
            <summary>
            The graphic object for which we need a selection object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.CreateSelectionGraphicEventArgs._selectionLayer">
            <summary>
            The diagram host for which we create the selection graphic.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.CreateSelectionGraphicEventArgs._selectionGraphic">
            <summary>
            The selection graphic object stored by the user.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.CreateSelectionGraphicEventArgs._cancel">
            <summary>
            A boolean to indicate whether selection for this object is allowed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CreateSelectionGraphicEventArgs.#ctor(ILOG.Diagrammer.SelectionLayer)">
            <summary>
            internal constructor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CreateSelectionGraphicEventArgs.CreateDefaultSelectionGraphic">
            <summary>
            Creates the default selection graphic for the selected object.
            </summary>
            <remarks>
            The method creates the default selection graphic object for
            the selected object and stores it in the <see cref="P:ILOG.Diagrammer.CreateSelectionGraphicEventArgs.SelectionGraphic"/>
            property.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.CreateSelectionGraphicEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the object being selected will
            have a selection graphic to represent it.
            </summary>
            <value><see langword="true"/> to specify that the selected object will not have
            a selection graphic to represent it; otherwise,
            <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.CreateSelectionGraphicEventArgs.GraphicObject">
            <summary>
            Gets the graphic object that is being selected.
            </summary>
            <value>The <see cref="T:ILOG.Diagrammer.GraphicObject"/> that is being selected.</value>
        </member>
        <member name="P:ILOG.Diagrammer.CreateSelectionGraphicEventArgs.View">
            <summary>
            Gets the view in which the selection object will be displayed.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.IDiagramView"/> instance</value>
        </member>
        <member name="P:ILOG.Diagrammer.CreateSelectionGraphicEventArgs.SelectionStyle">
            <summary>
            Gets the selection style used to draw selection objects.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.SelectionStyle"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.CreateSelectionGraphicEventArgs.Selection">
            <summary>
            Gets the collection of selected objects.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.SelectionService"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.CreateSelectionGraphicEventArgs.SelectionGraphic">
            <summary>
            Gets or sets the selection graphic for the graphic object.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.SelectionGraphic"/> that represents the selection graphic
            object for the graphic object being selected.</value>
        </member>
        <member name="T:ILOG.Diagrammer.SelectionLayer">
            <summary>
            Represents the objects that manages and displays selection 
            graphic in a <see cref="T:ILOG.Diagrammer.IDiagramView"/>
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionLayer._selectionStyle">
            <summary>
            The style for selected objects
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionLayer._selection">
            <summary>
            The selection of GraphicObjects
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionLayer._selectionGraphics">
            <summary>
            A mapping table between objects and selection objects
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionLayer._mustResetObjectGeometries">
            <summary>
            A boolean value to handle lazy computation of object geometries
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionLayer._ignoreInvalidation">
            <summary>
            A boolean value to ignore invalidation
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.SelectionLayer"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionLayer.Dispose">
            <summary>
            Disposes the layer.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionLayer.OnContentChanged(ILOG.Diagrammer.ContentChangeEventArgs)">
            <summary>
            Should only be called once...
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionLayer.InvalidateObjectGeometries">
            <summary>
            Check all the selected objects as invalid.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionLayer.ResetObjectsGeometry">
            <summary>
            Force each selection object to be recomputed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionLayer._view_TransformChanged(System.Object,ILOG.Diagrammer.TransformChangeEventArgs)">
            <summary>
            Called when the view transform has changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionLayer.OnSelectionChanged(ILOG.Diagrammer.SelectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.SelectionLayer.SelectionChanged"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.SelectionChangedEventArgs"/> that contains the
            event data.</param>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionLayer._createSelArg">
            <summary>
            re-usable event args for CreateSelectionGraphic event.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionLayer.OnCreateSelectionGraphic(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Is called to create the selection graphic object for the specified object.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference.</param>
            <returns>A new <see cref="T:ILOG.Diagrammer.SelectionGraphic"/> instance.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionLayer.OnCreateSelectionGraphic(ILOG.Diagrammer.CreateSelectionGraphicEventArgs)">
            <summary>
            Raises the <see cref="E:ILOG.Diagrammer.SelectionLayer.CreateSelectionGraphic"/> event.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.CreateSelectionGraphicEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionLayer.ToString">
            <summary>
            This member overrides <see cref="M:System.Object.ToString">Object.ToString</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionLayer.HitTest(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicLayer.HitTest(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">DiagramLayer.HitTest</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionLayer.Paint(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicLayer.Paint(ILOG.Diagrammer.DrawingContext)">DiagramLayer.Paint</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionLayer.GetTransformToView(ILOG.Diagrammer.GraphicContainer)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicLayer.GetTransformToView(ILOG.Diagrammer.GraphicContainer)">GraphicLayer.GetTransformToView</see>.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.SelectionLayer.SelectionChanged">
            <summary>
            Occurs when the selection has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionLayer.SelectionContainer">
            <summary>
            Gets the container that contains the selection objects.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionLayer.SelectionStyle">
            <summary>
            Gets or sets the style for the selected objects.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionLayer.Selection">
            <summary>
            Gets or sets the collection of selected objects.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.SelectionService"/> object that represents the
            collection of objects that are selected in the view.
            </value>
        </member>
        <member name="E:ILOG.Diagrammer.SelectionLayer.CreateSelectionGraphic">
            <summary>
            Occurs when a graphic object is selected and 
            a <see cref="T:ILOG.Diagrammer.SelectionGraphic"/> needs to be created
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.PrimarySelectionPolicy">
            <summary>
            Represents the policy for updating the primary selection of a <see cref="T:ILOG.Diagrammer.SelectionService"/>.
            </summary>
            <remarks>The policy is used when a new object is selected to update the primary selection.</remarks>
            <see cref="P:ILOG.Diagrammer.SelectionStyle.PrimarySelectionPolicy"/>
        </member>
        <member name="F:ILOG.Diagrammer.PrimarySelectionPolicy.FirstSelected">
            <summary>
            The primary selection remains on the first selected graphic object.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.PrimarySelectionPolicy.LastSelected">
            <summary>
            The primary selection is changed to the last selected graphic object.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.SelectionStyle">
            <summary>
            A collection of properties used to configure the selection objects appearance and behavior.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionStyle._instantEditing">
            <summary>
             A boolean value indicating whether interactions will be opaque or not.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionStyle._handleSize">
            <summary>
            The default size for handles of selection objects.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionStyle._selectionForeColor">
            <summary>
            The default color for selection objects.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionStyle._selectionDashStyle">
            <summary>
            The default dash style for selection objects.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionStyle._handleForeColor">
            <summary>
            The default fore color for handles of selection objects.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionStyle._handleBackColor">
            <summary>
            The default back color for handles of selection objects.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionStyle._primaryHandleBackColor">
            <summary>
            The default back color for handles of primary selection.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionStyle._primaryHandleForeColor">
            <summary>
            The default fore color for handles of primary selection.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionStyle._highlightColor">
            <summary>
            The default color for hightlighting objects
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionStyle._highlightSize">
            <summary>
            The default size for the border drawn when highlighting an object
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.SelectionStyle"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionStyle.ToString">
            <summary>
            This member overrides <see cref="M:System.Object.ToString">Object.ToString</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.PrimarySelectionPolicy">
            <summary>
            Gets or sets the policy for the primary selection.
            </summary>
            <remarks>The default value is <see cref="P:ILOG.Diagrammer.SelectionStyle.PrimarySelectionPolicy">PrimarySelectionPolicy.LastSelected</see>.</remarks>
            <value>One of the <see cref="P:ILOG.Diagrammer.SelectionStyle.PrimarySelectionPolicy"/> values.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.NewLineModifier">
            <summary>
            Gets or sets the modifier key that allows to add a new line when editing multiline text.
            </summary>
            <value>A Keys value that represents the modifier key that allows to add a new line when editing multiline text.
            The default value is <see cref="F:System.Windows.Forms.Keys.Control"/>.</value>
            <remarks>This property is used when the enter key is pressed while editing the text of a graphic object to know if a new line should be added
            to the text.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.ChildSelectionModifier">
            <summary>
            Gets or sets the modifier key that allows to select container children.
            </summary>
            <remarks>The default value is <see cref="F:System.Windows.Forms.Keys.Alt"/>.</remarks>
            <value>A Keys value that represents the modifier key that allows to select container children.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.NoReparentModifier">
            <summary>
            Gets or sets the modifier key that prevents to change the parent container of the selected object.
            </summary>
            <remarks>The default value is <see cref="F:System.Windows.Forms.Keys.Shift"/>.</remarks>
            <value>A Keys value that represents the modifier key that enables  to change the parent container of the selected object.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.CopyModifier">
            <summary>
            Gets or sets the modifier key that enables the copy of the selected object.
            </summary>
            <remarks>The default value is <see cref="F:System.Windows.Forms.Keys.Control"/>.</remarks>
            <value>A Keys value that represents the modifier key that enables the copy of the selected object.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.NoSnapModifier">
            <summary>
            Gets or Sets the modifier key that prevents the grid snapping while moving the selection.
            </summary>
            <remarks>The default value is <see cref="F:System.Windows.Forms.Keys.Alt"/>.</remarks>
            <value>A Keys value that represents the modifier key that prevents the grid snapping while moving the selection.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.MultipleSelection">
            <summary>
            Gets or sets a value indicating whether multiple selection is allowed.
            </summary>
            <value><see langword="true"/> if multiple selection is allowed; otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.RectangleSelection">
            <summary>
            Gets or sets a value indicating whether multiple selection is allowed by dragging a rectangle around objects.
            </summary>
            <value><see langword="true"/> if multiple selection is allowed by dragging a rectangle around objects; otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.InstantEditing">
            <summary>
            Gets or sets a value indicating whether editing is instantaneous.
            </summary>
            <value><see langword="true"/> if the editing is instantaneous; otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.CanEditText">
            <summary>
            Gets or sets a value indicating whether text editing is allowed.
            </summary>
            <value><see langword="true"/> if text editing is allowed; otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.CanDispatchEvents">
            <summary>
            Gets or sets a value indicating whether events should be dispatched to graphic objects.
            </summary>
            <value><see langword="true"/> if events should be dispatched to graphic objects; otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.CanConnect">
            <summary>
            Gets or sets a value indicating whether connecting or disconnecting links is allowed.
            </summary>
            <value><see langword="true"/> if connecting or disconnecting links is allowed; otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.CanMove">
            <summary>
            Gets or sets a value indicating whether moving selected objects is allowed.
            </summary>
            <value><see langword="true"/> if moving selected objects is allowed; otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.CanRotate">
            <summary>
            Gets or sets a value indicating whether rotating selected objects is allowed.
            </summary>
            <value><see langword="true"/> if rotating selected objects is allowed; otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.CanResize">
            <summary>
            Gets or sets a value indicating whether resizing selected objects is allowed.
            </summary>
            <value><see langword="true"/> if resizing selected objects is allowed; otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.CanEditShape">
            <summary>
            Gets or sets a value indicating whether editing the shape of selected objects is allowed.
            </summary>
            <value><see langword="true"/> if editing shaped of selected objects is allowed; otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.CanCopy">
            <summary>
            Gets or sets a value indicating whether copying selected objects is allowed.
            </summary>
            <value><see langword="true"/> if copying selected objects is allowed; otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.CanReparent">
            <summary>
            Gets or sets a value indicating whether reparenting selected objects is allowed.
            </summary>
            <value><see langword="true"/> if reparenting selected objects is allowed; otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.SnapToGrid">
            <summary>
            Gets or sets a value indicating whether selected objects should snap to the grid points.
            </summary>
            <value><see langword="true"/> if reparenting selected objects should snap to the grid points; otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.AutoScroll">
            <summary>
            Gets or sets a value indicating whether moving selected objects outside the diagram view should scroll the view.
            </summary>
            <value><see langword="true"/> if moving selected objects outside the diagram view should scroll the view; otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.DashStyle">
            <summary>
            Gets or sets the default dash style used for selection graphic.
            </summary>
            <value>One of the <see cref="T:System.Drawing.Drawing2D.DashStyle"/> values.
            The default value is <see langword="System.Drawing.Drawing2D.DashStyle">System.Drawing.Drawing2D.DashStyle.Solid</see>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.ForeColor">
            <summary>
            Gets or sets the default foreground color used for selection graphic.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> structure.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.HandleForeColor">
            <summary>
            Gets or sets the foreground color of selection handle.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> structure.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.HandleBackColor">
            <summary>
            Gets or sets the background color selection handle.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.PrimarySelectionHandleBackColor">
            <summary>
            Gets or sets the background color of primary selection handle.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> structure.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.PrimarySelectionHandleForeColor">
            <summary>
            Gets or sets the foreground color of primary selection handle.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> structure.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.HandleSize">
            <summary>
            Gets or sets the default size of handles of selection graphic.
            </summary>
            <value>A float value that represents the default size of selection handles. The default
            value is <strong>8</strong>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.HighlightColor">
            <summary>
            Gets or sets the default color used to highlight graphic objects.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> structure.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionStyle.HighlightSize">
            <summary>
            Gets or sets the default size of the border draw when highlighting objects.
            </summary>
            <value>A float value that represents the default size of the border draw when highlighting objects. The default
            value is <strong>4</strong>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.GridStyle">
            <summary>
            Represents the style of a <see cref="T:ILOG.Diagrammer.Grid"/> object.
            </summary>
            <remarks>Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.Grid.GridStyle"/> property
            of a <see cref="T:ILOG.Diagrammer.Grid"/>.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GridStyle.Dots">
            <summary>
            Displays the grid with dots.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GridStyle.Lines">
            <summary>
            Displays the grid using lines.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GridLineStyle">
            <summary>
            Specifies the style of grid lines in a <see cref="T:ILOG.Diagrammer.Grid"/> object.
            </summary>
            <remarks>Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.Grid.HorizontalLineStyle"/> 
            and <see cref="P:ILOG.Diagrammer.Grid.VerticalLineStyle"/> property
            of a <see cref="T:ILOG.Diagrammer.Grid"/>.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GridLineStyle.None">
            <summary>
            No grid lines between cells.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GridLineStyle.Solid">
            <summary>
            Solid grid lines between cells.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GridLineStyle.Dash">
            <summary>
            Grid lines consisting of dashes between cells.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GridLineStyle.Dot">
            <summary>
            Grid lines consisting of dots between cells.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GridLineStyle.DashDot">
            <summary>
            Grid lines consisting of a repeating pattern of dash-dot between cells.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GridLineStyle.DashDotDot">
            <summary>
            Grid lines consisting of a repeating pattern of dash-dot-dot between cells.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Grid">
            <summary>
            Represents a grid displayed in a <see cref="T:ILOG.Diagrammer.IDiagramView"/>.
            </summary>
            <remarks>A <see cref="T:ILOG.Diagrammer.Grid"/> is painted in a <see cref="T:ILOG.Diagrammer.IDiagramView"/>. Its purpose is to draw graphic
            decorations such as dots or lines to help positioning graphic objects. A grid can be painted on top of the view,
            or in the view background.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Grid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Grid"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Grid.#ctor(System.Drawing.Color,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Size2D,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Grid"/> class using the specified parameters.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color"/> that represents the color of the grid.</param>
            <param name="origin">A <see cref="T:ILOG.Diagrammer.Point2D"/> object that specifies the origin of the grid.</param>
            <param name="spacing">A <see cref="T:ILOG.Diagrammer.Size2D"/> object that specifies the horizontal and vertical spacing of the grid.</param>
            <param name="visible"><see langword="true"/> if the grid is visible; otherwise, <see langword="false"/>.</param>
            <param name="active"><see langword="true"/> if the grid is active; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Grid.Paint(ILOG.Diagrammer.DrawingContext,ILOG.Diagrammer.IDiagramView)">
            <summary>
            Paints the grid.
            </summary>
            <param name="context">A <see cref="T:ILOG.Diagrammer.DrawingContext"/>.</param>
            <param name="view">The <see cref="T:ILOG.Diagrammer.IDiagramView"/> in which the grid is painted.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Grid.Snap(ILOG.Diagrammer.Point2D)">
            <summary>
            Snaps the specified point to the nearest point located on the grid.
            </summary>
            <param name="p">A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Point2D"/> structure located on the grid.</returns>
            <remarks>This method is called when the grid is <see cref="P:ILOG.Diagrammer.Grid.Active"/>.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Grid.GetHashCode">
            <summary>
            Computes the hashcode for the object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Grid.Equals(System.Object)">
            <summary>
            Tests if two <see cref="T:ILOG.Diagrammer.Grid"/> are equals.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Grid.ToString">
            <summary>
            This member overrides <see cref="M:System.Object.ToString">Object.ToString</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Grid.HorizontalLineStyle">
            <summary>
            Gets or sets the style of horizontal grid lines.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.GridLineStyle"/> values that represents the style
            of horizontal grid lines. The default value 
            is <see cref="F:ILOG.Diagrammer.GridLineStyle.Solid">GridLineStyle.Solid</see>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Grid.VerticalLineStyle">
            <summary>
            Gets or sets the style of vertical grid lines.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.GridLineStyle"/> values that represents the style
            of vertical grid lines. The default value 
            is <see cref="F:ILOG.Diagrammer.GridLineStyle.Solid">GridLineStyle.Solid</see>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Grid.HorizontalLineColor">
            <summary>
            Gets or sets the color of horizontal grid lines.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the color
            of horizontal grid lines. The default value 
            is <see cref="P:System.Drawing.SystemColors.ControlLight">SystemColors.ControlLight</see>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Grid.VerticalLineColor">
            <summary>
            Gets or sets the color of vertical grid lines.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the color
            of vertical grid lines. The default value 
            is <see cref="P:System.Drawing.SystemColors.ControlLight">SystemColors.ControlLight</see>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Grid.GridStyle">
            <summary>
            Gets or sets the style of the grid.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.GridStyle"/> values that represents the style
            of the grid. The default value 
            is <see cref="F:ILOG.Diagrammer.GridStyle.Dots">GridStyle.Dots</see>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Grid.ShowOnTop">
            <summary>
            Indicates whether the grid is displayed on top or not.
            </summary>
            <value><see langword="true"/> if the grid is displayed on top; 
            <see langword="false"/> otherwise. The default value is <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Grid.Active">
            <summary>
            Indicates whether the grid is active or not.
            </summary>
            <value><see langword="true"/> if the grid is active; 
            <see langword="false"/> otherwise. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Grid.Visible">
            <summary>
            Indicates whether the grid is visible or not.
            </summary>
            <value><see langword="true"/> if the grid is visible; 
            <see langword="false"/> otherwise. The default value is <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Grid.DotColor">
            <summary>
            Gets or sets the color of the grid dots.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the color
            of the grid dots. The default value 
            is <see cref="P:System.Drawing.SystemColors.WindowText">SystemColors.WindowText</see>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Grid.DotSize">
            <summary>
            Gets or sets the size of the grid dots.
            </summary>
            <value>A <see cref="T:System.Single"/> that represents the size
            of the grid dots. The default value 
            is <strong>1</strong>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Grid.HorizontalLineWidth">
            <summary>
            Gets or sets the width of the horizontal grid lines.
            </summary>
            <value>A <see cref="T:System.Single"/> that represents the width of the horizontal grid lines. The default value 
            is <strong>1</strong>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Grid.VerticalLineWidth">
            <summary>
            Gets or sets the width of the vertical grid lines.
            </summary>
            <value>A <see cref="T:System.Single"/> that represents the width of the vertical grid lines. The default value 
            is <strong>1</strong>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Grid.HorizontalSpacing">
            <summary>
            Gets or sets the spacing between horizontal grid lines.
            </summary>
            <value>A <see cref="T:System.Single"/> value that represents 
            the spacing between horizontal grid lines. The default value is 10.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Grid.VerticalSpacing">
            <summary>
            Gets or sets the spacing between vertical grid lines.
            </summary>
            <value>A <see cref="T:System.Single"/> value that represents 
            the spacing between vertical grid lines. The default value is 10.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Grid.Origin">
            <summary>
            Gets or sets the origin of the grid.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> object that represents the origin of the grid.
            The default value is the point <strong>(0,0)</strong>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Grid.YSteps">
            <summary>
            Gets or sets the vertical steps for the grid.
            </summary>
            <value>The number of steps between two visible points. The default value is <strong>1</strong>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Grid.XSteps">
            <summary>
            Gets or sets the horizontal steps for the grid.
            </summary>
            <value>The number of steps between two visible points. The default value is <strong>1</strong>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ScrollBarPart">
            <summary>
            Describes the different parts of a <see cref="T:ILOG.Diagrammer.Graphic.ScrollBar"/>.
            </summary>
            <remarks>This enumeration is used by the <see cref="M:ILOG.Diagrammer.Graphic.ScrollBar.GetScrollBarPart(ILOG.Diagrammer.Point2D)"/> method.</remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ScrollBarPart.None">
            <summary>
            Not part of a scroll bar.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ScrollBarPart.DecrementArrow">
            <summary>
            The decrement arrow of a scroll bar.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ScrollBarPart.IncrementArrow">
            <summary>
            The increment arrow of a scroll bar.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ScrollBarPart.DecrementTrack">
            <summary>
            The part of the track between the thumb and the decrement arrow of a scroll bar.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ScrollBarPart.IncrementTrack">
            <summary>
            The part of the track between the thumb and the increment arrow of a scroll bar.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ScrollBarPart.Thumb">
            <summary>
            The thumb of a scroll bar.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ScrollBar">
            <summary>
            Implements the basic functionality of a scroll bar control. 
            </summary>
            <remarks>
            You typically do not inherit directly from the <see cref="T:ILOG.Diagrammer.Graphic.ScrollBar"/> class.
            To create your own scroll bar class, inherit from 
            the <see cref="T:ILOG.Diagrammer.Graphic.VScrollBar"/> or <see cref="T:ILOG.Diagrammer.Graphic.HScrollBar"/> class.
            To adjust the value range of the scroll bar control, 
            set the <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Minimum"/> and <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Maximum"/> properties. To adjust the distance 
            the scroll box moves, set the <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.SmallChange"/> and <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.LargeChange"/> properties. 
            To adjust the starting point of the scroll box, set the <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Value"/> property 
            when the control is initially displayed.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.ScrollBar"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.Dispose(System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.Dispose(System.Boolean)">GraphicObject.Dispose</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.OnValueChanged(System.Single,System.Single)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Value"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.OnMinimumChanged(System.Single,System.Single)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Minimum"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.OnMaximumChanged(System.Single,System.Single)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Maximum"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.OnLargeChangeChanged(System.Single,System.Single)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.LargeChange"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.OnSmallChangeChanged(System.Single,System.Single)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.SmallChange"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.UpdateScrollInfo">
            <summary>
            Is called when one of the scroll bar values has changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.HitTestChildren(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.HitTestContent(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicContainer.HitTestContent</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.IntersectsChildren(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.HitTestContent(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicContainer.HitTestContent</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.PaintChildren(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicContainer.PaintContent(ILOG.Diagrammer.DrawingContext)">GraphicContainer.PaintContent</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.PaintCore(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)">GraphicObject.PaintCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.GetScrollBarParts(ILOG.Diagrammer.Rectangle2D@,ILOG.Diagrammer.Rectangle2D@,ILOG.Diagrammer.Rectangle2D@,ILOG.Diagrammer.Rectangle2D@)">
            <summary>
            Gets the sizes and locations of the different parts of the scroll bar.
            </summary>
            <param name="arrow1">The decrement arrow bounds.</param>
            <param name="track">The track bounds.</param>
            <param name="slider">The thumb bounds.</param>
            <param name="arrow2">The increment arrow bounds.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.GetScrollBarPart(ILOG.Diagrammer.Point2D)">
            <summary>
            Gives information on the scroll bar elements at the specifid point.
            </summary>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</param>
            <returns>One of the <see cref="T:ILOG.Diagrammer.Graphic.ScrollBarPart"/> values.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.OnMouseDown(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseDown(ILOG.Diagrammer.ObjectMouseEventArgs)">GraphicObject.OnMouseDown</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.OnLostMouseCapture(ILOG.Diagrammer.ObjectEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnLostMouseCapture(ILOG.Diagrammer.ObjectEventArgs)">GraphicObject.OnLostMouseCapture</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.GetValue(ILOG.Diagrammer.Point2D)">
            <summary>
            Gets the scroll bar value at the specified point.
            </summary>
            <param name="p">A <see cref="T:ILOG.Diagrammer.Point2D"/> structure.</param>
            <returns>The scroll bar value at the specified point.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.OnMouseMove(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseMove(ILOG.Diagrammer.ObjectMouseEventArgs)">GraphicObject.OnMouseMove</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.OnMouseLeave(ILOG.Diagrammer.ObjectEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseLeave(ILOG.Diagrammer.ObjectEventArgs)">GraphicObject.OnMouseLeave</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.OnMouseUp(ILOG.Diagrammer.ObjectMouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.OnMouseUp(ILOG.Diagrammer.ObjectMouseEventArgs)">GraphicObject.OnMouseUp</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.OnDecrementArrowPressed">
            <summary>
            Is called when the decrement arrow is pressed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.OnIncrementArrowPressed">
            <summary>
            Is called when the increment arrow is pressed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.OnDecrementTrackPressed">
            <summary>
            Is called when the track is clicked between the decrement arrow and the thumb.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScrollBar.OnIncrementTrackPressed">
            <summary>
            Is called when the track is clicked between the increment arrow and the thumb.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollBar.Background">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Graphic.Control.Background">Control.Background</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollBar.AutoSize">
            <summary>
            This member redefines <see cref="P:ILOG.Diagrammer.GraphicObject.AutoSize">GraphicObject.AutoSize</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollBar.Value">
            <summary>
            Gets or sets the current value of the range element.
            </summary>
            <value>A <see cref="T:System.Single"/> value.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Minimum"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Maximum"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.SmallChange"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.LargeChange"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScrollBar.ValueChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Value"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollBar.Minimum">
            <summary>
            Gets or sets the minimum possible value of the range element.
            </summary>
            <value>A <see cref="T:System.Single"/> value.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Value"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Maximum"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.SmallChange"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.LargeChange"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScrollBar.MinimumChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Minimum"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollBar.Maximum">
            <summary>
            Gets or sets the maximum possible value of the range element.
            </summary>
            <value>A <see cref="T:System.Single"/> value.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Minimum"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Value"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.SmallChange"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.LargeChange"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScrollBar.MaximumChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Maximum"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollBar.LargeChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the Value property when the scroll box is moved a large distance. 
            </summary>
            <value>A <see cref="T:System.Single"/> value.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Minimum"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Maximum"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.SmallChange"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Value"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScrollBar.LargeChangeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.LargeChange"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollBar.SmallChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the Value property when the scroll box is moved a small distance.
            </summary>
            <value>A <see cref="T:System.Single"/> value.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Minimum"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Maximum"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Value"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScrollBar.LargeChange"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScrollBar.SmallChangeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.SmallChange"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScrollBar.IsHorizontal">
            <summary>
            Indicates whether this scroll bar is horizontal or not.
            </summary>
            <value><see langword="true"/> if the scroll bar is horizontal; Otherwise, 
            <see langword="false"/>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.HScrollBar">
            <summary>
            Represents a standard Windows horizontal scroll bar. 
            </summary>
            <remarks>
            You can use this control to implement scrolling in a custom graphic 
            object or for user input of numeric data.
            The <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Minimum"/> and <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Maximum"/> properties determine the 
            range of values the user can select. 
            The <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.LargeChange"/> property determines the effect of clicking within the
            scroll bar but outside the scroll box. The <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.SmallChange"/> property determines 
            the effect of clicking the scroll arrows at each end of the control.
            </remarks>
            <example>
            <para lang="cs,vbnet">The following example creates a scrollbar, 
            the ValueChanged event is handled to
            print the scrollbar value.</para>
            <code lang="cs">
            HScrollBar CreateHScrollBar()
            {
                HScrollBar scrollbar = new HScrollBar();
                scrollbar.Rectangle = new Rectangle2D(0, 0, 400, 30);
                scrollbar.Minimum = 0;
                scrollbar.Maximum = 200;
                scrollbar.LargeChange = 50;
                scrollbar.Value = 50;
                scrollbar.ValueChanged += new EventHandler(OnValueChanged);
                return scrollbar;
            }
            
            void OnValueChanged(object sender, EventArgs e)
            {
                Console.WriteLine("The scrollbar value has changed to " + ((ScrollBar)sender).Value);
            }
            </code>
            <code lang="vbnet">
            Function CreateHScrollBar() As HScrollBar 
                Dim scrollbar As HScrollBar = New HScrollBar 
                scrollbar.Rectangle = New Rectangle2D(0, 0, 400, 30) 
                scrollbar.Minimum = 0 
                scrollbar.Maximum = 200 
                scrollbar.LargeChange = 50 
                scrollbar.Value = 50 
                AddHandler scrollbar.ValueChanged, AddressOf OnValueChanged 
                Return scrollbar 
            End Function 
            
            Sub OnValueChanged(ByVal sender As Object, ByVal e As EventArgs) 
              Console.WriteLine("The scrollbar value has changed to " + CType(sender, ScrollBar).Value) 
            End Sub
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.HScrollBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.HScrollBar"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.HScrollBar.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">GraphicObject.GetPreferredSizeCore</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.HScrollBar.IsHorizontal">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.IsHorizontal">ScrollBar.IsHorizontal</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.HScrollBar.HasPreferredHeight">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight">GraphicObject.HasPreferredHeight</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.HScrollBar.HasPreferredWidth">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth">GraphicObject.HasPreferredWidth</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.VScrollBar">
            <summary>
            Represents a standard Windows vertical scroll bar. 
            </summary>
            <remarks>
            You can use this control to implement scrolling in a custom graphic 
            object or for user input of numeric data.
            The <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Minimum"/> and <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.Maximum"/> properties determine the 
            range of values the user can select. 
            The <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.LargeChange"/> property determines the effect of clicking within the
            scroll bar but outside the scroll box. The <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.SmallChange"/> property determines 
            the effect of clicking the scroll arrows at each end of the control.
            </remarks>   
            <example>
            <para lang="cs,vbnet">The following example creates a scrollbar, 
            the ValueChanged event is handled to
            print the scrollbar value.</para>
            <code lang="cs">
            VScrollBar CreateVScrollBar()
            {
                VScrollBar scrollbar = new VScrollBar();
                scrollbar.Rectangle = new Rectangle2D(0, 0, 30, 400);
                scrollbar.Minimum = 0;
                scrollbar.Maximum = 200;
                scrollbar.LargeChange = 50;
                scrollbar.Value = 50;
                scrollbar.ValueChanged += new EventHandler(OnValueChanged);
                return scrollbar;
            }
            
            void OnValueChanged(object sender, EventArgs e)
            {
                Console.WriteLine("The scrollbar value has changed to " + ((ScrollBar)sender).Value);
            }
            </code>
            <code lang="vbnet">
            Function CreateVScrollBar() As VScrollBar 
                Dim scrollbar As VScrollBar = New VScrollBar 
                scrollbar.Rectangle = New Rectangle2D(0, 0, 30, 400) 
                scrollbar.Minimum = 0 
                scrollbar.Maximum = 200 
                scrollbar.LargeChange = 50 
                scrollbar.Value = 50 
                AddHandler scrollbar.ValueChanged, AddressOf OnValueChanged 
                Return scrollbar 
            End Function 
            
            Sub OnValueChanged(ByVal sender As Object, ByVal e As EventArgs) 
              Console.WriteLine("The scrollbar value has changed to " + CType(sender, ScrollBar).Value) 
            End Sub
            </code>
            </example>    
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.VScrollBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.VScrollBar"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.VScrollBar.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetPreferredSizeCore(ILOG.Diagrammer.Size2D)">GraphicObject.GetPreferredSizeCore</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.VScrollBar.IsHorizontal">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Graphic.ScrollBar.IsHorizontal">ScrollBar.IsHorizontal</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.VScrollBar.HasPreferredHeight">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight">GraphicObject.HasPreferredHeight</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.VScrollBar.HasPreferredWidth">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth">GraphicObject.HasPreferredWidth</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.DiagramPageSetupDialog">
            <summary>
            Defines a dialog box that allows you to configure the printing of a diagram.
            </summary>
            <remarks>Use the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramPageSetupDialog.Document"/> property to get or set the document to configure.
            <p/>
            <img src="images/Windows/Forms/DiagramPageSetupDialog.png"/>
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample shows how to configure a <see cref="T:ILOG.Diagrammer.Printing.DiagramPrintDocument"/>.</para>
            <code lang="cs">
            Group container = new Group();
            Ellipse ellipse = new Ellipse(0, 0, 100, 100);
            container.Objects.Add(ellipse);
            DiagramPrintDocument document = new DiagramPrintDocument(container);
            DiagramPageSetupDialog dialog = new DiagramPageSetupDialog();
            dialog.Document = document;
            dialog.ShowDialog();
            </code>
            <code lang="vbnet">
            Dim container As Group = New Group
            Dim ellipse As Ellipse = New Ellipse(0, 0, 100, 100)
            container.Objects.Add(ellipse)
            Dim document As DiagramPrintDocument = New DiagramPrintDocument(container)
            Dim dialog As DiagramPageSetupDialog = New DiagramPageSetupDialog
            dialog.Document = document
            dialog.ShowDialog()
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.DiagramPrintPreviewDialog"/>
            <seealso cref="T:ILOG.Diagrammer.Printing.DiagramPrintDocument"/>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramPageSetupDialog.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramPageSetupDialog"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramPageSetupDialog.Dispose(System.Boolean)">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramPageSetupDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramPageSetupDialog.Initialize">
            <summary>
            Initializes the dialog box fields according to the current document.
            </summary>
            <exception cref="T:System.NullReferenceException">The <strong>Document</strong> property
            is <see langword="null"/>.</exception>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramPageSetupDialog.OnClosed(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Form.OnClosed(System.EventArgs)">Form.OnClosed</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramPageSetupDialog.OnShown(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Form.OnShown(System.EventArgs)">Form.OnShown</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramPageSetupDialog.SetUpDocument">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.DocumentPageSetupDialog.SetUpDocument">DiagramPageSetupDialog.SetUpDocument</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramPageSetupDialog.ClientSize">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Form.ClientSize">Form.ClientSize</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramPageSetupDialog.AutoScaleBaseSize">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Form.AutoScaleBaseSize">Form.AutoScaleBaseSize</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramPageSetupDialog.Text">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.Text">Control.Text</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramPageSetupDialog.Document">
            <summary>
            Gets or sets the document.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Printing.DiagramPrintDocument"/> object that represents the document to print.</value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphLayoutDescriptionAttribute">
            <summary>
            This class must be used to define the descriptions of graph layout properties,
            because the strings are looked up from resource files that are generated
            next to the graph layout source files.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutDescriptionAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayoutDescriptionAttribute"/> class.
            </summary>
            <param name="description">
            The description string must have the following format:
                XyzLayout_Property1_Description
            Where "XyzLayout" is the last component of the namespace of
            the graph layout, and "Property1" is the property name. The
            description string must end with "_Description".
            </param>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphLayoutCategoryAttribute">
            <summary>
            This class must be used to define the categories of graph layout properties,
            because the strings are looked up from resource files that are generated
            next to the graph layout source files.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphLayoutCategoryAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:ILOG.Diagrammer.GraphLayout.GraphLayoutCategoryAttribute"/> class.
            </summary>
            <param name="category">
            The category string must have the following format:
                XyzLayout_Category1_Category
            Where "XyzLayout" is the last component of the namespace of
            the graph layout, and "Category1" is the category key. The
            category string must end with "_Category".
            </param>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphLayoutNodePropertyAttribute">
            <summary>
            This attribute is used to mark "node properties", that is, extended properties
            provided by a graphLayout subclass and that apply to nodes only (not links).
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ValueChangedReason">
            <summary>
            Describes the reason of a value change in a <see cref="T:ILOG.Diagrammer.Windows.Forms.GenericValueEditor"/>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ValueChangedReason.UITypeEditor">
            <summary>
            The value was changed using the <see cref="F:ILOG.Diagrammer.Windows.Forms.ValueChangedReason.UITypeEditor"/> of the <see cref="T:ILOG.Diagrammer.Windows.Forms.GenericValueEditor"/>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ValueChangedReason.UpDownButton">
            <summary>
            The value was changed using the up/down button of the <see cref="T:ILOG.Diagrammer.Windows.Forms.GenericValueEditor"/>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ValueChangedReason.MouseWheel">
            <summary>
            The value was changed using the mouse wheel.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ValueChangedReason.ArrowKeys">
            <summary>
            The value was changed using the arrow keys.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ValueChangedReason.Validation">
            <summary>
            The value was changed after the control has been validated.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ValueChangedReason.Return">
            <summary>
            The value was changed after the <strong>Return</strong> key has been pressed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.ValueChangedReason.Unknown">
            <summary>
            The value was changed by any other mean than the ones listed above.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ValueChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.ValueChanged"/> event of the 
            <see cref="T:ILOG.Diagrammer.Windows.Forms.GenericValueEditor"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.ValueChangedEventArgs.#ctor(ILOG.Diagrammer.Windows.Forms.ValueChangedReason)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.ValueChangedEventArgs"/> class using the
            specified reason.
            </summary>
            <param name="reason">The reason of the value change.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.ValueChangedEventArgs.Reason">
            <summary>
            Gets the reason of the value change.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Windows.Forms.ValueChangedReason"/> values.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ValueChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.ValueChanged"/> event of
            a <see cref="T:ILOG.Diagrammer.Windows.Forms.GenericValueEditor"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.GenericValueEditor">
            <summary>
            Represents a Windows control that allows you to edit a value of any type.
            </summary>
            <remarks>
            <p>The <strong>GenericValueEditor</strong> control allows the user to edit
            values of a specific type. Use the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.Value"/> property to access
            the edited value.</p>
            <p>The type of objects to edit is defined by the
            <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.EditedType"/> property of this control. The
            <strong>GenericValueEditor</strong> uses the <see cref="T:System.Drawing.Design.UITypeEditor"/> and
            <see cref="T:System.ComponentModel.TypeConverter"/> installed on that type to edit and validate values.</p>
            <p>When the <see cref="T:System.Drawing.Design.UITypeEditor"/> associated with the edited type has the style
            <strong>DropDown</strong> (see <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/>), then
            this control will display a down arrow button that drops the custom editor.
            When the <see cref="T:System.Drawing.Design.UITypeEditor"/> associated with the edited type has the style
            <strong>Modal</strong>, then this control will display a <strong>...</strong> button
            that opens the modal dialog.</p>
            <p>When no <see cref="T:System.Drawing.Design.UITypeEditor"/> is associated with the edited type or the
            associated editor is of style <strong>None</strong>, then the behavior of the
            control depends on the edited type. If the type is enumerated, then the control acts
            like a combo box of the enumerated values. If the type is not an enumerated type,
            then the control acts like a text box.</p>
            <p>If the editor associated with the edited type can display a representation of
            the edited value (see 
            <see cref="M:System.Drawing.Design.UITypeEditor.GetPaintValueSupported">UITypeEditor.GetPaintValueSupported</see>),
            then a small rectangle showing this representation will be displayed in addition to the
            textual value.</p> 
            <p>You can decide to transform this control into an <strong>UpDownControl</strong>
            by setting the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.ShowUpDownButton"/> property to <see langword="true"/>. In
            this case, if the edited type is an enumerated type then the Up and Down buttons
            will allow you to navigate into the enumerated values of this type, otherwise you may
            handle the <see cref="E:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.UpButtonClick"/> and <see cref="E:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DownButtonClick"/> events.</p>
            </remarks>
            <example>
            <para lang="cs,vbnet">The following code sample shows how to create a <strong>GenericValueEditor</strong> for editing 
            a <see cref="T:System.Drawing.Color"/> stucture.
            </para>
            <code lang="cs">
            private GenericValueEditor GetColorEditor(Color startColor) {
            	GenericValueEditor editor = new GenericValueEditor();
            	editor.EditedType = typeof(Color);
            	editor.Value = startColor;
            	return editor;
            }
            </code>
            <code lang="vbnet">
            Private Funtion GetColorEditor(ByVal startColor As Color) as GenericValueEditor
            	Dim editor as GenericValueEditor = New GenericValueEditor()
            	editor.EditedType = GetType(Color)
            	editor.Value = startColor
            	Return editor
            End Function
            </code>
            </example>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._textOffset">
            <summary>
            The text offset.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._showUpDownButton">
            <summary>
            Indicates whether the control should display an up-down button.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._autoSize">
            <summary>
            Indicates whether the control is in auto size mode.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._autoCompletion">
            <summary>
            Indicates whether the control is in auto completion mode.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._textEditable">
            <summary>
            Indicates whether the text can be edited.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._borderStyle">
            <summary>
            The border style. Note that initialization must be done here.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._type">
            <summary>
            Edited type.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._converter">
            <summary>
            The type converter for the edited type.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._editor">
            <summary>
            The editor for the currently edited type.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._format">
            <summary>
            Format for the text.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._formatInfo">
            <summary>
             Format provider to format the text.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._value">
            <summary>
            Current value of the editor.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._editControl">
            <summary>
            The text box for editing text.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._upDownButton">
            <summary>
            A button used to modify the edited value.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._dropDownButton">
            <summary>
            A button used to drop UI type editors, if any.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._paintValueBox">
            <summary>
            A <strong>PictureBox</strong> used to paint the value.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._dropDownListBox">
            <summary>
            A <strong>ListBox</strong> to drop standard values of a type.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._hasDropButton">
            <summary>
            Indicates whether a button should be displayed to drop a <strong>UITypeEditor</strong>
            or the standard value list box.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._editorService">
            <summary>
            The <strong>IWindowsFormsEditorService</strong> that allows you to drop UI type
            editors.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor._context">
            <summary>
            A Context that can be used to help type converters....
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.GenericValueEditor"/> class.
            </summary>
            <remarks>The default edited type is <see cref="T:System.String"/>.</remarks>
            <example>
            <para lang="cs,vbnet">The following code sample shows how to create a <strong>GenericValueEditor</strong> for editing 
            a <see cref="T:System.Drawing.Color"/> stucture.
            </para>
            <code lang="cs">
            private GenericValueEditor GetColorEditor(Color startColor) {
            	GenericValueEditor editor = new GenericValueEditor();
            	editor.EditedType = typeof(Color);
            	editor.Value = startColor;
            	return editor;
            }
            </code>
            <code lang="vbnet">
            Private Funtion GetColorEditor(ByVal startColor As Color) as GenericValueEditor
            	Dim editor as GenericValueEditor = New GenericValueEditor()
            	editor.EditedType = GetType(Color)
            	editor.Value = startColor
            	Return editor
            End Function
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.GenericValueEditor"/> class using
            the specified type.
            </summary>
            <param name="editedType">The <see cref="T:System.Type"/> of object that can be edited by this control.</param>
            <example>
            <para lang="cs,vbnet">The following code sample shows how to create a <strong>GenericValueEditor</strong> for editing 
            a <see cref="T:System.Drawing.Color"/> stucture.
            </para>
            <code lang="cs">
            private GenericValueEditor GetColorEditor(Color startColor) {
            	GenericValueEditor editor = new GenericValueEditor();
            	editor.EditedType = typeof(Color);
            	editor.Value = startColor;
            	return editor;
            }
            </code>
            <code lang="vbnet">
            Private Funtion GetColorEditor(ByVal startColor As Color) as GenericValueEditor
            	Dim editor as GenericValueEditor = New GenericValueEditor()
            	editor.EditedType = GetType(Color)
            	editor.Value = startColor
            	Return editor
            End Function
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)">Control.OnRightToLeftChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.ResetForeColor">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.ForeColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.ResetBackColor">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.BackColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnBorderStyleChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.BorderStyle"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>BorderStyle</strong> property is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnTextAlignChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.TextAlign"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>TextAlign</strong> property is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnAutoCompletionChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.AutoCompletion"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>AutoCompletion</strong> property is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnTextEditableChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.TextEditable"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>TextEditable</strong> property is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnReadOnlyChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.ReadOnly"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>ReadOnly</strong> property is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnValueChanged(ILOG.Diagrammer.Windows.Forms.ValueChangedEventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.Value"/> property is changed on the control.
            </summary>
            <param name="e">A <see cref="T:ILOG.Diagrammer.Windows.Forms.ValueChangedEventArgs"/> that contains the event data.</param>
            <remarks>Called when the <strong>Value</strong> property is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnSystemColorsChanged(System.EventArgs)">
            <summary>
            This members overrides <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)">Control.OnSystemColorsChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnCursorChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)">Control.OnCursorChanged</see>.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.ScaleCore(System.Single,System.Single)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.ScaleCore(System.Single,System.Single)">Control.ScaleCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">Control.SetBoundsCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnFontChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)">Control.OnFontChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnHandleCreated(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)">Control.OnHandleCreated</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)">Control.OnValidating</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnLeave(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)">Control.OnLeave</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnEnter(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)">Control.OnEnter</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnGotFocus(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)">Control.OnGotFocus</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">Control.OnMouseDown</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnEnabledChanged(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)">Control.OnEnabledChanged</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">Control.OnPaint</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.FireEvent(System.Object,System.EventArgs)">
            <summary>
            Fires an event based on key in the Events list.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.PictureBoxClicked(System.Object,System.EventArgs)">
            <summary>
            Invoked when clicking the picture box.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.UpButtonClicked(System.Object,System.EventArgs)">
            <summary>
            Invoked when clicking the up button.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DownButtonClicked(System.Object,System.EventArgs)">
            <summary>
            Invoked when clicking the down button.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DropDownButtonClicked(System.Object,System.EventArgs)">
            <summary>
            Invoked when clicking the drop button.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnPictureBoxClick(System.EventArgs)">
            <summary>
            Is called when the picture box of the control is clicked.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>Called when the picture box of the control is clicked.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnDropDownButtonClick(System.EventArgs)">
            <summary>
            Is called when the drop button of the control is clicked.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>Called when the drop down button of the control is clicked.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnUpButtonClick(System.EventArgs)">
            <summary>
            Is called when the up button of the control is clicked.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>Called when the up button of the control is clicked.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnDownButtonClick(System.EventArgs)">
            <summary>
            Is called when the down button of the control is clicked.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>Called when the down button of the control is clicked.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.IsEnumerable">
            <summary>
            Indicates whether the values of the edited type can be enumerated.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DropEditor">
            <summary>
            Drops the <see cref="T:System.Drawing.Design.UITypeEditor"/> associated with the edited value.
            </summary>
            <remarks>The method may also drop a list box if the edited value does not 
            have any editor and the type proposes standard values.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)">Control.IsInputKey</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)">Control.ProcessDialogKey</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">Control.OnKeyPress</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">Control.OnMouseWheel</see>.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the data.</param>
            <remarks>The default implementation iterates on the standard values proposed by
            the edited type, if any.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)">Control.OnKeyDown</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.UpdateTextWithValue">
            <summary>
            Resets the text of the control to the string representation of the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.Value"/> property.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.CommitText">
            <summary>
            Is called to commit the text that is currently edited by the control.
            </summary>
            <returns><see langword="true"/> if the string has been successfully converted into 
            the type defined by the property <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.EditedType"/>; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.CommitText(ILOG.Diagrammer.Windows.Forms.ValueChangedReason)">
            <summary>
            Is called to commit the text that is currently edited by the control.
            </summary>
            <param name="reason">One of the <see cref="T:ILOG.Diagrammer.Windows.Forms.ValueChangedReason"/> values.</param>
            <returns><see langword="true"/> if the string has been successfully converted into 
            the type defined by the property <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.EditedType"/>; <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.ValueChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.Value"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.Context">
            <summary>
            Gets or sets the context that will be used to convert the edited value
            using type converters.
            </summary>
            <value>An instance of <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>. The default value
            is <see langword="null"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.BackgroundImage">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.BackgroundImage">Control.BackgroundImage</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.BackgroundImageLayout">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.BackgroundImageLayout">Control.BackgroundImageLayout</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.ForeColor">
            <summary>
            Gets or sets the foreground color of the control.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the foreground color of the control.
            The default value is the value for window text (<see cref="P:System.Drawing.SystemColors.WindowText">SystemColors.WindowText</see>).</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.BackColor">
            <summary>
            Gets or sets the background color of the control.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the background color of the control.
            The default value is the value for window text (<see cref="P:System.Drawing.SystemColors.Window">SystemColors.Window</see>).</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.AutoSize">
            <summary>
            Gets or sets a value indicating whether the control automatically adjusts its height to the font height.
            </summary>
            <value><see langword="true"/> if the control adjusts its height to closely fit 
            its contents; <see langword="false"/> otherwise. The default value is <see langword="true"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.BorderStyle">
            <summary>
            Gets or sets the border style of the control.
            </summary>
            <value>One of the <see cref="T:System.Windows.Forms.BorderStyle"/> values. The default value
            is <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.BorderStyleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.BorderStyle"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.TextAlign">
            <summary>
            Gets or sets the way text is aligned in a <see cref="T:ILOG.Diagrammer.Windows.Forms.GenericValueEditor"/> control.
            </summary>
            <value>One of the <see cref="T:System.Windows.Forms.HorizontalAlignment"/> enumeration values that specifies 
            how text is aligned in the control. The default value is <see cref="F:System.Windows.Forms.HorizontalAlignment.Left"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.TextAlignChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.TextAlign"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.AutoCompletion">
            <summary>
            Gets or sets a value indicating whether auto-completion is enabled.
            </summary>
            <value><see langword="true"/> if auto-completion is enabled; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
            <remarks>Auto-completion is used when the <see cref="T:System.ComponentModel.TypeConverter"/> sets on this
            control supports standard values.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.AutoCompletionChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.AutoCompletion"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.TextEditable">
            <summary>
            Gets or sets a value indicating whether the text in the text box is editable.
            </summary>
            <value><see langword="true"/> if the text in the text box is editable; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.TextEditableChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.TextEditable"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.ReadOnly">
            <summary>
            Gets or sets a value indicating whether text in the text box is read-only.
            </summary>
            <value><see langword="true"/> if the text box is read-only; <see langword="false"/> otherwise. The default value is 
            <see langword="false"/>.</value>
            <remarks>When this property is set to <see langword="true"/>, the contents of the control cannot be 
            changed by the user at runtime. With this property set to <see langword="true"/>, you can still set 
            the value of the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.Text"/> property in code. You can use this feature instead of disabling 
            the control with the <see cref="P:System.Windows.Forms.Control.Enabled"/> property to allow the contents to be copied.
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.ReadOnlyChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.ReadOnly"/> property is changed on the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.TextOffset">
            <summary>
            Gets or sets the offset used to display the text.
            </summary>
            <value>A <see cref="T:System.Drawing.Point"/> object that defines an offset used to display the text.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.ShowUpDownButton">
            <summary>
            Gets or sets a value indicating whether the control should display an up-down button to
            modify the edited value.
            </summary>
            <value><see langword="true"/> if the control should display an up-down button; 
            <see langword="false"/> otherwise.</value>
            <remarks>When this property is set to <see langword="true"/>, the editor set by the 
            <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.Editor"/> property is no longer used.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.PaintValueFrame">
            <summary>
            Gets or sets a value indicating whether a frame around the
            area that previews the edited value is displayed or not.
            </summary>
            <value><see langword="true"/> if the control displays a frame around the area that previews 
            the edited value; <see langword="false"/> otherwise.</value>
            <remarks>
            Not all editors can paint a representation of the edited value. If the
            editor cannot paint the edited value, then the value 
            of this property is meaningless.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.PaintValueOnly">
            <summary>
            Gets or sets a value indicating whether to show only the rectangle 
            that displays a representation of the edited value.
            </summary>
            <value><see langword="true"/> if the control shows only the rectangle that displays 
            a representation of the edited value; <see langword="false"/> otherwise. The textual value is then not visible.</value>
            <remarks>
            When the editor can paint a representation of the value
            (see <see cref="M:System.Drawing.Design.UITypeEditor.GetPaintValueSupported">UITypeEditor.GetPaintValueSupported</see>)
            this control will show both a textual value and a rectangle that displays a
            representation of the value.
            Setting this property to <see langword="true"/> will hide the textual value.
            Not all editors can paint a representation of the edited value. If the
            editor cannot paint the edited value, then the value 
            of this property is meaningless.
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.Value">
            <summary>
            Gets or sets the value edited by the control.
            </summary>
            <value>The current value of the editor.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.SelectionStart">
            <summary>
            Gets or sets the starting point of text selected in the control.
            </summary>
            <value>The starting position of text selected in the control.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.SelectionLength">
            <summary>
            Gets or sets the number of characters selected in the control.
            </summary>
            <value>The number of characters selected in the control.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.Text">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.Text">Control.Text</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.EditedType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> this control can edit.
            </summary>
            <value>A <see cref="T:System.Type"/> instance that represents the type of object that can be edited 
            by the editor.</value>
            <exception cref="T:System.ArgumentNullException">The property value is
            <see langword="null"/>.</exception>
            <remarks>Changing this property also changes the <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.Value"/>,
            <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.Converter"/>, and <see cref="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.Editor"/> properties.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.Converter">
            <summary>
            Gets or sets the type converter used by the editor.
            </summary>
            <value>A <see cref="T:System.ComponentModel.TypeConverter"/> instance that is used to convert the edited value from and to text.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.Editor">
            <summary>
            Gets or sets the type editor for this control.
            </summary>
            <value>A <see cref="T:System.Drawing.Design.UITypeEditor"/> instance that defines the way this control will edit the value.</value>
            <remarks>
            <p>When the editor has the style <strong>DropDown</strong>
            (see <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/>), then this control will display a
            down-arrow button that drops the custom editor. When the editor has the style
            <strong>Modal</strong>, then this control will display a <strong>...</strong>
            button that opens the modal dialog.</p>
            <p>When no editor is set or the editor is of style <strong>None</strong>, then
            the behavior of the control depends on the edited type. If the type is enumerated
            then the control acts like a combo box of the enumerated values. If the type is
            not an enumerated type, then the control acts like a text box.</p>
            <p>If the editor can display a representation of the edited value
            (see <see cref="M:System.Drawing.Design.UITypeEditor.GetPaintValueSupported">UITypeEditor.GetPaintValueSupported</see>),
            then a small rectangle showing this representation will be displayed in addition
            to the textual value.</p>
            </remarks>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.FormatInfo">
            <summary>
            Gets or sets the culture specific information used to determine how values are formatted.
            </summary>
            <value>An <see cref="T:System.IFormatProvider"/> instance.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.Format">
            <summary>
            Gets or sets the format that specifies how text is formatted in this control.
            </summary>
            <value>A string that specifies how text is formatted.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DefaultSize">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.DefaultSize">Control.DefaultSize</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.Focused">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.Focused">Control.Focused</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.EditControl">
            <summary>
            Gets the <strong>TextBox</strong> used for editing text.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.UpDownButton">
            <summary>
            Gets the button that drops the <strong>UITypeEditor</strong>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DropDownButton">
            <summary>
            Gets the button that drops the <strong>UITypeEditor</strong>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.PaintValueBox">
            <summary>
            Gets the picture box of the control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.ClipControl">
            <summary>
            Gets the control that contains the <strong>TextBox</strong>, the Button, and the Picture box.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.PictureBoxClick">
            <summary>
            Occurs when the picture box of the control is clicked.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DropDownButtonClick">
            <summary>
            Occurs when the drop-down button of the control is clicked.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.UpButtonClick">
            <summary>
            Occurs when the up button of the control is clicked.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DownButtonClick">
            <summary>
            Occurs when the down button of the control is clicked.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DropDownListBox">
            <summary>
            Gets the <strong>ListBox</strong> used for dropping standard values of a type.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.EditorService">
            <summary>
            The <strong>IWindowsFormsEditorService</strong> that allows you to
            drop dialog and UI type editors for a <see cref="T:ILOG.Diagrammer.Windows.Forms.GenericValueEditor"/>.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.EditorService.editor">
            <summary>
            The control that uses this service.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.EditorService._dropDownForm">
            <summary>
            A control that holds the dropped editors.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.EditorService._closingDropDown">
            <summary>
            Indicates whether we are currently closing the drop-down holder.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.EditorService.#ctor(ILOG.Diagrammer.Windows.Forms.GenericValueEditor)">
            <summary>
            Creates the editor service.
            </summary>
            <param name="editor">The cell editor.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.EditorService.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type <paramref name="serviceType"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.EditorService.SystemColorsChanged">
            <summary>
            Is Called when the SystemColorsChanged event is received
            by the GenericValueEditor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.EditorService.DropDownControl(System.Windows.Forms.Control)">
            <summary>
            Drops the editor control.
            </summary>
            <param name="ctl">The control to drop.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.EditorService.HideDropDown">
            <summary>
            Hides the drop-down editor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.EditorService.CloseDropDown">
            <summary>
            Closes the dropped editor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.EditorService.ShowDialog(System.Windows.Forms.Form)">
            <summary>
            Opens a dialog editor.
            </summary>
            <param name="dialog">The dialog to open.</param>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DropDownForm">
            <summary>
            The form that holds the dropped down editor.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DropDownForm._droppedControl">
            <summary>
            Currently dropped control.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DropDownForm._service">
            <summary>
            The service that dropped this form.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DropDownForm.#ctor(ILOG.Diagrammer.Windows.Forms.GenericValueEditor.EditorService)">
            <summary>
            Creates a <strong>DropDownForm</strong>.
            </summary>
            <param name="service">The service that drops this form.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DropDownForm.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)">Control.OnMouseDown</see>.
            </summary>
            <remarks>
            Closes the form when the left button is clicked.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DropDownForm.OnClosed(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Form.OnClosed(System.EventArgs)">Form.OnClosed</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DropDownForm.OnDeactivate(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Form.OnDeactivate(System.EventArgs)">Form.OnDeactivate</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DropDownForm.SetComponent(System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Sets the control displayed by the form.
            </summary>
            <param name="ctl">A <see cref="T:System.Windows.Forms.Control"/> instance.</param>
            <param name="parentControl">A <see cref="T:System.Windows.Forms.Control"/> instance.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DropDownForm.OnCurrentControlResize(System.Object,System.EventArgs)">
            <summary>
            Invoked when the dropped control is resized.
            This resizes the form and realigns it to the right or to the left.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DropDownForm.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Invoked when the form is resized (set the size to the size of dropped control)
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DropDownForm.DoModalLoop">
            <summary>
            Waits until the control is made invisible.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DropDownForm.FocusComponent">
            <summary>
            Gives the focus to the embedded control.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.GenericValueEditor.DropDownForm.Component">
            <summary>
            Gets the control displayed by the form.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Control"/> instance.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.ClipControl">
            <summary>
            The control that clips the internal controls.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.UpDownButton">
            <summary>
            Up-down Buttons.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.PaintValueBox">
            <summary>
            The small rectangle that paints the value.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.DropDownButton">
            <summary>
            The button that drops <see cref="T:System.Drawing.Design.UITypeEditor"/> controls.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DropDownButton.dialog">
            <summary>
            Indicates whether the button should be displayed as a 
            drop-down arrow or as a dialog button.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DropDownButton.OnGotFocus(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)">Control.OnGotFocus</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DropDownButton.OnLostFocus(System.EventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)">Control.OnLostFocus</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DropDownButton.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">Control.SetBoundsCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DropDownButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)">Control.OnPaint</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DropDownButton.IsDialog">
            <summary>
            Gets or sets a value indicating if the button should be 
            drawn as a drop dialog button or as a drop button.
            </summary>
            <value><see langword="true"/> if the button should be 
            drawn as a drop dialog button; <see langword="false"/> otherwise.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.DropListBox">
            <summary>
            <strong>ListBox</strong> which is dropped when the type contains standard values.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DropListBox.#ctor(ILOG.Diagrammer.Windows.Forms.GenericValueEditor)">
            <summary>
            Creates a <strong>DropListBox</strong>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DropListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">ListBox.OnDrawItem</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DropListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)">
            <summary>
            This member overrides <see cref="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)">ListBox.OnMeasureItem</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DropListBox.CreateParams">
            <summary>
            This member overrides <see cref="P:System.Windows.Forms.Control.CreateParams">Control.CreateParams</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip">
            <summary>
            A <see cref="T:System.Windows.Forms.ToolStrip"/> subclass that manages a set of <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> interactors.
            </summary>
            <remarks>Use the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.View"/> property to connect the toolstrip to a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.</remarks>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.ViewInteractor"/>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip._inters">
            <summary>
            The mapping between interaction type and interactor instances.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip._currentSel">
            <summary>
            The selected button.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip._view">
            <summary>
            The view associated with this toolbar.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip._internalUpdate">
            <summary>
            internal flag indicating whether the current notification has been initiated internally.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip"/> instance.
            </summary>
            <remarks>This contructor initializes the toolstrip such that it contains interactors
            to control the view and select graphic objects.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip"/> instance.
            </summary>
            <param name="controlView"><see langword="true"/> if interactors to control the view must be created;
            <see langword="false"/> otherwise.</param>
            <param name="createShapes"><see langword="true"/> if interactors to create shapes must be created;
            <see langword="false"/> otherwise.</param>
            <param name="createLinks"><see langword="true"/> if interactors to create links must be created;
            <see langword="false"/> otherwise.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.OnViewChanged(ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.View"/> property is changed.
            </summary>
            <param name="e">A <see cref="T:ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.GetInteractor(ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType)">
            <summary>
            Gets the interactor instance corresponding to the specified interaction.
            </summary>
            <param name="type">The interaction type.</param>
            <returns>The interactor instance corresponding to the specified interaction, or <see langword="null"/> if none has been created.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.FireEvent(System.Object,System.EventArgs)">
            <summary>
            Fires an event based on key in the Events list.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.View">
            <summary>
            Gets the view associated with this toolstrip.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> object that represents the view associated with this toolstrip.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.ViewChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.View"/> property is changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType">
            <summary>
            Specifies an interaction type.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.Selection">
            <summary>
            The selection interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.Zoom">
            <summary>
            The zoom interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.Pan">
            <summary>
            The pan interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.Rotate">
            <summary>
            The view rotation interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.CreatePolyline">
            <summary>
            The polyline creation interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.CreatePolygon">
            <summary>
            The polygon creation interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.CreateFilledPolygon">
            <summary>
            The filled polygon creation interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.CreateCurve">
            <summary>
            The curve creation interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.CreateClosedCurve">
            <summary>
            The closed curve creation interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.CreateFilledClosedCurve">
            <summary>
            The filled closed curve creation interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.CreateRectangle">
            <summary>
            The rectangle creation interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.CreateFilledRectangle">
            <summary>
            The filled rectangle creation interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.CreateEllipse">
            <summary>
            The ellipse creation interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.CreateFilledEllipse">
            <summary>
            The filled ellipse creation interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.CreateArc">
            <summary>
            The arc creation interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.CreateFilledArc">
            <summary>
            The filled arc creation interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.CreatePie">
            <summary>
            The pie creation interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.CreateLink">
            <summary>
            The link creation interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.DiagramViewToolStrip.InteractorType.CreateOrthogonalLink">
            <summary>
            The orthogonal link creation interaction
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Ellipse">
            <summary>
            Represents a graphic object that displays an ellipse.
            </summary>
            <remarks>
            A <see cref="T:ILOG.Diagrammer.Graphic.Ellipse"/> object is a graphic object that displays an ellipse. The <see cref="P:ILOG.Diagrammer.Graphic.BoundedShape.Rectangle"/> property defines the geometry of 
            <see cref="T:ILOG.Diagrammer.Graphic.Ellipse"/> objects.
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample creates a light blue ellipse with a black border.</para>
            <code lang="cs"> 
            Ellipse CreateEllipse()
            {
               Ellipse ellipse = new Ellipse(0, 0, 100, 100);
               ellipse.Fill = new SolidFill(Color.LightBlue);
               ellipse.Stroke = new Stroke(Color.Black, 2);
               return ellipse;
            }
            </code>
            <code lang="vbnet">
            Function CreateEllipse() As Ellipse 
              Dim ellipse As Ellipse = New Ellipse(0, 0, 100, 100)
              ellipse.Fill = New SolidFill(Color.LightBlue) 
              ellipse.Stroke = New Stroke(Color.Black, 2) 
              Return ellipse 
            End Function
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Ellipse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Ellipse"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Ellipse.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Ellipse"/> class using the
            specified parameters.
            </summary>
            <param name="x">The x-coordinate of the top-left corner of the rectangle that defines the ellipse.</param>
            <param name="y">The x-coordinate of the top-left corner of the rectangle that defines the ellipse.</param>
            <param name="width">The width of the rectangle that defines the ellipse.</param>
            <param name="height">The height of the rectangle that defines the ellipse.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Ellipse.#ctor(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Ellipse"/> class using the
            specified parameters.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> object that defines the bounds of the ellipse.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Ellipse.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Shape.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">Shape.UpdateGraphicsPath</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Ellipse.GetBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetBounds</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Ellipse.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestCore</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ViewUtil.CheckMinMaxZoom(ILOG.Diagrammer.Transform,System.Single,System.Single,System.Drawing.Rectangle,System.Boolean@,System.Boolean@,ILOG.Diagrammer.Transform@)">
            <summary>
            Verifies that transform is within the min/max zoom range.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Util.ViewUtil.CorrectZoomFactor(System.Single[],System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,ILOG.Diagrammer.Transform)">
            <summary>
            Corrects the transformer values so that the zoom factor is the desired zoom factor
            </summary>
            <param name="tval">The current transformer values:
             x0, x11, x12 if applied in the x direction, and
             y0, x22, x21 if applied in the y direction.</param>
            <param name="viewSize">The width or height of the view.</param>
            <param name="desiredZoomFactor">The desired zoom factor</param>
            <param name="currentZoomFactor">The current zoom factor</param>
            <param name="xdir">whether we correct in x-direction or y-direction</param>
            <param name="atXLimit"></param>
            <param name="atYLimit"></param>
            <param name="transformerAtLimit"></param>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ScaleLabelType">
            <summary>
            Defines the type of labels
            displayed by a <see cref="T:ILOG.Diagrammer.Graphic.ScaleBase"/> on its major ticks.
            </summary>
            <remarks>  
            Use the values of this enumeration to set the 
            <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelType"/> property of a <see cref="T:ILOG.Diagrammer.Graphic.ScaleBase"/> object. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ScaleLabelType.Numeric">
            <summary>
            Displays numeric labels.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ScaleLabelType.DateTime">
            <summary>
            Displays date or time labels.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.ScaleLabelType.Discrete">
            <summary>
            Displays labels taken from the collection contained in the
            <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.Labels"/> property of the scale.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ScaleBase">
            <summary>
            Represents the <see langword="abstract"/> base class for graphic
            objects used to represent a range of numeric values drawn
            next to a base line.
            </summary>
            <remarks>
            The <see cref="T:ILOG.Diagrammer.Graphic.ScaleBase"/> class is abstract, its concrete subclasses
            are <see cref="T:ILOG.Diagrammer.Graphic.LinearScale"/> and <see cref="T:ILOG.Diagrammer.Graphic.CircularScale"/>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.ScaleBase"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnDrawBaseLineChanged(System.Boolean,System.Boolean)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.DrawBaseLine"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnMinimumChanged(System.Single,System.Single)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.Minimum"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnMaximumChanged(System.Single,System.Single)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.Maximum"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnAutoMajorTicksChanged(System.Boolean,System.Boolean)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.AutoMajorTicks"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnAutoMinorTicksChanged(System.Boolean,System.Boolean)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.AutoMinorTicks"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnMajorTickIntervalChanged(System.Single,System.Single)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MajorTickInterval"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnMinorTickIntervalChanged(System.Single,System.Single)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MinorTickInterval"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnMajorTickSizeChanged(System.Single,System.Single)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MajorTickSize"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnMinorTickSizeChanged(System.Single,System.Single)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MinorTickSize"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnLabelFormatChanged(System.String,System.String)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelFormat"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnLabelDistanceChanged(System.Single,System.Single)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelDistance"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnLabelAppearanceChanged(ILOG.Diagrammer.TextAppearance,ILOG.Diagrammer.TextAppearance)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelAppearance"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnLabelAppearanceChanged">
            <summary>
            Invoked when the current <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelAppearance"/> object has been modified.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnLabelsChanged">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.Labels"/> property has been modified.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnLabelTypeChanged(ILOG.Diagrammer.Graphic.ScaleLabelType,ILOG.Diagrammer.Graphic.ScaleLabelType)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelType"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnLogBaseChanged(System.Single,System.Single)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LogBase"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnLabelRotationChanged(System.Single,System.Single)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelRotation"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnAutoRotateLabelsChanged(System.Boolean,System.Boolean)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.AutoRotateLabels"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.OnSkipOverlappingLabelsChanged(System.Boolean,System.Boolean)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.SkipOverlappingLabels"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.GetPointFromValue(System.Single)">
            <summary>
            Gets the point on the scale's base line that corresponds to a specified value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.GetValueFromPoint(ILOG.Diagrammer.Point2D)">
            <summary>
            Gets the value that corresponds to a specified point on the scale's base line.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.GetPointFromPosition(System.Double)">
            <summary>
            Gets the point on the scale's base line that corresponds to a specified position.
            </summary>
            <param name="position">A position between 0 (which corresponds to the minimum) and 1 (which corresponds to the maximum).</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.GetPositionFromPoint(ILOG.Diagrammer.Point2D)">
            <summary>
            Gets the value that corresponds to a specified point on the scale's base line.
            </summary>
            <returns>A position between 0 (which corresponds to the minimum) and 1 (which corresponds to the maximum).</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Shape.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">Shape.UpdateGraphicsPath</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.GetLabelObject(System.Single,System.Int32)">
            <summary>
            Gets the object to display as the label of a major tick of the scale.
            </summary>
            <param name="tickValue">The numeric tick value, computed from the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.Minimum"/>, <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.Maximum"/> and <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MajorTickInterval"/> properties.</param>
            <param name="labelIndex">The index of the major tick.</param>
            <remarks>
            The label object is computed according to the value of the
            <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelType"/> property.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.ComputeStyledBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Shape.ComputeStyledBounds(ILOG.Diagrammer.Transform)">Shape.ComputeStyledBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.GetBounds(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetBounds(ILOG.Diagrammer.Transform)">GraphicObject.GetBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.PaintCore(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.PaintCore(ILOG.Diagrammer.DrawingContext)">GraphicObject.PaintCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.IntersectsCore(System.Drawing.Region,ILOG.Diagrammer.DrawingContext)">GraphicObject.IntersectsCore</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.AddTickLine(System.Drawing.Drawing2D.GraphicsPath,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            This member is invoked to add a tick line to the path of the scale.
            </summary>
            <remarks>
            The default implementation adds a simple line to the path.
            It can be overridden to create a more complex shape.
            </remarks>
            <param name="path">The graphics path to which the tick line must be added.</param>
            <param name="p1">The start point of the tick line.</param>
            <param name="p2">The end point of the tick line.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.AddBaseLine(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member is invoked to add the base line to the path of the scale.
            </summary>
            <remarks>
            This method must be overridden by subclasses according to the geometry of the scale.
            </remarks>
            <param name="path">The graphics path to which the base line must be added.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.ScaleBase.ComputeTickPoints(System.Double,ILOG.Diagrammer.Point2D@,System.Single,ILOG.Diagrammer.Point2D@,System.Single,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)">
            <summary>
            This member is invoked to compute the points of each tick of the scale.
            </summary>
            <remarks>
            This method must be overridden by subclasses according to the geometry of the scale.
            </remarks>
            <param name="tickPosition">The position of the tick along the base line (between 0 and 1).</param>
            <param name="p1">The start point of the tick line must be stored in this parameter.</param>
            <param name="spacing1">The spacing between p1 and p2.</param>
            <param name="p2">The end point of the tick line must be stored in this parameter.</param>
            <param name="spacing2">The spacing between p2 and p3.</param>
            <param name="p3">The reference point of the tick label must be stored in this parameter.</param>
            <param name="p4">A fictious point, aligned with the tick line, and used to compute the label angle when <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.AutoRotateLabels"/> is <see langword="true"/>, must be stored in this parameter.</param>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.DrawBaseLine">
            <summary>
            Determines whether or not the base line of the scale is drawn.
            </summary>
            <value><see langword="true"/> if the base line is drawn; Otherwise, <see langword="false"/>.
            The default value is <see langword="true"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScaleBase.DrawBaseLineChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.DrawBaseLine"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.Minimum">
            <summary>
            Gets or sets the minimum value of the scale.
            </summary>
            <value>A <see cref="T:System.Single"/> value. The default value is <strong>0</strong>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScaleBase.Maximum"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScaleBase.MinimumChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.Minimum"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.Maximum">
            <summary>
            Gets or sets the maximum value of the scale.
            </summary>
            <value>A <see cref="T:System.Single"/> value. The default value is <strong>100</strong>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScaleBase.Minimum"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScaleBase.MaximumChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.Maximum"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.AutoMajorTicks">
            <summary>
            Determines whether or not the major tick interval is computed automatically.
            </summary>
            <value><see langword="true"/> if the major tick interval is computed automatically; Otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScaleBase.AutoMinorTicks"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScaleBase.AutoMajorTicksChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.AutoMajorTicks"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.AutoMinorTicks">
            <summary>
            Determines whether or not the minor tick interval is computed automatically.
            </summary>
            <value><see langword="true"/> if the minor tick interval is computed automatically; Otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScaleBase.AutoMajorTicks"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScaleBase.AutoMinorTicksChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.AutoMinorTicks"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.MajorTickInterval">
            <summary>
            Gets or sets the major tick interval.
            </summary>
            <value>A <see cref="T:System.Single"/> value. The default value is <strong>10</strong>.</value>
            <remarks>
            If <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.AutoMajorTicks"/> is <see langword="true"/>, the value of this property
            is ignored, except if the value is <strong>0</strong> in which case the major ticks
            are never drawn.
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MinorTickInterval"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScaleBase.MajorTickIntervalChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MajorTickInterval"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.MinorTickInterval">
            <summary>
            Gets or sets the minor tick interval.
            </summary>
            <value>A <see cref="T:System.Single"/> value. The default value is <strong>5</strong>.</value>
            <remarks>
            If <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.AutoMinorTicks"/> is <see langword="true"/>, the value of this property
            is ignored, except if the value is <strong>0</strong> in which case the minor ticks
            are never drawn.
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MajorTickInterval"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScaleBase.MinorTickIntervalChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MinorTickInterval"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.MajorTickSize">
            <summary>
            Gets or sets the major tick size.
            </summary>
            <value>A <see cref="T:System.Single"/> value. The default value is <strong>10</strong>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MinorTickSize"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScaleBase.MajorTickSizeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MajorTickSize"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.MinorTickSize">
            <summary>
            Gets or sets the minor tick size.
            </summary>
            <value>A <see cref="T:System.Single"/> value. The default value is <strong>5</strong>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MajorTickSize"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScaleBase.MinorTickSizeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MinorTickSize"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelFormat">
            <summary>
            Gets or sets the format of the labels.
            </summary>
            <value>A <see cref="T:System.String"/> that represents the format used to compute ticks labels. The default format is 
            <strong>G</strong>.</value>
            <remarks>
            The label strings are computed as follows:
            <list type="bullet">
            <item><description>
            For each major tick, a label object (determined by the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelType"/>
            property) is displayed.
            </description></item>
            <item><description>
            Each label object is formatted using the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelFormat"/> property,
            using the .NET framework composite formatting feature.
            The label can be a simple format string like <strong>F2</strong>),
            or a complete format item like <strong>{0,10:F2}</strong>.
            </description></item>
            </list>
            See the .NET framework documentation for a full description of formatting strings and items.
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScaleBase.LabelFormatChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelFormat"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelDistance">
            <summary>
            Gets or sets the spacing between the tick lines and the labels.
            </summary>
            <value>A <see cref="T:System.Single"/> value that represents the distance between the ticks line and the labels. The
            default value is <strong>10</strong>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScaleBase.LabelDistanceChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelDistance"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelAppearance">
            <summary>
            Gets or sets the style used to draw the labels.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.TextAppearance"/> instance.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScaleBase.LabelAppearanceChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelAppearance"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.Labels">
            <summary>
            Gets the collection of objects used as labels when
            <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelType"/> is equal to <see langword="ScaleLabelType.Discrete"/>.
            </summary>
            <value>A list of <see cref="T:System.Object"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScaleBase.LabelsChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.Labels"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelType">
            <summary>
            Determines what type of labels are displayed on the major ticks of the scale.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Graphic.ScaleLabelType"/> values. The default value is
            <see cref="F:ILOG.Diagrammer.Graphic.ScaleLabelType.Numeric"/>.</value>
            <remarks>
            The possible values are:
            <list type="bullet">
            <item>
            <term><see cref="F:ILOG.Diagrammer.Graphic.ScaleLabelType.Numeric"/></term>
            <description>
            The labels are numbers computed from the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.Minimum"/>,
            <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.Maximum"/> and <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MajorTickInterval"/> properties.
            </description>
            </item>
            <item>
            <term><see cref="F:ILOG.Diagrammer.Graphic.ScaleLabelType.DateTime"/></term>
            <description>
            The labels are dates computed from the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.Minimum"/>,
            <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.Maximum"/> and <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MajorTickInterval"/> properties.
            The values of the properties are interpreted as a number of seconds.
            </description>
            </item>
            <item>
            <term><see cref="F:ILOG.Diagrammer.Graphic.ScaleLabelType.Discrete"/></term>
            <description>
            The labels are taken from the collection contained in the
            <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.Labels"/> property. If the collection is smaller than
            the number of scale ticks, no labels are displayed for the extra ticks.
            If the collection is longer, the extra labels are ignored.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScaleBase.LabelTypeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelType"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.LogBase">
            <summary>
            Gets or sets the logarithm base used to create a logarithmic scale.
            </summary>
            <value>A <see cref="T:System.Single"/> that represents the logarithm base used to create a logarithmic scale.
            The default value is <strong>0</strong>.</value>
            <remarks>
            <para>
            Set this property to a value greater that 1 to create a logarithmic scale.
            The most commonly used logarithm base is 10.
            If this property is equal to 0 (the default value) or less than 1, the scale is linear.
            </para>
            <para>
            <strong>Note: </strong> when the scale is logarithmic, the values of the
            <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MajorTickInterval"/> and <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MinorTickInterval"/> properties
            are ignored, because the intervals vary along the scale. You can only specify
            that the ticks must not be drawn by setting one or both of 
            <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MajorTickInterval"/> and <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MinorTickInterval"/> to <strong>0</strong>.
            </para>
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScaleBase.LogBaseChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LogBase"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelRotation">
            <summary>
            Gets or sets the angle (in degrees) by which the labels are rotated.
            </summary>
            <value>A <see cref="T:System.Single"/> value that represents the angle (in degrees) by which the labels are rotated.
            The default value is <strong>0</strong>.</value>
            <remarks>
            If <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.AutoRotateLabels"/> is <see langword="true"/>, the angle
            specified by <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelRotation"/> is added to the automatically computed angle.
            </remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScaleBase.LabelRotationChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelRotation"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.AutoRotateLabels">
            <summary>
            Determines whether the labels are rotated automatically
            depending on the shape and the orientation of the scale.
            </summary>
            <value><see langword="true"/> if the labels are automatically rotated
            depending on the shape and the orientation of the scale; Otherwise,
            <see langword="false"/>. The default value is <see langword="false"/>.</value>
            <remarks>
            If <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.AutoRotateLabels"/> is <see langword="true"/>, the angle
            specified by <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelRotation"/> is added to the automatically computed angle.
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelRotation"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScaleBase.AutoRotateLabelsChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.AutoRotateLabels"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.SkipOverlappingLabels">
            <summary>
            Determines whether or not the labels that overlap are skipped.
            </summary>
            <value><see langword="true"/> if the labels that overlap are skipped; Otherwise,
            <see langword="false"/>. The default value is <see langword="true"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.ScaleBase.SkipOverlappingLabelsChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.SkipOverlappingLabels"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.ScaleBase.Fill">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Graphic.Shape.Fill">Shape.Fill</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.ScaleLabelCollection">
            <summary>
            The collection used to store the explicit labels of a scale.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.LinearScaleTickDirection">
            <summary>
            Defines the direction
            of the tick lines of a <see cref="T:ILOG.Diagrammer.Graphic.LinearScale"/> with respect to the base line
            of the scale.
            </summary>
            <remarks>  
            Use the values of this enumeration to set the 
            <see cref="P:ILOG.Diagrammer.Graphic.LinearScale.TickDirection"/> property of a <see cref="T:ILOG.Diagrammer.Graphic.LinearScale"/>
            object. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinearScaleTickDirection.Left">
            <summary>
            Draws the ticks on the left of the scale's base line,
            looking in the direction of the line (for example, if the scale
            is horizontal and the end point is on the right of the start point,
            the ticks are above the base line).
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.LinearScaleTickDirection.Right">
            <summary>
            Draws the ticks on the right of the scale's base line,
            looking in the direction of the line (for example, if the scale
            is horizontal and the end point is on the right of the start point,
            the ticks are below the base line).
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.LinearScale">
            <summary>
            Represents a scale based on a straight line.
            </summary>
            <remarks>
            The <see cref="T:ILOG.Diagrammer.Graphic.LinearScale"/> class represents a scale based on a straight line.
            The line of the scale is defined through the <see cref="P:ILOG.Diagrammer.Graphic.LinearScale.StartPoint"/> and <see cref="P:ILOG.Diagrammer.Graphic.LinearScale.EndPoint"/>
            properties. The scale displays labels above or below the line depending on the
            <see cref="P:ILOG.Diagrammer.Graphic.LinearScale.TickDirection"/> property. Labels can display numbers, dates or simple text depending on the
            <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelType"/> property. Many options allow layouting and formatting the labels
            such as the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelAppearance"/> that specifies the appearance properties of the labels, 
            <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelDistance"/> that specifies a spacing between the labels and the tick lines,
            <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelFormat"/> that specifies a format for the labels or <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MajorTickSize"/> and 
            <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MinorTickSize"/> to control the size of the tick lines.
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample creates a linear scale displaying numeric ticks from 0 to 50.</para>
            <code lang="cs">        
            LinearScale CreateLinearScale()
            {
                LinearScale scale = new LinearScale();
                scale.LabelType = ScaleLabelType.Numeric;
                scale.StartPoint = new Point2D(0,0);
                scale.EndPoint = new Point2D(200, 0);
                scale.LabelAppearance.Font = new Font("Microsoft Sans Serif", 12F);
                scale.LabelDistance = 12F;
                scale.Maximum = 50F;
                scale.MinorTickSize = 0F;
                return scale;
            }
            </code>
            <code lang="vbnet">
            Function CreateLinearScale() As LinearScale 
                Dim scale As LinearScale = New LinearScale 
                scale.LabelType = ScaleLabelType.Numeric 
                scale.StartPoint = New Point2D(0, 0) 
                scale.EndPoint = New Point2D(200, 0) 
                scale.LabelAppearance.Font = New Font("Microsoft Sans Serif", 12F) 
                scale.LabelDistance = 12F 
                scale.Maximum = 50F 
                scale.MinorTickSize = 0F 
                Return scale 
            End Function
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Graphic.CircularScale"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinearScale.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.LinearScale"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinearScale.OnTickDirectionChanged(ILOG.Diagrammer.Graphic.LinearScaleTickDirection,ILOG.Diagrammer.Graphic.LinearScaleTickDirection)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.LinearScale.TickDirection"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinearScale.GetGeometryBounds">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetGeometryBounds">GraphicObject.GetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinearScale.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinearScale.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetBounds(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinearScale.AddBaseLine(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.ScaleBase.AddBaseLine(System.Drawing.Drawing2D.GraphicsPath)">ScaleBase.AddBaseLine</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinearScale.ComputeTickPoints(System.Double,ILOG.Diagrammer.Point2D@,System.Single,ILOG.Diagrammer.Point2D@,System.Single,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.ScaleBase.ComputeTickPoints(System.Double,ILOG.Diagrammer.Point2D@,System.Single,ILOG.Diagrammer.Point2D@,System.Single,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)">Scale.ComputeTickPoints</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinearScale.GetPointFromPosition(System.Double)">
            <summary>
            Override the <see cref="M:ILOG.Diagrammer.Graphic.ScaleBase.GetPointFromPosition(System.Double)"/> member.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinearScale.GetPositionFromPoint(ILOG.Diagrammer.Point2D)">
            <summary>
            Override the <see cref="M:ILOG.Diagrammer.Graphic.ScaleBase.GetPositionFromPoint(ILOG.Diagrammer.Point2D)"/> member.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinearScale.OnPointsChanging">
            <summary>
            Is called when the base line of the scale is changing.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.LinearScale.OnPointsChanged">
            <summary>
            Is called when the base line of the scale has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinearScale.StartPoint">
            <summary>
            Gets or sets the start point of the scale's base line.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> structure. The default value is the point <strong>(0, 0)</strong>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.LinearScale.EndPoint"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinearScale.EndPoint">
            <summary>
            Gets or sets the end point of the scale's base line.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> structure. The default value is the point <strong>(200, 0)</strong>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.LinearScale.StartPoint"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinearScale.TickDirection">
            <summary>
            Gets or sets the direction of the tick lines with respect to the base line.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Graphic.LinearScaleTickDirection"/> values. The default value is
            <see cref="F:ILOG.Diagrammer.Graphic.LinearScaleTickDirection.Left"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.LinearScale.TickDirectionChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.LinearScale.TickDirection"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinearScale.HasPreferredWidth">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredWidth">GraphicObject.HasPreferredWidth</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinearScale.HasPreferredHeight">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.HasPreferredHeight">GraphicObject.HasPreferredHeight</see>.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.LinearScale.PointsChanged">
            <summary>
            Occurs when the points of the base line have changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.LinearScale.Text">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.GraphicObject.Text">GraphicObject.Text</see>.
            </summary>
            <remarks>
            The Text property should not be used on linear scales.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.CircularScaleTickDirection">
            <summary>
            Represents the direction
            of the tick lines of a <see cref="T:ILOG.Diagrammer.Graphic.CircularScale"/> with respect to the base line
            of the scale.
            </summary>
            <remarks>  
            Use the values of this enumeration to set the 
            <see cref="P:ILOG.Diagrammer.Graphic.CircularScale.TickDirection"/> property of a <see cref="T:ILOG.Diagrammer.Graphic.CircularScale"/>
            object. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.CircularScaleTickDirection.Outside">
            <summary>
            Draws the ticks outside of the ellipse enclosing the scale.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Graphic.CircularScaleTickDirection.Inside">
            <summary>
            Draws the ticks inside the ellipse enclosing the scale.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.CircularScale">
            <summary>
            Represents a scale based on an
            elliptical arc.
            </summary>
            <remarks>
            The <see cref="T:ILOG.Diagrammer.Graphic.CircularScale"/> class represents a scale based on an elliptical arc.
            The ellipse that defined the scale is contained in the rectangle defined in the <see cref="P:ILOG.Diagrammer.Graphic.CircularScale.Rectangle"/>
            property. The segment of arc is defined through the <see cref="P:ILOG.Diagrammer.Graphic.CircularScale.StartAngle"/> and <see cref="P:ILOG.Diagrammer.Graphic.CircularScale.SweepAngle"/>
            properties. The scale displays labels inside or outside the elliptical arc depending on the
            <see cref="P:ILOG.Diagrammer.Graphic.CircularScale.TickDirection"/> property. Labels can display numbers, dates or simple text depending on the
            <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelType"/> property. Many options allow layouting and formatting the labels
            such as the <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelAppearance"/> that specifies the appearance properties of the labels, 
            <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelDistance"/> that specifies a spacing between the labels and the tick lines,
            <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.LabelFormat"/> that specifies a format for the labels or <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MajorTickSize"/> and 
            <see cref="P:ILOG.Diagrammer.Graphic.ScaleBase.MinorTickSize"/> to control the size of the tick lines.
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample creates a circular scale displaying a segment of 
            arc of 270 degrees and numeric ticks from 0 to 50.</para>
            <code lang="cs">        
            CircularScale CreateCircularScale()
            {
                CircularScale scale = new CircularScale();
                scale.LabelType = ScaleLabelType.Numeric;
                scale.Rectangle = new Rectangle2D(0,0, 200F, 200F);
                scale.StartAngle = 0F;
                scale.SweepAngle = 270F;
                scale.LabelAppearance.Font = new Font("Microsoft Sans Serif", 12F);
                scale.LabelDistance = 12F;
                scale.Minimum = 0F;
                scale.Maximum = 50F;
                scale.MinorTickSize = 0F;
                return scale;
            }
            </code>
            <code lang="vbnet">
            Function CreateCircularScale() As CircularScale 
                Dim scale As CircularScale = New CircularScale 
                scale.LabelType = ScaleLabelType.Numeric
                scale.Rectangle = New Rectangle2D(0, 0, 200F, 200F) 
                scale.StartAngle = 0F 
                scale.SweepAngle = 270F 
                scale.LabelAppearance.Font = New Font("Microsoft Sans Serif", 12F) 
                scale.LabelDistance = 12F 
                scale.Minimum = 0F;
                scale.Maximum = 50F 
                scale.MinorTickSize = 0F 
                Return scale 
            End Function</code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Graphic.LinearScale"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircularScale.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.CircularScale"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircularScale.OnRectangleChanged(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.CircularScale.Rectangle"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircularScale.OnStartAngleChanged(System.Single,System.Single)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.CircularScale.StartAngle"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircularScale.OnSweepAngleChanged(System.Single,System.Single)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.CircularScale.SweepAngle"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircularScale.OnTickDirectionChanged(ILOG.Diagrammer.Graphic.CircularScaleTickDirection,ILOG.Diagrammer.Graphic.CircularScaleTickDirection)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Graphic.CircularScale.TickDirection"/> property has changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircularScale.GetGeometryBounds">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetGeometryBounds">GraphicObject.GetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircularScale.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.SetGeometryBounds(ILOG.Diagrammer.Rectangle2D)">GraphicObject.SetGeometryBounds</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircularScale.AddBaseLine(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.ScaleBase.AddBaseLine(System.Drawing.Drawing2D.GraphicsPath)">ScaleBase.AddBaseLine</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircularScale.ComputeTickPoints(System.Double,ILOG.Diagrammer.Point2D@,System.Single,ILOG.Diagrammer.Point2D@,System.Single,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.ScaleBase.ComputeTickPoints(System.Double,ILOG.Diagrammer.Point2D@,System.Single,ILOG.Diagrammer.Point2D@,System.Single,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)">ScaleBase.ComputeTickPoints</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircularScale.GetLabelObject(System.Single,System.Int32)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.ScaleBase.GetLabelObject(System.Single,System.Int32)">ScaleBase.GetLabelObject</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircularScale.GetPointFromPosition(System.Double)">
            <summary>
            Override the <see cref="M:ILOG.Diagrammer.Graphic.ScaleBase.GetPointFromPosition(System.Double)"/> member.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.CircularScale.GetPositionFromPoint(ILOG.Diagrammer.Point2D)">
            <summary>
            Override the <see cref="M:ILOG.Diagrammer.Graphic.ScaleBase.GetPositionFromPoint(ILOG.Diagrammer.Point2D)"/> member.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.CircularScale.Rectangle">
            <summary>
            Gets or sets the bounding rectangle of the ellipse.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.CircularScale.RectangleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.CircularScale.Rectangle"/> property contents has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.CircularScale.StartAngle">
            <summary>
            Gets or sets the start angle of the scale.
            </summary>
            <value>A <see cref="T:System.Single"/> value that represents the start angle of the scale, in degrees.
            The default value is <strong>180</strong>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.CircularScale.SweepAngle"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.CircularScale.StartAngleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.CircularScale.StartAngle"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.CircularScale.SweepAngle">
            <summary>
            Gets or sets the sweep angle of the scale.
            </summary>
            <value>A <see cref="T:System.Single"/> value that represents the sweep angle of the scale, in degrees.
            The default value is <strong>180</strong>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.CircularScale.SweepAngle"/>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.CircularScale.SweepAngleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.CircularScale.SweepAngle"/> property has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.CircularScale.TickDirection">
            <summary>
            Gets or sets the direction of the tick lines with respect to the base line.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Graphic.CircularScaleTickDirection"/> values.
            The default value is <see cref="F:ILOG.Diagrammer.Graphic.CircularScaleTickDirection.Outside"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.CircularScale.TickDirectionChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.CircularScale.TickDirection"/> property contents has changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup">
            <summary>
            The class <strong>HierarchicalNodeGroup</strong> allows to create a
            group of nodes that is subject to a constraint.
            </summary>
            <remarks>
            A node group itself is not a constraint. But some constraints allow
            node groups as input rather than single nodes. For instance, it is
            possible to force a group of nodes to be placed in a higher level
            than another group of nodes. Or it is possible to force all nodes of
            the group to be placed no more than a certain number of levels apart.
            
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.Constraints"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup.#ctor">
            <summary>
            Creates a new <strong>HierarchicalNodeGroup</strong>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup.#ctor(System.Collections.ArrayList)">
            <summary>
            Creates a new <strong>HierarchicalNodeGroup</strong>.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name='nodes'> A list containing the nodes that belong to this
            group. The list is copied into the new
            <strong>HierarchicalNodeGroup</strong>. When a group becomes subject
            of a constraint, the constraint applies to all nodes of the group.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup.#ctor(ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup)">
            <summary>
            Creates a new <strong>HierarchicalNodeGroup</strong> by copying an
            existing one.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name='source'> The origin of the copy.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the nodes of the node group into the array, starting at
            a particular array index.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup.Add(System.Object)">
            <summary>
            Adds a node to the node group.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup.Remove(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup.Remove(System.Object)">
            <summary>
            Removes a node from the node group.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup.Add(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup.GetEnumerator">
            <summary>
            Returns the nodes of the node group.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup.Contains(System.Object)">
            <summary>
            Returns true if the node belongs to this group.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup.IsSynchronized">
            <summary>
            Gets <see langword="false"/> since this collection is not
            synchronized.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup.SyncRoot">
            <summary>
            Gets an objects that can be used to synchronize access to this
            node group.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.HierarchicalNodeGroup.Count">
            <summary>
            Gets the number of nodes of the node group.
            </summary>
            <value>The number of nodes of the node group.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.AspectRatioAlignment">
            <summary>
            Defines the types of alignments when a graphic content must be displayed in a viewport.
            </summary>
            <remarks>
            Use the values of this enumeration to set the <see cref="P:ILOG.Diagrammer.Graphic.Image.KeepAspectRatio"/> 
            property of a <see cref="T:ILOG.Diagrammer.Graphic.Image"/> object.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.AspectRatioAlignment.None">
            <summary>
            Do not force uniform scaling. Scale the graphic content of the given element non-uniformly if
            necessary such that the element's bounding box exactly matches the viewport rectangle.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AspectRatioAlignment.XMinYMin">
            <summary>
            Force uniform scaling.
            Align the min-x of the element's viewBox with the smallest X value of the viewport.
            Align the min-y of the element's viewBox with the smallest Y value of the viewport.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AspectRatioAlignment.XMidYMin">
            <summary>
             Force uniform scaling.
             Align the midpoint X value of the element's viewBox with the midpoint X value of the viewport.
             Align the min-y of the element's viewBox with the smallest Y value of the viewport.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AspectRatioAlignment.XMaxYMin">
            <summary>
            Force uniform scaling.
            Align the min-x+width of the element's viewBox with the maximum X value of the viewport.
            Align the min-y of the element's viewBox with the smallest Y value of the viewport.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AspectRatioAlignment.XMinYMid">
            <summary>
            Force uniform scaling.
            Align the min-x of the element's viewBox with the smallest X value of the viewport.
            Align the midpoint Y value of the element's viewBox with the midpoint Y value of the viewport.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AspectRatioAlignment.XMidYMid">
            <summary>
            (the default) - Force uniform scaling.
            Align the midpoint X value of the element's viewBox with the midpoint X value of the viewport.
            Align the midpoint Y value of the element's viewBox with the midpoint Y value of the viewport.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AspectRatioAlignment.XMaxYMid">
            <summary>
            Force uniform scaling.
            Align the min-x+width of the element's viewBox with the maximum X value of the viewport.
            Align the midpoint Y value of the element's viewBox with the midpoint Y value of the viewport.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AspectRatioAlignment.XMinYMax">
            <summary>
            Force uniform scaling.
            Align the min-x of the element's viewBox with the smallest X value of the viewport.
            Align the min-y+height of the element's viewBox with the maximum Y value of the viewport.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AspectRatioAlignment.XMidYMax">
            <summary>
            Force uniform scaling.
            Align the midpoint X value of the element's viewBox with the midpoint X value of the viewport.
            Align the min-y+height of the element's viewBox with the maximum Y value of the viewport.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.AspectRatioAlignment.XMaxYMax">
            <summary>
            Force uniform scaling.
            Align the min-x+width of the element's viewBox with the maximum X value of the viewport.
            Align the min-y+height of the element's viewBox with the maximum Y value of the viewport.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Transform">
             <summary>
             Defines a two dimensional affine transform that performs a linear mapping
             from 2D coordinates to other 2D coordinates.
             </summary>
             <remarks>
             Such a coordinate transformation can be represented by a 3-row by
             3-column matrix with an implied last row of [ 0 0 1 ].  This matrix 
             transforms source coordinates <strong>(x,y)</strong> into
             destination coordinates <strong>(x',y')</strong> by considering
             them to be a column vector and multiplying the coordinate vector
             by the matrix according to the following process:
             <code>
               [ x']   [ m11 m12 dx ] [ x ]   [ m11*x + m12*y + dx ]
               [ y'] = [ m21 m22 dy ] [ y ] = [ m21*x + m22*y + dy ]
               [ 1 ]   [  0   0   1 ] [ 1 ]   [         1          ]
            </code>
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Transform.Identity">
            <summary>
            Defines the identity transformation.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Transform"/> structure using the specified matrix elements.
            </summary>
            <param name="m11">The matrix value in the first line, first column of the transformation matrix.</param>
            <param name="m12">The matrix value in the first line, second column of the transformation matrix.</param>
            <param name="m21">The matrix value in the second line, first column of the transformation matrix.</param>
            <param name="m22">The matrix value in the second line, second column of the transformation matrix.</param>
            <param name="dx">The matrix value in the first line, third column of the transformation matrix.</param>
            <param name="dy">The matrix value in the second line, third column of the transformation matrix.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.#ctor(System.Single,System.Single,ILOG.Diagrammer.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Transform"/> structure
            that corresponds to a scaling operation.
            </summary>
            <param name="scaleX">The scaling factor along the x axis.</param>
            <param name="scaleY">The scaling factor along the y axis.</param>
            <param name="point">The point that will remain unchanged after the scaling</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.#ctor(System.Single,ILOG.Diagrammer.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Transform"/> structure 
            that corresponds to a rotation around a point.
            </summary>
            <param name="angle">The rotation angle in degree.</param>
            <param name="center">The center point of the rotation. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.#ctor(ILOG.Diagrammer.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Transform"/> structure 
            that corresponds to a translation operation.
            </summary>
            <param name="delta">The translation vector.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.#ctor(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Transform"/> structure that will transform a 
            rectangle to another rectangle.
            </summary>
            <param name="rect">The rectangle before the transformation.</param>
            <param name="trect">The rectangle after the transformation.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.#ctor(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Transform"/> structure that will transform a 
            rectangle to another rectangle.
            </summary>
            <param name="rect">The rectangle before the transformation.</param>
            <param name="trect">The rectangle after the transformation.</param>
            <param name="keepAspectRatio">Specifies if the transformation should take into account
            the aspect ratio of <paramref name="rect"/>.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.#ctor(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.AspectRatioAlignment,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Transform"/> structure that allows to transform
            a rectangle so that it is visible in a viewport rectangle.
            </summary>
            <param name="content">The content rectangle to display in the viewport</param>
            <param name="viewport">The destination viewport</param>
            <param name="align">A <see cref="T:ILOG.Diagrammer.AspectRatioAlignment"/> that defines if aspect ratio of the content should be kept and how.</param>
            <param name="slice">When aspect ration should be preserve (parameter <paramref name="align"/> is not 
            <see cref="T:ILOG.Diagrammer.AspectRatioAlignment">AspectRatioAlignment.None</see> indicates whether the content should be fully visible or only a 
            slice.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.SetValues(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Changes all the values in the transformation matrix.
            </summary>
            <param name="m11">The matrix value in the first line, first column of the transformation matrix.</param>
            <param name="m12">The matrix value in the first line, second column of the transformation matrix.</param>
            <param name="m21">The matrix value in the second line, first column of the transformation matrix.</param>
            <param name="m22">The matrix value in the second line, second column of the transformation matrix.</param>
            <param name="dx">The matrix value in the first line, third column of the transformation matrix.</param>
            <param name="dy">The matrix value in the second line, third column of the transformation matrix.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.ScaleAt(System.Single,System.Single,ILOG.Diagrammer.Point2D)">
            <summary>
            Appends a scaling transformation to this transform.
            </summary>
            <param name="scaleX">The factor by which coordinates are scaled along the   
            X axis direction</param>
            <param name="scaleY">the factor by which coordinates are scaled along the
            Y axis direction</param>
            <param name="point">A point the remains fixed for the scaling operation.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.Scale(System.Single,System.Single)">
            <summary>
            Appends a scaling transformation to this transform.
            </summary>
            <param name="scaleX">The factor by which coordinates are scaled along the   
            X axis direction</param>
            <param name="scaleY">the factor by which coordinates are scaled along the
            Y axis direction</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.Translate(System.Single,System.Single)">
            <summary>
            Appends a translation to the transform.
            </summary>
            <remarks>The methods appends a translation 
            of <paramref name="dx"/> and <paramref name="dy"/> to the transform.</remarks>
            <param name="dx">The translation along the x axis</param>
            <param name="dy">The translation along the y axis</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.Translate(ILOG.Diagrammer.Point2D)">
            <summary>
            Appends a translation to the transform.
            </summary>
            <remarks>The methods appends a translation 
            of <paramref name="delta"/> to the transform.</remarks>
            <param name="delta">The translation.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.Rotate(System.Single)">
            <summary>
            Appends a rotation to the transform.
            </summary>
            <remarks>The methods appends a rotation 
            of <paramref name="angle"/> degree to the transform.</remarks>
            <param name="angle">The angle of the rotation in degree.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.RotateAt(System.Single,ILOG.Diagrammer.Point2D)">
            <summary>
            Appends a rotation around a point to the transform.
            </summary>
            <remarks>The methods appends a rotation 
            of <paramref name="angle"/> degree to the transform.</remarks>
            <param name="angle">The angle of the rotation in degree.</param>
            <param name="point">The center of the rotation</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.Shear(System.Single,System.Single)">
            <summary>
            Appends a shearing to the transform.
            </summary>
            <remarks>The methods appends a shearing 
            of <paramref name="shearX"/> and <paramref name="shearY"/> to the transform.</remarks>
            <param name="shearX">The shearing along the x axis</param>
            <param name="shearY">The shearing along the y axis</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.Inverse">
            <summary>
            Gets the inverse tranformation.
            </summary>
            <returns>A <see cref="T:ILOG.Diagrammer.Transform"/> that represents the inverse transformation.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.op_Multiply(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Transform)">
            <summary>
            Multiply two <see cref="T:ILOG.Diagrammer.Transform"/> objects.
            </summary>
            <remarks>
            Note that the operation appends the right transform to the left transform. When
            doing A*B then the Transform B will be applied after the Transform A.
            </remarks>
            <param name="left">The <see cref="T:ILOG.Diagrammer.Transform"/> structure that is to the left of the multiply operator.</param>
            <param name="right">The <see cref="T:ILOG.Diagrammer.Transform"/> structure that is to the left of the multiply operator.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.op_Equality(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Transform)">
            <summary>
            Tests whether two <see cref="T:ILOG.Diagrammer.Transform"/> structures are equal.
            </summary>
            <param name="left">The <see cref="T:ILOG.Diagrammer.Transform"/> structure that is to the left of the equality operator. </param>
            <param name="right">The <see cref="T:ILOG.Diagrammer.Transform"/> structure that is to the right of the equality operator.</param>
            <returns>This operator returns <see langword="true"/> if the two specified <see cref="T:ILOG.Diagrammer.Transform"/> structures are equal.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.op_Inequality(ILOG.Diagrammer.Transform,ILOG.Diagrammer.Transform)">
            <summary>
            Tests whether two <see cref="T:ILOG.Diagrammer.Transform"/> structures are different.
            </summary>
            <param name="left">The <see cref="T:ILOG.Diagrammer.Transform"/> structure that is to the left of the equality operator. </param>
            <param name="right">The <see cref="T:ILOG.Diagrammer.Transform"/> structure that is to the right of the equality operator.</param>
            <returns>This operator returns <see langword="true"/> if the two specified <see cref="T:ILOG.Diagrammer.Transform"/> structures are different.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.TransformPoints(System.Collections.Generic.IList{ILOG.Diagrammer.Point2D},System.Int32,System.Int32)">
            <summary>
            Transforms an array of points.
            </summary>
            <param name="points">The array containing the points to transform.</param>
            <param name="start">The zero-based index of the first point to transform.</param>
            <param name="count">The number of points to transform in the array.</param>
            <returns>The array of points passed as parameter containing the transformed points.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.TransformVectors(System.Collections.Generic.IList{ILOG.Diagrammer.Point2D},System.Int32,System.Int32)">
            <summary>
            Transforms an array of vectors.
            </summary>
            <param name="vectors">The array containing the vectors to transform.</param>
            <param name="start">The zero-based index of the first vector to transform.</param>
            <param name="count">The number of vectors to transform in the array.</param>
            <returns>The array of vectors passed as parameter containing the transformed vectors.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.TransformPoints(System.Collections.Generic.IList{ILOG.Diagrammer.Point2D},System.Int32)">
            <summary>
            Transforms an array of points.
            </summary>
            <param name="points">The array containing the points to transform.</param>
            <param name="count">The number of points to transform in the array.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.TransformVectors(System.Collections.Generic.IList{ILOG.Diagrammer.Point2D},System.Int32)">
            <summary>
            Transforms an array of vectors.
            </summary>
            <param name="vectors">The array containing the vectors to transform.</param>
            <param name="count">The number of vectors to transform in the array.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.TransformPoints(System.Collections.Generic.IList{ILOG.Diagrammer.Point2D})">
            <summary>
            Applies the transformation the an array of points.
            </summary>
            <param name="points">An array of <see cref="T:ILOG.Diagrammer.Point2D"/> containing the points to transform.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.TransformVectors(System.Collections.Generic.IList{ILOG.Diagrammer.Point2D})">
            <summary>
            Applies the transformation the an array of vectors.
            </summary>
            <param name="points">An array of <see cref="T:ILOG.Diagrammer.Point2D"/> containing the vectors to transform.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.TransformPoint(ILOG.Diagrammer.Point2D)">
            <summary>
            Applies the transformation to a point.
            </summary>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> object to apply the transform to.</param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.TransformVector(ILOG.Diagrammer.Point2D)">
            <summary>
            Applies the transformation to a vector.
            </summary>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> object to apply the transform to.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.TransformVector(ILOG.Diagrammer.Size2D)">
            <summary>
            Applies the transformation to a vector.
            </summary>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> object to apply the transform to.</param>
            <returns>The transformed vector.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.TransformRectangle(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Applies the transformation to a rectangle
            </summary>
            <remarks>The method applies the transformation on all corners of the
            rectangle and returns the smallest rectangle enclosing the 4 transformed
            points.</remarks>
            <param name="rect">The rectangle to transform.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.TransformGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Transforms a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </summary>
            <param name="path">The <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> to transform.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.TransformPathData(ILOG.Diagrammer.PathData)">
            <summary>
            Transforms a <see cref="T:ILOG.Diagrammer.PathData"/>.
            </summary>
            <param name="path">The <see cref="T:ILOG.Diagrammer.PathData"/> to transform.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.TransformRegion(System.Drawing.Region)">
            <summary>
            Transforms a <see cref="T:System.Drawing.Region"/>.
            </summary>
            <param name="region">The <see cref="T:System.Drawing.Region"/> to transform.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.ToMatrix">
            <summary>
            Creates a <see cref="T:System.Drawing.Drawing2D.Matrix"/> object from the <see cref="T:ILOG.Diagrammer.Transform"/>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Drawing2D.Matrix"/> object equivalent to this <see cref="T:ILOG.Diagrammer.Transform"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.GetHashCode">
            <summary>
            Returns the hashcode for this object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.Equals(System.Object)">
            <summary>
            Tests whether <paramref name="obj"/> is a <see cref="T:ILOG.Diagrammer.Transform"/> with the same definition than this <see cref="T:ILOG.Diagrammer.Transform"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>This method returns <see langword="true"/> if <paramref name="obj"/> 
            is a <see cref="T:ILOG.Diagrammer.Transform"/> with the same transformation matrix than  
            this <see cref="T:ILOG.Diagrammer.Transform"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Transform.ToString">
            <summary>
            Creates a string representation of the <see cref="T:ILOG.Diagrammer.Transform"/>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Transform.IsScale">
            <summary>
            Indicates whether this <see cref="T:ILOG.Diagrammer.Transform"/> corresponds 
            to a scaling operation.
            </summary>
            <value>
            This property returns <see langword="true"/> if the transform corresponds 
            to a translation operation ; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Transform.IsTranslation">
            <summary>
            Indicates whether this <see cref="T:ILOG.Diagrammer.Transform"/> corresponds 
            to a translation operation.
            </summary>
            <value>
            This property returns <see langword="true"/> if the transform corresponds 
            to a translation operation ; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Transform.IsRotation">
            <summary>
            Indicates whether this <see cref="T:ILOG.Diagrammer.Transform"/> corresponds 
            to a rotation operation.
            </summary>
            <value>
            This property returns <see langword="true"/> if the transform corresponds 
            to a rotation operation ; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Transform.IsInvertible">
            <summary>
            Indicates whether this <see cref="T:ILOG.Diagrammer.Transform"/> is invertible.
            </summary>
            <value>
            This property returns <see langword="true"/> if the transform is invertible ; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Transform.IsIdentity">
            <summary>
            Indicates whether this <see cref="T:ILOG.Diagrammer.Transform"/> is the identity transform.
            </summary>
            <value>
            This property returns <see langword="true"/> if the transform is the identity transform ; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Transform.M11">
            <summary>
            Gets the element in the first row and first column of the transformation matrix.
            </summary>
            <value>
            The element in the first row and first column of the transformation matrix.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Transform.M12">
            <summary>
            Gets the element in the first row and second column of the transformation matrix.
            </summary>
            <value>
            The element in the first row and second column of the transformation matrix.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Transform.M21">
            <summary>
            Gets the element in the second row and first column of the transformation matrix.
            </summary>
            <value>
            The element in the second row and first column of the transformation matrix.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Transform.M22">
            <summary>
            Gets the element in the second row and second column of the transformation matrix.
            </summary>
            <value>
            The element in the second row and second column of the transformation matrix.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Transform.DX">
            <summary>
            Gets the element in the first row and third column of the transformation matrix.
            </summary>
            <value>
            The element in the first row and third column of the transformation matrix.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Transform.DY">
            <summary>
            Gets the element in the second row and third column of the transformation matrix.
            </summary>
            <value>
            The element in the second row and third column of the transformation matrix.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Transform.Determinant">
            <summary>
            Gets the determinant of the transformation matrix.
            </summary>
            <value>The determinant of the transformation matrix.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Transform.ScaleX">
            <summary>
            Gets the scaling factor along the x axis.
            </summary>
            <value>
            The scaling factor along the x axis.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Transform.ScaleY">
            <summary>
            Gets the scaling factor along the y axis.
            </summary>
            <value>
            The scaling factor along the y axis.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.SVG.Css.Rule">
            <summary>
            
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.TextureChooser">
            <summary>
            A control that edits a <see cref="T:ILOG.Diagrammer.TextureFill"/> instance.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.TextureChooser._fill">
            <summary>
            The edited Fill.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.TextureChooser._brushImage">
            <summary>
            The current image.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.TextureChooser"/> TextureChooser class
            displaying the specified textures.
            </summary>
            <param name="files">The texture files to display.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.#ctor(System.Drawing.Image[])">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.TextureChooser"/> TextureChooser class
            displaying the specified textures.
            </summary>
            <param name="images">The texture images to display.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.TextureChooser"/> TextureChooser class
            displaying the default textures.
            </summary>
            <param name="useDefaultTextures"><see langword="true"/> if the dialog loads the default textures, <see langword="false"/> otherwise.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.AddDefaultTextures">
            <summary>
            Loads the default textures.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.AddTexture(System.String)">
            <summary>
            Adds the specified texture to the list of available textures.
            </summary>
            <param name="file">The texture file to add.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Windows.Forms.TextureChooser.TextureItem"/> instance representing the texture.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.AddTexture(System.Drawing.Image)">
            <summary>
            Adds the specified texture to the list of available textures.
            </summary>
            <param name="img">The texture to add.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Windows.Forms.TextureChooser.TextureItem"/> instance representing the texture.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.AddTexture(System.Drawing.Image,System.String)">
            <summary>
            Adds the specified texture to the list of available textures using the specified diplay name.
            </summary>
            <param name="img">The texture to add.</param>
            <param name="name">The texture display name.</param>
            <returns>A <see cref="T:ILOG.Diagrammer.Windows.Forms.TextureChooser.TextureItem"/> instance representing the texture.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.OnFillChanged(System.EventArgs)">
            <summary>
            Invoked when the settings of the edited <see cref="T:ILOG.Diagrammer.TextureFill"/> are changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains data about the event.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.FillLists">
            <summary>
            Fill the WrapMode list.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.updateControl">
            <summary>
            Updates UIControl after a change.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.updateFill(System.Drawing.Image,System.Drawing.Drawing2D.WrapMode,ILOG.Diagrammer.CoordinateSpace,ILOG.Diagrammer.Rectangle2D,System.Int32)">
            <summary>
            Update the edited <see cref="T:ILOG.Diagrammer.TextureFill"/> with the specitied settings.
            </summary>
            <param name="img">The texture image.</param>
            <param name="mode">The texture <see cref="T:System.Drawing.Drawing2D.WrapMode"/>.</param>
            <param name="coordinate">The texture <see cref="T:ILOG.Diagrammer.CoordinateSpace"/>.</param>
            <param name="bounds">The texture bounds.</param>
            <param name="alpha">The texture opacity.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.DrawListItems(System.Object,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Draws the texture items.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.updatePreview">
            <summary>
            Update Preview control.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.DrawPreview(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draws the preview control.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.AddNewTexture(System.Object,System.EventArgs)">
            <summary>
            Invoked when the "Other Texture" button is clicked.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.OnListSelectionChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when a texture has been selected.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.OnWrapModeChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the WrapMode has changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.OnAlphaChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the opacity value has changed.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.TextureChooser.OnCoordinateChanged(System.Object,System.EventArgs)">
            <summary>
            Invoked when the CoordinateSpace has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.TextureChooser.Fill">
            <summary>
            The <see cref="T:ILOG.Diagrammer.TextureFill"/> instance to edit.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.TextureFill"/> instance to edit.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.TextureChooser.FillChanged">
            <summary>
            Occurs when the settings of the edited <see cref="T:ILOG.Diagrammer.TextureFill"/> are changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.TextureChooser.TextureItem">
            <summary>
            A class that displays a texture in a List.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.RotateInteractor">
            <summary>
            An interactor to rotate a <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/>.
            </summary>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.ZoomInteractor"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.PanInteractor"/>
            <seealso cref="T:ILOG.Diagrammer.Windows.Forms.SelectInteractor"/>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.RotateInteractor._defHoverCursor">
            <summary>
            The cursor when the mouse move over the view. (shared.)
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.RotateInteractor._hoverCursor">
            <summary>
            The cursor when the mouse move over the view.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.RotateInteractor._rotateCursor">
            <summary>
            The cursor during the interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.RotateInteractor._centerPt">
            <summary>
            The center of the rotation
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.RotateInteractor._lastPt">
            <summary>
            The point where the mouse moved to during the previous MouseMove event.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.RotateInteractor._endPt">
            <summary>
            The point locating the current rotation on the ghost.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.RotateInteractor._origin">
            <summary>
            The origin on the ghost circle of the angle arc.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.RotateInteractor._prevTransform">
            <summary>
            The previous transform
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.RotateInteractor._currentTransform">
            <summary>
            The current transform
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.RotateInteractor._opaqueEdit">
            <summary>
            whether the transformation is applied during the interaction
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.RotateInteractor._angleStep">
            <summary>
            The angle step when the snap mode is activated (by Shift+drag)
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Windows.Forms.RotateInteractor._radius">
            <summary>
            The radius of the ghost circle.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.RotateInteractor"/> class.
            </summary>
            <remarks>The default button to start interaction is the left mouse button.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.#ctor(System.Windows.Forms.MouseButtons)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Windows.Forms.RotateInteractor"/> class.
            </summary>
            <param name="button">One of the <see cref="T:System.Windows.Forms.MouseButtons"/> values.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.OnOpaqueEditChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.OpaqueEdit"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>OpaqueEdit</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.OnAngleStepChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.AngleStep"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>AngleStep</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.OnGhostRadiusChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.GhostRadius"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>GhostRadius</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.ShouldSerializeHoverCursor">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.HoverCursor"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.ResetHoverCursor">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.HoverCursor"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.OnHoverCursorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.HoverCursor"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>HoverCursor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.ShouldSerializeRotateCursor">
            <summary>
            Indicates whether the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.RotateCursor"/> property should be persisted.
            </summary>
            <returns><see langword="true"/> if the property value has changed from its default; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.ResetRotateCursor">
            <summary>
            Resets the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.RotateCursor"/> property to its default value.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.OnRotateCursorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.RotateCursor"/> property is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>RotateCursor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.OnGhostColorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.GhostColor"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>GhostStrokeColor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.OnGhostFillColorChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.GhostFillColor"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>GhostFillColor</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.OnDashStyleChanged(System.EventArgs)">
            <summary>
            Invoked when the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.DashStyle"/> property is changed on the control.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data. </param>
            <remarks>Called when the <strong>DashStyle</strong> property
            is changed.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseDown</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseMove(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseMove</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnMouseUp(System.Windows.Forms.MouseEventArgs)">ViewInteractor.OnMouseUp</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">ViewInteractor.OnKeyDown</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.OnViewChanged(ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.OnViewChanged(ILOG.Diagrammer.Windows.Forms.ViewChangedEventArgs)">ViewInteractor.OnViewChanged</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.RotateView(ILOG.Diagrammer.Transform)">
            <summary>
            Is called to perform the rotation on the view.
            </summary>
            <param name="t">A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</param>
            <remarks>The default implementation of this method set the view transformation to <paramref name="t"/>.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.StartInteraction">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.StartInteraction">ViewInteractor.StartInteraction</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.StopInteraction(System.Boolean)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.StopInteraction(System.Boolean)">ViewInteractor.StopInteraction</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.UpdateStatusBarText">
            <summary>
            This method overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.UpdateStatusBarText">ViewInteractor.UpdateStatusBarText</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.GetInvalidateRect">
            <summary>
            Returns the invalidate rect.
            </summary>
            <returns>the invalidate rect.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Windows.Forms.RotateInteractor.DrawGhost(ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Windows.Forms.ViewInteractor.DrawGhost(ILOG.Diagrammer.DrawingContext)">ViewInteractor.DrawGhost</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.OpaqueEdit">
             <summary>
            Indicates whether the rotation is applied during the interaction.
             </summary>
             <value><see langword='true'/> if the rotation is applied during the interaction; 
             <see langword='false'/> if the rotation is applied once the interaction is completed.
             The default value is <see langword='true'/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.RotateInteractor.OpaqueEditChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.OpaqueEdit"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.AngleStep">
            <summary>
            Gets or sets the angle step.
            </summary>
            <value>A <see cref="T:System.Single"/> value that represents the angle step. The default value is <strong>10</strong>.</value>
            <remarks>Pressing the Shift key while dragging the mouse force
            the interactor to snap the angle values according to this property.</remarks>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.RotateInteractor.AngleStepChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.AngleStep"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.GhostRadius">
            <summary>
            Gets or sets the ghost radius.
            </summary>
            <value>A positive value that specifies the ghost radius. The default value is <strong>50</strong>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.RotateInteractor.GhostRadiusChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.GhostRadius"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.HoverCursor">
            <summary>
            Gets or sets the view cursor when the mouse hovers the view.
            </summary>
            <value>The <see cref="T:System.Windows.Forms.Cursor"/> to display when the mouse hovers the view.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.RotateInteractor.HoverCursorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.HoverCursor"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.RotateCursor">
            <summary>
            Gets or sets the view cursor when the view is rotating.
            </summary>
            <value>The <see cref="T:System.Windows.Forms.Cursor"/> to display when the mouse hovers the view.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.RotateInteractor.RotateCursorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.RotateCursor"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.GhostColor">
            <summary>
            Gets or sets the color of the ghost stroke.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the color of the ghost stroke.
            The default value is <see cref="P:System.Drawing.SystemColors.WindowText"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.RotateInteractor.GhostColorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.GhostColor"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.GhostFillColor">
            <summary>
            Gets or sets the fill color of the ghost.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> that represents the fill color of the ghost.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.RotateInteractor.GhostFillColorChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.GhostFillColor"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.DashStyle">
            <summary>
            Gets or sets the dash style of the ghost.
            </summary>
            <value>One of the <see cref="T:System.Drawing.Drawing2D.DashStyle"/> values. The default
            value is <see cref="F:System.Drawing.Drawing2D.DashStyle.Dot"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Windows.Forms.RotateInteractor.DashStyleChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.DashStyle"/> property is changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.RotateInteractor.GhostBounds">
            <summary>
            Gets the ghost bounds.
            </summary>
            <value>A <see cref="T:System.Drawing.Rectangle"/> structure in view coordinates.</value>
        </member>
        <member name="T:ILOG.Diagrammer.SelectionAction">
            <summary>
            Represents the type of action for the <see cref="E:ILOG.Diagrammer.SelectionService.SelectionChanged"/> 
            event of the <see cref="T:ILOG.Diagrammer.SelectionService"/> class.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionAction.Reset">
            <summary>
            The selection was completly changed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionAction.Add">
            <summary>
            Graphic objects have been added to the selection.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionAction.Remove">
            <summary>
            Graphic objects have been removed from the selection.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.SelectionAction.Primary">
            <summary>
            The primary selection has changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.SelectionChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.SelectionService.SelectionChanged"/> event of the <see cref="T:ILOG.Diagrammer.SelectionService"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.SelectionChangedEventArgs"/> class.
            </summary>
            <remarks>The default action is <see cref="F:ILOG.Diagrammer.SelectionAction.Reset">SelectionAction.Reset</see>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionChangedEventArgs.#ctor(ILOG.Diagrammer.SelectionAction,System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.SelectionChangedEventArgs"/> class.
            </summary>
            <param name="action">One of the <see cref="T:ILOG.Diagrammer.SelectionAction"/> values that
            represents the type of action.</param>
            <param name="objects">The graphic objects involved in the event.</param>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionChangedEventArgs.#ctor(ILOG.Diagrammer.GraphicObject,ILOG.Diagrammer.GraphicObject)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.SelectionChangedEventArgs"/> class that represents a change of the
            primary selection.
            </summary>
            <param name="oldPrimary">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> that represents the new primary selection.</param>
            <param name="primary">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> that represents the old primary selection.</param>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionChangedEventArgs.Action">
            <summary>
            Gets the type of change in the selection.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.SelectionAction"/> values.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionChangedEventArgs.Objects">
            <summary>
            Gets the set of graphic objects that are involved in the change.
            </summary>
            <value>An array of <see cref="T:ILOG.Diagrammer.GraphicObject"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionChangedEventArgs.PrimarySelection">
            <summary>
            Gets the new primary selection when the <see cref="P:ILOG.Diagrammer.SelectionChangedEventArgs.Action"/> property is
            <see cref="F:ILOG.Diagrammer.SelectionAction.Primary"/>.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> that represents the new primary selection when
            the  <see cref="P:ILOG.Diagrammer.SelectionChangedEventArgs.Action"/> property is
            <see cref="F:ILOG.Diagrammer.SelectionAction.Primary"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionChangedEventArgs.OldPrimarySelection">
            <summary>
            Gets the old primary selection when the <see cref="P:ILOG.Diagrammer.SelectionChangedEventArgs.Action"/> property is
            <see cref="F:ILOG.Diagrammer.SelectionAction.Primary"/>.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/> that represents the old primary selection when
            the  <see cref="P:ILOG.Diagrammer.SelectionChangedEventArgs.Action"/> property is
            <see cref="F:ILOG.Diagrammer.SelectionAction.Primary"/>.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.SelectionChangedEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:ILOG.Diagrammer.SelectionService.SelectionChanged"/> event of a <see cref="T:ILOG.Diagrammer.SelectionService"/>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.SelectionService">
            <summary>
            Represents a collection of graphic objects that are selected in a diagram view.
            </summary>
            <remarks>The <see cref="T:ILOG.Diagrammer.SelectionService"/> is used by the <see cref="T:ILOG.Diagrammer.Windows.Forms.DiagramView"/> to handle selected
            objects.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.SelectionService"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionService.GetSelectedObjects">
            <summary>
            Gets an array containing the selected graphic objects.
            </summary>
            <returns>An array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> that contains the selected
            graphic objects.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionService.IsSelected(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Indicates whether the specified object is part of the selection.
            </summary>
            <param name="obj">A <see cref="T:ILOG.Diagrammer.GraphicObject"/> reference.</param>
            <returns><see langword="true"/> if the object is part of the selection; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionService.SetSelectedObjects(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            Changes all the graphic objects in the selection.
            </summary>
            <param name="objs">An array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> that
            represents the new selected graphic objects.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionService.AddSelectedObjects(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            Adds the specified elements to the selection.
            </summary>
            <param name="objs">An array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> elements.</param>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionService.AddSelectedObject(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Adds the specified graphic object to the selection.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> to add.</param>
            <remarks>
            Adds the specified graphic object to the selection. If the graphic object
            is already in the selection, the method does nothing and no event is fired; otherwise
            the <see cref="E:ILOG.Diagrammer.SelectionService.SelectionChanged"/> event is fired with the type <see cref="F:ILOG.Diagrammer.SelectionAction.Add"/>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionService.RemoveSelectedObjects(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.GraphicObject})">
            <summary>
            Removes a set of graphic objects from the selection.
            </summary>
            <param name="objs">The array of <see cref="T:ILOG.Diagrammer.GraphicObject"/> to remove.</param>
            <remarks>
            Removes the specified graphic objects from the selection. 
            A <see cref="E:ILOG.Diagrammer.SelectionService.SelectionChanged"/> event is fired with the type 
            <see cref="F:ILOG.Diagrammer.SelectionAction.Remove"/>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionService.RemoveSelectedObject(ILOG.Diagrammer.GraphicObject)">
            <summary>
            Removes the specified graphic object from the selection.
            </summary>
            <param name="obj">The <see cref="T:ILOG.Diagrammer.GraphicObject"/> to remove.</param>
            <remarks>
            Removes the specified graphic object from the selection. If the graphic object
            is not part of the selection, the method does nothing and no event is fired; otherwise
            the <see cref="E:ILOG.Diagrammer.SelectionService.SelectionChanged"/> event is fired with the type <see cref="F:ILOG.Diagrammer.SelectionAction.Remove"/>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionService.ClearSelection">
            <summary>
            Removes all the objects from the selection.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.SelectionService.OnSelectionChanged(ILOG.Diagrammer.SelectionChangedEventArgs)">
            <summary>
            Invoked when the selection has changed.
            </summary>
            <param name="args">A <see cref="T:ILOG.Diagrammer.SelectionChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:ILOG.Diagrammer.SelectionService.SelectionChanged">
            <summary>
            Occurs when the selection has changed.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionService.SelectedCount">
            <summary>
            Gets the number of selected graphic object.
            </summary>
            <value>
            The number of selected graphic object.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.SelectionService.PrimarySelection">
            <summary>
            Gets or sets the primary selection in the collection.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.GraphicObject"/>.</value>
            <remarks>When setting the property, the value must be part of the selection.</remarks>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.Polygon">
            <summary>
            Defines a graphic object with a polygon shape.
            </summary>
            <remarks>
            <see cref="T:ILOG.Diagrammer.Graphic.Polygon"/> is a graphic object that displays a polygon. The points of the 
            polygon are defined by the <see cref="P:ILOG.Diagrammer.Graphic.PolyPoints.Points"/> property.
            </remarks>
            <example>
            <para lang="cs,vbnet">The following sample shows how to create a blue polygon with a dashed border.</para>
            <code lang="cs">
            Polygon CreatePolygon()
            {
                Polygon polygon = new Polygon();
                polygon.Points.AddRange(new Point2D[] {
                    new Point2D(0,0),
                    new Point2D(100, 50),
                    new Point2D(200,0),
                    new Point2D(300,50)
                });
                polygon.Stroke = new Stroke(Color.Black, 2, DashStyle.Dash);
                polygon.Fill = new SolidFill(Color.Blue);
                return polygon;
            }
            </code>
            <code lang="vbnet">
            Function CreatePolygon() As Polygon 
                Dim polygon As Polygon = New Polygon 
                polygon.Points.AddRange(New Point2D() { _
                    New Point2D(0, 0), _
                    New Point2D(100, 50), _
                    New Point2D(200, 0), _
                    New Point2D(300, 50)}) 
                polygon.Stroke = New Stroke(Color.Black, 2, DashStyle.Dash) 
                polygon.Fill = New SolidFill(Color.Blue) 
                Return polygon 
            End Function
            </code>
            </example>
            <seealso cref="T:ILOG.Diagrammer.Graphic.Polyline"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Polygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Polygon"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Polygon.#ctor(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.Point2D})">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.Polygon"/> class using the
            specified parameters.
            </summary>
            <param name="points">An array of <see cref="T:ILOG.Diagrammer.Point2D"/> objects that represents the points of the polygon.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Polygon.OnFillModeChanged(System.Drawing.Drawing2D.FillMode,System.Drawing.Drawing2D.FillMode)">
            <summary>
            Is called when the <see cref="P:ILOG.Diagrammer.Graphic.Polygon.FillMode"/> property has changed.
            </summary>
            <param name="newvalue">The new value.</param>
            <param name="oldvalue">The old value.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Polygon.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Graphic.Shape.UpdateGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">Shape.UpdateGraphicsPath</see>
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Polygon.GetDefaultAnchors">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.GetDefaultAnchors">GraphicObject.GetDefaultAnchors</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.Polygon.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.GraphicObject.HitTestCore(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.DrawingContext)">GraphicObject.HitTestCore</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Polygon.IsClosed">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.Graphic.PolyPoints.IsClosed">PolyPoints.IsClosed</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.Polygon.FillMode">
            <summary>
            Gets or sets the filling mode of the polygon.
            </summary>
            <value>One of the <see cref="T:System.Drawing.Drawing2D.FillMode"/> values. 
            The default value is <see cref="F:System.Drawing.Drawing2D.FillMode.Alternate"/>.</value>
        </member>
        <member name="E:ILOG.Diagrammer.Graphic.Polygon.FillModeChanged">
            <summary>
            Occurs when the <see cref="P:ILOG.Diagrammer.Graphic.Polygon.FillMode"/> property contents has changed.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.PolygonAnchor">
            <summary>
            Defines an anchor along the path of a <see cref="T:ILOG.Diagrammer.Graphic.Polygon"/> graphic object.
            </summary>
            <remarks>
            This class defines an anchor along the path of a <see cref="T:ILOG.Diagrammer.Graphic.Polygon"/> graphic object.
            The position of the point along the polygon is defined by the <see cref="P:ILOG.Diagrammer.Graphic.PolygonAnchor.StartVertex"/>, <see cref="P:ILOG.Diagrammer.Graphic.PolygonAnchor.EdgeCount"/>,
            <see cref="P:ILOG.Diagrammer.Graphic.PolygonAnchor.Position"/>, and <see cref="P:ILOG.Diagrammer.Graphic.PolygonAnchor.SweepOrder"/> properties.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolygonAnchor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.PolygonAnchor"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolygonAnchor.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.PolygonAnchor"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolygonAnchor.GetPoint(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)">
            <summary>
            Sets both the <paramref name="connectionPoint"/> and <paramref name="originPoint"/>
            out parameters to the point defined by the <see cref="P:ILOG.Diagrammer.Graphic.PolygonAnchor.Position"/> property on the polyline.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolygonAnchor.NeedsReferencePoint">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolygonAnchor.ValidFor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Anchor.ValidFor(ILOG.Diagrammer.GraphicObject)">Anchor.ValidFor</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolygonAnchor.ToString">
            <summary>
            Returns s short description of this <see cref="T:ILOG.Diagrammer.Graphic.PolylineAnchor"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolygonAnchor.IsSame(ILOG.Diagrammer.Anchor)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Anchor.IsSame(ILOG.Diagrammer.Anchor)">Anchor.IsSame</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolygonAnchor.Position">
            <summary>
            The position of the connection point along the path of the polygon.
            </summary>
            <value>
            The value of this property is a floating point value between
            <strong>0</strong> and <strong>1</strong>. A value of <strong>0</strong>
            means the <see cref="P:ILOG.Diagrammer.Graphic.PolygonAnchor.StartEdge"/> point of the polygon, a value of <strong>1</strong>
            means the point of the polygon computed using the <see cref="P:ILOG.Diagrammer.Graphic.PolygonAnchor.StartEdge"/> and <see cref="P:ILOG.Diagrammer.Graphic.PolygonAnchor.EdgeCount"/> properties, and an intermediate value means
            a point whose linear distance along the polygon path is equal to the
            total length of the path multiplied by the position.
            </value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.PolygonAnchor.StartVertex"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.PolygonAnchor.EdgeCount"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolygonAnchor.StartEdge">
            <summary>
            This property is obsolete. Please use the <see cref="P:ILOG.Diagrammer.Graphic.PolygonAnchor.StartVertex"/> property instead.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolygonAnchor.StartVertex">
            <summary>
            Gets or sets the index of the starting vertex for the anchor.
            </summary>
            <value>A zero-based index. The default value is <strong>0</strong>.</value>
            <seealso cref="P:ILOG.Diagrammer.Graphic.PolygonAnchor.Position"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.PolygonAnchor.EdgeCount"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolygonAnchor.EdgeCount">
            <summary>
            Gets or sets the edge count for the anchor.
            </summary>
            <value>An <see cref="T:System.Int32"/> that represents the number of edges for the anchor. The default value is <strong>-1</strong>,
            meaning that the whole polygon will be used.</value>
            <remarks>This property is used to locate the end vertex for the anchor. Depending on the <see cref="P:ILOG.Diagrammer.Graphic.PolygonAnchor.SweepOrder"/> property, this
            property will be added to or removed from the <see cref="P:ILOG.Diagrammer.Graphic.PolygonAnchor.StartVertex"/> index to get the actual end vertex. Then, the connection point 
            is computed by using the <see cref="P:ILOG.Diagrammer.Graphic.PolygonAnchor.Position"/> property, which gives the location of the connection point along the segments between
            the start and end vertices.</remarks>
            <seealso cref="P:ILOG.Diagrammer.Graphic.PolygonAnchor.Position"/>
            <seealso cref="P:ILOG.Diagrammer.Graphic.PolygonAnchor.StartEdge"/>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolygonAnchor.SweepOrder">
            <summary>
            Indicates in which order edges will be visited.
            </summary>
            <value><see langword="true"/> to visit edges in the reverse order; Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.DefaultPropertyContainer">
            <summary>
            Summary description for DefaultPropertyContainer.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.IPropertyContainer">
            <summary>
            Summary description for IPropertyContainer.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Graphic.PolyPointsAnchor">
            <summary>
            Represents an anchor on a vertex of a <see cref="T:ILOG.Diagrammer.Graphic.PolyPoints"/>
            graphic object. The position of the point is defined by the <see cref="P:ILOG.Diagrammer.Graphic.PolyPointsAnchor.Vertex"/> property.    
            </summary>
            <seealso cref="T:ILOG.Diagrammer.Graphic.PolygonAnchor"/>
            <seealso cref="T:ILOG.Diagrammer.Graphic.PolylineAnchor"/>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsAnchor.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.PolyPointsAnchor"/> class using
            the specified <see paramref="vertex"/> on the path of the polyline.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsAnchor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Graphic.PolyPointsAnchor"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsAnchor.GetPoint(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D@,ILOG.Diagrammer.Point2D@)">
            <summary>
            Sets both the <paramref name="connectionPoint"/> and <paramref name="originPoint"/>
            out parameters to the point defined by the <see cref="P:ILOG.Diagrammer.Graphic.PolyPointsAnchor.Vertex"/> property.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsAnchor.NeedsReferencePoint">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsAnchor.ValidFor(ILOG.Diagrammer.GraphicObject)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Anchor.ValidFor(ILOG.Diagrammer.GraphicObject)">Anchor.ValidFor</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsAnchor.ToString">
            <summary>
            Returns s short description of this <see cref="T:ILOG.Diagrammer.Graphic.PolylineAnchor"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsAnchor.IsSame(ILOG.Diagrammer.Anchor)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Anchor.IsSame(ILOG.Diagrammer.Anchor)">Anchor.IsSame</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Graphic.PolyPointsAnchor.SupportsMove">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.Anchor.SupportsMove">Anchor.SupportsMove</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolyPointsAnchor.Edge">
            <summary>
            This property is obsolete. See the <see cref="P:ILOG.Diagrammer.Graphic.PolyPointsAnchor.Vertex"/> property.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Graphic.PolyPointsAnchor.Vertex">
            <summary>
            Gets or sets the index of the vertex for the anchor.
            </summary>
            <value>A zero-based index. The default value is <strong>0</strong>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.MultipleLayout">
            <summary>
            The main class for the Multiple Layout algorithm.
            </summary>
            <remarks>
            <p>
            This is not a layout algorithm but rather a facility to compose
            two layout algorithms and treat them as one algorithm object.
            This is more convenient if two layout algorithms must be
            applied to subgraphs in a predetermined order. 
            </p>
            <p>
            The multiple layout offers only a few layout parameters that are
            global to all two sublayouts (such as the allowed time), but you
            can specify the other layout parameters individually for each
            sublayout by accessing <see cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayout"/>
            and <see cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayout"/> directly.
            </p>
            <p>
            If complex combinations of graph layouts are needed
            in a nested graph, you should use the Recursive Multiple Layout (see
            <see cref="T:ILOG.Diagrammer.GraphLayout.RecursiveMultipleLayout"/>)
            that utilizes the Multiple Layout inside a Recursive Layout.
            </p>
            </remarks>
            <example>
            <para lang="cs,vbnet">The following example shows how to use the
            Multiple Layout for applying, in the appropriate order, first Tree
            layout and then a Link layout for the nontree links in a nested graph.
            It would be unfortunate to call
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
            multiple times to achieve this, because the tree layout of the parent
            graph would be finished before the link layout of its subgraph has
            started; hence the link layout of the subgraph invalidates the tree
            layout of the parent graph again. To avoid this effect, the Tree
            layout and Link layout of the subgraph should be
            finished before any layout of the parent graph has started. This is
            achieved using the following code.</para>
            <code lang="cs">
            MultipleLayout layout = new MultipleLayout(
                                          new TreeLayout(), new ShortLinkLayout());
            </code>
            <code lang="vbnet">
            Dim layout As MultipleLayout = New MultipleLayout( _
                                             New TreeLayout, New ShortLinkLayout)
            </code>
            <para lang="cs,vbnet">The following example shows how to
            construct a <strong>MultipleLayout</strong> from another
            <strong>MultipleLayout</strong>, which is useful if more than
            two graph layouts are necessary.</para>
            <code lang="cs">
            MultipleLayout layout = new MultipleLayout(
                                          new MultipleLayout(layout1, layout2),
                                          new MultipleLayout(layout3, layout4));
            </code>
            <code lang="vbnet">
            Dim layout As MultipleLayout = New MultipleLayout( _
                                          New MultipleLayout(layout1, layout2), _
                                          New MultipleLayout(layout3, layout4))
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.#ctor">
            <summary>
             Creates a new instance of the Multiple Layout algorithm.
            </summary>
            <remarks>
             <br/> To indicate the graphic container you want to lay out, use
            the method <strong>Attach(GraphicContainer)</strong>. <br/> To
            indicate the graph model you want to lay out, use the method
            <strong>Attach(IGraphModel)</strong>. <br/> To perform the layout,
            use the method <strong>PerformLayout</strong>. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.#ctor(ILOG.Diagrammer.GraphLayout.GraphLayout,ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
             Creates a new instance of the Multiple Layout algorithm that
            composes the input layouts.
            </summary>
            <remarks>
            If <strong>PerformLayout</strong> is called on this instance, then
            <strong>layout1</strong> is performed first, and
            <strong>layout2</strong> is performed second. If a recursive layout
            is called for a nested graph on this instance, all two layouts are
            applied to each subgraph. However, notice that
            <strong>layout1</strong> and <strong>layout2</strong> are finished
            for a subgraph before the <strong>layout1</strong> of the parent
            graph is started. 
            <p>
            </p>
            </remarks>
            <param name="layout1"> The first layout to be performed.
            </param>
            <param name="layout2"> The second layout to be performed.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout(System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.Init">
            <summary>
            Initializes instance variables.
            </summary>
            <remarks> 
            <p>
            You should not call this method directly. The method is called
            internally by the constructor without arguments and by the copy
            constructor. The method must be overridden by subclasses that need
            to initialize  additional instance variables.
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.#ctor(ILOG.Diagrammer.GraphLayout.MultipleLayout)">
            <summary>
            Creates a new layout instance by copying an existing one.
            </summary>
            <remarks>
            This constructor is used by the <see cref="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.Copy"/>
            method. Any subclass should provide a copy constructor. 
            <p>
            The parameters of the <strong>source</strong> layout are copied
            using the method <see cref="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <param name="source"> The layout instance that is copied.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.Copy"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.Copy">
            <summary>
            Copies the layout instance.
            </summary>
            <remarks> 
            <p>
            This method copies the layout instance by calling the copy
            constructor. 
            </p>
            <p>
            When performing a recursive layout on a nested graph, this method is
            used by <see cref="T:ILOG.Diagrammer.GraphLayout.ILayoutProvider"/> to
            "clone" the layout instance of a parent graph. Note that the
            parameters which are specific to a node or a link are not copied.
            The persistence flags are copied. The sublayout instances and their
            global layout parameters are copied.  
            </p>
            <p>
            </p>
            </remarks>
            <returns>A copy of the layout instance.
            </returns>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.#ctor(ILOG.Diagrammer.GraphLayout.MultipleLayout)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayoutPersistent"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayoutPersistent"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Copies the parameters from a given layout instance.
            </summary>
            <remarks> 
            <p>
            Note that the parameters which are specific to a node or a link are
            not copied. The activation and persistence flags are copied. The
            sublayout instances and their global layout parameters are copied.  
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.Copy"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayoutPersistent"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayoutPersistent"/>
            <param name="source"> The layout instance from which the parameters
            are copied.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Allows you to specify the graph model you want to lay out.
            </summary>
            <remarks>
            In addition to the functionality in the base class, the Multiple
            Layout attaches its sublayouts.  
            <p>
             
            </p>
            </remarks>
            <param name="graphModel"> The graph model.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.Detach"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.Detach">
            <summary>
            Detaches the graph model from the layout instance.
            </summary>
            <remarks>
            When you attach a new graph model to the layout instance, you do not
            need  to detach the old graph model because this is done
            automatically when you call <see cref="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>. The
            <strong>Detach</strong> method performs cleaning operations on the
            graph model. In addition to the cleaning operations in the base
            class, the Multiple Layout detaches its sublayouts. 
            <p>
            Note that you must call this method when you no longer need the
            layout instance. Otherwise, some objects may not be garbage
            collected.  
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.CreateLayoutReport">
            <summary>
            Returns a new instance of the layout report.
            </summary>
            <remarks>
            The current implementation creates an instance of
            <see cref="T:ILOG.Diagrammer.GraphLayout.MultipleLayoutReport"/>. 
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.CreateLayoutReport"/>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.MultipleLayoutReport"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.Layout">
            <summary>
             Computes the layout using the Multiple Layout algorithm.
            </summary>
            <remarks>
             To start the layout, call the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.StopImmediately">
            <summary>
            Stops the running layout algorithm as soon as possible.
            </summary>
            <remarks> 
            <p>
            This method can be used if multiple threads are used for layout and
            GUI control. The GUI control thread calls this method to notify the
            layout thread that the layout run must be stopped. The layout
            algorithm will perform some final cleanup operations before
            terminating. Therefore, the layout thread will continue until the
            cleanup operations are finished. The GUI thread, however, returns
            immediately from this method. 
            </p>
            <p>
            If the layout algorithm is stopped before completion, the result
            code of the layout report is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <returns><see langword="true"/> if the algorithm can be stopped at
            this time.
            </returns>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.SupportsPercentageComplete">
            <summary>
            Indicates whether the layout class can estimate the percentage of
            completion during the run of the layout.
            </summary>
            <remarks>
            If the sublayouts support this feature, the percentage value is
            calculated from the sublayouts. If the sublayouts do not support
            this feature, the Multiple Layout algorithm can indicate by discrete
            percentage values (typically 50% and 100%) whether the first graph
            layout or the second graph layout are already finished.  
            <p>
            The calculated percentage values are not very precise. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IncreasePercentageComplete(System.Int32)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.PercentageComplete"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.SupportsStopImmediately">
            <summary>
            Indicates whether the layout class can immediately interrupt the
            current  run of the layout in a controlled way.
            </summary>
            <remarks>
            If the first graph layout and the second graph layout support this
            feature, then it returns <see langword="true"/>. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.StopImmediately"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsStoppedImmediately"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.SupportsAllowedTime">
            <summary>
            Indicates whether the layout class can stop the layout computation
            when a user-defined allowed time is exceeded.
            </summary>
            <remarks>
            If the first graph layout and the second graph layout support this
            feature, then it returns <see langword="true"/>. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/>
            '/&gt;
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsLayoutTimeElapsed"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.SupportsLayoutOfConnectedComponents">
            <summary>
            Indicates whether the layout class can cut the attached graph into
            connected components, apply itself on each connected component
            separately, and then use the layout instance returned by the
            property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents"/>
            to position the connected components.
            </summary>
            <remarks>
            If the first graph layout and the second graph layout support this
            feature, then it returns <see langword="true"/>. 
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponents"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.OnSubGraphLayoutStepPerformed(System.Object,ILOG.Diagrammer.GraphLayout.GraphLayoutStepPerformedEventArgs)">
            <summary>
            This method is called by the first graph layout and the second
            graph layout.
            It forwards the layout event to this Multiple Layout.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayout">
            <summary>
            Gets or sets the first layout to be applied.
            </summary>
            <remarks>
            You should set the layout before attaching the graph model. 
            <p>
            </p>
            </remarks>
            <value>The first layout.
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayoutActive">
            <summary>
            Gets or sets whether the first graph layout is active.
            </summary>
            <remarks>
            This allows you to temporarily disable the first graph layout. The
            first graph layout is active by default. However, if you want to
            perform a layout using only the second graph layout, you can set the
            first layout inactive. The first layout remains attached when
            inactive, but it is not performed when calling
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            on the Multiple layout instance. 
            <p>
            </p>
            </remarks>
            <value><see langword="true"/> if the first graph layout is active,
            or <see langword="false"/> otherwise.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayoutPersistent">
            <summary>
            Gets or sets whether the first graph layout is persistent.
            </summary>
            <remarks>
            <p>
            If the first graph layout is persistent, it is serialized
            when serializing the Multiple layout. This is
            the default.
            </p>
            </remarks>
            <value>Determines whether the first graph layout is
            persistent.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.FirstGraphLayout"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayout">
            <summary>
            Gets or sets the second layout to be applied.
            </summary>
            <remarks>
            You should set the layout before attaching the graph model. 
            </remarks>
            <value>The second graph layout. 
            <p>
            </p>
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.MultipleLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayoutActive">
            <summary>
            Gets or sets whether the second graph layout is active.
            </summary>
            <remarks>
            This allows you to temporarily disable the second graph layout. The
            second graph layout is active by default. However, if you want to
            perform a layout using only the first graph layout, you can set the
            second layout inactive. The second layout remains attached when
            inactive, but it is not performed when calling
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            on the Multiple layout instance. 
            <p>
            </p>
            </remarks>
            <value><see langword="true"/> if the second graph layout is active,
            or <see langword="false"/> otherwise.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayoutPersistent">
            <summary>
            Gets or sets whether the second graph layout is persistent.
            </summary>
            <remarks>
            <p>
            If the second graph layout is persistent, it is serialized
            when serializing the Multiple layout. This is
            the default.
            </p>
            </remarks>
            <value>Determines whether the second graph layout is
            persistent. 
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.SecondGraphLayout"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.CoordinatesMode">
            <summary>
            Sets the coordinates mode.
            </summary>
            <remarks>  
            <p>
            The default is
            <see cref="F:ILOG.Diagrammer.GraphLayout.CoordinatesMode.InverseViewCoordinates"/>.
            
            </p>
            </remarks>
            <value>The coordinates mode to set. 
            <p>
            </p>
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.AllowedTime">
            <summary>
            Gets or sets the upper limit for the duration of the layout
            algorithm.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/> for details.
            </remarks>
            <value>The upper limit for the duration of the layout algorithm.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.LayoutOfConnectedComponentsEnabled">
            <summary>
            Gets or sets whether the generic connected component layout
            mechanism is enabled.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LayoutOfConnectedComponentsEnabled"/> for
            details.
            </remarks>
            <value>Whether the generic connected component layout mechanism is
            enabled.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.MinBusyTime">
            <summary>
            Gets or sets the minimal time that the layout algorithm can be busy.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.MinBusyTime"/> for details.
            </remarks>
            <value>The minimal time that the layout algorithm can be busy.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.AutoLayout">
            <summary>
            Gets or sets whether the auto layout mode is enabled.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AutoLayout"/> for details.
            </remarks>
            <value>Whether the auto layout mode is enabled.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.InputCheckEnabled">
            <summary>
            Gets or sets whether the checks for the nodes and/or links provided
            as arguments for the different methods of the layout algorithms are
            enabled.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.InputCheckEnabled"/> for details.
            </remarks>
            <value>Whether the checks for the nodes and/or links provided as
            arguments for the different methods of the layout algorithms are
            enabled.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.ParametersUpToDate">
            <summary>
            Gets or sets whether the layout parameters are up to date.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.ParametersUpToDate"/> for details.
            </remarks>
            <value>Whether the layout parameters are up to date.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.StructureUpToDate">
            <summary>
            Gets or sets whether the structure of the graph is up to date.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.StructureUpToDate"/> for details.
            </remarks>
            <value>Whether the structure of the graph is up to date.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.MultipleLayout.GeometryUpToDate">
            <summary>
            Gets or sets whether the geometry of the graph is up to date.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.GeometryUpToDate"/> for details.
            </remarks>
            <value>Whether the geometry of the graph is up to date.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.INodeSideFilter">
            <summary>
            An interface used to define complex requirements concerning the
            connection of the links to the different sides of the nodes.
            </summary>
            <remarks> 
            <p>
            The filter is used by some layout algorithms to provide the user the
            capability to allow or prohibit the links to be connected on given
            sides (top/bottom/right/left) of the nodes. 
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.NodeSideFilter"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.NodeSideFilter"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.INodeSideFilter.Accept(ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object,System.Boolean,System.Object,ILOG.Diagrammer.GraphLayout.NodeSide)">
            <summary>
            Allows or prohibits the connection of <paramref name="link"/> on a
            given side of the <paramref name="node"/>.
            </summary>
            <remarks> 
            <p>
            Returns <see langword="true"/> when the specified end of
            <paramref name="link"/> can be connected on <paramref name="node"/>
            on the side defined by the argument <paramref name="side"/>. 
            Returns <see langword="false"/> otherwise. 
            </p>
            <p>
            The values for <paramref name="side"/> are defined in 
            <see cref="T:ILOG.Diagrammer.GraphLayout.NodeSide"/>. Valid values are
            <strong>Top</strong>, <strong>Bottom</strong>,
            <strong>Left</strong>, and <strong>Right</strong>. 
            </p>
            <p>
            This method is called by those layout algorithms that allow you to
            specify a node side filter. You can implement this method in order
            to define complex requirements concerning the connection of the
            links to the different sides of nodes. For example, if you want all
            links to be connected to any side except  the top side of the nodes,
            you could use: <br/><strong>return (side != NodeSide.Top);</strong> 
            </p>
            <p>
            </p>
            </remarks>
            <param name="graphModel"> The graph model to which the node belongs.
            </param>
            <param name="link"> The link to be connected to the node.
            </param>
            <param name="origin"> If <paramref name="origin"/> is
            <see langword="true"/>, the method determines whether the link
            origin can be connected. Otherwise, the method determines whether
            the link destination can be connected.
            </param>
            <param name="node"> The node.
            </param>
            <param name="side"> The side of the node. The values are defined in
            <see cref="T:ILOG.Diagrammer.GraphLayout.NodeSide"/>. Valid values are
            <strong>Top</strong>, <strong>Bottom</strong>,
            <strong>Left</strong>, and <strong>Right</strong>.
            </param>
            <returns><see langword="true"/> if the connection is allowed and
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode">
            <summary>
            The status codes of the layout indicate the current status of the
            layout algorithm.
            </summary>
            <remarks>
            The codes can be retrieved by <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
            after layout was finished, or inside a handler for the
            <strong>LayoutStepPerformed</strong> event.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.InitialCode">
            <summary>
            The initial value of the code.
            </summary>
            <remarks>
            The property <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/> returns this value
            if no different code was ever set. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.EmptyGraph">
            <summary>
            The layout was not performed because the graph is empty.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.NotNeeded">
            <summary>
            The layout was not performed because there was no significant change
            in the graph since the last time the layout was performed
            successfully.
            </summary>
            <remarks>
            This normally means that there was no change in the topology (no
            nodes and no links were added or removed), no change in position (no
            nodes and no links were moved), and no change in parameter values. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.LayoutDone">
            <summary>
            The layout was performed normally.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndValid">
            <summary>
            The layout was performed but stopped because either the layout time
            elapsed or
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.StopImmediately"/>
            was called, and the result can be considered a valid layout.
            </summary>
            <remarks>
            Iterative layout algorithms that can be stopped at any iteration set
            this result code if they do not run to completion (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsStopImmediately"/>
            and
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsAllowedTime"/>).
            
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid">
            <summary>
            The layout was performed but stopped because either the layout time
            elapsed or
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.StopImmediately"/>
            was called, and the result cannot be considered a valid layout.
            </summary>
            <remarks>
            Noniterative layout algorithms set this result code if they do not
            run to completion (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsStopImmediately"/>
            and
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SupportsAllowedTime"/>).
            The nodes and links are either at intermediate positions (that is,
            the positions seem to be placed randomly) or have not changed at
            all, depending on the specific behavior of the layout algorithm. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.LayoutStarted">
            <summary>
            The layout was started.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.LayoutFinished">
            <summary>
            The layout was finished.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.ExceptionDuringLayout">
            <summary>
            An exception has been raised during layout.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.FillSerializer">
            <summary>
            Represents a XML custom serializer for Fill objects.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Windows.Forms.StyleWindow.StyleWindowResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.StyleWindowResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.StyleWindowResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.StyleWindowResources.CanNotCreateWindow">
            <summary>
              Looks up a localized string similar to Cannot create tool window.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.StyleWindowResources.FontSizeTransaction">
            <summary>
              Looks up a localized string similar to Set font size to {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.StyleWindowResources.FontTransaction">
            <summary>
              Looks up a localized string similar to Set font to {0}.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.StyleWindowResources.StrokeChooser_StrokeWidthPointFormat">
            <summary>
              Looks up a localized string similar to {0} Pt.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.StyleWindowResources.StyleToolWindowTitle">
            <summary>
              Looks up a localized string similar to Style Window.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Windows.Forms.StyleWindow.StyleWindowResources.ZoominTransaction">
            <summary>
              Looks up a localized string similar to Zoom in.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Size2D">
            <summary>
            Stores an ordered pair of floating-point numbers, typically the width and height of a rectangle.
            </summary>
            <seealso cref="T:ILOG.Diagrammer.Rectangle2D"/>
            <seealso cref="T:ILOG.Diagrammer.Point2D"/>
        </member>
        <member name="F:ILOG.Diagrammer.Size2D.Empty">
            <summary>
            Represents an instance of the <see cref="T:ILOG.Diagrammer.Size2D"/> class with its members uninitialized.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Size2D.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Size2D"/> class from the specified dimensions.
            </summary>
            <param name="width">The width component of the new <see cref="T:ILOG.Diagrammer.Size2D"/>. </param>
            <param name="height">The height component of the new <see cref="T:ILOG.Diagrammer.Size2D"/>. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Size2D.#ctor(ILOG.Diagrammer.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Size2D"/> class from the specified <see cref="T:ILOG.Diagrammer.Point2D"/>.
            </summary>
            <param name="pt">The <see cref="T:ILOG.Diagrammer.Point2D"/> from which to initialize this <see cref="T:ILOG.Diagrammer.Size2D"/>.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Size2D.#ctor(ILOG.Diagrammer.Size2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Size2D"/> class from the specified existing <see cref="T:ILOG.Diagrammer.Size2D"/>.
            </summary>
            <param name="size">The <see cref="T:ILOG.Diagrammer.Size2D"/> from which to create the new <see cref="T:ILOG.Diagrammer.Size2D"/>. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Size2D.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is a <see cref="T:ILOG.Diagrammer.Size2D"/> with the same dimensions as this <see cref="T:ILOG.Diagrammer.Size2D"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>This method returns <see langword="true"/> if obj is a <see cref="T:ILOG.Diagrammer.Size2D"/> and has the same width 
            and height as this <see cref="T:ILOG.Diagrammer.Size2D"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.Size2D.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:ILOG.Diagrammer.Size2D"/> structure.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Size2D.op_Addition(ILOG.Diagrammer.Size2D,ILOG.Diagrammer.Size2D)">
            <summary>
            Adds the width and height of one <see cref="T:ILOG.Diagrammer.Size2D"/> structure to the width and height of another <see cref="T:ILOG.Diagrammer.Size2D"/> structure.
            </summary>
            <param name="sz1">The first <see cref="T:ILOG.Diagrammer.Size2D"/> to add.</param>
            <param name="sz2">The second <see cref="T:ILOG.Diagrammer.Size2D"/> to add. </param>
            <returns>A <see cref="T:ILOG.Diagrammer.Size2D"/> structure that is the result of the addition operation.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Size2D.op_Equality(ILOG.Diagrammer.Size2D,ILOG.Diagrammer.Size2D)">
            <summary>
            Tests whether two <see cref="T:ILOG.Diagrammer.Size2D"/> structures are equal.
            </summary>
            <param name="sz1">The <see cref="T:ILOG.Diagrammer.Size2D"/> structure on the left side of the equality operator. </param>
            <param name="sz2">The <see cref="T:ILOG.Diagrammer.Size2D"/> structure on the right of the equality operator. </param>
            <returns>This operator returns <see langword="true"/> if sz1 and sz2 have equal width and height; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Size2D.op_Inequality(ILOG.Diagrammer.Size2D,ILOG.Diagrammer.Size2D)">
            <summary>
            Tests whether two <see cref="T:ILOG.Diagrammer.Size2D"/> structures are different.
            </summary>
            <param name="sz1">The <see cref="T:ILOG.Diagrammer.Size2D"/> structure on the left of the inequality operator. </param>
            <param name="sz2">The <see cref="T:ILOG.Diagrammer.Size2D"/> structure on the right of the inequality operator. </param>
            <returns>This operator returns <see langword="true"/> if sz1 and sz2 differ either in width or height; <see langword="false"/> if sz1 and sz2 are equal.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Size2D.op_Explicit(ILOG.Diagrammer.Size2D)~ILOG.Diagrammer.Point2D">
            <summary>
            Converts the specified <see cref="T:ILOG.Diagrammer.Size2D"/> to a <see cref="T:ILOG.Diagrammer.Point2D"/>.
            </summary>
            <param name="size">The <see cref="T:ILOG.Diagrammer.Size2D"/> to convert.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Size2D.op_Implicit(ILOG.Diagrammer.Size2D)~System.Drawing.SizeF">
            <summary>
            Converts the specified <see cref="T:ILOG.Diagrammer.Size2D"/> to a <see cref="T:System.Drawing.SizeF"/>.
            </summary>
            <param name="size">The <see cref="T:ILOG.Diagrammer.Size2D"/> to convert.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Size2D.op_Implicit(System.Drawing.SizeF)~ILOG.Diagrammer.Size2D">
            <summary>
            Converts the specified <see cref="T:System.Drawing.SizeF"/> to a <see cref="T:ILOG.Diagrammer.Size2D"/>.
            </summary>
            <param name="size">The <see cref="T:System.Drawing.SizeF"/> to convert.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Size2D.op_Implicit(System.Drawing.Size)~ILOG.Diagrammer.Size2D">
            <summary>
            Converts the specified <see cref="T:System.Drawing.Size"/> to a <see cref="T:ILOG.Diagrammer.Size2D"/>.
            </summary>
            <param name="size">The <see cref="T:System.Drawing.Size"/> to convert.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Size2D.op_Subtraction(ILOG.Diagrammer.Size2D,ILOG.Diagrammer.Size2D)">
            <summary>
            Subtracts the width and height of one <see cref="T:ILOG.Diagrammer.Size2D"/> structure from the width and height of another <see cref="T:ILOG.Diagrammer.Size2D"/> structure.
            </summary>
            <param name="sz1">The <see cref="T:ILOG.Diagrammer.Size2D"/> on the left side of the subtraction operator. </param>
            <param name="sz2">The <see cref="T:ILOG.Diagrammer.Size2D"/> on the right side of the subtraction operator. </param>
            <returns>A <see cref="T:ILOG.Diagrammer.Size2D"/> that is the result of the subtraction operation.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Size2D.ToPoint2D">
            <summary>
            Converts a <see cref="T:ILOG.Diagrammer.Size2D"/> to a <see cref="T:ILOG.Diagrammer.Point2D"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Size2D.ToString">
            <summary>
            Creates a human-readable string that represents this <see cref="T:ILOG.Diagrammer.Size2D"/>.
            </summary>
            <returns>A string that represents this <see cref="T:ILOG.Diagrammer.Size2D"/>.</returns>
        </member>
        <member name="P:ILOG.Diagrammer.Size2D.Height">
            <summary>
            Gets or sets the vertical component of this <see cref="T:ILOG.Diagrammer.Size2D"/>.
            </summary>
            <value>
            The vertical component of this <see cref="T:ILOG.Diagrammer.Size2D"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Size2D.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref="T:ILOG.Diagrammer.Size2D"/> has zero width and height.
            </summary>
            <value>
            This property returns <see langword="true"/> when this <see cref="T:ILOG.Diagrammer.Size2D"/> has both a width and height of zero; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Size2D.Width">
            <summary>
            Gets or sets the horizontal component of this <see cref="T:ILOG.Diagrammer.Size2D"/>.
            </summary>
            <value>
            The horizontal component of this <see cref="T:ILOG.Diagrammer.Size2D"/>.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.Rectangle2D">
            <summary>
            Stores a set of four floating-point numbers that represent the location and size of a rectangle.
            </summary>
            <seealso cref="T:ILOG.Diagrammer.Size2D"/>
            <seealso cref="T:ILOG.Diagrammer.Point2D"/>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.#ctor(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Size2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Rectangle2D"/> class with the specified location and size.
            </summary>
            <param name="location">A <see cref="T:ILOG.Diagrammer.Point2D"/> object that represents the location of the rectangle.</param>
            <param name="size">A <see cref="T:ILOG.Diagrammer.Size2D"/> object that represents the location of the rectangle.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.Rectangle2D"/> class with the specified location and size.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.Contains(ILOG.Diagrammer.Point2D)">
            <summary>
            Determines if the specified point is contained within this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <param name="pt">The <see cref="T:ILOG.Diagrammer.Point2D"/> to test.</param>
            <returns>This method returns <see langword="true"/> if the point represented by the pt parameter is contained within this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.Contains(System.Single,System.Single)">
            <summary>
            Determines if the specified point is contained within this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <param name="x">The x-coordinate of the point to test.</param>
            <param name="y">The y-coordinate of the point to test.</param>
            <returns>This method returns <see langword="true"/> if the point defined by x and y is contained within this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.Contains(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Determines if the rectangular region represented by <paramref name="rect"/> is entirely contained within this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <param name="rect">The <see cref="T:ILOG.Diagrammer.Rectangle2D"/> to test.</param>
            <returns>This method returns <see langword="true"/> if the rectangular region represented by rect is entirely contained within the rectangular region represented by this <see cref="T:ILOG.Diagrammer.Rectangle2D"/>; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.Equals(System.Object)">
            <summary>
            Tests whether <paramref name="obj"/> is a <see cref="T:ILOG.Diagrammer.Rectangle2D"/> with the same location and size of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test.</param>
            <returns>This method returns <see langword="true"/> if <paramref name="obj"/> is a <see cref="T:ILOG.Diagrammer.Rectangle2D"/> and its X, Y, Width, and Height properties are equal to the corresponding properties of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <returns>The hash code for this <see cref="T:ILOG.Diagrammer.Rectangle2D"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.Inflate(ILOG.Diagrammer.Size2D)">
            <summary>
            Inflates this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> by the specified amount.
            </summary>
            <param name="size">The amount to inflate this rectangle.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.Inflate(System.Single,System.Single)">
            <summary>
            Inflates this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure by the specified amount.
            </summary>
            <param name="x">The amount to inflate this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure horizontally.</param>
            <param name="y">The amount to inflate this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure vertically.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.Inflate(ILOG.Diagrammer.Rectangle2D,System.Single,System.Single)">
            <summary>
            Creates and returns an inflated copy of the specified <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            The copy is inflated by the specified amount. The original rectangle remains unmodified.
            </summary>
            <param name="rect">The <see cref="T:ILOG.Diagrammer.Rectangle2D"/> to be copied. This rectangle is not modified.</param>
            <param name="x">The amount to inflate the copy of the rectangle horizontally.</param>
            <param name="y">The amount to inflate the copy of the rectangle vertically.</param>
            <returns>The inflated <see cref="T:ILOG.Diagrammer.Rectangle2D"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.Intersect(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Replaces this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure with the intersection 
            of itself and the specified <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <param name="rect">The rectangle to intersect.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.Intersect(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Returns a <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure that represents the intersection of two rectangles. If there is no intersection, an empty rectangle is returned.
            </summary>
            <param name="a">A rectangle to intersect.</param>
            <param name="b">A rectangle to intersect. </param>
            <returns>A third <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure the size of which represents the overlapped area of the two specified rectangles.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.IntersectsWith(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Determines if this rectangle intersects with <paramref name="rect"/>.
            </summary>
            <param name="rect">The rectangle to test. </param>
            <returns>This method returns <see langword="true"/> if there is any intersection.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.Offset(ILOG.Diagrammer.Point2D)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="pos">The amount to offset the location. </param>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.Offset(System.Single,System.Single)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="x">The amount to offset the location horizontally. </param>
            <param name="y">The amount to offset the location vertically.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.op_Implicit(System.Drawing.Rectangle)~ILOG.Diagrammer.Rectangle2D">
            <summary>
            Converts the specified <see cref="T:System.Drawing.Rectangle"/> to a <see cref="T:ILOG.Diagrammer.Rectangle2D"/>.
            </summary>
            <param name="r">The <see cref="T:System.Drawing.Rectangle"/> to convert.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.op_Implicit(System.Drawing.RectangleF)~ILOG.Diagrammer.Rectangle2D">
            <summary>
            Converts the specified <see cref="T:System.Drawing.RectangleF"/> to a <see cref="T:ILOG.Diagrammer.Rectangle2D"/>.
            </summary>
            <param name="r">The <see cref="T:System.Drawing.RectangleF"/> to convert.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.op_Implicit(ILOG.Diagrammer.Rectangle2D)~System.Drawing.RectangleF">
            <summary>
            Converts the specified <see cref="T:ILOG.Diagrammer.Rectangle2D"/> to a <see cref="T:System.Drawing.RectangleF"/>.
            </summary>
            <param name="r">The <see cref="T:ILOG.Diagrammer.Rectangle2D"/> to convert.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.ToString">
            <summary>
            Converts the Location and Size of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> to a human-readable string.
            </summary>
            <returns>A string that contains the position, width, and height of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure—for example, "{X=20, Y=20, Width=100, Height=50}".</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.Union(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Creates the smallest possible third rectangle that can contain both of two rectangles that form a union.
            </summary>
            <param name="a">A rectangle to union.</param>
            <param name="b">A rectangle to union.</param>
            <returns>A third <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure that contains both of the two rectangles that form the union.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.op_Inequality(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Tests whether two <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structures differ in location or size.
            </summary>
            <param name="left">The <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure that is to the left of the inequality operator. </param>
            <param name="right">The <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure that is to the right of the inequality operator.</param>
            <returns>This operator returns <see langword="true"/> if any of the X, Y, Width, or Height properties of the two Rectangle structures are unequal; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Rectangle2D.op_Equality(ILOG.Diagrammer.Rectangle2D,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Tests whether two <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structures have equal location and size.
            </summary>
            <param name="left">The <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure that is to the left of the equality operator. </param>
            <param name="right">The <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure that is to the right of the equality operator.</param>
            <returns>This operator returns <see langword="true"/> if the two specified <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structures have equal X, Y, Width, and Height properties.</returns>
        </member>
        <member name="F:ILOG.Diagrammer.Rectangle2D.Empty">
            <summary>
            Represents an instance of the <see cref="T:ILOG.Diagrammer.Rectangle2D"/> class with its members uninitialized.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Rectangle2D.Invalid">
            <summary>
            Represents an instance of the <see cref="T:ILOG.Diagrammer.Rectangle2D"/> class with
            its <see cref="P:ILOG.Diagrammer.Rectangle2D.X"/> and <see cref="P:ILOG.Diagrammer.Rectangle2D.Y"/> properties set to 0, and
            its <see cref="P:ILOG.Diagrammer.Rectangle2D.Width"/> and <see cref="P:ILOG.Diagrammer.Rectangle2D.Height"/> properties set to -1.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Rectangle2D.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <value>
            The x-coordinate of the upper-left corner of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Rectangle2D.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <value>
            The y-coordinate of the upper-left corner of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Rectangle2D.Width">
            <summary>
            Gets or sets the width of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <value>
            The width of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Rectangle2D.Height">
            <summary>
            Gets or sets the height of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <value>
            The height of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Rectangle2D.Size">
            <summary>
            Gets or sets the size of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/>.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Size2D"/> that represents the width and height of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Rectangle2D.Location">
            <summary>
            Gets or sets the coordinates of the upper-left corner of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the upper-left corner of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Rectangle2D.Left">
            <summary>
            Gets the x-coordinate of the left edge of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <value>
            The x-coordinate of the left edge of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Rectangle2D.Right">
            <summary>
            Gets the x-coordinate of the right edge of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <value>
            The x-coordinate of the right edge of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Rectangle2D.TopLeft">
            <summary>
            Gets the coordinates of the upper-left corner of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the upper-left corner of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Rectangle2D.TopRight">
            <summary>
            Gets the coordinates of the upper-right corner of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the upper-right corner of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Rectangle2D.BottomLeft">
            <summary>
            Gets the coordinates of the lower-left corner of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the lower-left corner of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Rectangle2D.BottomRight">
            <summary>
            Gets the coordinates of the lower-right corner of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the lower-right corner of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Rectangle2D.Center">
            <summary>
            Gets the coordinates of the center of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the center of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Rectangle2D.IsEmpty">
            <summary>
            Tests whether all numeric properties of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> have values of zero.
            </summary>
            <value>
            This property returns <see langword="true"/> if the Width, Height properties of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> all have values of zero; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Rectangle2D.IsInvalid">
            <summary>
            Tests whether all numeric properties of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> have values of zero.
            </summary>
            <value>
            This property returns <see langword="true"/> if the Width, Height properties of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> all have values of zero; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Rectangle2D.Top">
            <summary>
            Gets the y-coordinate of the top edge of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <value>
            The y-coordinate of the top edge of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Rectangle2D.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </summary>
            <value>
            The y-coordinate of the bottom edge of this <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.PathSegment">
            <summary>
            Represents the <see langword="abstract"/> base class for segments in a
            path defined by the <see cref="T:ILOG.Diagrammer.PathData"/> class.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.PathSegment._path">
            <summary>
            The <see cref="T:ILOG.Diagrammer.PathData"/> that contains the segment.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.PathSegment"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathSegment.Transform(ILOG.Diagrammer.Transform)">
            <summary>
            Transforms the segment.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathSegment.OnChanged">
            <summary>
            Invoked when segment changes.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathSegment.OnChanging">
            <summary>
            Invoked when segment changes.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathSegment.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            Adds the segment in a <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>
            </summary>
            <param name="path">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> to add the segment to.</param>
            <param name="point">A <see cref="T:System.Drawing.PointF"/> that represents the current point.</param>
            <param name="control">A <see cref="T:System.Drawing.PointF"/> that represents the current control point.</param>
            <param name="initial">A <see cref="T:System.Drawing.PointF"/> that represents the initial point of current figure.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathSegment.Clone">
            <summary>
            Creates a copy of this segment.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.ArcSegment">
             <summary>
             Represents an elliptical arc between two points in a path defined by the <see cref="T:ILOG.Diagrammer.PathData"/> class.
             </summary>
             <remarks> <see cref="T:ILOG.Diagrammer.ArcSegment"/> draws an elliptical arc from the current
             point to the point specified by the <see cref="P:ILOG.Diagrammer.ArcSegment.Point"/> property. 
             The size and orientation of
             the ellipse are defined by two radii (<see cref="P:ILOG.Diagrammer.ArcSegment.Size"/> property)
             and <see cref="P:ILOG.Diagrammer.ArcSegment.XRotation"/> , which indicates
             how the ellipse as a whole is rotated
             relative to the current coordinate system.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.ArcSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.ArcSegment"/> class.
            </summary>
            <remarks>Creates an arc segment with a destination point of (0,0) with an empty size.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.ArcSegment.#ctor(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Size2D,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.ArcSegment"/> class.
            </summary>
            <param name="point">
            A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the destination point 
            of the arc; the start point of the arc is defined as the current point of 
            the <see cref="T:ILOG.Diagrammer.PathData"/> to which the <see cref="T:ILOG.Diagrammer.ArcSegment"/> is added.
            </param>
            <param name="size">
            A <see cref="T:ILOG.Diagrammer.Size2D"/> object that represents the x- and y-radius of the arc. 
            </param>
            <param name="xRotation">Specifies the x-axis rotation, which indicates how the arc is rotated relative to the current coordinate system.</param>
            <param name="largeArc">Set to <see langword="true"/> to create an arc with a sweep of 180 degrees or greater; set to <see langword="false"/> to create an arc with a sweep of less than 180 degrees.</param>
            <param name="sweep">Set to <see langword="true"/> to draw the arc in a positive angle direction; set to <see langword="false"/> to draw the arc in a negative angle direction.</param>
        </member>
        <member name="M:ILOG.Diagrammer.ArcSegment.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.PathSegment.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@)">PathSegment.AddToGraphicsPath</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.ArcSegment.Transform(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.PathSegment.Transform(ILOG.Diagrammer.Transform)">PathSegment.Transform</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.ArcSegment.XRotation">
            <summary>
            Gets or sets the rotation of the arc on the x axis.
            </summary>
            <value>
            Indicates how the arc is rotated relative to the current coordinate system.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.ArcSegment.SweepFlag">
            <summary>
            Gets or sets the sweep flag of the arc segment.
            </summary>
            <value><see langword="true"/> to draw the arc in a positive angle direction; 
            <see langword="false"/> to draw the arc in a negative angle direction.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ArcSegment.LargeArc">
            <summary>
            Indicates whether the arc is drawn with a sweep of 180 degrees or greater.
            </summary>
            <value><see langword="true"/> the arc is drawn with a sweep of 180 degrees or greater; 
            Otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ArcSegment.Size">
            <summary>
            Gets or sets the x- and y-radius of the arc.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Size2D"/> object that represents the x- and y-radius of the arc.</value>
        </member>
        <member name="P:ILOG.Diagrammer.ArcSegment.Point">
            <summary>
            Gets or sets the destination point of the arc.
            </summary>
            <value>
            A <see cref="T:ILOG.Diagrammer.Point2D"/> object that represents the destination point of the arc; the start 
            point of the arc is defined as the current point of the <see cref="T:ILOG.Diagrammer.PathData"/> 
            to which the <see cref="T:ILOG.Diagrammer.ArcSegment"/> is added.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.CloseSegment">
            <summary>
            Represents the segment that closes a figure in a path 
            defined by the <see cref="T:ILOG.Diagrammer.PathData"/> class.
            </summary>
            <remarks>
            <see cref="T:ILOG.Diagrammer.CloseSegment"/> closes the current subpath by drawing a straight line from the current
            point to current subpath initial point.
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.StartSegment"/>
        </member>
        <member name="M:ILOG.Diagrammer.CloseSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.CloseSegment"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CloseSegment.Transform(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.PathSegment.Transform(ILOG.Diagrammer.Transform)">PathSegment.Transform</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.CloseSegment.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.PathSegment.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@)">PathSegment.AddToGraphicsPath</see>.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.LineSegment">
            <summary>
            Represents a line segment in a path defined by the <see cref="T:ILOG.Diagrammer.PathData"/> class.
            </summary>
            <remarks>
            <see cref="T:ILOG.Diagrammer.LineSegment"/> draws a line from the current point to the 
            coordinate specified by the <see cref="P:ILOG.Diagrammer.LineSegment.Point"/> property.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.LineSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.LineSegment"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.LineSegment.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.LineSegment"/> class.
            </summary>
            <param name="x">The x-coordinate of the destination point of the line.</param>
            <param name="y">The y-coordinate of the destination point of the line.</param>
        </member>
        <member name="M:ILOG.Diagrammer.LineSegment.#ctor(ILOG.Diagrammer.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.LineSegment"/> class.
            </summary>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> object that represents the destination point of the line. The
            first point is defined by the current point of the <see cref="T:ILOG.Diagrammer.PathData"/> to 
            which the <see cref="T:ILOG.Diagrammer.LineSegment"/> is added.</param>
        </member>
        <member name="M:ILOG.Diagrammer.LineSegment.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.PathSegment.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@)">PathSegment.AddToGraphicsPath</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.LineSegment.Transform(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.PathSegment.Transform(ILOG.Diagrammer.Transform)">PathSegment.Transform</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.LineSegment.Point">
            <summary>
            Gets or sets the destination point of the line.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> object that represents the
            destination point of the line. The first point is defined by the 
            current point of the <see cref="T:ILOG.Diagrammer.PathData"/> to 
            which the <see cref="T:ILOG.Diagrammer.LineSegment"/> is added.</value>
        </member>
        <member name="T:ILOG.Diagrammer.StartSegment">
            <summary>
            Represents the starting point of a figure in a path defined by the <see cref="T:ILOG.Diagrammer.PathData"/> class.
            </summary>
            <remarks><see cref="T:ILOG.Diagrammer.StartSegment"/> starts a new sub-path at the given 
            point coordinate specified by the <see cref="P:ILOG.Diagrammer.StartSegment.Point"/> property.</remarks>
            <seealso cref="T:ILOG.Diagrammer.CloseSegment"/>
        </member>
        <member name="M:ILOG.Diagrammer.StartSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.StartSegment"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.StartSegment.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.StartSegment"/> class.
            </summary>
            <param name="x">The x-coordinate of the starting point.</param>
            <param name="y">The y-coordinate of the starting point.</param>
        </member>
        <member name="M:ILOG.Diagrammer.StartSegment.#ctor(ILOG.Diagrammer.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.StartSegment"/> class.
            </summary>
            <param name="point">A <see cref="T:ILOG.Diagrammer.Point2D"/> object the represent the location of the segment.</param>
        </member>
        <member name="M:ILOG.Diagrammer.StartSegment.Transform(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.PathSegment.Transform(ILOG.Diagrammer.Transform)">PathSegment.Transform</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.StartSegment.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.PathSegment.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@)">PathSegment.AddToGraphicsPath</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.StartSegment.Point">
            <summary>
            Gets or sets the location of the segment.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> object that represents the location of the segment.</value>
        </member>
        <member name="T:ILOG.Diagrammer.BezierSegment">
             <summary>
             Represents a cubic bezier segment in a path defined by the <see cref="T:ILOG.Diagrammer.PathData"/> class.
             </summary>
             <remarks>
             <see cref="T:ILOG.Diagrammer.BezierSegment"/> draws a cubic Bézier curve from the current point to the point
             <see cref="P:ILOG.Diagrammer.BezierSegment.Point3"/> using <see cref="P:ILOG.Diagrammer.BezierSegment.Point1"/> as the control point at the
             beginning of the curve and <see cref="P:ILOG.Diagrammer.BezierSegment.Point2"/> as the control
             point at the end of the curve.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.BezierSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.BezierSegment"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.BezierSegment.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.BezierSegment"/> class.
            </summary>
            <param name="x1">The x-coordinate of the first control point.</param>
            <param name="y1">The y-coordinate of the first control point.</param>
            <param name="x2">The x-coordinate of the second control point.</param>
            <param name="y2">The y-coordinate of the second control point.</param>
            <param name="x3">The x-coordinate of the third control point.</param>
            <param name="y3">The y-coordinate of the third control point.</param>
        </member>
        <member name="M:ILOG.Diagrammer.BezierSegment.#ctor(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.BezierSegment"/> class.
            </summary>
            <param name="point1">A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the first control point.</param>
            <param name="point2">A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the second control point.</param>
            <param name="point3">A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the third control point.</param>
        </member>
        <member name="M:ILOG.Diagrammer.BezierSegment.Transform(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.PathSegment.Transform(ILOG.Diagrammer.Transform)">PathSegment.Transform</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.BezierSegment.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.PathSegment.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@)">PathSegment.AddToGraphicsPath</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.BezierSegment.Point1">
            <summary>
            Gets or sets the first control point of the curve.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the first control point of the curve.</value>
        </member>
        <member name="P:ILOG.Diagrammer.BezierSegment.Point2">
            <summary>
            Gets or sets the second control point of the curve.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the second control point of the curve.</value>
        </member>
        <member name="P:ILOG.Diagrammer.BezierSegment.Point3">
            <summary>
            Gets or sets the third control point of the curve.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> that represents the third control point of the curve.</value>
        </member>
        <member name="T:ILOG.Diagrammer.QuadraticBezierSegment">
            <summary>
            Represents a quadratic bezier segment in a path defined by the <see cref="T:ILOG.Diagrammer.PathData"/> class.
            </summary>
            <remarks>
            <see cref="T:ILOG.Diagrammer.QuadraticBezierSegment"/> draws a quadratic Bézier curve from
             the current point to the point <see cref="P:ILOG.Diagrammer.QuadraticBezierSegment.Point2"/> using <see cref="P:ILOG.Diagrammer.QuadraticBezierSegment.Point1"/>
             as the control point.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.QuadraticBezierSegment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.QuadraticBezierSegment"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.QuadraticBezierSegment.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.QuadraticBezierSegment"/> class.
            </summary>
            <param name="x1">The x-coordinate of the control point of the quadratic bezier segment.</param>
            <param name="y1">The y-coordinate of the control point of the quadratic bezier segment.</param>
            <param name="x2">The x-coordinate of the end point of the quadratic bezier segment.</param>
            <param name="y2">The y-coordinate of the end point of the quadratic bezier segment.</param>
        </member>
        <member name="M:ILOG.Diagrammer.QuadraticBezierSegment.#ctor(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.QuadraticBezierSegment"/> class.
            </summary>
            <param name="point1">A <see cref="T:ILOG.Diagrammer.Point2D"/> object that represents the control point of the quadratic bezier segment.</param>
            <param name="point2">A <see cref="T:ILOG.Diagrammer.Point2D"/> object that represents the end point of the quadratic bezier segment.</param>
        </member>
        <member name="M:ILOG.Diagrammer.QuadraticBezierSegment.Transform(ILOG.Diagrammer.Transform)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.PathSegment.Transform(ILOG.Diagrammer.Transform)">PathSegment.Transform</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.QuadraticBezierSegment.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            This member overrides <see cref="M:ILOG.Diagrammer.PathSegment.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.PointF@,System.Drawing.PointF@,System.Drawing.PointF@)">PathSegment.AddToGraphicsPath</see>.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.QuadraticBezierSegment.Point1">
            <summary>
            Gets or sets the control point of the quadratic bezier segment.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> object that represents the control point of the quadratic bezier segment.</value>
        </member>
        <member name="P:ILOG.Diagrammer.QuadraticBezierSegment.Point2">
            <summary>
            Gets or sets the end point of the quadratic bezier segment.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Point2D"/> object that represents the end point of the quadratic bezier segment.</value>
        </member>
        <member name="M:ILOG.Diagrammer.PathSegmentCollection.Set(System.Collections.Generic.IEnumerable{ILOG.Diagrammer.PathSegment})">
            <summary>
            Changes all the segments of the collection with new segments.
            </summary>
            <param name="segments">A collection of <see cref="T:ILOG.Diagrammer.PathSegment"/>.</param>
        </member>
        <member name="T:ILOG.Diagrammer.PathData">
            <summary>
            Represents a path defined by a collection of <see cref="T:ILOG.Diagrammer.PathSegment"/>.
            </summary>
            <remarks>The collection of <see cref="T:ILOG.Diagrammer.PathSegment"/> can be accessed through the <see cref="P:ILOG.Diagrammer.PathData.Segments"/>
            property. An affine transformation applied to the segments can also be set using the <see cref="P:ILOG.Diagrammer.PathData.Transform"/>
            property.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.PathData"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Initializes a new instance of the <see cref="T:ILOG.Diagrammer.PathData"/> class.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.Clone">
            <summary>
            Creates a copy of this <see cref="T:ILOG.Diagrammer.PathData"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.GetGeometry">
            <summary>
            Gets the geometry of the path data as a string in the SVG format.
            </summary>
            <value>A <see cref="T:System.String"/> that describes this path data in the SVG format.</value>
            <seealso cref="M:ILOG.Diagrammer.PathData.SetGeometry(System.String)"/>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.SetGeometry(System.String)">
            <summary>
            Sets the geometry of the path data from a string in the SVG format.
            </summary>
            <param name="geometry">A string the represents the path geometry in the SVG format.</param>
            <seealso cref="M:ILOG.Diagrammer.PathData.GetGeometry"/>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.SetGeometry(ILOG.Diagrammer.PathSegment[])">
            <summary>
            Sets the geometry of the path data from an array of <see cref="T:ILOG.Diagrammer.PathSegment"/>.
            </summary>
            <param name="segments">An array of <see cref="T:ILOG.Diagrammer.PathSegment"/>.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.SetGeometry(ILOG.Diagrammer.PathData)">
            <summary>
            Sets the geometry of the path data from a <see cref="T:ILOG.Diagrammer.PathData"/>.
            </summary>
            <param name="data">A <see cref="T:ILOG.Diagrammer.PathData"/> instance.</param>
            <remarks>The segments of <paramref name="data"/> are copied before being inserted
            into this object.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.Add(ILOG.Diagrammer.PathSegment)">
            <summary>
            Used by introspection ?
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddRange(ILOG.Diagrammer.PathSegment[])">
            <summary>
            Used by introspection ?
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddPath(ILOG.Diagrammer.PathData)">
            <summary>
            Adds a <see cref="T:ILOG.Diagrammer.PathData"/> to the object.
            </summary>
            <param name="data">A <see cref="T:ILOG.Diagrammer.PathData"/> to add.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Adds the specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> to this <see cref="T:ILOG.Diagrammer.PathData"/> object.
            </summary>
            <param name="path">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> reference.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddRectangle(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Adds a rectangle to this path data.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddEllipse(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Adds an ellipse to this path data.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddArc(ILOG.Diagrammer.Rectangle2D,System.Single,System.Single)">
            <summary>
            Adds an arc to this path data.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</param>
            <param name="startAngle">The start angle of the arc.</param>
            <param name="sweepAngle">The sweep angle of the arc.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddPie(ILOG.Diagrammer.Rectangle2D,System.Single,System.Single)">
            <summary>
            Adds a pie to this path data.
            </summary>
            <param name="rect">A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</param>
            <param name="startAngle">The start angle of the arc.</param>
            <param name="sweepAngle">The sweep angle of the arc.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddBezier(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            Adds a bezier curve to this path data.
            </summary>
            <param name="p1">The first point of the bezier curve.</param>
            <param name="p2">The second point of the bezier curve.</param>
            <param name="p3">The third point of the bezier curve.</param>
            <param name="p4">The last point of the bezier curve.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddClosedCurve(ILOG.Diagrammer.Point2D[],System.Single)">
            <summary>
            Adds a closed cardinal curve to this path data.
            </summary>
            <param name="points">An array of <see cref="T:ILOG.Diagrammer.Point2D"/></param>
            <param name="tension">The tension of the curve.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddCurve(ILOG.Diagrammer.Point2D[],System.Single)">
            <summary>
            Adds a cardinal curve to this path data.
            </summary>
            <param name="points">An array of <see cref="T:ILOG.Diagrammer.Point2D"/></param>
            <param name="tension">The tension of the curve.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddLine(ILOG.Diagrammer.Point2D,ILOG.Diagrammer.Point2D)">
            <summary>
            Adds a line to this path data.
            </summary>
            <param name="p1">The first point of the line.</param>
            <param name="p2">The second point of the line.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddLines(ILOG.Diagrammer.Point2D[])">
            <summary>
            Adds connected lines to this path data.
            </summary>
            <param name="points">An array of <see cref="T:ILOG.Diagrammer.Point2D"/></param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddPolygon(ILOG.Diagrammer.Point2D[])">
            <summary>
            Adds a polygon to this path data.
            </summary>
            <param name="points">An array of <see cref="T:ILOG.Diagrammer.Point2D"/></param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,ILOG.Diagrammer.Point2D,System.Drawing.StringFormat)">
            <summary>
            Adds a string to this path data.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to add.</param>
            <param name="family">The font family.</param>
            <param name="style">The font style.</param>
            <param name="emSize">The font size.</param>
            <param name="origin">The location of the string.</param>
            <param name="format">The string format.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,ILOG.Diagrammer.Rectangle2D,System.Drawing.StringFormat)">
            <summary>
            Adds a string to this path data.
            </summary>
            <param name="s">The <see cref="T:System.String"/> to add.</param>
            <param name="family">The font family.</param>
            <param name="style">The font style.</param>
            <param name="emSize">The font size.</param>
            <param name="layoutRect">The rectangle where the string will be layouted.</param>
            <param name="format">The string format.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddSegment(ILOG.Diagrammer.PathSegment)">
            <summary>
            Adds a path segment to this path data.
            </summary>
            <param name="segment">A <see cref="T:ILOG.Diagrammer.PathSegment"/> instance.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddSegments(ILOG.Diagrammer.PathSegment[])">
            <summary>
            Adds path segments to this path data.
            </summary>
            <param name="segments">An array of <see cref="T:ILOG.Diagrammer.PathSegment"/>.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.ToString">
            <summary>
            This member overrides <see cref="M:System.Object.ToString">Object.ToString</see>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.GetPathPosition">
            <summary>
            Gets a <see cref="T:ILOG.Diagrammer.PathData.PathPosition"/> object to gets information on the path points.
            </summary>
            <returns>A <see cref="T:ILOG.Diagrammer.PathData.PathPosition"/> instance.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.CloseFigures">
            <summary>
            Closes all the figures in the path data.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.PathData.OpenFigures"/>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.OpenFigures">
            <summary>
            Opens all the figures in the path data.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.PathData.CloseFigures"/>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Adds the shape defined by this <see cref="T:ILOG.Diagrammer.PathData"/> to the specified
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </summary>
            <param name="path">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> to add the shape to.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.AddToGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Adds the shape defined by this <see cref="T:ILOG.Diagrammer.PathData"/> to the specified
            <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/>.
            </summary>
            <param name="path">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath"/> to add the shape to.</param>
            <param name="transform">Indicates whether to transform the path or not.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.ApplyTransform(ILOG.Diagrammer.Transform)">
            <summary>
            Transforms the path data.
            </summary>
            <param name="t">A <see cref="T:ILOG.Diagrammer.Transform"/> object to transform the path data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.OnChanged(System.EventArgs)">
            <summary>
            Invoked when the data has changed in some way.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.OnChanging(System.EventArgs)">
            <summary>
            Invoked when the data is changing in some way.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.InvalidateBounds">
            <summary>
            Invalidates the cache of the bounds.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.GetTransformedBounds">
            <summary>
            Gets the bounds of the path taking into account the local affine transformation.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathData.GetBounds(ILOG.Diagrammer.Transform)">
            <summary>
            Gets the bounds of the path using the specified affine transformation.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Rectangle2D"/> structure.</value>
        </member>
        <member name="E:ILOG.Diagrammer.PathData.Changed">
            <summary>
            Event fired when the path changes in some way.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.PathData.Changing">
            <summary>
            Event fired when the path changes in some way.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.PathData.Transform">
            <summary>
            Gets or sets the affine transformation for the path data.
            </summary>
            <value>A <see cref="T:ILOG.Diagrammer.Transform"/> structure.</value>
            <remarks>Setting this property doesn't modify the segments of this <see cref="T:ILOG.Diagrammer.PathData"/>. To apply
            a transformation to the segments, use the <see cref="M:ILOG.Diagrammer.PathData.ApplyTransform(ILOG.Diagrammer.Transform)"/> method.</remarks>
        </member>
        <member name="P:ILOG.Diagrammer.PathData.Segments">
            <summary>
            Gets the collection of segments that compose this path data.
            </summary>
            <value>A collection of <see cref="T:ILOG.Diagrammer.PathSegment"/>.</value>
        </member>
        <member name="T:ILOG.Diagrammer.PathUtilities">
            <summary>
            This class defines utility methods for path.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.PathUtilities.AddQuadraticBezier(System.Drawing.Drawing2D.GraphicsPath,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
             Adds a quadratic bezier curve to the given GraphicsPath.
            </summary>
            <param name="gp">The GraphicsPath to use.</param>
            <param name="x0">The x coordinate of the first point.</param>
            <param name="y0">The y coordinate of the first point.</param>
            <param name="x1">The x coordinate of the second point.</param>
            <param name="y1">The y coordinate of the second point.</param>
            <param name="x2">The x coordinate of the third point.</param>
            <param name="y2">The y coordinate of the third point.</param>
        </member>
        <member name="M:ILOG.Diagrammer.PathUtilities.AddArc(System.Drawing.Drawing2D.GraphicsPath,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Double,System.Double)">
            <summary>
               Adds an arc to the given GraphicsPath.
            </summary>
            <param name="path">The GraphicsPath to use.</param>
            <param name="x0">The x coordinate of the first point.</param>
            <param name="y0">The y coordinate of the first point.</param>
            <param name="rx">The x-axis radius.</param>
            <param name="ry">The y-axis radius.</param>
            <param name="rotationAngleDeg">The rotation angle.</param>
            <param name="largeArcFlag">Tells which arc to use.</param>
            <param name="sweepFlag">Indicates the direction.</param>
            <param name="x">The x coordinate of the end point.</param>
            <param name="y">The y coordinate of the end point.</param>
        </member>
        <member name="T:ILOG.Diagrammer.PathSegmentCollectionEditor">
            <summary>
            Represents an editor for the <see cref="T:ILOG.Diagrammer.PathData"/> class.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.SegmentTypeConverter">
            <summary>
            Represents a type converter for the <see cref="T:ILOG.Diagrammer.PathSegment"/> class.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.ArcSegmentTypeConverter">
            <summary>
            Represents a type converter for the <see cref="T:ILOG.Diagrammer.ArcSegment"/> class.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.LineSegmentTypeConverter">
            <summary>
            Represents a type converter for the <see cref="T:ILOG.Diagrammer.LineSegment"/> class.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.StartSegmentTypeConverter">
            <summary>
            Represents a type converter for the <see cref="T:ILOG.Diagrammer.StartSegment"/> class.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.BezierSegmentTypeConverter">
            <summary>
            Represents a type converter for the <see cref="T:ILOG.Diagrammer.BezierSegment"/> class.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.QuadraticBezierSegmentTypeConverter">
            <summary>
            Represents a type converter for the <see cref="T:ILOG.Diagrammer.QuadraticBezierSegment"/> class.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.CloseSegmentTypeConverter">
            <summary>
            Represents a type converter for the <see cref="T:ILOG.Diagrammer.CloseSegment"/> class.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Serialization.XmlUtilities">
            <summary>
            A class that provides convenient methods for the XML serialization process.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlUtilities.SerializeNullInstance(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Xml.XmlDocument,ILOG.Diagrammer.Serialization.XmlSerializerContext,System.Xml.XmlElement)">
            <summary>
            Serializes a <see langword="null"/> instance.
            </summary>
            <remarks>
            Serialize <see langword="null"/> instance as an XML element. Depending on
            the context, a null instance is serialized:
            <ul>
            <li>as <strong><parent><property><null /></property></parent></strong> when a
            property is serialized</li>
            <li>as <strong><parent><null/></parent></strong></li> otherwise.
            </ul>
            </remarks>
            <param name="manager">The current serialization manager.</param>
            <param name="document">The XML document.</param>
            <param name="context">The current serialization context.</param>
            <param name="parent">The parent element in the DOM to which the 
            null instance element is added.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlUtilities.SerializeNullProperty(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Xml.XmlDocument,System.ComponentModel.PropertyDescriptor,System.Xml.XmlElement)">
            <summary>
            Serializes a <see langword="null"/> property value.
            </summary>
            <param name="manager">The current serialization manager.</param>
            <param name="document">The XML document.</param>
            <param name="pdesc">The property descriptor for the property to serialize.</param>
            <param name="parent">The parent element in the DOM to which the 
            null instance element is added.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlUtilities.SerializeNullValue(ILOG.Diagrammer.Serialization.XmlSerializationManager,System.Xml.XmlDocument,System.Xml.XmlElement)">
            <summary>
            Serializes a <see langword="null"/> value.
            </summary>
            <param name="manager">The current serialization manager.</param>
            <param name="document">The XML document.</param>
            <param name="parent">The parent element in the DOM to which the 
            null instance element is added.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlUtilities.GetFirstChildElement(System.Xml.XmlNode)">
            <summary>
            Gets the first child node with a <see cref="F:System.Xml.XmlNodeType.Element"/> type.
            </summary>
            <param name="parent">The parent node.</param>
            <returns>The first child node with a <see cref="F:System.Xml.XmlNodeType.Element"/> type.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.Serialization.XmlUtilities.FixBase64ForImage(System.String)">
            <summary>
            Clean the given base64 encoded string from any invalid characters.
            </summary>
            <param name="image">A base64 encoded string.</param>
            <returns>A base64 encoded string valid for image conversion.</returns>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.LightSource">
            <summary>
            Defines an <see langword="abstract"/> base class for all
            light sources used in lighting filter effects.
            </summary>
            <remarks>
            The class is the <see langword="abstract"/> base class for all
            light sources used in lighting filter effects <see cref="T:ILOG.Diagrammer.Filters.FeSpecularLighting"/> and
            <see cref="T:ILOG.Diagrammer.Filters.FeDiffuseLighting"/>. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.LightSource._lightColor">
            <summary>
            Color of the light.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.LightSource._constant">
            <summary>
            Indicates whether the light source is constant.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.LightSource.#ctor">
            <summary>
            Creates a light source with a white light color.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.LightSource.#ctor(System.Drawing.Color)">
            <summary>
            Creates a light source with the specified light color.
            </summary>
            <param name="lightColor">The color of the light.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.LightSource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeLighting"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.LightSource.Clone">
            <summary>
            Creates a copy of the object.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.LightSource.LightColor">
            <summary>
            Gets or sets the light color.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.LightSource.IsConstant">
            <summary>
            Specifies whether the light is a constant light.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Filters.LightSource.Changed">
            <summary>
            Event fired when the light has changed.
            </summary>
        </member>
        <member name="E:ILOG.Diagrammer.Filters.LightSource.Changing">
            <summary>
            Event fired when the light is about to change.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.DistantLight">
            <summary>
            Defines a distant light source defined by an azimuth and an elevation.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.DistantLight.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.DistantLight"/> with the elevation and azimuth at zero.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.DistantLight.#ctor(System.Double,System.Double,System.Drawing.Color)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.DistantLight"/>.
            </summary>
            <param name="azimuth">The azimuth value.</param>
            <param name="elevation">The elevation value.</param>
            <param name="lightColor">A <see cref="T:System.Drawing.Color"/> that represents the color
            of the light.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.DistantLight.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.DistantLight"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.DistantLight.Clone">
            <summary>
            Creates a copy of the object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.DistantLight.ToString">
            <summary>
            Returns a short description of the object.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.DistantLight.Azimuth">
            <summary>
            Gets or sets the direction angle for the light source on the XY plane, in degrees.
            </summary>
            <value>
            The direction angle for the light source on the XY plane, in degrees. The
            default value is 0.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.DistantLight.Elevation">
            <summary>
            Gets or sets the direction angle for the light source on the YZ plane, in degrees.
            </summary>
            <value>
            The direction angle for the light source on the YZ plane, in degrees. The
            default value is 0.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.PointLight">
            <summary>
            Defines a point light source defined by a position in space.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.PointLight.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.PointLight"/> object at the position (0,0,0) and with the color white.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.PointLight.#ctor(System.Double,System.Double,System.Double,System.Drawing.Color)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.PointLight"/> object from its position in space and its color.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="z">The z coordinate.</param>
            <param name="lightColor">The color of the light.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.PointLight.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.PointLight"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.PointLight.ToString">
            <summary>
            Returns a short description of the object.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.PointLight.X">
            <summary>
            Gets or sets the x coordinate of the point light.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.PointLight.Y">
            <summary>
            Gets or sets the y coordinate of the point light.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.PointLight.Z">
            <summary>
            Gets or sets the z coordinate of the point light.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.SpotLight">
            <summary>
            Defines a spot light source defined by a position and a point in space where the spot is pointing.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.SpotLight.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.SpotLight"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.SpotLight.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Drawing.Color)">
            <summary>
             Initializes a new <see cref="T:ILOG.Diagrammer.Filters.SpotLight"/> object.
            </summary>
            <param name="x">The X location of the light.</param>
            <param name="y">The Y location of the light.</param>
            <param name="z">The Z location of the light.</param>
            <param name="tox">The X location of the point at which
            the light source is pointing</param>
            <param name="toy">The Y location of the point at which
            the light source is pointing</param>
            <param name="toz">The Z location of the point at which
            the light source is pointing</param>
            <param name="specularExponent">The exponent value controlling the focus for the light source</param>
            <param name="limitingConeAngle">A limiting cone which restricts the region where the light is projected</param>
            <param name="lightColor">The color of the light.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.SpotLight.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.SpotLight"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.SpotLight.ToString">
            <summary>
            Returns a short description of the object.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.SpotLight.ToX">
            <summary>
            Gets or sets the X location of the point at which
            the light source is pointing.
            </summary>
            <value>
            The X location of the point at which
            the light source is pointing. The default value is 0.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.SpotLight.ToY">
            <summary>
            Gets or sets the Y location of the point at which
            the light source is pointing.
            </summary>
            <value>
            The Y location of the point at which
            the light source is pointing. The default value is 0.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.SpotLight.ToZ">
            <summary>
            Gets or sets the Z location of the point at which
            the light source is pointing.
            </summary>
            <value>
            The Z location of the point at which
            the light source is pointing. The default value is 0.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.SpotLight.SpecularExponent">
            <summary>
            Gets or sets the exponent value controlling the focus for the light source.
            </summary>
            <value>
            Represents the exponent value controlling the focus for the light source. The
            default value is 1.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.SpotLight.LimitingConeAngle">
            <summary>
            Gets ot sets a limiting cone which restricts the region where the light is projected.
            </summary>
            <value>
            A limiting cone which restricts the region where the light is projected. No light is projected outside the cone.
            The value represents the angle between the spot light axis (i.e. the axis between the light source and the
            point to which it is pointing at) and the spot light cone.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeTile">
            <summary>
            This filter effect fills a target rectangle with a repeated, 
            tiled pattern of an input image.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeTile.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeTile"/> object.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeTile.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeTile"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeTile.ToString">
            <summary>
            Returns a short description of this filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeTile.Inputs">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.FilterEffect.Inputs">FilterEffect.Inputs</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeTile.In">
            <summary>
            Gets or sets the source of this filter effect.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeOffset">
            <summary>
            Defines a filter effect that offsets the input image
            by a specified vector.
            </summary>
            <remarks>
            This filter effect offsets the input image relative to 
            its current position in the image space by the specified vector.
            This is important for effects like drop shadows.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeOffset.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeOffset"/> filter effect with offsets to zero.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeOffset.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeOffset"/> filter effect with the specified offset vector.
            </summary>
            <param name="dx">The amount to offset the input graphic along the x-axis.</param>
            <param name="dy">The amount to offset the input graphic along the y-axis.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeOffset.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeOffset"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeOffset.ToString">
            <summary>
            Returns a short description of this filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeOffset.Dx">
            <summary>
            Gets and sets the amount to offset the input graphic along the x-axis.
            </summary>
            <value>
            The amount to offset the input graphic along the x-axis. The default value is 0.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeOffset.Dy">
            <summary>
            Gets and sets the amount to offset the input graphic along the y-axis.
            </summary>
            <value>
            The amount to offset the input graphic along the y-axis. The default value is 0.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeOffset.Inputs">
            <summary>
            This member overrides <see cref="P:ILOG.Diagrammer.FilterEffect.Inputs">FilterEffect.Inputs</see>
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeOffset.In">
            <summary>
            Gets or sets the source of this filter effect.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.CompositionOperator">
            <summary>
            Defines the various types of composition 
            operations for the <seealso cref="T:ILOG.Diagrammer.Filters.FeComposite"/>
            filter effect.
            </summary>
            <remarks>Use the value of this enumeration to define the composition operator in the
            <see cref="P:ILOG.Diagrammer.Filters.FeComposite.Operator"/> property of 
            the <see cref="T:ILOG.Diagrammer.Filters.FeComposite"/> class.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.CompositionOperator.Over">
            <summary>
            Over operator.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.CompositionOperator.In">
            <summary>
            In operator.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.CompositionOperator.Out">
            <summary>
            Out operator.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.CompositionOperator.Arithmetic">
            <summary>
            Arithmetic operator.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.CompositionOperator.Atop">
            <summary>
            Atop operator.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.CompositionOperator.Xor">
            <summary>
            Xor operator.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.FeComposite">
            <summary>
            Defines a filter effect that combines two input images
            using one of the Porter-Duff
            compositing operations: over, in, atop, out, xor. 
            </summary>
            <remarks>
            This filter performs the combination of the two input images 
            pixel-wise in image space using one of the Porter-Duff [PORTERDUFF] 
            compositing operations: over, in, atop, out, xor. 
            Additionally, 
            a component-wise arithmetic operation (with the result clamped between [0..1]) can be applied.
            The arithmetic operation is useful for combining 
            the output from the 'feDiffuseLighting' and 'feSpecularLighting' 
            filters with texture data. It is also
            useful for implementing dissolve. If the arithmetic operation is chosen, 
            each result pixel is computed by means of the following formula:
            result = k1*i1*i2 + k2*i1 + k3*i2 + k4
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeComposite.#ctor">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeComposite"/> object with the 
            operator set to <see cref="F:ILOG.Diagrammer.Filters.CompositionOperator.Over"/>.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeComposite.#ctor(ILOG.Diagrammer.Filters.CompositionOperator)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeComposite"/> object with the specified composition operator.
            </summary>
            <param name="op">The composition operator.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeComposite.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:ILOG.Diagrammer.Filters.FeComposite"/> from serialization information.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.FeComposite.ToString">
            <summary>
            Returns a short description of this filter effect.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeComposite.Operator">
            <summary>
            Gets and sets the composition operator.
            </summary>
            <value>One of the <see cref="T:ILOG.Diagrammer.Filters.CompositionOperator"/> values. The default value is 
            <see cref="F:ILOG.Diagrammer.Filters.CompositionOperator.Over"/>.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeComposite.K1">
            <summary>
            Gets and sets the k1 parameter for the arithmetic operation.
            </summary>
            <value>The k1 parameter for the arithmetic operation. The default value is 0.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeComposite.K2">
            <summary>
            Gets and sets the k2 parameter for the arithmetic operation.
            </summary>
            <value>The k2 parameter for the arithmetic operation. The default value is 0.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeComposite.K3">
            <summary>
            Gets and sets the k3 parameter for the arithmetic operation.
            </summary>
            <value>The k3 parameter for the arithmetic operation. The default value is 0.</value>
        </member>
        <member name="P:ILOG.Diagrammer.Filters.FeComposite.K4">
            <summary>
            Gets and sets the k4 parameter for the arithmetic operation.
            </summary>
            <value>The k4 parameter for the arithmetic operation. The default value is 0.</value>
        </member>
        <member name="T:ILOG.Diagrammer.Filters.ColorSpaceUtil">
            <summary>
            Regroups utility methods for color spaces.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.ColorSpaceUtil.linearToSRGBLut">
            <summary>
            Linear to SRGB luminance table.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.Filters.ColorSpaceUtil.sRGBToLinearLut">
            <summary>
            SRGB to linear luminance table.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.ColorSpaceUtil.LinearRGBTosRGB(System.Drawing.Bitmap)">
            <summary>
            Converts the specified bitmap from the linear RGB color
            space to the SRGB color space.
            </summary>
            <param name="bitmap">The bitmap to convert.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.ColorSpaceUtil.SRGBToLinearRGB(System.Drawing.Bitmap)">
            <summary>
            Converts the specified bitmap from the SRGB color
            space to the linear RGB color space.
            </summary>
            <param name="bitmap">The bitmap to transform.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.ColorSpaceUtil.SRGBToLinearRGB(System.Drawing.Color)">
            <summary>
            Converts the specified color from the SRGB color
            space to the linear RGB color space.
            </summary>
            <param name="color">The color to transform.</param>
        </member>
        <member name="M:ILOG.Diagrammer.Filters.ColorSpaceUtil.LinearRGBTosRGB(System.Drawing.Color)">
            <summary>
            Converts the specified color from the linear RGB color
            space to the SRGB color space.
            </summary>
            <param name="color">The color to transform.</param>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter">
            <summary>
            An adapter for laying out a completely disconnected subgraph of an 
            <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/>.
            </summary>
            <remarks>
            The adapter only stores the list of nodes and links of the
            orginal graph model. The other topological information comes from 
            the original graph model. It is used for a connected component
            of a disconnected subgraph.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.#ctor(ILOG.Diagrammer.GraphLayout.IGraphModel)">
            <summary>
            Creates a new connected component graph model.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.AddNode(System.Object)">
            <summary>
            Adds a new node to the model.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.AddLink(System.Object)">
            <summary>
            Adds a new link to the model.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.Dispose">
            <summary>
            Disposes of this <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/> and releases any
            resources that it is using.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.GetLinksFrom(System.Object)">
            <summary>
            Returns all the links that have <strong>node</strong>
            as their origin.
            </summary>
            <param name="node">The origin node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.GetLinksTo(System.Object)">
            <summary>
            Returns all the links that have <strong>node</strong>
            as their destination.
            </summary>
            <param name="node">The origin node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.GetFrom(System.Object)">
            <summary>
            Returns the origin node of a link.
            </summary>
            <param name="link">The link.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.GetTo(System.Object)">
            <summary>
            Returns the destination node of a link.
            </summary>
            <param name="link">The link.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.IsNode(System.Object)">
            <summary>
            Returns <see langword="true"/> if an object is a valid node, and
            <see langword="false"/> otherwise.
            </summary>
            <param name="obj">The object to test.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.IsLink(System.Object)">
            <summary>
            Returns <see langword="true"/> if the object is a valid normal link,        /// and <see langword="false"/> otherwise.
            </summary>
            <param name="obj">The object to test.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the value of a property for a node or a link.
            </summary>
            <remarks>
            If <strong>val</strong> is <see langword="null"/>, the property is
            removed.
            Otherwise, the property value is set to <strong>val</strong>.
            </remarks>
            <param name="nodeOrLink">The node or link for which the property
            is to be set.
            </param>
            <param name="key">The key string for the property.
            </param>
            <param name="val">The new value of the property.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.GetProperty(System.Object,System.String)">
            <summary>
            Returns the value of a property.
            </summary>
            <remarks>
            The method returns <see langword="null"/> if the property does
            not exist.
            </remarks>
            <param name="nodeOrLink">The node or link for which the property
            is to be retrieved.
            </param>
            <param name="key">The key string for the property.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.SetProperty(System.String,System.Object)">
            <summary>
            Sets the value of a property for the graph model.
            </summary>
            <remarks>
            If <strong>val</strong> is <see langword="null"/>, the property is
            removed.
            Otherwise, the property value is set to <strong>val</strong>.
            </remarks>
            <param name="key">The key string for the property.
            </param>
            <param name="val">The new value of the property.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.GetProperty(System.String)">
            <summary>
            Returns the value of a property of the graph model.
            </summary>
            <remarks>
            The method returns <see langword="null"/> if the property does
            not exist.
            </remarks>
            <param name="key">The key string for the property.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.MoveNode(System.Object,System.Single,System.Single)">
            <summary>
            Changes the position of the specified node.
            Not needed for link routing.
            </summary>
            <param name="node">The node.
            </param>
            <param name="x">The new <strong>x</strong> position of the node.
            </param>
            <param name="y">The new <strong>y</strong> position of the node.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.BoundingBox(System.Object)">
            <summary>
            Returns the bounding rectangle of a node or a link.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.GetLinkPoints(System.Object)">
            <summary>
            Returns the points that define a link.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)">
             <summary>
             Reshapes a link.
             </summary>
             <remarks>
             The method must work for normal links and intergraph links.
             <p>
             The link style represents the style of the shape of the
             link. The details of the shape of the link are given by
             the further arguments of the method.
             If the new shape of the link must be a straight-line link without
             any intermediate points, call the method with an empty array      
             for the <strong>points</strong> argument, or with the value 
             <strong>0</strong> for the <strong>length</strong> argument.
             In this case, the values of the arguments <strong>startIndex</strong>
             and <strong>length</strong> are ignored.
             </p><p>
             The mode parameters determine how the <paramref name="fromPoint"/>
             and <paramref name="toPoint"/> should be used:
             <ul>
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Ignore"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout does not
             specify how the corresponding origin or destination point of 
             the link should be determined.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Move"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains a meaningful value. The layout wants to
             move the corresponding origin or destination point of the link
             to the specified point.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Fix"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout wants to
             keep the previous corresponding origin or destination point of
             the link fixed, relative to the node position.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Clip"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains no meaningful value. The layout wants to
             clip the corresponding origin or destination point of
             the link against the border of the node.</li>
             
             <li><see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.MoveAndClip"/>
             The <paramref name="fromPoint"/> or <paramref name="toPoint"/> 
             parameter contains a meaningful value. The layout wants to
             clip the corresponding origin or destination point of
             the link against the border of the node, but the link should
             go though the specified point.</li>
            
             </ul>
             </p>
             </remarks>
             <param name="link">The link to be reshaped.
             </param>
             <param name="style">The style of the shape of the link.
             </param>
             <param name="fromPoint">The connection point of the link on the
             origin node.
             </param>
             <param name="fromPointMode">The mode that indicates how the
             <paramref name="fromPoint"/> should be used.
             </param>
             <param name="points">The array of intermediate points. Ignored
             if <strong>length</strong> is <strong>0</strong>."/&gt;
             </param>
             <param name="startIndex">The starting position in the array of
             points.
             </param>
             <param name="length">The number of intermediate points.
             </param>
             <param name="toPoint">The connection point of the link on the
             destination node.
             </param>
             <param name="toPointMode">The mode that indicates how the
             <paramref name="toPoint"/> should be used.
             </param>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.IsLink(System.Object)">
             </seealso>
             <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)">
             </seealso>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.HasMoveableConnectionPoint(System.Object,System.Boolean)">
            <summary>
            Returns whether the connection point of a link can be moved.
            </summary>
            <param name="link">The link.
            </param>
            <param name="origin">Set to <see langword="true"/> if the connection
            point is on the origin and <see langword="false"/> otherwise.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.HasPinnedConnectionPoint(System.Object,System.Boolean)">
            <summary>
            Returns whether the connection point of a link is pinned.
            </summary>
            <param name="link">The link.
            </param>
            <param name="origin">Set to <see langword="true"/> if the connection
            point is on the origin and <see langword="false"/> otherwise.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.GetLinkWidth(System.Object)">
            <summary>
            Returns the width of a link.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.Nodes">
            <summary> Gets the nodes.</summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.Internal.ConnectedComponentAdapter.Links">
            <summary>
            Gets the normal links.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil">
            <summary>
            <strong>TranslateUtil</strong> is a collection of static utilities
            for methods that are needed for the translation.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.NEAR_ZERO_FLOAT">
            <summary>
            A very small value used as minimum threashold in various situations.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.Noop">
            <summary>
            A no operation for Java code that needs no C# translation.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.TemporaryNoop">
            <summary>
            A temporary no operation for Java code that needs a C# translation,
            just that for now we don't have it yet. This allows grepping for
            TemporaryNoop to ensure none remains in the FCS code.       
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.ToArray(System.Collections.ICollection,System.Object[])">
            <summary>
            Simulates Java style toArray.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.AddRect(ILOG.Diagrammer.Rectangle2D@,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Extends the first rectangle by the second rectangle.
            </summary>
            <remarks>
            Basically the same as <strong>Union</strong> except that we
            destructively change the first rectangle.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.IntersectsWith(ILOG.Diagrammer.Rectangle2D@,ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Determines if the rectangle <paramref name="rect1"/> intersects with 
            the rectangle <paramref name="rect2"/>.
            </summary>
            <remarks>
            Basically the same as <strong>Rectangle2D.IntersectsWith</strong> except that 
            it returns false in more cases (see the code), just as in JViews IlvRect.intersects.
            </remarks>
            <param name="rect1">The first rectangle to test. </param>
            <param name="rect2">The second rectangle to test. </param>
            <returns>This method returns <see langword="true"/> if there is any intersection.</returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.Remove(System.Collections.ArrayList,System.Object)">
            <summary>
            Conversion utility.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.Collection2JavaStyleEnum(System.Collections.ICollection)">
            <summary>
            Conversion utility.      
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.Enumerator2JavaStyleEnum(System.Collections.IEnumerator)">
            <summary>
            Conversion utility.      
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.JavaStyleEnum2Collection(ILOG.Diagrammer.GraphLayout.Internal.IJavaStyleEnumerator)">
            <summary>
            Conversion utility.      
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.GetEmptyCollection">
            <summary>
            Conversion utility.      
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.Point2D2InternalPoint(ILOG.Diagrammer.Point2D)">
            <summary>
            Conversion utility.      
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.InternalPoint2Point2D(ILOG.Diagrammer.GraphLayout.Internal.InternalPoint)">
            <summary>
            Conversion utility.      
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.Rectangle2D2InternalRect(ILOG.Diagrammer.Rectangle2D)">
            <summary>
            Conversion utility.      
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.InternalRect2Rectangle2D(ILOG.Diagrammer.GraphLayout.Internal.InternalRect)">
            <summary>
            Conversion utility.      
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.GetBox(ILOG.Diagrammer.GraphLayout.INodeBoxProvider,ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object)">
            <summary>
            Conversion utility.      
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.GetTangentialOffset(ILOG.Diagrammer.GraphLayout.ILinkConnectionBoxProvider,ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object,System.Int32)">
            <summary>
            Conversion utility.      
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.GetTangentialOffset(ILOG.Diagrammer.GraphLayout.ILinkConnectionBoxProvider,ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object,ILOG.Diagrammer.GraphLayout.Internal.Direction)">
            <summary>
            Conversion utility.      
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.Internal.TranslateUtil.GetTangentialOffset(ILOG.Diagrammer.GraphLayout.ILinkConnectionBoxProvider,ILOG.Diagrammer.GraphLayout.IGraphModel,System.Object,ILOG.Diagrammer.GraphLayout.NodeSide)">
            <summary>
            Conversion utility.      
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode">
            <summary>
            The reshape modes used for <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/>.
            </summary>
            <remarks>
            These modes occur when the graph layout
            calls <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/>.
            There are five possibilities for the origin point and for the
            destination point of a link:
            <ul>
            <li> <see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Ignore"/> - 
            The layout provides no information about the end points
            of the link at all. The graph model can decide whatever it wants.
            When using a <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>, the layout
            does not change the current anchor of the link.
            </li>
            
            <li> <see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Move"/>
            The layout wants to move the origin and/or destination point
            of the link to the provided position.
            When using a <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>, the layout
            adapts the anchor of the link so that it is movable.
            </li>
            
            <li> <see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Fix"/>
            The layout wants to keep the original origin and/or destination point
            of the link fixed. No new point is provided.
            When using a <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>, the layout
            adapts the anchor of the link so that it is not movable.
            </li>
            
            <li> <see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Clip"/>
            The layout wants to clip the original origin and/or destination point
            of the link against the node border. No new point is provided.
            When using a <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>, the layout
            adapts the anchor of the link so that the link is clipped towards
            the center of the node.
            </li>
            
            <li> <see cref="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.MoveAndClip"/>
            The layout wants to clip the original origin and/or destination point
            of the link against the node border towards the provided point.
            When using a <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>, the layout
            adapts the anchor of the link so that the link goes through the
            provided point and is clipped at the node border.
            </li>
            </ul>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)">
            </seealso>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Ignore">
            <summary>
            The method <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/> does not
            provide any information for the origin or destination point of the link.
            The anchor of the link does not need to be changed in any way.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Move">
            <summary>
            The method <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/> should move
            the origin or destination point of the link to the provided position.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Fix">
            <summary>
            The method <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/> should keep
            the origin or destination point of the link fixed.
            The same position (relative to the node position) as before
            layout should be used.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.Clip">
            <summary>
            The method <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/> should clip
            the origin or destination point at the border of the node shape.
            No specific position is provided.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkMode.MoveAndClip">
            <summary>
            The method <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/> should first move
            the origin or destination point to the provided position and the clip
            it at the border of the node shape.
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle">
            <summary>
            The link style options used for <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.ReshapeLink(System.Object,ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode,ILOG.Diagrammer.Point2D[],System.Int32,System.Int32,ILOG.Diagrammer.Point2D,ILOG.Diagrammer.GraphLayout.ReshapeLinkMode)"/>.
            </summary>
            <remarks>
            These options specify the shape of the link.
            The graph model can set the properties of the link so that the link
            can best represent this style.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle.Ignore">
            <summary>
            Keep the previous style: The link should not change its style.
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle.Straight">
            <summary>
            Straight line link style: The link has no bends.
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle.Orthogonal">
            <summary>
            Orthogonal link style: The link can have horizontal or vertical segments.
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle.Polyline">
            <summary>
            Polyline link style: The link can have arbitrary segments and bends.        
            </summary>   
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.ReshapeLinkStyle.Direct">
            <summary>
            Direct link style: The link has two bends and a long straight middle segment.
            </summary>   
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction">
            <summary>
            Defines the action types of contents changed events.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.StructureChanged">
            <summary>
            One or several nodes or links have been added or removed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.GeometryChanged">
            <summary>
            The geometry (size, position) of one or several nodes or links
            has changed.
            </summary>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.NodeAdded">
            <summary>
            A node has been added.
            </summary>
            <remarks>
            This must be combined with the bit mask
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.StructureChanged"/>.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.NodeRemoved">
            <summary>
            A node has been removed.
            </summary>
            <remarks>
            This must be combined with the bit mask
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.StructureChanged"/>.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.LinkAdded">
            <summary>
            A link has been added.
            </summary>
            <remarks>
            This must be combined with the bit mask
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.StructureChanged"/>.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.LinkRemoved">
            <summary>
            A link has been removed.
            </summary>
            <remarks>
            This must be combined with the bit mask
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.StructureChanged"/>.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.NodeGeometryChanged">
            <summary>
            A node has been moved or resized.
            </summary>
            <remarks>
            This must be combined with the bit mask
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.GeometryChanged"/>.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.LinkGeometryChanged">
            <summary>
            A link has been reshaped.
            </summary>
            <remarks>
            This must be combined with the bit mask
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.GeometryChanged"/>.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.BeginUpdate">
            <summary>
            A series of modifications is started.
            </summary>
            <remarks>
            A series of events can be marked with the 
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.Updating"/> flag.
            At the beginning of the series, there can be one event
            that marks the start of the update cycle.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.EndUpdate">
            <summary>
            A series of modifications is finished.
            </summary>
            <remarks>
            A series of events can be marked with the 
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.Updating"/> flag.
            At the end of the series, there must be one event
            that has no updating flag but marks the end of the update cycle.
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.Updating">
            <summary>
            This event is in a series of events.
            </summary>
            <remarks>
            This can be combined with any other bit mask.
            A series of events can be marked with the 
            updating flag. This allows event handlers to optimize their
            treatment of series of events.
            At the start of the series, there <em>can</em> be an event
            that marks the <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.BeginUpdate"/>, and at the end
            of the series, there <em>must</em> be one event
            that has no updating flag but marks the <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.EndUpdate"/>.
            All events between <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.BeginUpdate"/> and
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.EndUpdate"/> must have the updating flag set.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:ILOG.Diagrammer.GraphLayout.IGraphModel.ContentsChanged"/>
            event.
            </summary>
            <remarks>
            A <strong>ContentsChanged</strong> event is raised when the
            contents in an <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/> changes.</remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs.#ctor(ILOG.Diagrammer.GraphLayout.IGraphModel,ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction,System.Object)">
            <summary>
            Initializes a new instance of the
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs"/> class.
            </summary>
            <param name="model">The <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/> that fires
            this event.
            </param>
            <param name="action">The
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction"/>.
            </param>
            <param name="nodeOrLink">The node or link that was affected by the
            action. Can be <see langword="null"/>.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs.IsUpdating">
            <summary>
            Tests whether the action of the event has the 
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.Updating"/>
            bitmask set.
            </summary>
            <remarks>
            A series of events can be marked with the 
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction.Updating"/> flag.
            This allows event handlers to optimize their
            treatment of series of events.
            If you only want to perform an action for each modification
            of the graph model, but not on every individual object addition
            or removal, you can perform the action when this method returns
            <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs.IsBeginUpdate">
            <summary>
            Returns <see langword="true"/> if this event is the start of a
            series of modifications.
            </summary>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs.IsEndUpdate">
            <summary>
            Returns <see langword="true"/> if this event is the end of a
            series of modifications.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs.Model">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/> that fires this event.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs.Action">
            <summary>
            Gets the <see cref="T:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction"/> that
            indicates the type of the change in the graph model.
            </summary>
            <value>A bitwise combination of the
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventAction"/> values.</value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs.NodeOrLink">
            <summary>
            Gets the node or link that causes the event.
            </summary>
            <remarks>
            Can be <see langword="null"/> if no specific node or link causes
            the event.
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventHandler">
            <summary>
            Represents the method that will handle the
            <see cref="E:ILOG.Diagrammer.GraphLayout.IGraphModel.ContentsChanged"/>event
            of the <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/> class.
            </summary>
            <param name="sender">The source of the event.
            </param>
            <param name="e">A <see cref="T:ILOG.Diagrammer.GraphLayout.GraphModelContentsChangedEventArgs"/>
            that contains the event data.
            </param>
        </member>
        <member name="T:ILOG.Diagrammer.Design.CompoundArrayConverter">
            <summary>
            This converter is only used by the FormatLinkDialog
            </summary>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.ShortLinkLayout">
            <summary>
            This class is the main class for the Short Link Layout algorithm.
            </summary>
            <remarks> 
            <p>
            This algorithm reshapes the links of a graph without moving the
            nodes. By default, the algorithm computes orthogonal links (that is,
            links composed of alternating horizontal and vertical segments).
            Optionally, direct links can be computed. (See
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkStyle"/> and
            <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle)"/>.)
            
            </p>
            <p>
            The links are placed freely in the plane by choosing the best shape
            from a fixed number of link shapes. Orthogonal links can a maximum of
            4 bends. Direct links have 3 bends. <br/> This layout algorithm is
            recommended when any of the following apply: 
            <UL>
            <LI> Most of the links are short, and it is not fatal if long links
            overlap some nodes.</LI> 
            <LI> The link routes must be placed freely and cannot be restricted
            to a grid.</LI> 
            <LI> It is important to limit the number of bends.</LI> 
            </UL>
            Otherwise, the
            <see cref="T:ILOG.Diagrammer.GraphLayout.LongLinkLayout"/> may be more
            suitable. 
            </p>
            <p>
            Here are sample drawings produced by the Short Link Layout algorithm:
            <CENTER>
            <IMG SRC="images/GraphLayout/layout-Ortho-Ortho-small.gif" BORDER="0" ALIGN="BOTTOM"/></CENTER>
            
            </p>
            <p>
            <CENTER>
            <IMG SRC="images/GraphLayout/layout-Ortho-Direct-small.gif" BORDER="0" ALIGN="BOTTOM"/></CENTER>
            
            </p>
            <p>
            <CENTER><IMG SRC="images/GraphLayout/layout-Ortho-Java2D.gif" BORDER="0" ALIGN="BOTTOM"/></CENTER>
            
            </p>
            <p>
            See the corresponding chapter of the User's Manual for details on the
            algorithm, the types of graphs for which this algorithm can be used,
            the features and limitations, code samples, and so on. 
            </p>
            <p>
            Note the following points: 
            <UL>
            <LI> The algorithm never moves any nodes. It only reshapes
            links.</LI> 
            <LI> The algorithm normally routes normal links. It has a special
            mode to route the intergraph links of the graph model.</LI> 
            <LI> The algorithm has an incremental mode and a nonincremental mode.
            In nonincremental mode, the initial shape of the links (at the moment
            you start the layout) does not affect the resulting layout. However,
            links specified as fixed while
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/>
            is enabled or links that have the link style
            <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.NoReshape"/> are not reshaped. The
            incremental mode cannot be used for intergraph links.</LI> 
            <LI> In incremental mode, the initial shape of the link does affect
            the resulting layout. The algorithm tries to preserve the shape of
            links that already fit the layout situation.</LI> 
            <LI> The algorithm supports self-links and multiple links between the
            same pair of nodes.</LI> 
            </UL> 
            </p>
            </remarks>
            <example>
            <para lang="cs,vbnet">The following example shows how to apply 
            the Short Link Layout.</para>
            <code lang="cs">
            using System;
            using ILOG.Diagrammer;
            using ILOG.Diagrammer.Graphic;
            using ILOG.Diagrammer.GraphLayout; 
            
            Group group = new Group();
            
            // Fill the group with nodes and links here
            
            ShortLinkLayout layout = new ShortLinkLayout();
            group.LinkLayout = layout;
            group.PerformGraphLayout(); 
            </code>
            <code lang="vbnet">
            Imports System
            Imports ILOG.Diagrammer
            Imports ILOG.Diagrammer.Graphic
            Imports ILOG.Diagrammer.GraphLayout
            
            Dim group As Group = New Group 
            
            ' Fill the group with nodes and links here
            
            Dim layout As ShortLinkLayout = New ShortLinkLayout
            group.LinkLayout = layout
            group.PerformGraphLayout
            </code>
            </example>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.#ctor">
            <summary>
            Creates a new instance of the Short Link Layout algorithm.
            </summary>
            <remarks>
            <br/>To indicate the graphic container you want to lay out, use the
            method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>.
            <br/>To indicate the graph model you want to lay out, use the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            <br/>To perform the layout, use the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            <br/>To modify the layout parameters, use the different methods
            provided in this class and its superclass. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphicContainer)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter.Filter"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.Init">
            <summary>
            Initializes instance variables.
            </summary>
            <remarks> 
            <p>
            You should not call this method directly. The method is called
            internally by the constructor without arguments and by the copy
            constructor. The method must be overridden by subclasses that need
            to initialize additional instance variables. 
            </p>
            </remarks>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.#ctor(ILOG.Diagrammer.GraphLayout.ShortLinkLayout)">
            <summary>
            Creates a new layout instance by copying an existing one.
            </summary>
            <remarks>
            This constructor is used by the <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.Copy"/>
            method. Any subclass should provide a copy constructor. 
            <p>
            The parameters of the <strong>source</strong> layout are copied
            using the method <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.Copy"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            <param name="source"> The layout instance that is copied.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.Copy">
            <summary>
            Copies the layout instance.
            </summary>
            <remarks> 
            <p>
            This method copies the layout instance by calling the copy
            constructor. 
            </p>
            <p>
            When performing a recursive layout on a nested graph, this method is
            used by <see cref="T:ILOG.Diagrammer.GraphLayout.ILayoutProvider"/> to
            "clone" the layout instance of a parent graph. 
            </p>
            <p>
            Note that the parameters which are specific to a node or a link are
            not copied. The other parameters, including the customization
            interfaces, are also copied. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)"/>
            <returns>A copy of the layout instance.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.CopyParameters(ILOG.Diagrammer.GraphLayout.GraphLayout)">
            <summary>
            Copies the parameters from a given layout instance.
            </summary>
            <remarks> 
            <p>
            Note that the parameters which are specific to a node or a link are
            not copied. The other parameters, including the customization
            interfaces, are also copied. 
            </p>
            <p>
            If a method of the type <strong>SupportsXXX</strong> is associated
            with a parameter, the parameter is copied only if the corresponding
            method returns <see langword="true"/>. 
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.Copy"/>
            <param name="source"> The layout instance from which the parameters
            are copied.
            </param>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.Detach">
            <summary>
            Detaches the graph model from the layout instance.
            </summary>
            <remarks>
            When you attach a new graph model to the layout instance, you do not
            need to detach the old graph model because this is done
            automatically when you call
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>.
            
            <p>
            The method performs cleaning operations on the graph model. In
            addition to the cleaning operations in the base class, the Short
            Link Layout removes the link style specifications of individual
            links. 
            </p>
            <p>
            Note that you must call this method when you no longer need the
            layout instance. Otherwise, some objects may not be garbage
            collected. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.Attach(ILOG.Diagrammer.GraphLayout.IGraphModel)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.Layout">
            <summary>
            Computes the layout using the Short Link Layout algorithm.
            </summary>
            <remarks>
            To start the layout, call the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>.
            
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.GetAuxiliaryLongLinkLayout">
            <summary>
            Returns the instance of
            <see cref="T:ILOG.Diagrammer.GraphLayout.LongLinkLayout"/> that is
            used for avoiding overlaps between links and nodes when 
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkOverlapNodesForbidden"/> returns
            <see langword="true"/>.
            </summary>
            <remarks> 
            <p>
            This method allows you to get this auxiliary layout instance and to
            customize its parameters if needed. In particular, you can reduce or
            increase the grid size (see 
            <see cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.HorizontalGridOffset"/>
            and
            <see cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.VerticalGridOffset"/>).
            
            </p>
            <p>
            Notice that you should not modify the origin and destination point
            mode, nor to disable the preservation of fixed links.  Notice also
            that an <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/> is
            attached to the
            <see cref="T:ILOG.Diagrammer.GraphLayout.LongLinkLayout"/> only if
            needed, therefore 
            </p>
            <code>
            getAuxiliaryLongLinkLayout().getGraphModel()
            </code>
            can return <see langword="null"/>. 
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkOverlapNodesForbidden"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle)">
            <summary>
            Sets the style of the shape of an individual link.
            </summary>
            <remarks>
            This link style is used only if the global link style is set to
            <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Mixed"/>. Otherwise, all links have
            the style that is specified as the global link style. 
            <p>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Orthogonal"/> - the link gets an
            orthogonal shape, that is, a shape consisting of a sequence of
            orthogonal line segments.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Direct"/> - the link gets a
            straight-line shape.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.NoReshape"/> - the link is not
            reshaped.</LI> 
            </UL> 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Orthogonal"/>. 
            </p>
            <p>
             
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.GetLinkStyle(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.GetLinkStyle(System.Object)">
            <summary>
            Returns the style of the shape of an individual link.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)">
            <summary>
            Sets the mode for the connection point on an individual link on the
            origin node.
            </summary>
            <remarks>
            This mode is used only if the global from-point mode is set to
            <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>. Otherwise, the connection
            points on the origin nodes have, for all the links, the mode that is
            specified as the global origin point mode. 
            <p>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/> - The layout is free to
            choose, for this link, the appropriate position of the connection
            point on the origin node, except for "pinned" connection points (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)"/>).</LI>
            
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Fixed"/> - The layout must keep,
            for this link, the current position of the connection point on the
            origin node. This can be useful, in particular, if the node has
            fixed connection points where the link is attached and the
            connection points should not be moved by the layout algorithm. 
            <p>
            Note that, in this mode, the layout algorithm has less freedom for
            the choice of a link shape. Hence, this mode usually produces more
            crossings and overlaps than the mode
            <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/>.
            </p>
            </LI> 
            </UL> 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/>. 
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <param name="mode"> The mode to set.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.GetOriginPointMode(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.OriginPointMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.GetOriginPointMode(System.Object)">
            <summary>
            Returns the origin point mode of an individual link.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.OriginPointMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)">
            <summary>
            Sets the mode for the connection point on an individual link on the
            destination node.
            </summary>
            <remarks>
            This mode is used only if the global from-point mode is set to
            <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>. Otherwise, the connection
            points on the destination nodes have, for all the links, the mode
            that is specified as the global destination point mode. 
            <p>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/> - The layout is free to
            choose, for this link, the appropriate position of the connection
            point on the destination node, except for "pinned" connection points
            (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)"/>).</LI>
            
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Fixed"/> - The layout must keep,
            for this link, the current position of the connection point on the
            destination node. This can be useful, in particular, if the node has
            fixed connection points where the link is attached and the
            connection points should not be moved by the layout algorithm. 
            <p>
            Note that, in this mode, the layout algorithm has less freedom for
            the choice of a link shape. Hence, this mode usually produces more
            crossings and overlaps than the mode
            <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/>.
            </p>
            </LI> 
            </UL> 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/>. 
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <param name="mode"> The mode to set.
            </param>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.GetDestinationPointMode(System.Object)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.DestinationPointMode"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.GetDestinationPointMode(System.Object)">
            <summary>
            Returns the destination point mode of an individual link.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.DestinationPointMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetConnectorStyle(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle)">
            <summary>
            Sets the connector style of an individual node.
            </summary>
            <remarks>
            This connector style is used only if the global connector style is
            set to <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Mixed"/>. Otherwise, all nodes
            have the connector style that is specified as the global connector
            style. 
            <p>
            Valid values are: 
            <UL>
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.FixedOffset"/> - The
            link connection points are spaced along the node border at a
            distance equal to the <i>link offset</i> (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkOffset"/>).</LI> 
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.EvenlySpaced"/> - The
            link connection points are evenly spaced along the node border,
            preserving a margin which is determined by
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.EvenlySpacedConnectorMarginRatio"/>.</LI>
            
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.Automatic"/> - Uses the
            connector style
            <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.FixedOffset"/> except if
            this pushes a connection point outside the border the link is
            attached to, in which case it uses the connector style
            <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.EvenlySpaced"/>.</LI> 
            </UL> 
            </p>
            <p>
            The default value is
            <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.Automatic"/>. 
            </p>
            <p>
             
            </p>
            </remarks>
            <param name="node"> The node.
            </param>
            <param name="style"> The connector style.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.ConnectorStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.GetConnectorStyle(System.Object)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.GetConnectorStyle(System.Object)">
            <summary>
            Returns the connector style of an individual node.
            </summary>
            <param name="node"> The node.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.ConnectorStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetConnectorStyle(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetIncrementalUnmodifiedLinkReshapeMode(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode)">
            <summary>
            Sets the link reshape mode of an individual link used during
            incremental layout for unmodified links, that is links that have
            been already laid out in the previous layout execution and for which
            the bounding box (see <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.NodeBoxProvider"/>
            nor the "link connection box" (see 
            </summary>
            @link #getLinkConnectionBoxInterface}) of their origin and
            destination nodes have not been modified. 
            <p>
            This link reshape mode is used only if the incremental mode is
            enabled and the global link reshape mode is set to
            <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>. If the global mode is not
            <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>, all links have the mode
            that is specified as the global link reshape mode. 
            </p>
            <p>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode.FixedShapeType"/> -
            The incremental layout preserves preserves the shape type of the
            link. This means that both the number of bends and the node sides to
            which the link is connected are preserved.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode.FixedNodeSides"/> -
            The incremental layout preserves the node sides to which the links
            are connected.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.ReshapeModes.FixedConnectionPointsMode"/> - The
            incremental layout preserves the connection points of the
            links.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Fixed"/> - The links are not
            reshaped at all during incremental layout. Only newly added links
            are rerouted.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/> - The incremental layout
            is allowed to freely reshape the links. This is equivalent to a
            non-incremental behavior for the <paramref name="link"/> argument.
            (Of course, settings that may have been done using
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetFixed(System.Object)"/>,
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.OriginPointMode"/> and
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.DestinationPointMode"/> are still
            obeyed.)</LI> 
            </UL> 
            </p>
            <p>
            The default mode is
            <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode.FixedShapeType"/>. 
            <param name="link"> The link.
            </param>
            <param name="mode"> The link reshape mode to set.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalUnmodifiedLinkReshapeMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.GetIncrementalUnmodifiedLinkReshapeMode(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetIncrementalModifiedLinkReshapeMode(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalMode"/>
            </p>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.GetIncrementalUnmodifiedLinkReshapeMode(System.Object)">
            <summary>
            Returns the link reshape mode of an individual link used during
            incremental layout for unmodified links.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalUnmodifiedLinkReshapeMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetIncrementalUnmodifiedLinkReshapeMode(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetIncrementalModifiedLinkReshapeMode(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode)">
            <summary>
            Sets the link reshape mode of an individual link used during
            incremental layout for modified links, that is links that have been
            already laid out in the previous layout execution and for which the
            bounding box (see <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.NodeBoxProvider"/> or
            the "link connection box" (see 
            </summary>
            @link #getLinkConnectionBoxInterface}) of their origin and
            destination nodes have been modified. 
            <p>
            This link reshape mode is used only if the incremental mode is
            enabled and the global link reshape mode is set to
            <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>. If the global mode is not
            <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>, all links have the mode
            that is specified as the global link reshape mode. 
            </p>
            <p>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode.FixedShapeType"/> -
            The incremental layout preserves preserves the shape type of the
            link. This means that both the number of bends and the node sides to
            which the link is connected are preserved.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode.FixedNodeSides"/> -
            The incremental layout preserves the node sides to which the links
            are connected.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.Internal.ReshapeModes.FixedConnectionPointsMode"/> - The
            incremental layout preserves the connection points of the
            links.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Fixed"/> - The links are not
            reshaped at all during incremental layout. Only newly added links
            are rerouted.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/> - The incremental layout
            is allowed to freely reshape the links. This is equivalent to a
            non-incremental behavior for the <paramref name="link"/> argument.
            (Of course, settings that may have been done using
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetFixed(System.Object)"/>,
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.OriginPointMode"/> and
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.DestinationPointMode"/> are still
            obeyed.)</LI> 
            </UL> 
            </p>
            <p>
            The default mode is
            <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode.FixedShapeType"/>. 
            <param name="link"> The link.
            </param>
            <param name="mode"> The link reshape mode to set.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalModifiedLinkReshapeMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.GetIncrementalModifiedLinkReshapeMode(System.Object)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetIncrementalUnmodifiedLinkReshapeMode(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalMode"/>
            </p>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.GetIncrementalModifiedLinkReshapeMode(System.Object)">
            <summary>
            Returns the link reshape mode of an individual link used during
            incremental layout for modified links.
            </summary>
            <remarks> 
            <p>
            </p>
            </remarks>
            <param name="link"> The link.
            </param>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalUnmodifiedLinkReshapeMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetIncrementalUnmodifiedLinkReshapeMode(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode)"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.StopImmediately">
            <summary>
            Overridden version of the base class method.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AutoLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformAutoLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SupportsPreserveFixedLinks">
            <summary>
            Indicates that this layout class allows the user to specify fixed
            links.
            </summary>
            <remarks>
            Fixed links are not reshaped during the layout if the property
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/>
            is set to <see langword="true"/>. 
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/>
            '/&gt;
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SupportsAllowedTime">
            <summary>
            Indicates that this layout class can stop the layout computation in
            the proper manner when the user-defined allowed time is exceeded.
            </summary>
            <remarks>
            The result code in the layout report is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/> in this case. 
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/>
            '/&gt;
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SupportsStopImmediately">
            <summary>
            Indicates that this layout class can interrupt the current run of
            the layout immediately in a controlled way.
            </summary>
            <remarks>
            The result code in the layout report is
            <see cref="F:ILOG.Diagrammer.GraphLayout.GraphLayoutReportCode.StoppedAndInvalid"/> in this case. 
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.StopImmediately"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.IsStoppedImmediately"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.GraphLayoutReport.Code"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SupportsLinkConnectionBox">
            <summary>
            Indicates that this layout class can use a link connection box
            interface to calculate the end points of a link.
            </summary>
            <remarks>
            The link connection box interface is an object that provides the
            rectangle to which the links are connected for each node, and the
            tangential shift offset at each side for the connection points. 
            <p>
            The link connection box is used instead of the bounding box of each
            node (see <see cref="P:ILOG.Diagrammer.GraphicObject.Bounds"/> and 
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.BoundingBox(System.Object)"/>)
            during the routing of links. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkConnectionBoxProvider"/>
            <returns>Always <see langword="true"/>.
            </returns>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkOverlapNodesForbidden">
            <summary>
            Gets or sets whether it is forbidden for the layout to reshape links
            such that they overlap nodes.
            </summary>
            <remarks> 
            <p>
            The default value of this parameter is <see langword="false"/>. 
            </p>
            <p>
            If overlaps are not forbidden, the algorithm tries to avoid overlaps
            anyway, but may create overlaps, for instance in order to avoid
            crossings of the link with other links. 
            </p>
            <p>
            If overlaps are forbidden, the algorithm uses the auxiliary link
            layout (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.GetAuxiliaryLongLinkLayout"/> for
            laying out, in an orthogonal shape, those links that overlap nodes. 
            </p>
            <p>
            Notice that the auxiliary long link works on a grid and the  default
            grid size may need to be reduced to allow this algorithm to avoid
            the overlaps (see 
            <see cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.HorizontalGridOffset"/>
            and
            <see cref="P:ILOG.Diagrammer.GraphLayout.LongLinkLayout.VerticalGridOffset"/>).
            
            </p>
            <p>
            Notice also that forbidding the overlaps can slow down the layout
            and can produce additional link bends and link crossings.  
            </p>
            </remarks>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.GetAuxiliaryLongLinkLayout"/>
            <value>Whether it is forbidden for the layout to reshape links such
            that they overlap nodes.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.NodeBoxProvider">
            <summary>
            Gets or sets an object that provides the rectangle defining the
            position and size of each node.
            </summary>
            <remarks> 
            <p>
            If you do not set this property, the layout algorithm uses the
            bounding box of the node (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.BoundingBox(System.Object)"/>). 
            </p>
            <p>
            You can set this property to <see langword="null"/> to go back to
            the default behavior. 
            </p>
            </remarks>
            <value>An object that provides the rectangle defining the position
            and size of each node.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.NodeSideFilter">
            <summary>
            Gets or sets the node-side filter, that is, an object that allows or
            prohibits the connection of the links on a given side of the nodes.
            </summary>
            <remarks> 
            <p>
            If a node-side filter is not installed, and the connection points of
            the links are not fixed (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>,
            <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>), the layout
            algorithm is free to choose any side of the nodes, except for
            "pinned" connection points (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)"/>).
            
            </p>
            <p>
            When a filter is installed, the layout algorithm asks the filter at
            which side of its end node each link is allowed to attach to. 
            </p>
            <p>
            Note the following points: 
            <UL>
            <LI>A filter should always allow a link to connect to at least one
            side of a node; otherwise the link cannot be routed.</LI> 
            <LI>If the connection point on the origin or destination node is
            specified as fixed (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.OriginPointMode"/>,
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.DestinationPointMode"/>,
            <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>,
            <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>), the filter
            is not used for the origin or the destination node,
            respectively.</LI> 
            <LI>When side constraints are added using the filter, the layout
            algorithm has less freedom for the choice of a link shape. Hence,
            laying out with a side filter usually produces more crossings and
            overlaps than laying out without side filter.</LI> 
            </UL>
            You can set this property to <see langword="null"/> to return to the
            default behavior. 
            </p>
            </remarks>
            <value>The node-side filter.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkStyle">
            <summary>
            Gets or sets the global style of the shape of the links.
            </summary>
            <remarks>
            Valid values are the following: 
            <UL>
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Direct"/>: the shape of the links
            is a polyline composed of a straight-line segment between the end
            nodes with two horizontal or vertical segments at its extremities
            (their length is controlled by
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.MinFinalSegmentLength"/> and may be
            0).</LI> 
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Orthogonal"/>: the shape of the
            links is a polyline composed of alternating horizontal and vertical
            segments.</LI> 
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Mixed"/>: each link can have a
            different link style. The style of each individual link can be set
            by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle)"/>
            so that different link shapes can occur in the same graph.</LI> 
            </UL> 
            <p>
            Unless the global link style is
            <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Mixed"/>, all links have the same
            style of shape. 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Orthogonal"/>. 
            </p>
            <p>
              
            </p>
            </remarks>
            <value>The global style of the shape of the links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SelfLinkStyle">
            <summary>
            Gets or sets the global style of the shape of the self-links.
            </summary>
            <remarks>
            Self-links are links that have the same origin and destination node.
            
            <p>
            Valid values are the following: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutSelfLinkStyle.TwoBendsOrthogonal"/>:
            the shape of the links is a polyline composed of three alternating
            horizontal and vertical segments, connected to the same side of the
            node.</LI> 
            <LI>
            <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutSelfLinkStyle.ThreeBendsOrthogonal"/>: the
            shape of the links is a polyline composed of four alternating
            horizontal and vertical segments, connected to two adjacent sides of
            the node.</LI> 
            </UL> 
            </p>
            <p>
            The default value is
            <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutSelfLinkStyle.TwoBendsOrthogonal"/>. 
            </p>
            <p>
             
            </p>
            </remarks>
            <value>The global style of the shape of the self-links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.OriginPointMode">
            <summary>
            Gets or sets the global mode for the connection point of the links
            on the origin nodes.
            </summary>
            <remarks>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/> - For all links, the
            layout is free to choose the appropriate position of the connection
            point on the origin node, except for "pinned" connection points (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)"/>).</LI>
            
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Fixed"/> - For all links, the
            layout must keep the current position of the connection point on the
            origin node. This can be useful, in particular, if the node has
            fixed connection points where the link is attached and the
            connection points should not be moved by the layout algorithm. 
            <p>
            Note that, in this mode, the layout algorithm has less freedom for
            the choice of a link shape. Hence, this mode usually produces more
            crossings and overlaps than the mode
            <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/>.
            </p>
            </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/> - Each link can have a
            different mode for the connection point on the origin node. The mode
            of each individual link can be set by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>.</LI>
            
            </UL> 
            <p>
            Unless the global mode is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>,
            the connection points on the origin node have the same mode for all
            the links. 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/>. 
            </p>
            </remarks>
            <value>The global mode to set.
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.DestinationPointMode">
            <summary>
            Gets or sets the global mode for the connection point of the links
            on the destination nodes.
            </summary>
            <remarks>
            Valid values are: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/> - For all links, the
            layout is free to choose the appropriate position of the connection
            point on the destination node, except for "pinned" connection points
            (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.HasPinnedConnectionPoint(System.Object,System.Boolean)"/>).</LI>
            
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Fixed"/> - For all links, the
            layout must keep the current position of the connection point on the
            destination node. This can be useful, in particular, if the node has
            fixed connection points where the link is attached and the
            connection points should not be moved by the layout algorithm. 
            <p>
            Note that, in this mode, the layout algorithm has less freedom for
            the choice of a link shape. Hence, this mode usually produces more
            crossings and overlaps than the mode
            <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/>.
            </p>
            </LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/> - Each link can have a
            different mode for the connection point on the destination node. The
            mode of each individual link can be set by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>.</LI>
            
            </UL> 
            <p>
            Unless the global mode is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>,
            the connection points on the destination node have the same mode for
            all the links. 
            </p>
            <p>
            The default value is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/>. 
            </p>
            </remarks>
            <value>The global mode to set.
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.ConnectorStyle">
            <summary>
            Gets or sets the global style of connectors.
            </summary>
            <remarks>
            Valid values are the following: 
            <UL>
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.FixedOffset"/> - The
            link connection points are spaced along the node border at a
            distance equal to the <i>link offset</i> (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkOffset"/>).</LI> 
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.EvenlySpaced"/> - The
            link connection points are evenly spaced along the node border,
            preserving a margin which is determined by
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.EvenlySpacedConnectorMarginRatio"/>.</LI>
            
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.Automatic"/> - Uses the
            connector style
            <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.FixedOffset"/> except if
            this pushes a connection point outside the border the link is
            attached to, in which case it uses the connector style
            <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.EvenlySpaced"/>.</LI> 
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Mixed"/>: each node can have a
            different connector style. The style of each individual node can be
            set by the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetConnectorStyle(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle)"/>
            so that different connector styles can occur in the same graph.</LI>
            
            </UL> 
            <p>
            Unless the global connector style is
            <see cref="F:ILOG.Diagrammer.GraphLayout.LinkLayoutLinkStyle.Mixed"/>, all links have the same
            connector style. 
            </p>
            <p>
            The default value is
            <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.Automatic"/>. 
            </p>
            <p>
            The connector style is used to place the connection points of links
            that have the free origin or destination point mode and no specified
            port index. Links with fixed point mode do not change their
            connection point at the origin node. The placement of connection
            points also depends on the connection box interface, in the
            following way: <ol> 
            <li> First, the bounding box of an end node is obtained. If a link
            connection box interface was set via
            <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/>,
            the bounding box and offsets are delivered by that interface.
            Otherwise, the node bounding box delivered by the graph model (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.BoundingBox(System.Object)"/>)
            is used. </li> 
            <li> Next, the connection point of the link is placed at this
            bounding box in the manner specified by the connector style. </li>
            </ol> 
            </p>
            <p>
             
            </p>
            </remarks>
            <value>The connector style.
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetConnectorStyle(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.EvenlySpacedConnectorMarginRatio"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.OriginPointMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.DestinationPointMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.EvenlySpacedConnectorMarginRatio">
            <summary>
            Gets or sets the margin ratio for the evenly spaced connector style.
            </summary>
            <remarks>
            This option has no effect if the connector style
            <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutConnectorStyle.FixedOffset"/> is used. 
            <p>
            In evenly spaced connector style (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.ConnectorStyle"/>), the connection points
            of the links are evenly spaced along the node border, preserving a
            margin to each extremity of the node border. The size of this margin
            is controlled by the margin ratio, and is computed by multiplying
            with the ratio the offset between the links. 
            </p>
            <p>
            The input value must be a positive or zero value. A ratio of
            <strong>0</strong> means no margin; a ratio of <strong>1</strong>
            means a margin equal to the offset between the links; a ratio of
            <strong>0.5</strong> means a margin equal to half the offset between
            the links; a ratio of <strong>2</strong> means a margin equal to
            twice the offset between the links and so on. There is no upper
            bound for the ratio; however, the margin which is obtained has an
            upper bound equal to  <strong>(node-side-dimension -
            total-width-of-links) / 2</strong>.  The default value is
            <strong>0.5</strong>. 
            </p>
            </remarks>
            <value>The margin ratio for the evenly spaced connector style.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.ConnectorStyle"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkBundlesMode">
            <summary>
            Gets or sets the link bundles mode.
            </summary>
            <remarks>
            The valid modes are  the following: 
            <UL>
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkBundlesMode.NoBundle"/>: Several
            links connected to the same side of a node share the same connection
            point, that is, the middle of the node side. The final segments of
            the links overlap. No bundles are created and the link offset
            parameter is ignored.</LI> 
            <LI> <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkBundlesMode.FirstLastSegment"/>:
            The connection points of several links connected to the same side of
            a node are distributed according to the link offset value. With the
            orthogonal link style, the algorithm additionally ensures that the
            first and last segments of the links are always orthogonal to the
            side of the node to which they are connected.</LI> 
            <LI>
            <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkBundlesMode.ImprovedFirstLastSegment"/>:
            The algorithm additionally tries to avoid overlapping the second
            segment and the segment next to the last. Note that with the direct
            link style, this mode is equivalent to
            <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkBundlesMode.FirstLastSegment"/>.</LI> 
            </UL>
            The default value is
            <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkBundlesMode.ImprovedFirstLastSegment"/>.
             
            </remarks>
            <value>The link bundles mode.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalMode">
            <summary>
            Gets or sets the incremental layout mode.
            </summary>
            <remarks>
            If the argument is <see langword="true"/>, the layout tries to
            create a layout with similar shapes for links already laid in the
            last layout, in order to preserve the "mental map" of the user as
            much as possible. The exact incremental behavior is controlled by
            the "incremental link reshape" mode. For details, see
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalUnmodifiedLinkReshapeMode"/>
            and
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalModifiedLinkReshapeMode"/>. 
            <p>
            The incremental mode works only if the intergraph links mode is
            disabled or if there are no intergraph links. Also, the incremental
            mode has no effect if the layout parameters have been changed since
            the previous layout. 
            </p>
            <p>
            The incremental mode is disabled by default. 
            </p>
            <p>
            </p>
            </remarks>
            <value>Set to <see langword="true"/> to enable the incremental
            layout mode, or <see langword="false"/> to disable it.
            </value>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.InterGraphLinksMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalUnmodifiedLinkReshapeMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalModifiedLinkReshapeMode"/>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalUnmodifiedLinkReshapeMode">
            <summary>
            Gets or sets the link reshape mode used during incremental layout
            for unmodified links, that is links that have been already laid out
            in the previous layout execution and for which the bounding box (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.NodeBoxProvider"/> nor the
            "link connection box" (see 
            </summary>
            @link #getLinkConnectionBoxInterface}) of their origin and
            destination nodes have not been modified. 
            <p>
            This mode has no effect if the incremental mode is disabled. 
            </p>
            <p>
            Valid values are: 
            <UL>
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode.FixedShapeType"/> -
            The incremental layout preserves preserves the shape type of the
            link. This means that both the number of bends and the node sides to
            which the link is connected are preserved.</LI> 
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode.FixedNodeSides"/> -
            The incremental layout preserves the node sides to which the links
            are connected.</LI> 
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.Internal.ReshapeModes.FixedConnectionPointsMode"/> - The
            incremental layout preserves the connection points of the
            links.</LI> 
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Fixed"/> - The links are not
            reshaped at all during incremental layout. Only newly added links
            are rerouted.</LI> 
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/> - The incremental layout
            is allowed to freely reshape the links. This is equivalent to a
            non-incremental behavior for all the links, hence it is recommended
            to disable the incremental mode  ({link
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalMode"/>) instead of setting 
            <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/> as global incremental reshape
            mode. (Of course, settings that may have been done using
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetFixed(System.Object)"/>,
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.OriginPointMode"/> and
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.DestinationPointMode"/> are still
            obeyed.)</LI> 
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/> - Each link can have a
            different mode. The mode of each individual link can be set by the
            method
            <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetIncrementalUnmodifiedLinkReshapeMode(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode)"/>.</LI>
            
            </UL> 
            </p>
            <p>
            Unless the global mode is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>,
            all links are reshaped according to the same mode. 
            </p>
            <p>
            The default mode is
            <see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode.FixedShapeType"/>.
            <value>The link reshape mode to set.
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetIncrementalUnmodifiedLinkReshapeMode(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetIncrementalModifiedLinkReshapeMode(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalMode"/>
            </p>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalModifiedLinkReshapeMode">
            <summary>
            Gets or sets the link reshape mode used during incremental layout
            for modified links, that is links that have been already laid out in
            the previous layout execution and for which the bounding box (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.NodeBoxProvider"/> or the
            "link connection box" (see 
            </summary>
            @link #getLinkConnectionBoxInterface}) of their origin and
            destination nodes have been modified. 
            <p>
            This mode has no effect if the incremental mode is disabled. 
            </p>
            <p>
            Valid values are: 
            <UL>
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode.FixedShapeType"/> -
            The incremental layout preserves preserves the shape type of the
            link. This means that both the number of bends and the node sides to
            which the link is connected are preserved.</LI> 
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode.FixedNodeSides"/> -
            The incremental layout preserves the node sides to which the links
            are connected.</LI> 
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.Internal.ReshapeModes.FixedConnectionPointsMode"/> - The
            incremental layout preserves the connection points of the
            links.</LI> 
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Fixed"/> - The links are not
            reshaped at all during incremental layout. Only newly added links
            are rerouted.</LI> 
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/> - The incremental layout
            is allowed to freely reshape the links. This is equivalent to a
            non-incremental behavior for all the links, hence it is recommended
            to disable the incremental mode  ({link
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalMode"/>) instead of setting 
            <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/> as global incremental reshape
            mode. reshape mode. (Of course, settings that may have been done
            using
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.GetFixed(System.Object)"/>,
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.OriginPointMode"/> and
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.DestinationPointMode"/> are still
            obeyed.)</LI> 
            <LI><see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/> - Each link can have a
            different mode. The mode of each individual link can be set by the
            method
            <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetIncrementalUnmodifiedLinkReshapeMode(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode)"/>.</LI>
            
            </UL> 
            </p>
            <p>
            Unless the global mode is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Mixed"/>,
            all links are reshaped according to the same mode. 
            </p>
            <p>
            The default mode is <see cref="F:ILOG.Diagrammer.GraphLayout.ConnectionPointMode.Free"/>.
            <value>The link reshape mode to set.
            </value>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetIncrementalModifiedLinkReshapeMode(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetIncrementalUnmodifiedLinkReshapeMode(System.Object,ILOG.Diagrammer.GraphLayout.ShortLinkLayoutLinkReshapeMode)"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalMode"/>
            </p>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.InterGraphLinksMode">
            <summary>
            Gets or sets the routing of intergraph links.
            </summary>
            <remarks>
            If the argument is <see langword="true"/>, the intergraph links are
            routed; otherwise, only the normal links are routed. An intergraph
            link is a link stored in a given graph that has an origin or
            destination not stored in this graph. If the combined intergraph
            link routing is enabled in addition, this means that normal links
            and intergraph links are routed together; otherwise only the
            intergraph links are routed. 
            <p>
            The default value is <see langword="true"/>. 
            </p>
            <p>
            If the intergraph link mode is enabled and the graph actually
            contains some intergraph links, there are some restrictions: 
            <UL>
             
            <LI> The incremental mode has no effect.</LI> 
            <LI> If layout is performed on a nested
            <see cref="T:ILOG.Diagrammer.GraphicContainer"/> (or
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/>),
            the top-level graph must have a view attached because of the
            coordinate transformations of the subgraphs. If you create your own
            subclass of <see cref="T:ILOG.Diagrammer.GraphLayout.IGraphModel"/>
            instead of
            <see cref="T:ILOG.Diagrammer.GraphLayout.GraphicContainerAdapter"/> to
            route intergraph links, you must ensure that all graph models of all
            subgraphs use the same coordinate system through appropriate
            coordinate transformations.</LI> 
            </UL> 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.CombinedInterGraphLinksMode"/>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)"/>
            <value>The routing of intergraph links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.CombinedInterGraphLinksMode">
            <summary>
            Gets or sets the routing of normal links in addition to intergraph
            links.
            </summary>
            <remarks>
            If intergraph link routing is disabled, the mode has no effect. If
            intergraph link routing is enabled and the argument is
            <see langword="true"/>, both normal links and intergraph links are
            routed in the same pass. Otherwise, only the intergraph links are
            routed. 
            <p>
            The default value is <see langword="true"/>. 
            </p>
            <p>
            </p>
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.InterGraphLinksMode"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.IGraphModel.IsInterGraphLink(System.Object)"/>
            <value>The routing of normal links in addition to intergraph links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SameShapeForMultipleLinks">
            <summary>
            Gets or sets whether the layout algorithm must ensure that all
            multiple links have the same type of shape, that is a shape with the
            same number of bends and with parallel segments.
            </summary>
            <remarks> 
            <p>
            Multiple links are links that have the same origin and destination
            nodes. 
            </p>
            <p>
            If the argument is <see langword="true"/>, additional work is done
            to ensure that multiple links will be reshaped in the same manner. 
            </p>
            <p>
            The default value is <see langword="false"/>. 
            </p>
            <p>
            Note that for some categories of links it cannot be guaranteed that
            they will be given the same type of shape as the other links with
            the same origin and destination nodes: 
            <UL>
            <LI>In incremental mode (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.IncrementalMode"/>, for newly inserted
            links.</LI> 
            <LI>Fixed links (see
            <see cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.SetFixed(System.Object,System.Boolean)"/>.</LI>
            
            <LI>Links with at least one of their connection points fixed (see
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.OriginPointMode"/>,
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.DestinationPointMode"/>,
            <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetOriginPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>,
            <see cref="M:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.SetDestinationPointMode(System.Object,ILOG.Diagrammer.GraphLayout.ConnectionPointMode)"/>).</LI> 
            </UL> 
            </p>
            </remarks>
            <value>Set to <see langword="true"/> to enable the same shape
            option, or <see langword="false"/> to disable it.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkToNodeCrossingPenalty">
            <summary>
            Gets or sets the link-to-node crossing penalty factor.
            </summary>
            <remarks> 
            <p>
            The default value is <strong>1</strong>. 
            </p>
            </remarks>
            <value>The link-to-node crossing penalty factor.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkToLinkCrossingPenalty">
            <summary>
            Gets or sets the link-to-link crossing penalty factor.
            </summary>
            <remarks> 
            <p>
            The default value is <strong>1</strong>. 
            </p>
            </remarks>
            <value>The link-to-link crossing penalty factor.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.MinFinalSegmentLength">
            <summary>
            Gets or sets the minimum length of the final (first and last)
            segment of the links.
            </summary>
            <remarks> 
            <p>
            The default value is <strong>10</strong>. 
            </p>
            </remarks>
            <value>The minimum length of the final (first and last) segment of
            the links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.BypassDistance">
            <summary>
            Gets or sets the minimum distance between the origin and destination
            node for which a link shape going directly from one node to another
            is allowed.
            </summary>
            <remarks>
            The algorithm tries to avoid link shapes that directly connect the
            sides of the end nodes that are closer than the bypass value. 
            <p>
            If the specified value is strictly negative, the value of the
            parameter <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.MinFinalSegmentLength"/> is
            used as the  bypass distance. This allows the automatic adjustment
            of the bypass distance according to the current value of 
            <see cref="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.MinFinalSegmentLength"/>. This behavior
            is suitable in most cases. However, you can specify a non-negative
            value in order to override the default behavior. 
            </p>
            <p>
            The default value is a negative value. 
            </p>
            </remarks>
            <value>The minimum distance for a direct connection.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkOffset">
            <summary>
            Gets or sets the offset between links connected on the same side of
            the node.
            </summary>
            <remarks> 
            <p>
            The default value is <strong>2</strong>. 
            </p>
            </remarks>
            <value>The offset between links connected on the same side of the
            node.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.AllowedNumberOfIterations">
            <summary>
            Gets or sets the maximum number of iterations of the layout
            algorithm.
            </summary>
            <remarks> 
            <p>
            The default value is <strong>3</strong>.  
            </p>
            </remarks>
            <value>The maximum number of iterations of the layout algorithm.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.PreserveFixedLinks">
            <summary>
            Gets or sets whether the layout avoids movement of fixed links.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.PreserveFixedLinks"/> for details.
            </remarks>
            <value>Whether the layout avoids movement of fixed links.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.AllowedTime">
            <summary>
            Gets or sets the upper limit for the duration of the layout
            algorithm.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.AllowedTime"/> for details.
            </remarks>
            <value>The upper limit for the duration of the layout algorithm.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.ShortLinkLayout.LinkConnectionBoxProvider">
            <summary>
            Gets or sets the link connection box interface for the connection
            points of links.
            </summary>
            <remarks>
            See <see cref="P:ILOG.Diagrammer.GraphLayout.GraphLayout.LinkConnectionBoxProvider"/> for details.
            </remarks>
            <value>The link connection box interface for the connection points
            of links.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.MultipleLayoutReport">
            <summary>
             The class used to store information about the behavior of the
            Multiple Layout algorithm.
            </summary>
            <remarks>
            It stores the layout reports of its sublayouts. 
            </remarks>
            <seealso cref="T:ILOG.Diagrammer.GraphLayout.MultipleLayout"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.GraphLayout.PerformLayout"/>
        </member>
        <member name="M:ILOG.Diagrammer.GraphLayout.MultipleLayoutReport.#ctor">
            <summary>
            Creates a new instance of the report object.
            </summary>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.MultipleLayoutReport.FirstGraphLayoutReport">
            <summary>
            Gets the report of the graph layout that was applied first.
            </summary>
            <value>The report of the graph layout that was applied first.
            </value>
        </member>
        <member name="P:ILOG.Diagrammer.GraphLayout.MultipleLayoutReport.SecondGraphLayoutReport">
            <summary>
            Gets the report of the graph layout that was applied second.
            </summary>
            <value>The report of the graph layout that was applied second.
            </value>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutConnectorStyle">
            <summary>
            The styles that define how the anchors of links are distributed at
            the nodes when using the Hierarchical layout algorithm.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle)"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutConnectorStyle.Automatic">
            <summary>
            Automatic connection point.
            </summary>
            <remarks>
            When set at the layout parameter 
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.ConnectorStyle"/>, the connector style
            is automatically selected depending on the global link style. 
            </remarks>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkStyle"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutConnectorStyle.Centered">
            <summary>
            Centered connection point.
            </summary>
            <remarks>
            When set at the layout parameter 
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.ConnectorStyle"/>, the connection
            points of links are placed at the center of the border the link is
            attached to. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutConnectorStyle.Clipped">
            <summary>
            Clipped connection point.
            </summary>
            <remarks>
            When set at the layout parameter 
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.ConnectorStyle"/>, the connection
            points of links are placed such that the link pointing toward the
            node center is clipped at the node border. 
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutConnectorStyle.EvenlySpaced">
            <summary>
            Evenly spaced connection point.
            </summary>
            <remarks>
            When set at the layout parameter 
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.ConnectorStyle"/>, the connection
            points of links are evenly spaced along the border the link is
            attached to. 
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide">
            <summary>
            The port sides of the nodes.
            </summary>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.East">
            <summary>
            East port side.
            </summary>
            <remarks>
            When used as an argument of the methods
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>
            or
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>,
            the link is connected to the east border of its end node at the
            "from" or "to" side. 
            <p>
            </p>
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.West">
            <summary>
            West port side.
            </summary>
            <remarks>
            When used as an argument of the methods
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>
            or
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>,
            the link is connected to the west border of its end node at the
            "from" or "to" side. 
            <p>
            </p>
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.North">
            <summary>
            North port side.
            </summary>
            <remarks>
            When used as an argument of the methods
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>
            or
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>,
            the link is connected to the north border of its end node at the
            "from" or "to" side. 
            <p>
            </p>
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.South">
            <summary>
            South port side.
            </summary>
            <remarks>
            When used as an argument of the methods
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>
            or
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>,
            the link is connected to the south border of its end node at the
            "from" or "to" side. 
            <p>
            </p>
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide.Unspecified">
            <summary>
            Unspecified port side.
            </summary>
            <remarks>
            When used as an argument of the methods
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetFromPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>
            or
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetToPortSide(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutSide)"/>,
            the link can be connected to any border of its end node at the
            "from" or "to" side. 
            <p>
            </p>
            </remarks>
        </member>
        <member name="T:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle">
            <summary>
            The styles that define the shape for the links when using the
            Hierarchical layout algorithm.
            </summary>
            <seealso cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkStyle"/>
            <seealso cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle)"/>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle.NoReshape">
            <summary>
            No reshape option.
            </summary>
            <remarks>
            When set at the layout parameter 
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkStyle"/>, none of the links are
            reshaped. To specify the shape of an individual link, use it as the
            argument of the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle)"/>.
            
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle.Straight">
            <summary>
            Straight-line link shape option.
            </summary>
            <remarks>
            When set at the layout parameter
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkStyle"/>, all links get a
            straight-line shape. To specify the shape of an individual link, use
            it as the argument of the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle)"/>.
            
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle.Orthogonal">
            <summary>
            Orthogonal link shape option.
            </summary>
            <remarks>
            When set at the layout parameter 
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkStyle"/>, all links get a shape
            consisting of a sequence of orthogonal line segments. To specify the
            shape of an individual link, use it as the argument of the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle)"/>.
            
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle.Polyline">
            <summary>
            Polyline link shape option.
            </summary>
            <remarks>
            When set at the layout parameter 
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkStyle"/>, all links get a shape
            consisting of a sequence of line segments (not necessarily
            orthogonal). To specify the shape of an individual link, use it as
            the argument of the method
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle)"/>.
            
            </remarks>
        </member>
        <member name="F:ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle.Mixed">
            <summary>
            Mixed link shape option.
            </summary>
            <remarks>
            When set at the layout parameter 
            <see cref="P:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.LinkStyle"/>, each link can have a
            different shape. The shape of an individual link can be set by
            <see cref="M:ILOG.Diagrammer.GraphLayout.HierarchicalLayout.SetLinkStyle(System.Object,ILOG.Diagrammer.GraphLayout.HierarchicalLayoutLinkStyle)"/>.
            
            </remarks>
        </member>
    </members>
</doc>
