-- ##########################################################################
-- Release#		:	R1.00
-- Release On	:	09 Dec 2010
-- Filename		:	Step2.2.CreateSTP.sql
-- Description	:	SQL Scripts of creating StoredProcedures.

-- 01. [stp_MES_CHECK_BAG_REOCCURENCE] - Add storeprocedure stp_MES_CHECK_BAG_REOCCURENCE
-- 02. [stp_MES_CLEARLOCALDATA] - Add storeprocedure stp_MES_CLEARLOCALDATA
-- 03. [stp_MES_GENERATE_FALLBACKTAG] - Add storeprocedure stp_MES_GENERATE_FALLBACKTAG
-- 04. [stp_MES_GENERATEINHOUSEBSM] - Add storeprocedure stp_MES_GENERATEINHOUSEBSM
-- 05. [stp_MES_GET_AIRLINE_CODE] - Add storeprocedure stp_MES_GET_AIRLINE_CODE
-- 06. [stp_MES_GET_AIRLINES] - Add storeprocedure stp_MES_GET_AIRLINES
-- 07. [stp_MES_GET_ALL_SETTING] - Add storeprocedure stp_MES_GET_ALL_SETTING
-- 08. [stp_MES_GET_BAG_GID] - Add storeprocedure stp_MES_GET_BAG_GID
-- 09. [stp_MES_GET_COMBO_DATA] - Add storeprocedure stp_MES_GET_COMBO_DATA
-- 10. [stp_MES_GET_DESTINATION] - Add storeprocedure stp_MES_GET_DESTINATION
-- 11. [stp_MES_GET_FLIGHT] - Add storeprocedure stp_MES_GET_FLIGHT
-- 12. [stp_MES_GET_HBS_RESULTS] - Add storeprocedure stp_MES_GET_HBS_RESULTS
-- 13. [stp_MES_GET_IATA_TAG_LIST] - Add storeprocedure stp_MES_GET_IATA_TAG_LIST
-- 14. [stp_MES_GET_INHOUSE_BSM] - Add storeprocedure stp_MES_GET_INHOUSE_BSM
-- 15. [stp_MES_GET_PROBLEM_LOCATION] - Add storeprocedure stp_MES_GET_PROBLEM_LOCATION
-- 16. [stp_MES_GET_REASON] - Add storeprocedure stp_MES_GET_REASON
-- 17. [stp_MES_GET_RUSH_LOCATION] - Add storeprocedure stp_MES_GET_RUSH_LOCATION
-- 18. [stp_MES_GET_SPECIFIC_DEST] - Add storeprocedure stp_MES_GET_SPECIFIC_DEST
-- 19. [stp_MES_GETFLIGHTLIST] - Add storeprocedure stp_MES_GETFLIGHTLIST
-- 20. [stp_MES_GETLASTENCODING] - Add storeprocedure stp_MES_GETLASTENCODING
-- 21. [stp_MES_GETLICENSEPLATE] - Add storeprocedure stp_MES_GETLICENSEPLATE
-- 22. [stp_MES_GETLOCALINSERTEDDATA] - Add storeprocedure stp_MES_GETLOCALINSERTEDDATA
-- 23. [stp_MES_GETPESSENGERINFO] - Add storeprocedure stp_MES_GETPESSENGERINFO
-- 24. [stp_MES_INSERT_AIRLINE_CODE_SHORTCUTS] - Add storeprocedure stp_MES_INSERT_AIRLINE_CODE_SHORTCUTS
-- 25. [stp_MES_INSERT_AIRLINES] - Add storeprocedure stp_MES_INSERT_AIRLINES
-- 26. [stp_MES_INSERT_AIRPORTS] - Add storeprocedure stp_MES_INSERT_AIRPORTS
-- 27. [stp_MES_INSERT_BAG_INFO] - Add storeprocedure stp_MES_INSERT_BAG_INFO
-- 28. [stp_MES_INSERT_BAG_SORTING] - Add storeprocedure stp_MES_INSERT_BAG_SORTING
-- 29. [stp_MES_INSERT_CHUTE_MAPPING] - Add storeprocedure stp_MES_INSERT_CHUTE_MAPPING
-- 30. [stp_MES_INSERT_DESTINATIONS] - Add storeprocedure stp_MES_INSERT_DESTINATIONS
-- 31. [stp_MES_INSERT_FALLBACK_MAPPING] - Add storeprocedure stp_MES_INSERT_FALLBACK_MAPPING
-- 32. [stp_MES_INSERT_FALLBACK_TAG_INFO] - Add storeprocedure stp_MES_INSERT_FALLBACK_TAG_INFO
-- 33. [stp_MES_INSERT_FLIGHT_PLAN_ALLOC] - Add storeprocedure stp_MES_INSERT_FLIGHT_PLAN_ALLOC
-- 34. [stp_MES_INSERT_FLIGHT_PLAN_SORTING] - Add storeprocedure stp_MES_INSERT_FLIGHT_PLAN_SORTING
-- 35. [stp_MES_INSERT_FOUR_DIGITS_FALLBACK_MAPPING] - Add storeprocedure stp_MES_INSERT_FOUR_DIGITS_FALLBACK_MAPPING
-- 36. [stp_MES_INSERT_FUNCTION_ALLOC_GANTT] - Add storeprocedure stp_MES_INSERT_FUNCTION_ALLOC_GANTT
-- 37. [stp_MES_INSERT_FUNCTION_ALLOC_LIST] - Add storeprocedure stp_MES_INSERT_FUNCTION_ALLOC_LIST
-- 38. [stp_MES_INSERT_FUNCTION_TYPES] - Add storeprocedure stp_MES_INSERT_FUNCTION_TYPES
-- 39. [stp_MES_INSERT_HBS_AIRLINE] - Add storeprocedure stp_MES_INSERT_HBS_AIRLINE
-- 40. [stp_MES_INSERT_HBS_COUNTRY] - Add storeprocedure stp_MES_INSERT_HBS_COUNTRY
-- 41. [stp_MES_INSERT_HBS_FLIGHT] - Add storeprocedure stp_MES_INSERT_HBS_FLIGHT
-- 42. [stp_MES_INSERT_HBS_PASSENGER] - Add storeprocedure stp_MES_INSERT_HBS_PASSENGER
-- 43. [stp_MES_INSERT_HBS_POLICY_MANAGEMENT] - Add storeprocedure stp_MES_INSERT_HBS_POLICY_MANAGEMENT
-- 44. [stp_MES_INSERT_HBS_SCHEDULE] - Add storeprocedure stp_MES_INSERT_HBS_SCHEDULE
-- 45. [stp_MES_INSERT_HBS_TAG_TYPE] - Add storeprocedure stp_MES_INSERT_HBS_TAG_TYPE
-- 46. [stp_MES_INSERT_INHOUSE_BSM] - Add storeprocedure stp_MES_INSERT_INHOUSE_BSM
-- 47. [stp_MES_INSERT_ITEM_ENCODED] - Add storeprocedure stp_MES_INSERT_ITEM_ENCODED
-- 48. [stp_MES_INSERT_ITEM_READY] - Add storeprocedure stp_MES_INSERT_ITEM_READY
-- 49. [stp_MES_INSERT_ITEM_REMOVED] - Add storeprocedure stp_MES_INSERT_ITEM_REMOVED
-- 50. [stp_MES_INSERT_MES_EVENT] - Add storeprocedure stp_MES_INSERT_MES_EVENT
-- 51. [stp_MES_INSERT_PSEUDO_BSM] - Add storeprocedure stp_MES_INSERT_PSEUDO_BSM
-- 52. [stp_MES_INSERT_ROUTING_TABLE] - Add storeprocedure stp_MES_INSERT_ROUTING_TABLE
-- 53. [stp_MES_INSERT_SORTATION_REASON] - Add storeprocedure stp_MES_INSERT_SORTATION_REASON
-- 54. [stp_MES_INSERT_SPECIAL_SECURITY_TAG_DESTINATION_MAPPING] - Add storeprocedure stp_MES_INSERT_SPECIAL_SECURITY_TAG_DESTINATION_MAPPING
-- 55. [stp_MES_INSERT_SYS_CONFIG] - Add storeprocedure stp_MES_INSERT_SYS_CONFIG
-- 56. [stp_MES_INSERT_TTS_MES_PRIORITY] - Add storeprocedure stp_MES_INSERT_TTS_MES_PRIORITY
-- 57. [stp_MES_REMOVE_INHOUSE_BSM] - Add storeprocedure stp_MES_REMOVE_INHOUSE_BSM
-- 58. [stp_MES_REMOVELOCALINSERTEDDATA] - Add storeprocedure stp_MES_REMOVELOCALINSERTEDDATA
-- 59. [stp_MES_UPDATE_BAG_INFO] - Add storeprocedure stp_MES_UPDATE_BAG_INFO
-- 60. [stp_MES_UPDATE_ITEM_INHOUSE_BSM] - Add storeprocedure stp_MES_UPDATE_ITEM_INHOUSE_BSM
-- 61. [stp_SAC_CHUTEAVAILABLECHECK] - Add storeprocedure stp_SAC_CHUTEAVAILABLECHECK
-- 62. [stp_SAC_CUSTOMSSECURITYMEETCHECKING] - Add storeprocedure stp_SAC_CUSTOMSSECURITYMEETCHECKING
-- 63. [stp_SAC_GETAIRLINEALLOCATION] - Add storeprocedure stp_SAC_GETAIRLINEALLOCATION
-- 64. [stp_SAC_GETAIRLINERUSH] - Add storeprocedure stp_SAC_GETAIRLINERUSH
-- 65. [stp_SAC_GETBAGINFORMATION] - Add storeprocedure stp_SAC_GETBAGINFORMATION
-- 66. [stp_SAC_GETFALLBACKTAGDISCHARGE] - Add storeprocedure stp_SAC_GETFALLBACKTAGDISCHARGE
-- 67. [stp_SAC_GETFLIGHTALLOCOFLP] - Add storeprocedure stp_SAC_GETFLIGHTALLOCOFLP
-- 68. [stp_SAC_GETFLIGHTALLOCOFLPFROMPSEUDOBSM] - Add storeprocedure stp_SAC_GETFLIGHTALLOCOFLPFROMPSEUDOBSM
-- 69. [stp_SAC_GETFOURDIGITSFALLBACKTAGDISCHARGE] - Add storeprocedure stp_SAC_GETFOURDIGITSFALLBACKTAGDISCHARGE
-- 70. [stp_SAC_GETFOURDIGITSSECURITYTAGDISCHARGE] - Add storeprocedure stp_SAC_GETFOURDIGITSSECURITYTAGDISCHARGE
-- 71. [stp_SAC_GETFUNCALLOCATION] - Add storeprocedure stp_SAC_GETFUNCALLOCATION
-- 72. [stp_SAC_GETMINIMUMSECURITYLEVEL] - Add storeprocedure stp_SAC_GETMINIMUMSECURITYLEVEL
-- 73. [stp_SAC_GETROUTINGTABLE] - Add storeprocedure stp_SAC_GETROUTINGTABLE
-- 74. [stp_SAC_GETSACTTSMESPRIORITY] - Add storeprocedure stp_SAC_GETSACTTSMESPRIORITY
-- 75. [stp_SAC_GETSECURITYTAGLEVEL] - Add storeprocedure stp_SAC_GETSECURITYTAGLEVEL
-- 76. [stp_SAC_MINIMUMHBSSECURITYLEVELMEETCHECKING] - Add storeprocedure stp_SAC_MINIMUMHBSSECURITYLEVELMEETCHECKING
-- 77. [stp_MES_CHECK_NO_BSM] - Add storeprocedure stp_MES_CHECK_NO_BSM
-- 78. [stp_MES_ALERT_ENCODING_DURATION]- Add storeprocedure stp_MES_ALERT_ENCODING_DURATION

-- 77. [MES_GETALLOCATEDDESTINATION] - Add function MES_GETALLOCATEDDESTINATION
-- 78. [MES_GETTABLECHANGES] - Add function MES_GETTABLECHANGES
-- 79. [RPT_GETFORMATTEDSTO] - Add function RPT_GETFORMATTEDSTO
-- 80. [SAC_MINUTECONVERTERSIGN] - Add function SAC_MINUTECONVERTERSIGN
-- Histories:
--    R1.0 - Released on 09 Dec 2010.
-- ##########################################################################

PRINT 'INFO: STEP5 - Create BHS Solution Database Stored Procedures for Sortation'
PRINT 'INFO: .'
PRINT 'INFO: .'
PRINT 'INFO: .'
GO
USE [BHS_LOCALMES]
GO
PRINT 'INFO: Deleting existing storeprocedures.'
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_SAC_GETMINIMUMSECURITYLEVEL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_SAC_GETMINIMUMSECURITYLEVEL]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_HBS_SCHEDULE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_HBS_SCHEDULE]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GETFLIGHTLIST]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GETFLIGHTLIST]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GETLASTENCODING]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GETLASTENCODING]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_HBS_POLICY_MANAGEMENT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_HBS_POLICY_MANAGEMENT]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GETLOCALINSERTEDDATA]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GETLOCALINSERTEDDATA]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_ITEM_ENCODED]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_ITEM_ENCODED]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_REMOVELOCALINSERTEDDATA]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_REMOVELOCALINSERTEDDATA]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GET_HBS_RESULTS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GET_HBS_RESULTS]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GET_IATA_TAG_LIST]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GET_IATA_TAG_LIST]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GET_INHOUSE_BSM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GET_INHOUSE_BSM]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GET_PROBLEM_LOCATION]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GET_PROBLEM_LOCATION]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GET_REASON]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GET_REASON]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GET_RUSH_LOCATION]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GET_RUSH_LOCATION]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_CHECK_BAG_REOCCURENCE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_CHECK_BAG_REOCCURENCE]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_CLEARLOCALDATA]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_CLEARLOCALDATA]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GENERATE_FALLBACKTAG]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GENERATE_FALLBACKTAG]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GENERATEINHOUSEBSM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GENERATEINHOUSEBSM]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GET_AIRLINE_CODE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GET_AIRLINE_CODE]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GET_AIRLINES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GET_AIRLINES]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GET_ALL_SETTING]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GET_ALL_SETTING]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GET_BAG_GID]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GET_BAG_GID]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GET_COMBO_DATA]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GET_COMBO_DATA]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GET_DESTINATION]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GET_DESTINATION]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GET_FLIGHT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GET_FLIGHT]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_UPDATE_BAG_INFO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_UPDATE_BAG_INFO]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_UPDATE_ITEM_INHOUSE_BSM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_UPDATE_ITEM_INHOUSE_BSM]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_SAC_CHUTEAVAILABLECHECK]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_SAC_CHUTEAVAILABLECHECK]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_SAC_CUSTOMSSECURITYMEETCHECKING]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_SAC_CUSTOMSSECURITYMEETCHECKING]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_SAC_GETAIRLINEALLOCATION]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_SAC_GETAIRLINEALLOCATION]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_SAC_GETAIRLINERUSH]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_SAC_GETAIRLINERUSH]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_SAC_GETBAGINFORMATION]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_SAC_GETBAGINFORMATION]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_SAC_GETFALLBACKTAGDISCHARGE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_SAC_GETFALLBACKTAGDISCHARGE]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_SAC_GETFLIGHTALLOCOFLP]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_SAC_GETFLIGHTALLOCOFLP]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_SAC_GETFLIGHTALLOCOFLPFROMPSEUDOBSM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_SAC_GETFLIGHTALLOCOFLPFROMPSEUDOBSM]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_SAC_GETFOURDIGITSFALLBACKTAGDISCHARGE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_SAC_GETFOURDIGITSFALLBACKTAGDISCHARGE]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_SAC_GETFOURDIGITSSECURITYTAGDISCHARGE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_SAC_GETFOURDIGITSSECURITYTAGDISCHARGE]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_SAC_GETFUNCALLOCATION]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_SAC_GETFUNCALLOCATION]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_ITEM_READY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_ITEM_READY]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_ITEM_REMOVED]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_ITEM_REMOVED]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_MES_EVENT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_MES_EVENT]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_PSEUDO_BSM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_PSEUDO_BSM]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_ROUTING_TABLE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_ROUTING_TABLE]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_SORTATION_REASON]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_SORTATION_REASON]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_SPECIAL_SECURITY_TAG_DESTINATION_MAPPING]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_SPECIAL_SECURITY_TAG_DESTINATION_MAPPING]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_SYS_CONFIG]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_SYS_CONFIG]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_TTS_MES_PRIORITY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_TTS_MES_PRIORITY]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_REMOVE_INHOUSE_BSM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_REMOVE_INHOUSE_BSM]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GETPESSENGERINFO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GETPESSENGERINFO]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_AIRLINE_CODE_SHORTCUTS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_AIRLINE_CODE_SHORTCUTS]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_AIRLINES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_AIRLINES]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_AIRPORTS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_AIRPORTS]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_BAG_INFO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_BAG_INFO]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_BAG_SORTING]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_BAG_SORTING]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_CHUTE_MAPPING]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_CHUTE_MAPPING]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_DESTINATIONS]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_DESTINATIONS]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_FALLBACK_MAPPING]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_FALLBACK_MAPPING]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_FALLBACK_TAG_INFO]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_FALLBACK_TAG_INFO]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_FLIGHT_PLAN_ALLOC]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_FLIGHT_PLAN_ALLOC]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_FLIGHT_PLAN_SORTING]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_FLIGHT_PLAN_SORTING]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_FOUR_DIGITS_FALLBACK_MAPPING]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_FOUR_DIGITS_FALLBACK_MAPPING]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_FUNCTION_ALLOC_GANTT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_FUNCTION_ALLOC_GANTT]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_FUNCTION_ALLOC_LIST]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_FUNCTION_ALLOC_LIST]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_FUNCTION_TYPES]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_FUNCTION_TYPES]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_HBS_AIRLINE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_HBS_AIRLINE]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_HBS_COUNTRY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_HBS_COUNTRY]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_HBS_FLIGHT]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_HBS_FLIGHT]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_HBS_PASSENGER]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_HBS_PASSENGER]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GETLICENSEPLATE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GETLICENSEPLATE]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_HBS_TAG_TYPE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_HBS_TAG_TYPE]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_INHOUSE_BSM]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_INHOUSE_BSM]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_SAC_GETROUTINGTABLE]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_SAC_GETROUTINGTABLE]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_SAC_GETSACTTSMESPRIORITY]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_SAC_GETSACTTSMESPRIORITY]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_SAC_GETSECURITYTAGLEVEL]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_SAC_GETSECURITYTAGLEVEL]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_SAC_MINIMUMHBSSECURITYLEVELMEETCHECKING]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_SAC_MINIMUMHBSSECURITYLEVELMEETCHECKING]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_GET_SPECIFIC_DEST]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_GET_SPECIFIC_DEST]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_INSERT_MAKEUP_FLIGHT_TYPE_MAPPING]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[stp_MES_INSERT_MAKEUP_FLIGHT_TYPE_MAPPING]
GO
PRINT 'INFO: Creating required storeprodecures.'
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GET_SPECIFIC_DEST]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 27-Sep-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GET_SPECIFIC_DEST]
	@TTS_ID VARCHAR(MAX)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @SELECT_STATEMENT VARCHAR(MAX)
	SET @SELECT_STATEMENT = 'SELECT Distinct TTS_ID, DESTINATION, SORTER FROM CHUTE_MAPPING WHERE TTS_ID IN (''' + @TTS_ID + ''')'
	EXEC(@SELECT_STATEMENT)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SAC_MINIMUMHBSSECURITYLEVELMEETCHECKING]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_SAC_MINIMUMHBSSECURITYLEVELMEETCHECKING] 
	@GID [varchar](10), 
	@Accept varchar(1),
	@IsMeet [bit] OUTPUT,
	@MinSecurityLevel varchar(1),
	@CurrentHBSLevel varchar(1) OUTPUT,
	@IsEBS [bit] OUTPUT,
	@LicensePlate [varchar](10),
	@NeedCheckLP bit	
AS
BEGIN
	DECLARE @HBS1Result varchar(1)
	DECLARE @HBS2Result varchar(1)
	DECLARE @HBS3Result varchar(1)
	DECLARE @HBS4Result varchar(1)
	DECLARE @HBS5Result varchar(1)
	DECLARE @LP varchar(10)

	DECLARE @Count int
	
	SELECT @Count=COUNT(*) FROM BAG_INFO WHERE GID = @GID;
	
	IF @Count = 0 AND @NeedCheckLP = 1
	BEGIN
		SELECT @LP=LICENSE_PLATE, @CurrentHBSLevel=CURRENT_HBS_LEVEL, @HBS1Result=HBS1_RESULT,
			@HBS2Result=HBS2_RESULT, @HBS3Result=HBS3_RESULT, @HBS4Result=HBS4_RESULT, @HBS5Result=HBS5_RESULT, @IsEBS=EBS
			FROM BAG_INFO WHERE LICENSE_PLATE = @LicensePlate;	
	END 
	ELSE
	BEGIN
		SELECT @LP=LICENSE_PLATE, @CurrentHBSLevel=CURRENT_HBS_LEVEL, @HBS1Result=HBS1_RESULT,
			@HBS2Result=HBS2_RESULT, @HBS3Result=HBS3_RESULT, @HBS4Result=HBS4_RESULT, @HBS5Result=HBS5_RESULT, @IsEBS=EBS
			FROM BAG_INFO WHERE GID = @GID;
	END
	
	-- Update Minimim Security Level in BAG_INFO
	UPDATE [BHSDB].[dbo].[BAG_INFO] SET MIN_SECURITY_LEVEL = @MinSecurityLevel WHERE GID = @GID;
	
	-- Reset EBS to false as this bag is not EBS bag anymore
	IF @IsEBS = 1
	BEGIN
		UPDATE [BHSDB].[dbo].[BAG_INFO] SET EBS = 0 WHERE GID = @GID;
	END
	ELSE
	BEGIN
		DECLARE @EBSCount INT = (SELECT COUNT(*) FROM ITEM_INVENTORY WHERE LICENSE_PLATE = @LP);
		
		IF (@EBSCount > 0)
		BEGIN
			SET @IsEBS = 1;
		END
		ELSE
		BEGIN
			SET @IsEBS = 0;
		END
	END
		
	-- IF Minimum Security Level is higher than current security level, mean it is not meet the security level.
	IF @MinSecurityLevel > @CurrentHBSLevel
	BEGIN
		SET @IsMeet = 0;
	END
	ELSE IF @MinSecurityLevel = @CurrentHBSLevel
	BEGIN
		-- If Minimum Security Level is same as current security level, verify Current HBS screening level
		-- Check HBS result
		IF @CurrentHBSLevel = '1'
		BEGIN
			IF @HBS1Result = @Accept
			BEGIN
				SET @IsMeet = 1;
			END
			ELSE
			BEGIN
				SET @IsMeet = 0;
			END
		END
		ELSE IF @CurrentHBSLevel = '2'
		BEGIN
			IF @HBS2Result = @Accept
			BEGIN
				SET @IsMeet = 1;
			END
			ELSE
			BEGIN
				SET @IsMeet = 0;
			END
		END
		ELSE IF @CurrentHBSLevel = '3'
		BEGIN
			IF @HBS3Result = @Accept
			BEGIN
				SET @IsMeet = 1;
			END
			ELSE
			BEGIN
				SET @IsMeet = 0;
			END
		END
		ELSE IF @CurrentHBSLevel = '4'
		BEGIN
			IF @HBS4Result = @Accept
			BEGIN
				SET @IsMeet = 1;
			END
			ELSE
			BEGIN
				SET @IsMeet = 0;
			END
		END	
		ELSE IF @CurrentHBSLevel = '5'
		BEGIN
			IF @HBS5Result = @Accept
			BEGIN
				SET @IsMeet = 1;
			END
			ELSE
			BEGIN
				SET @IsMeet = 0;
			END
		END		
	END
	ELSE
	BEGIN
		-- If Minimum Security Level is lower than current security level, verify Current HBS screening level
		-- Check HBS result
		IF @MinSecurityLevel = '1'
		BEGIN
			IF @HBS1Result = @Accept
			BEGIN
				SET @IsMeet = 1;
			END
			ELSE
			BEGIN
				IF @CurrentHBSLevel = '2' AND @HBS2Result = @Accept
				BEGIN
					SET @IsMeet = 1;
				END
				ELSE IF @CurrentHBSLevel = '3' AND @HBS3Result = @Accept
				BEGIN
					SET @IsMeet = 1;
				END
				ELSE IF @CurrentHBSLevel = '4' AND @HBS4Result = @Accept
				BEGIN
					SET @IsMeet = 1;
				END
				ELSE IF @CurrentHBSLevel = '5' AND @HBS5Result = @Accept
				BEGIN
					SET @IsMeet = 1;
				END
				ELSE
				BEGIN
					SET @IsMeet = 0;			
				END
			END
		END
		ELSE IF @MinSecurityLevel = '2'
		BEGIN
			IF @HBS2Result = @Accept
			BEGIN
				SET @IsMeet = 1;
			END
			ELSE
			BEGIN
				IF @CurrentHBSLevel = '3' AND @HBS3Result = @Accept
				BEGIN
					SET @IsMeet = 1;
				END
				ELSE IF @CurrentHBSLevel = '4' AND @HBS4Result = @Accept
				BEGIN
					SET @IsMeet = 1;
				END
				ELSE IF @CurrentHBSLevel = '5' AND @HBS5Result = @Accept
				BEGIN
					SET @IsMeet = 1;
				END
				ELSE
				BEGIN
					SET @IsMeet = 0;			
				END		
			END
		END
		ELSE IF @MinSecurityLevel = '3'
		BEGIN
			IF @HBS3Result = @Accept
			BEGIN
				SET @IsMeet = 1;
			END
			ELSE
			BEGIN
				IF @CurrentHBSLevel = '4' AND @HBS4Result = @Accept
				BEGIN
					SET @IsMeet = 1;
				END
				ELSE IF @CurrentHBSLevel = '5' AND @HBS5Result = @Accept
				BEGIN
					SET @IsMeet = 1;
				END
				ELSE
				BEGIN
					SET @IsMeet = 0;			
				END	
			END
		END
		ELSE IF @MinSecurityLevel = '4'
		BEGIN
			IF @HBS4Result = @Accept
			BEGIN
				SET @IsMeet = 1;
			END
			ELSE
			BEGIN
				IF @CurrentHBSLevel = '5' AND @HBS5Result = @Accept
				BEGIN
					SET @IsMeet = 1;
				END
				ELSE
				BEGIN
					SET @IsMeet = 0;			
				END	
			END
		END	
		ELSE IF @MinSecurityLevel = '5'
		BEGIN
			IF @HBS5Result = @Accept
			BEGIN
				SET @IsMeet = 1;
			END
			ELSE
			BEGIN
				SET @IsMeet = 0;
			END
		END		
	END
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SAC_GETSECURITYTAGLEVEL]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_SAC_GETSECURITYTAGLEVEL] 
	@ID [varchar](2),
	@Level [varchar](1) OUTPUT
AS
BEGIN
	SET @Level = (SELECT LEVEL FROM SPECIAL_SECURITY_TAG_LEVEL_MAPPING WHERE ID = @ID)	
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SAC_GETSACTTSMESPRIORITY]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_SAC_GETSACTTSMESPRIORITY]
	@SysKey [varchar](40)
AS 
BEGIN
	SELECT 
		b.[TTS_ID] AS [VALUE]
	FROM 
		[TTS_MES_PRIORITY] AS a LEFT OUTER JOIN 
	[CHUTE_MAPPING] AS b ON (a.[VALUE] = b.[DESTINATION]) WHERE a.SYS_KEY = @SYsKey
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SAC_GETROUTINGTABLE]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_SAC_GETROUTINGTABLE]
AS 
BEGIN
	SELECT 
		[SUBSYSTEM], [LOCATION], [COST]
	FROM 
		[ROUTING_TABLE]
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_INHOUSE_BSM]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 30-Jun-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_INSERT_INHOUSE_BSM] 
	@AIRLINE varchar(5), 
	@FLIGHT_NUMBER varchar(5), 
	@SDO datetime, 
	@DESCRIPTION varchar(20), 
	@MES_STATION varchar(16), 
	@GENERATED_NUMBER varchar(6)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    INSERT INTO ITEM_INHOUSE_BSM([AIRLINE], [FLIGHT_NUMBER], [SDO], [DESCRIPTION], [MES_STATION], [GENERATED_NUMBER])
		VALUES(@AIRLINE, @FLIGHT_NUMBER, @SDO, @DESCRIPTION, @MES_STATION, @GENERATED_NUMBER)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_HBS_TAG_TYPE]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_HBS_TAG_TYPE]
	@HBS_TAG_TYPE HBS_TAG_TYPE_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON
	DELETE FROM HBS_TAG_TYPE
	
	INSERT INTO HBS_TAG_TYPE([ID], [DESCRIPTION])
	SELECT T.[ID], T.[DESCRIPTION] FROM @HBS_TAG_TYPE T 
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GETLICENSEPLATE]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 30-Jun-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GETLICENSEPLATE]
	@BAG_GID VARCHAR(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @LICENSE_PLATE VARCHAR(10)
    SELECT @LICENSE_PLATE = ISNULL(LICENSE_PLATE, '') FROM BAG_INFO WHERE GID = @BAG_GID
    
    SELECT @LICENSE_PLATE
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_HBS_PASSENGER]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_HBS_PASSENGER]
	@HBS_PASSENGER HBS_PASSENGER_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON
	DELETE FROM HBS_PASSENGER
	
	INSERT INTO HBS_PASSENGER([ID], [SURNAME], [GIVEN_NAME], [ADDITIONAL_GIVEN_NAME], [LEVEL], [DESCRIPTION], [SYS_ACTION])
	SELECT T.[ID], T.[SURNAME], T.[GIVEN_NAME], T.[ADDITIONAL_GIVEN_NAME], T.[LEVEL], T.[DESCRIPTION], T.[SYS_ACTION] FROM @HBS_PASSENGER T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_HBS_FLIGHT]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_HBS_FLIGHT]
	@HBS_FLIGHT HBS_FLIGHT_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON
	DELETE FROM HBS_FLIGHT
	
	INSERT INTO HBS_FLIGHT([ID], [LEVEL], [DESCRIPTION], [SYS_ACTION])
	SELECT T.[ID], T.[LEVEL], T.[DESCRIPTION], T.[SYS_ACTION] FROM @HBS_FLIGHT T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_HBS_COUNTRY]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_HBS_COUNTRY]
	@HBS_COUNTRY HBS_COUNTRY_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON
	DELETE FROM HBS_COUNTRY
	
	INSERT INTO HBS_COUNTRY([ID], [LEVEL], [DESCRIPTION], [SYS_ACTION])
	SELECT T.[ID], T.[LEVEL], T.[DESCRIPTION], T.[SYS_ACTION] FROM @HBS_COUNTRY T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_HBS_AIRLINE]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_HBS_AIRLINE]
	@HBS_AIRLINE HBS_AIRLINE_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON
	DELETE FROM HBS_AIRLINE
	
	INSERT INTO HBS_AIRLINE([ID], [LEVEL], [DESCRIPTION], [SYS_ACTION])
	SELECT T.[ID], T.[LEVEL], T.[DESCRIPTION], T.[SYS_ACTION] FROM @HBS_AIRLINE T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_FUNCTION_TYPES]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_FUNCTION_TYPES]
	@FUNCTION_TYPES FUNCTION_TYPES_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	DELETE FROM FUNCTION_TYPES
	
	INSERT INTO FUNCTION_TYPES([TYPE], [GROUP], [DESCRIPTION], [IS_ALLOCATED], [IS_ENABLED])
	SELECT T.[TYPE], T.[GROUP], T.[DESCRIPTION], T.[IS_ALLOCATED], T.[IS_ENABLED] FROM @FUNCTION_TYPES T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_FUNCTION_ALLOC_LIST]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_FUNCTION_ALLOC_LIST]
	@FUNCTION_ALLOC_LIST FUNCTION_ALLOC_LIST_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	DELETE FROM FUNCTION_ALLOC_LIST
	
	INSERT INTO FUNCTION_ALLOC_LIST([ID], [TIME_STAMP], [FUNCTION_TYPE], [RESOURCE], [IS_ENABLED], 
		[SYS_TAB_NAME], [SYS_ACTION])
	SELECT T.[ID], T.[TIME_STAMP], T.[FUNCTION_TYPE], T.[RESOURCE], T.[IS_ENABLED], T.[SYS_TAB_NAME], 
		T.[SYS_ACTION] FROM @FUNCTION_ALLOC_LIST T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_FUNCTION_ALLOC_GANTT]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_FUNCTION_ALLOC_GANTT]
	@FUNCTION_ALLOC_GANTT FUNCTION_ALLOC_GANTT_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	DELETE FROM FUNCTION_ALLOC_GANTT
	
	INSERT INTO FUNCTION_ALLOC_GANTT([ID], [TIME_STAMP], [FUNCTION_TYPE], [RESOURCE], 
		[ALLOC_OPEN_DATETIME], [ALLOC_CLOSE_DATETIME], [IS_CLOSED], [EXCEPTION])
	SELECT T.[ID], T.[TIME_STAMP], T.[FUNCTION_TYPE], T.[RESOURCE], T.[ALLOC_OPEN_DATETIME], 
		T.[ALLOC_CLOSE_DATETIME], T.[IS_CLOSED], T.[EXCEPTION] FROM @FUNCTION_ALLOC_GANTT T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_FOUR_DIGITS_FALLBACK_MAPPING]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_FOUR_DIGITS_FALLBACK_MAPPING]
	@FOUR_DIGITS_FALLBACK_MAPPING FOUR_DIGITS_FALLBACK_MAPPING_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	DELETE FROM FOUR_DIGITS_FALLBACK_MAPPING
	
	INSERT INTO FOUR_DIGITS_FALLBACK_MAPPING([ID], [DESTINATION], [DESCRIPTION], [SYS_ACTION])
	SELECT T.[ID], T.[DESTINATION], T.[DESCRIPTION], T.[SYS_ACTION] FROM @FOUR_DIGITS_FALLBACK_MAPPING T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_FLIGHT_PLAN_SORTING]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_FLIGHT_PLAN_SORTING]
	@FLIGHT_PLAN_SORTING FLIGHT_PLAN_SORTING_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	INSERT INTO FLIGHT_PLAN_SORTING([TIME_STAMP], [DATA_ID], [AIRLINE], [FLIGHT_NUMBER], 
		[FLIGHT_NUMBER_SUFFIX], [HANDLER], [SDO], [STO], [EDO], [ETO], [ADO], [ATO], [IDO], [ITO], 
		[BLOCK_OFF_TIME], [FINAL_DEST], [DEST1], [DEST2], [DEST3], [DEST4], [DEST5], [CANCELLED], 
		[AIRCRAFT_TYPE], [HANDLER_SPECIFIC_DESC], [AIRCRAFT_VERSION], [TERMINAL], [CHECKIN_AREA], 
		[CHECKIN_STATUS], [PUBLIC_REMARK_CODE], [PIER], [GATE], [PARKING_STAND], [NATURE], [SORTING_DEST1], 
		[SORTING_DEST2], [GENERAL_PURPOSE], [FI_EXCEPTION], [MASTER_AIRLINE], [MASTER_FLIGHT_NUMBER], 
		[MASTER_FLIGHT_NUMBER_SUFFIX], [MASTER_SDO], [BOOKED_PAX], [HBS_LEVEL_REQUIRED], [WEEKDAY], [HOUR], 
		[HIGH_RISK], [ALLOC_OPEN_TIME], [ALLOC_CLOSE_TIME], [CREATED_BY], [IS_ALLOCATED], [CUSTOMS_REQUIRED], [FLIGHT_TYPE])
	SELECT T.[TIME_STAMP], T.[DATA_ID], T.[AIRLINE], T.[FLIGHT_NUMBER], T.[FLIGHT_NUMBER_SUFFIX], 
		T.[HANDLER], T.[SDO], T.[STO], T.[EDO], T.[ETO], T.[ADO], T.[ATO], T.[IDO], T.[ITO], 
		T.[BLOCK_OFF_TIME], T.[FINAL_DEST], T.[DEST1], T.[DEST2], T.[DEST3], T.[DEST4], T.[DEST5], 
		T.[CANCELLED], T.[AIRCRAFT_TYPE], T.[HANDLER_SPECIFIC_DESC], T.[AIRCRAFT_VERSION], T.[TERMINAL], 
		T.[CHECKIN_AREA], T.[CHECKIN_STATUS], T.[PUBLIC_REMARK_CODE], T.[PIER], T.[GATE], T.[PARKING_STAND], 
		T.[NATURE], T.[SORTING_DEST1], T.[SORTING_DEST2], T.[GENERAL_PURPOSE], T.[FI_EXCEPTION], 
		T.[MASTER_AIRLINE], T.[MASTER_FLIGHT_NUMBER], T.[MASTER_FLIGHT_NUMBER_SUFFIX], T.[MASTER_SDO], 
		T.[BOOKED_PAX], T.[HBS_LEVEL_REQUIRED], T.[WEEKDAY], T.[HOUR], T.[HIGH_RISK], T.[ALLOC_OPEN_TIME], 
		T.[ALLOC_CLOSE_TIME], T.[CREATED_BY], T.[IS_ALLOCATED], T.[CUSTOMS_REQUIRED], T.[FLIGHT_TYPE]
	FROM @FLIGHT_PLAN_SORTING T LEFT JOIN FLIGHT_PLAN_SORTING A ON 
		T.[AIRLINE] = A.[AIRLINE] AND T.[FLIGHT_NUMBER] = A.[FLIGHT_NUMBER] AND T.[SDO] = A.[SDO]
	WHERE A.[AIRLINE] IS NULL
	
	UPDATE FLIGHT_PLAN_SORTING SET [TIME_STAMP]=T.[TIME_STAMP], [DATA_ID]=T.[DATA_ID], 
		[AIRLINE]=T.[AIRLINE], [FLIGHT_NUMBER]=T.[FLIGHT_NUMBER], 
		[FLIGHT_NUMBER_SUFFIX]=T.[FLIGHT_NUMBER_SUFFIX], [HANDLER]=T.[HANDLER], [SDO]=T.[SDO], [STO]=T.[STO], 
		[EDO]=T.[EDO], [ETO]=T.[ETO], [ADO]=T.[ADO], [ATO]=T.[ATO], [IDO]=T.[IDO], [ITO]=T.[ITO], 
		[BLOCK_OFF_TIME]=T.[BLOCK_OFF_TIME], [FINAL_DEST]=T.[FINAL_DEST], [DEST1]=T.[DEST1], [DEST2]=T.[DEST2], 
		[DEST3]=T.[DEST3], [DEST4]=T.[DEST4], [DEST5]=T.[DEST5], [CANCELLED]=T.[CANCELLED], 
		[AIRCRAFT_TYPE]=T.[AIRCRAFT_TYPE], [HANDLER_SPECIFIC_DESC]=T.[HANDLER_SPECIFIC_DESC], 
		[AIRCRAFT_VERSION]=T.[AIRCRAFT_VERSION], [TERMINAL]=T.[TERMINAL], [CHECKIN_AREA]=T.[CHECKIN_AREA], 
		[CHECKIN_STATUS]=T.[CHECKIN_STATUS], [PUBLIC_REMARK_CODE]=T.[PUBLIC_REMARK_CODE], [PIER]=T.[PIER], 
		[GATE]=T.[GATE], [PARKING_STAND]=T.[PARKING_STAND], [NATURE]=T.[NATURE], 
		[SORTING_DEST1]=T.[SORTING_DEST1], [SORTING_DEST2]=T.[SORTING_DEST2], 
		[GENERAL_PURPOSE]=T.[GENERAL_PURPOSE], [FI_EXCEPTION]=T.[FI_EXCEPTION], 
		[MASTER_AIRLINE]=T.[MASTER_AIRLINE], [MASTER_FLIGHT_NUMBER]=T.[MASTER_FLIGHT_NUMBER], 
		[MASTER_FLIGHT_NUMBER_SUFFIX]=T.[MASTER_FLIGHT_NUMBER_SUFFIX], [MASTER_SDO]=T.[MASTER_SDO], 
		[BOOKED_PAX]=T.[BOOKED_PAX], [HBS_LEVEL_REQUIRED]=T.[HBS_LEVEL_REQUIRED], [WEEKDAY]=T.[WEEKDAY], 
		[HOUR]=T.[HOUR], [HIGH_RISK]=T.[HIGH_RISK], [ALLOC_OPEN_TIME]=T.[ALLOC_OPEN_TIME], 
		[ALLOC_CLOSE_TIME]=T.[ALLOC_CLOSE_TIME], [CREATED_BY]=T.[CREATED_BY], [IS_ALLOCATED]=T.[IS_ALLOCATED],
		[CUSTOMS_REQUIRED] = T.[CUSTOMS_REQUIRED], [FLIGHT_TYPE] = T.[FLIGHT_TYPE]
	FROM (SELECT T.[TIME_STAMP], T.[DATA_ID], T.[AIRLINE], T.[FLIGHT_NUMBER], T.[FLIGHT_NUMBER_SUFFIX], 
		T.[HANDLER], T.[SDO], T.[STO], T.[EDO], T.[ETO], T.[ADO], T.[ATO], T.[IDO], T.[ITO], 
		T.[BLOCK_OFF_TIME], T.[FINAL_DEST], T.[DEST1], T.[DEST2], T.[DEST3], T.[DEST4], T.[DEST5], 
		T.[CANCELLED], T.[AIRCRAFT_TYPE], T.[HANDLER_SPECIFIC_DESC], T.[AIRCRAFT_VERSION], T.[TERMINAL], 
		T.[CHECKIN_AREA], T.[CHECKIN_STATUS], T.[PUBLIC_REMARK_CODE], T.[PIER], T.[GATE], T.[PARKING_STAND], 
		T.[NATURE], T.[SORTING_DEST1], T.[SORTING_DEST2], T.[GENERAL_PURPOSE], T.[FI_EXCEPTION], 
		T.[MASTER_AIRLINE], T.[MASTER_FLIGHT_NUMBER], T.[MASTER_FLIGHT_NUMBER_SUFFIX], T.[MASTER_SDO], 
		T.[BOOKED_PAX], T.[HBS_LEVEL_REQUIRED], T.[WEEKDAY], T.[HOUR], T.[HIGH_RISK], T.[ALLOC_OPEN_TIME], 
		T.[ALLOC_CLOSE_TIME], T.[CREATED_BY], T.[IS_ALLOCATED], T.[CUSTOMS_REQUIRED], T.[FLIGHT_TYPE]
	FROM @FLIGHT_PLAN_SORTING T LEFT JOIN FLIGHT_PLAN_SORTING A ON 
		T.[AIRLINE] = A.[AIRLINE] AND T.[FLIGHT_NUMBER] = A.[FLIGHT_NUMBER] AND T.[SDO] = A.[SDO]
	WHERE A.[AIRLINE] IS NOT NULL) T 
	WHERE FLIGHT_PLAN_SORTING.[AIRLINE] = T.[AIRLINE] AND FLIGHT_PLAN_SORTING.[FLIGHT_NUMBER] = T.[FLIGHT_NUMBER] 
		AND FLIGHT_PLAN_SORTING.[SDO] = T.[SDO]
		
	DELETE FROM FLIGHT_PLAN_SORTING WHERE TIME_STAMP < DATEADD(HH,-12, GETDATE())
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_FLIGHT_PLAN_ALLOC]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_FLIGHT_PLAN_ALLOC]
	@FLIGHT_PLAN_ALLOC FLIGHT_PLAN_ALLOC_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	INSERT INTO FLIGHT_PLAN_ALLOC([ID], [AIRLINE], [FLIGHT_NUMBER], [SDO], [STO], [RESOURCE], [WEEKDAY], 
		[EDO], [ETO], [ADO], [ATO], [IDO], [ITO], [TRAVEL_CLASS], [FLIGHT_DESTINATION], [BAG_TYPE], 
		[TRANSFER], [COMMENT_ID], [HIGH_RISK], [HBS_LEVEL_REQUIRED], [EARLY_OPEN_OFFSET], 
		[EARLY_OPEN_ENABLED], [ALLOC_OPEN_OFFSET], [ALLOC_OPEN_RELATED], [ALLOC_CLOSE_OFFSET], 
		[ALLOC_CLOSE_RELATED], [RUSH_DURATION], [SCHEME_TYPE], [CREATED_BY], [TIME_STAMP], [HOUR], 
		[IS_MANUAL_CLOSE], [IS_CLOSED], [IS_MISS_TEMPLATE_FLIGHT])
	SELECT T.[ID], T.[AIRLINE], T.[FLIGHT_NUMBER], T.[SDO], T.[STO], T.[RESOURCE], T.[WEEKDAY], T.[EDO], 
		T.[ETO], T.[ADO], T.[ATO], T.[IDO], T.[ITO], T.[TRAVEL_CLASS], T.[FLIGHT_DESTINATION], 
		T.[BAG_TYPE], T.[TRANSFER], T.[COMMENT_ID], T.[HIGH_RISK], T.[HBS_LEVEL_REQUIRED], 
		T.[EARLY_OPEN_OFFSET], T.[EARLY_OPEN_ENABLED], T.[ALLOC_OPEN_OFFSET], T.[ALLOC_OPEN_RELATED], 
		T.[ALLOC_CLOSE_OFFSET], T.[ALLOC_CLOSE_RELATED], T.[RUSH_DURATION], T.[SCHEME_TYPE], 
		T.[CREATED_BY], T.[TIME_STAMP], T.[HOUR], T.[IS_MANUAL_CLOSE], T.[IS_CLOSED], 
		T.[IS_MISS_TEMPLATE_FLIGHT] 
	FROM @FLIGHT_PLAN_ALLOC T LEFT JOIN FLIGHT_PLAN_ALLOC A ON 
		T.[ID] = A.[ID]
	WHERE A.[ID] IS NULL
	
	UPDATE FLIGHT_PLAN_ALLOC SET [AIRLINE]=T.[AIRLINE], [FLIGHT_NUMBER]=T.[FLIGHT_NUMBER], 
		[SDO]=T.[SDO], [STO]=T.[STO], [RESOURCE]=T.[RESOURCE], [WEEKDAY]=T.[WEEKDAY], [EDO]=T.[EDO], 
		[ETO]=T.[ETO], [ADO]=T.[ADO], [ATO]=T.[ATO], [IDO]=T.[IDO], [ITO]=T.[ITO], 
		[TRAVEL_CLASS]=T.[TRAVEL_CLASS], [FLIGHT_DESTINATION]=T.[FLIGHT_DESTINATION], 
		[BAG_TYPE]=T.[BAG_TYPE], [TRANSFER]=T.[TRANSFER], [COMMENT_ID]=T.[COMMENT_ID], 
		[HIGH_RISK]=T.[HIGH_RISK], [HBS_LEVEL_REQUIRED]=T.[HBS_LEVEL_REQUIRED], 
		[EARLY_OPEN_OFFSET]=T.[EARLY_OPEN_OFFSET], [EARLY_OPEN_ENABLED]=T.[EARLY_OPEN_ENABLED], 
		[ALLOC_OPEN_OFFSET]=T.[ALLOC_OPEN_OFFSET], [ALLOC_OPEN_RELATED]=T.[ALLOC_OPEN_RELATED], 
		[ALLOC_CLOSE_OFFSET]=T.[ALLOC_CLOSE_OFFSET], [ALLOC_CLOSE_RELATED]=T.[ALLOC_CLOSE_RELATED], 
		[RUSH_DURATION]=T.[RUSH_DURATION], [SCHEME_TYPE]=T.[SCHEME_TYPE], [CREATED_BY]=T.[CREATED_BY], 
		[TIME_STAMP]=T.[TIME_STAMP], [HOUR]=T.[HOUR], [IS_MANUAL_CLOSE]=T.[IS_MANUAL_CLOSE], 
		[IS_CLOSED]=T.[IS_CLOSED], [IS_MISS_TEMPLATE_FLIGHT]=T.[IS_MISS_TEMPLATE_FLIGHT] 
	FROM (SELECT T.[ID], T.[AIRLINE], T.[FLIGHT_NUMBER], T.[SDO], T.[STO], T.[RESOURCE], T.[WEEKDAY], T.[EDO], 
		T.[ETO], T.[ADO], T.[ATO], T.[IDO], T.[ITO], T.[TRAVEL_CLASS], T.[FLIGHT_DESTINATION], 
		T.[BAG_TYPE], T.[TRANSFER], T.[COMMENT_ID], T.[HIGH_RISK], T.[HBS_LEVEL_REQUIRED], 
		T.[EARLY_OPEN_OFFSET], T.[EARLY_OPEN_ENABLED], T.[ALLOC_OPEN_OFFSET], T.[ALLOC_OPEN_RELATED], 
		T.[ALLOC_CLOSE_OFFSET], T.[ALLOC_CLOSE_RELATED], T.[RUSH_DURATION], T.[SCHEME_TYPE], 
		T.[CREATED_BY], T.[TIME_STAMP], T.[HOUR], T.[IS_MANUAL_CLOSE], T.[IS_CLOSED], 
		T.[IS_MISS_TEMPLATE_FLIGHT] 
	FROM @FLIGHT_PLAN_ALLOC T LEFT JOIN FLIGHT_PLAN_ALLOC A ON 
		T.[ID] = A.[ID]
	WHERE A.[ID] IS NOT NULL) T WHERE 
	FLIGHT_PLAN_ALLOC.[ID] = T.[ID]
	
	DELETE FROM FLIGHT_PLAN_ALLOC WHERE TIME_STAMP < DATEADD(HH,-12, GETDATE())
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_FALLBACK_TAG_INFO]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_FALLBACK_TAG_INFO]
	@FALLBACK_TAG_INFO FALLBACK_TAG_INFO_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	DELETE FROM FALLBACK_TAG_INFO
	
	INSERT INTO FALLBACK_TAG_INFO(T.[ID], T.[TIME_STAMP], T.[NO_OF_FALLBACK], T.[FALLBACK_NO_1], T.[DESTINATION_1A], T.[DESTINATION_1B], 
		T.[FLIGHT_TYPE_1], T.[FALLBACK_NO_2], T.[DESTINATION_2A], T.[DESTINATION_2B], T.[FLIGHT_TYPE_2], T.[FALLBACK_NO_3], 
		T.[DESTINATION_3A], T.[DESTINATION_3B], T.[FLIGHT_TYPE_3], T.[FALLBACK_NO_4], T.[DESTINATION_4A], T.[DESTINATION_4B], 
		T.[FLIGHT_TYPE_4], T.[FALLBACK_NO_5], T.[DESTINATION_5A], T.[DESTINATION_5B], T.[FLIGHT_TYPE_5], T.[FALLBACK_NO_6], 
		T.[DESTINATION_6A], T.[DESTINATION_6B], T.[FLIGHT_TYPE_6], T.[FALLBACK_NO_7], T.[DESTINATION_7A], T.[DESTINATION_7B], 
		T.[FLIGHT_TYPE_7], T.[FALLBACK_NO_8], T.[DESTINATION_8A], T.[DESTINATION_8B], T.[FLIGHT_TYPE_8], T.[FALLBACK_NO_9], 
		T.[DESTINATION_9A], T.[DESTINATION_9B], T.[FLIGHT_TYPE_9], T.[FALLBACK_NO_10], T.[DESTINATION_10A], T.[DESTINATION_10B], 
		T.[FLIGHT_TYPE_10])
	SELECT T.[ID], T.[TIME_STAMP], T.[NO_OF_FALLBACK], T.[FALLBACK_NO_1], T.[DESTINATION_1A], T.[DESTINATION_1B], 
		T.[FLIGHT_TYPE_1], T.[FALLBACK_NO_2], T.[DESTINATION_2A], T.[DESTINATION_2B], T.[FLIGHT_TYPE_2], T.[FALLBACK_NO_3], 
		T.[DESTINATION_3A], T.[DESTINATION_3B], T.[FLIGHT_TYPE_3], T.[FALLBACK_NO_4], T.[DESTINATION_4A], T.[DESTINATION_4B], 
		T.[FLIGHT_TYPE_4], T.[FALLBACK_NO_5], T.[DESTINATION_5A], T.[DESTINATION_5B], T.[FLIGHT_TYPE_5], T.[FALLBACK_NO_6], 
		T.[DESTINATION_6A], T.[DESTINATION_6B], T.[FLIGHT_TYPE_6], T.[FALLBACK_NO_7], T.[DESTINATION_7A], T.[DESTINATION_7B], 
		T.[FLIGHT_TYPE_7], T.[FALLBACK_NO_8], T.[DESTINATION_8A], T.[DESTINATION_8B], T.[FLIGHT_TYPE_8], T.[FALLBACK_NO_9], 
		T.[DESTINATION_9A], T.[DESTINATION_9B], T.[FLIGHT_TYPE_9], T.[FALLBACK_NO_10], T.[DESTINATION_10A], T.[DESTINATION_10B], 
		T.[FLIGHT_TYPE_10]
	FROM @FALLBACK_TAG_INFO T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_FALLBACK_MAPPING]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_FALLBACK_MAPPING]
	@FALLBACK_MAPPING FALLBACK_MAPPING_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	DELETE FROM FALLBACK_MAPPING
	
	INSERT INTO FALLBACK_MAPPING([ID], [DESTINATION], [DESCRIPTION], [SYS_ACTION])
	SELECT T.[ID], T.[DESTINATION], T.[DESCRIPTION], T.[SYS_ACTION] FROM @FALLBACK_MAPPING T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_DESTINATIONS]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_DESTINATIONS]
	@DESTINATIONS DESTINATIONS_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	DELETE FROM DESTINATIONS
	
	INSERT INTO DESTINATIONS([DESTINATION], [SUBSYSTEM], [DESCRIPTION], [IS_AVAILABLE])
	SELECT T.[DESTINATION], T.[SUBSYSTEM], T.[DESCRIPTION], T.[IS_AVAILABLE] FROM @DESTINATIONS T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_CHUTE_MAPPING]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_CHUTE_MAPPING]
	@CHUTE_MAPPING CHUTE_MAPPING_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	DELETE FROM CHUTE_MAPPING
	
	INSERT INTO CHUTE_MAPPING([CHUTE], [TTS_ID], [SORTER], [DESTINATION], [IS_AVAILABLE])
	SELECT T.[CHUTE], T.[TTS_ID], T.[SORTER], T.[DESTINATION], T.[IS_AVAILABLE] FROM @CHUTE_MAPPING T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_BAG_SORTING]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_BAG_SORTING]
	@BAG_SORTING BAG_SORTING_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	INSERT INTO BAG_SORTING([ID], [DATA_ID], [TIME_STAMP], [DICTIONARY_VERSION], [SOURCE], [AIRPORT_CODE], 
		[LICENSE_PLATE], [AIRLINE], [FLIGHT_NUMBER], [SDO], [DESTINATION], [TRAVEL_CLASS], 
		[INBOUND_AIRLINE], [INBOUND_FLIGHT_NUMBER], [INBOUND_SDO], [INBOUND_AIRPORT_CODE], 
		[INBOUND_TRAVEL_CLASS], [ONWARD_AIRLINE1], [ONWARD_FLIGHT_NUMBER1], [ONWARD_SDO1], 
		[ONWARD_AIRPORT_CODE1], [ONWARD_TRAVEL_CLASS1], [ONWARD_AIRLINE2], [ONWARD_FLIGHT_NUMBER2], 
		[ONWARD_SDO2], [ONWARD_AIRPORT_CODE2], [ONWARD_TRAVEL_CLASS2], [ONWARD_AIRLINE3], 
		[ONWARD_FLIGHT_NUMBER3], [ONWARD_SDO3], [ONWARD_AIRPORT_CODE3], [ONWARD_TRAVEL_CLASS3], 
		[ONWARD_AIRLINE4], [ONWARD_FLIGHT_NUMBER4], [ONWARD_SDO4], [ONWARD_AIRPORT_CODE4], 
		[ONWARD_TRAVEL_CLASS4], [ONWARD_AIRLINE5], [ONWARD_FLIGHT_NUMBER5], [ONWARD_SDO5], 
		[ONWARD_AIRPORT_CODE5], [ONWARD_TRAVEL_CLASS5], [NO_PASSENGER_SAME_SURNAME], [SURNAME], 
		[GIVEN_NAME], [OTHERS_NAME], [BAG_EXCEPTION], [CHECK_IN_COUNTER], [CHECK_IN_COUNTER_DESCRIPTION], 
		[CHECK_IN_TIME_STAMP], [CHECK_IN_CARRIAGE_MEDIUM], [CHECK_IN_TRANSPORT_ID], [TAG_PRINTER_ID], 
		[RECONCILIATION_LOAD_AUTHORITY], [RECONCILIATION_SEAT_NUMBER], [RECONCILIATION_PASSENGER_STATUS], 
		[RECONCILIATION_SEQUENCE_NUMBER], [RECONCILIATION_SECURITY_NUMBER], 
		[RECONCILIATION_PASSENGER_PROFILES_STATUS], [RECONCILIATION_TRANSPORT_AUTHORITY], 
		[RECONCILIATION_BAG_TAG_STATUS], [HANDLING_TERMINAL], [HANDLING_BAR], [HANDLING_GATE], 
		[WEIGHT_INDICATOR], [WEIGHT_CHECKED_BAG_NUMBER], [CHECKED_WEIGHT], [UNCHECKED_WEIGHT], 
		[WEIGHT_UNIT], [WEIGHT_LENGTH], [WEIGHT_WIDTH], [WEIGHT_HEIGHT], [WEIGHT_BAG_TYPE_CODE], 
		[GROUND_TRANSPORT_EARLIEST_DELIVERY], [GROUND_TRANSPORT_LATEST_DELIVERY], 
		[GROUND_TRANSPORT_DESCRIPTION], [FREQUENT_TRAVELLER_ID_NUMBER], [FREQUENT_TRAVELLER_TIER_ID], 
		[CORPORATE_NAME], [AUTOMATED_PNR_ADDRESS], [MESSAGE_PRINTER_ID], [INTERNAL_AIRLINE_DATA], 
		[SECURITY_SCREENING_INSTRUCTION], [SECURITY_SCREENING_RESULT], [SECURITY_SCREENING_RESULT_REASON], 
		[SECURITY_SCREENING_RESULT_METHOD], [SECURITY_SCREENING_AUTOGRAPH], [SECURITY_SCREENING_FREE_TEXT], 
		[HIGH_RISK], [HBS_LEVEL_REQUIRED], [CREATED_BY])
	SELECT T.[ID], T.[DATA_ID], T.[TIME_STAMP], T.[DICTIONARY_VERSION], T.[SOURCE], T.[AIRPORT_CODE], 
		T.[LICENSE_PLATE], T.[AIRLINE], T.[FLIGHT_NUMBER], T.[SDO], T.[DESTINATION], T.[TRAVEL_CLASS], 
		T.[INBOUND_AIRLINE], T.[INBOUND_FLIGHT_NUMBER], T.[INBOUND_SDO], T.[INBOUND_AIRPORT_CODE], 
		T.[INBOUND_TRAVEL_CLASS], T.[ONWARD_AIRLINE1], T.[ONWARD_FLIGHT_NUMBER1], T.[ONWARD_SDO1], 
		T.[ONWARD_AIRPORT_CODE1], T.[ONWARD_TRAVEL_CLASS1], T.[ONWARD_AIRLINE2], T.[ONWARD_FLIGHT_NUMBER2], 
		T.[ONWARD_SDO2], T.[ONWARD_AIRPORT_CODE2], T.[ONWARD_TRAVEL_CLASS2], T.[ONWARD_AIRLINE3], 
		T.[ONWARD_FLIGHT_NUMBER3], T.[ONWARD_SDO3], T.[ONWARD_AIRPORT_CODE3], T.[ONWARD_TRAVEL_CLASS3], 
		T.[ONWARD_AIRLINE4], T.[ONWARD_FLIGHT_NUMBER4], T.[ONWARD_SDO4], T.[ONWARD_AIRPORT_CODE4], 
		T.[ONWARD_TRAVEL_CLASS4], T.[ONWARD_AIRLINE5], T.[ONWARD_FLIGHT_NUMBER5], T.[ONWARD_SDO5], 
		T.[ONWARD_AIRPORT_CODE5], T.[ONWARD_TRAVEL_CLASS5], T.[NO_PASSENGER_SAME_SURNAME], T.[SURNAME], 
		T.[GIVEN_NAME], T.[OTHERS_NAME], T.[BAG_EXCEPTION], T.[CHECK_IN_COUNTER], 
		T.[CHECK_IN_COUNTER_DESCRIPTION], T.[CHECK_IN_TIME_STAMP], T.[CHECK_IN_CARRIAGE_MEDIUM], 
		T.[CHECK_IN_TRANSPORT_ID], T.[TAG_PRINTER_ID], T.[RECONCILIATION_LOAD_AUTHORITY], 
		T.[RECONCILIATION_SEAT_NUMBER], T.[RECONCILIATION_PASSENGER_STATUS], 
		T.[RECONCILIATION_SEQUENCE_NUMBER], T.[RECONCILIATION_SECURITY_NUMBER], 
		T.[RECONCILIATION_PASSENGER_PROFILES_STATUS], T.[RECONCILIATION_TRANSPORT_AUTHORITY], 
		T.[RECONCILIATION_BAG_TAG_STATUS], T.[HANDLING_TERMINAL], T.[HANDLING_BAR], T.[HANDLING_GATE], 
		T.[WEIGHT_INDICATOR], T.[WEIGHT_CHECKED_BAG_NUMBER], T.[CHECKED_WEIGHT], T.[UNCHECKED_WEIGHT], 
		T.[WEIGHT_UNIT], T.[WEIGHT_LENGTH], T.[WEIGHT_WIDTH], T.[WEIGHT_HEIGHT], T.[WEIGHT_BAG_TYPE_CODE], 
		T.[GROUND_TRANSPORT_EARLIEST_DELIVERY], T.[GROUND_TRANSPORT_LATEST_DELIVERY], 
		T.[GROUND_TRANSPORT_DESCRIPTION], T.[FREQUENT_TRAVELLER_ID_NUMBER], T.[FREQUENT_TRAVELLER_TIER_ID], 
		T.[CORPORATE_NAME], T.[AUTOMATED_PNR_ADDRESS], T.[MESSAGE_PRINTER_ID], T.[INTERNAL_AIRLINE_DATA], 
		T.[SECURITY_SCREENING_INSTRUCTION], T.[SECURITY_SCREENING_RESULT], 
		T.[SECURITY_SCREENING_RESULT_REASON], T.[SECURITY_SCREENING_RESULT_METHOD], 
		T.[SECURITY_SCREENING_AUTOGRAPH], T.[SECURITY_SCREENING_FREE_TEXT], T.[HIGH_RISK], 
		T.[HBS_LEVEL_REQUIRED], T.[CREATED_BY] 
	FROM @BAG_SORTING T LEFT JOIN BAG_SORTING A ON T.[ID] = A.[ID]
	WHERE A.[ID] IS NULL
	
	UPDATE BAG_SORTING SET [ID]=T.[ID], [DATA_ID]=T.[DATA_ID], [TIME_STAMP]=T.[TIME_STAMP], 
		[DICTIONARY_VERSION]=T.[DICTIONARY_VERSION], [SOURCE]=T.[SOURCE], [AIRPORT_CODE]=T.[AIRPORT_CODE], 
		[LICENSE_PLATE]=T.[LICENSE_PLATE], [AIRLINE]=T.[AIRLINE], [FLIGHT_NUMBER]=T.[FLIGHT_NUMBER], 
		[SDO]=T.[SDO], [DESTINATION]=T.[DESTINATION], [TRAVEL_CLASS]=T.[TRAVEL_CLASS], 
		[INBOUND_AIRLINE]=T.[INBOUND_AIRLINE], [INBOUND_FLIGHT_NUMBER]=T.[INBOUND_FLIGHT_NUMBER], 
		[INBOUND_SDO]=T.[INBOUND_SDO], [INBOUND_AIRPORT_CODE]=T.[INBOUND_AIRPORT_CODE], 
		[INBOUND_TRAVEL_CLASS]=T.[INBOUND_TRAVEL_CLASS], [ONWARD_AIRLINE1]=T.[ONWARD_AIRLINE1], 
		[ONWARD_FLIGHT_NUMBER1]=T.[ONWARD_FLIGHT_NUMBER1], [ONWARD_SDO1]=T.[ONWARD_SDO1], 
		[ONWARD_AIRPORT_CODE1]=T.[ONWARD_AIRPORT_CODE1], [ONWARD_TRAVEL_CLASS1]=T.[ONWARD_TRAVEL_CLASS1], 
		[ONWARD_AIRLINE2]=T.[ONWARD_AIRLINE2], [ONWARD_FLIGHT_NUMBER2]=T.[ONWARD_FLIGHT_NUMBER2], 
		[ONWARD_SDO2]=T.[ONWARD_SDO2], [ONWARD_AIRPORT_CODE2]=T.[ONWARD_AIRPORT_CODE2], 
		[ONWARD_TRAVEL_CLASS2]=T.[ONWARD_TRAVEL_CLASS2], [ONWARD_AIRLINE3]=T.[ONWARD_AIRLINE3], 
		[ONWARD_FLIGHT_NUMBER3]=T.[ONWARD_FLIGHT_NUMBER3], [ONWARD_SDO3]=T.[ONWARD_SDO3], 
		[ONWARD_AIRPORT_CODE3]=T.[ONWARD_AIRPORT_CODE3], [ONWARD_TRAVEL_CLASS3]=T.[ONWARD_TRAVEL_CLASS3],
		[ONWARD_AIRLINE4]=T.[ONWARD_AIRLINE4], [ONWARD_FLIGHT_NUMBER4]=T.[ONWARD_FLIGHT_NUMBER4], 
		[ONWARD_SDO4]=T.[ONWARD_SDO4], [ONWARD_AIRPORT_CODE4]=T.[ONWARD_AIRPORT_CODE4], 
		[ONWARD_TRAVEL_CLASS4]=T.[ONWARD_TRAVEL_CLASS4], [ONWARD_AIRLINE5]=T.[ONWARD_AIRLINE5], 
		[ONWARD_FLIGHT_NUMBER5]=T.[ONWARD_FLIGHT_NUMBER5], [ONWARD_SDO5]=T.[ONWARD_SDO5], 
		[ONWARD_AIRPORT_CODE5]=T.[ONWARD_AIRPORT_CODE5], [ONWARD_TRAVEL_CLASS5]=T.[ONWARD_TRAVEL_CLASS5], 
		[NO_PASSENGER_SAME_SURNAME]=T.[NO_PASSENGER_SAME_SURNAME], [SURNAME]=T.[SURNAME], 
		[GIVEN_NAME]=T.[GIVEN_NAME], [OTHERS_NAME]=T.[OTHERS_NAME], [BAG_EXCEPTION]=T.[BAG_EXCEPTION], 
		[CHECK_IN_COUNTER]=T.[CHECK_IN_COUNTER], 
		[CHECK_IN_COUNTER_DESCRIPTION]=T.[CHECK_IN_COUNTER_DESCRIPTION], 
		[CHECK_IN_TIME_STAMP]=T.[CHECK_IN_TIME_STAMP], 
		[CHECK_IN_CARRIAGE_MEDIUM]=T.[CHECK_IN_CARRIAGE_MEDIUM], 
		[CHECK_IN_TRANSPORT_ID]=T.[CHECK_IN_TRANSPORT_ID], [TAG_PRINTER_ID]=T.[TAG_PRINTER_ID], 
		[RECONCILIATION_LOAD_AUTHORITY]=T.[RECONCILIATION_LOAD_AUTHORITY], 
		[RECONCILIATION_SEAT_NUMBER]=T.[RECONCILIATION_SEAT_NUMBER], 
		[RECONCILIATION_PASSENGER_STATUS]=T.[RECONCILIATION_PASSENGER_STATUS], 
		[RECONCILIATION_SEQUENCE_NUMBER]=T.[RECONCILIATION_SEQUENCE_NUMBER], 
		[RECONCILIATION_SECURITY_NUMBER]=T.[RECONCILIATION_SECURITY_NUMBER], 
		[RECONCILIATION_PASSENGER_PROFILES_STATUS]=T.[RECONCILIATION_PASSENGER_PROFILES_STATUS], 
		[RECONCILIATION_TRANSPORT_AUTHORITY]=T.[RECONCILIATION_TRANSPORT_AUTHORITY], 
		[RECONCILIATION_BAG_TAG_STATUS]=T.[RECONCILIATION_BAG_TAG_STATUS], 
		[HANDLING_TERMINAL]=T.[HANDLING_TERMINAL], [HANDLING_BAR]=T.[HANDLING_BAR], 
		[HANDLING_GATE]=T.[HANDLING_GATE], [WEIGHT_INDICATOR]=T.[WEIGHT_INDICATOR], 
		[WEIGHT_CHECKED_BAG_NUMBER]=T.[WEIGHT_CHECKED_BAG_NUMBER], [CHECKED_WEIGHT]=T.[CHECKED_WEIGHT], 
		[UNCHECKED_WEIGHT]=T.[UNCHECKED_WEIGHT], [WEIGHT_UNIT]=T.[WEIGHT_UNIT], 
		[WEIGHT_LENGTH]=T.[WEIGHT_LENGTH], [WEIGHT_WIDTH]=T.[WEIGHT_WIDTH], 
		[WEIGHT_HEIGHT]=T.[WEIGHT_HEIGHT], [WEIGHT_BAG_TYPE_CODE]=T.[WEIGHT_BAG_TYPE_CODE], 
		[GROUND_TRANSPORT_EARLIEST_DELIVERY]=T.[GROUND_TRANSPORT_EARLIEST_DELIVERY], 
		[GROUND_TRANSPORT_LATEST_DELIVERY]=T.[GROUND_TRANSPORT_LATEST_DELIVERY], 
		[GROUND_TRANSPORT_DESCRIPTION]=T.[GROUND_TRANSPORT_DESCRIPTION], 
		[FREQUENT_TRAVELLER_ID_NUMBER]=T.[FREQUENT_TRAVELLER_ID_NUMBER], 
		[FREQUENT_TRAVELLER_TIER_ID]=T.[FREQUENT_TRAVELLER_TIER_ID], [CORPORATE_NAME]=T.[CORPORATE_NAME], 
		[AUTOMATED_PNR_ADDRESS]=T.[AUTOMATED_PNR_ADDRESS], [MESSAGE_PRINTER_ID]=T.[MESSAGE_PRINTER_ID], 
		[INTERNAL_AIRLINE_DATA]=T.[INTERNAL_AIRLINE_DATA], 
		[SECURITY_SCREENING_INSTRUCTION]=T.[SECURITY_SCREENING_INSTRUCTION], 
		[SECURITY_SCREENING_RESULT]=T.[SECURITY_SCREENING_RESULT], 
		[SECURITY_SCREENING_RESULT_REASON]=T.[SECURITY_SCREENING_RESULT_REASON], 
		[SECURITY_SCREENING_RESULT_METHOD]=T.[SECURITY_SCREENING_RESULT_METHOD], 
		[SECURITY_SCREENING_AUTOGRAPH]=T.[SECURITY_SCREENING_AUTOGRAPH], 
		[SECURITY_SCREENING_FREE_TEXT]=T.[SECURITY_SCREENING_FREE_TEXT], [HIGH_RISK]=T.[HIGH_RISK], 
		[HBS_LEVEL_REQUIRED]=T.[HBS_LEVEL_REQUIRED], [CREATED_BY]=T.[CREATED_BY] 
	FROM (SELECT T.[ID], T.[DATA_ID], T.[TIME_STAMP], T.[DICTIONARY_VERSION], T.[SOURCE], T.[AIRPORT_CODE], 
		T.[LICENSE_PLATE], T.[AIRLINE], T.[FLIGHT_NUMBER], T.[SDO], T.[DESTINATION], T.[TRAVEL_CLASS], 
		T.[INBOUND_AIRLINE], T.[INBOUND_FLIGHT_NUMBER], T.[INBOUND_SDO], T.[INBOUND_AIRPORT_CODE], 
		T.[INBOUND_TRAVEL_CLASS], T.[ONWARD_AIRLINE1], T.[ONWARD_FLIGHT_NUMBER1], T.[ONWARD_SDO1], 
		T.[ONWARD_AIRPORT_CODE1], T.[ONWARD_TRAVEL_CLASS1], T.[ONWARD_AIRLINE2], T.[ONWARD_FLIGHT_NUMBER2], 
		T.[ONWARD_SDO2], T.[ONWARD_AIRPORT_CODE2], T.[ONWARD_TRAVEL_CLASS2], T.[ONWARD_AIRLINE3], 
		T.[ONWARD_FLIGHT_NUMBER3], T.[ONWARD_SDO3], T.[ONWARD_AIRPORT_CODE3], T.[ONWARD_TRAVEL_CLASS3], 
		T.[ONWARD_AIRLINE4], T.[ONWARD_FLIGHT_NUMBER4], T.[ONWARD_SDO4], T.[ONWARD_AIRPORT_CODE4], 
		T.[ONWARD_TRAVEL_CLASS4], T.[ONWARD_AIRLINE5], T.[ONWARD_FLIGHT_NUMBER5], T.[ONWARD_SDO5], 
		T.[ONWARD_AIRPORT_CODE5], T.[ONWARD_TRAVEL_CLASS5], T.[NO_PASSENGER_SAME_SURNAME], T.[SURNAME], 
		T.[GIVEN_NAME], T.[OTHERS_NAME], T.[BAG_EXCEPTION], T.[CHECK_IN_COUNTER], 
		T.[CHECK_IN_COUNTER_DESCRIPTION], T.[CHECK_IN_TIME_STAMP], T.[CHECK_IN_CARRIAGE_MEDIUM], 
		T.[CHECK_IN_TRANSPORT_ID], T.[TAG_PRINTER_ID], T.[RECONCILIATION_LOAD_AUTHORITY], 
		T.[RECONCILIATION_SEAT_NUMBER], T.[RECONCILIATION_PASSENGER_STATUS], 
		T.[RECONCILIATION_SEQUENCE_NUMBER], T.[RECONCILIATION_SECURITY_NUMBER], 
		T.[RECONCILIATION_PASSENGER_PROFILES_STATUS], T.[RECONCILIATION_TRANSPORT_AUTHORITY], 
		T.[RECONCILIATION_BAG_TAG_STATUS], T.[HANDLING_TERMINAL], T.[HANDLING_BAR], T.[HANDLING_GATE], 
		T.[WEIGHT_INDICATOR], T.[WEIGHT_CHECKED_BAG_NUMBER], T.[CHECKED_WEIGHT], T.[UNCHECKED_WEIGHT], 
		T.[WEIGHT_UNIT], T.[WEIGHT_LENGTH], T.[WEIGHT_WIDTH], T.[WEIGHT_HEIGHT], T.[WEIGHT_BAG_TYPE_CODE], 
		T.[GROUND_TRANSPORT_EARLIEST_DELIVERY], T.[GROUND_TRANSPORT_LATEST_DELIVERY], 
		T.[GROUND_TRANSPORT_DESCRIPTION], T.[FREQUENT_TRAVELLER_ID_NUMBER], T.[FREQUENT_TRAVELLER_TIER_ID], 
		T.[CORPORATE_NAME], T.[AUTOMATED_PNR_ADDRESS], T.[MESSAGE_PRINTER_ID], T.[INTERNAL_AIRLINE_DATA], 
		T.[SECURITY_SCREENING_INSTRUCTION], T.[SECURITY_SCREENING_RESULT], 
		T.[SECURITY_SCREENING_RESULT_REASON], T.[SECURITY_SCREENING_RESULT_METHOD], 
		T.[SECURITY_SCREENING_AUTOGRAPH], T.[SECURITY_SCREENING_FREE_TEXT], T.[HIGH_RISK], 
		T.[HBS_LEVEL_REQUIRED], T.[CREATED_BY] 
	FROM @BAG_SORTING T LEFT JOIN BAG_SORTING A ON T.[ID] = A.[ID]
	WHERE A.[ID] IS NOT NULL) T WHERE BAG_SORTING.[ID] = T.[ID]
	
	DELETE FROM BAG_SORTING WHERE TIME_STAMP < DATEADD(HH,-12, GETDATE())
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_BAG_INFO]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_BAG_INFO]
	@BAG_INFO BAG_INFO_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	INSERT INTO BAG_INFO([TIME_STAMP], [INDEX_NO], [GID], [LICENSE_PLATE], [LICENSE_PLATE1], 
		[LICENSE_PLATE2], [LICENSE_PLATE3], [MIN_SECURITY_LEVEL], [CURRENT_HBS_LEVEL], [HBS1_RESULT], 
		[HBS2_RESULT], [HBS3_RESULT], [HBS4_RESULT], [HBS5_RESULT], [CUSTOMS_RESULT], [SORT_REASON], 
		[DEST1], [DEST2], [DEST3], [RECYLE_COUNT], [LAST_LOCATION], [ENCODED_TYPE], [OOG], [EBS], 
		[DISCHARGED], [DISAPPEARED], [SORTED], [CREATED_BY])
	SELECT T.[TIME_STAMP], T.[INDEX_NO], T.[GID], T.[LICENSE_PLATE], T.[LICENSE_PLATE1], T.[LICENSE_PLATE2], 
		T.[LICENSE_PLATE3], T.[MIN_SECURITY_LEVEL], T.[CURRENT_HBS_LEVEL], T.[HBS1_RESULT], T.[HBS2_RESULT], 
		T.[HBS3_RESULT], T.[HBS4_RESULT], T.[HBS5_RESULT], T.[CUSTOMS_RESULT], T.[SORT_REASON], T.[DEST1], 
		T.[DEST2], T.[DEST3], T.[RECYLE_COUNT], T.[LAST_LOCATION], T.[ENCODED_TYPE], T.[OOG], T.[EBS], 
		T.[DISCHARGED], T.[DISAPPEARED], T.[SORTED], T.[CREATED_BY] 
	FROM @BAG_INFO T LEFT JOIN BAG_INFO A ON T.GID = A.GID
	WHERE A.GID IS NULL
	
	UPDATE BAG_INFO SET [TIME_STAMP]=T.[TIME_STAMP], [INDEX_NO]=T.[INDEX_NO], [GID]=T.[GID], 
		[LICENSE_PLATE]=T.[LICENSE_PLATE], [LICENSE_PLATE1]=T.[LICENSE_PLATE1], 
		[LICENSE_PLATE2]=T.[LICENSE_PLATE2], [LICENSE_PLATE3]=T.[LICENSE_PLATE3], 
		[MIN_SECURITY_LEVEL]=T.[MIN_SECURITY_LEVEL], [CURRENT_HBS_LEVEL]=T.[CURRENT_HBS_LEVEL], 
		[HBS1_RESULT]=T.[HBS1_RESULT], [HBS2_RESULT]=T.[HBS2_RESULT], [HBS3_RESULT]=T.[HBS3_RESULT], 
		[HBS4_RESULT]=T.[HBS4_RESULT], [HBS5_RESULT]=T.[HBS5_RESULT], [CUSTOMS_RESULT]=T.[CUSTOMS_RESULT], 
		[SORT_REASON]=T.[SORT_REASON], [DEST1]=T.[DEST1], [DEST2]=T.[DEST2], [DEST3]=T.[DEST3], 
		[RECYLE_COUNT]=T.[RECYLE_COUNT], [LAST_LOCATION]=T.[LAST_LOCATION], 
		[ENCODED_TYPE]=T.[ENCODED_TYPE], [OOG]=T.[OOG], [EBS]=T.[EBS], [DISCHARGED]=T.[DISCHARGED], 
		[DISAPPEARED]=T.[DISAPPEARED], [SORTED]=T.[SORTED], [CREATED_BY]=T.[CREATED_BY] 
	FROM (SELECT T.[TIME_STAMP], T.[INDEX_NO], T.[GID], T.[LICENSE_PLATE], T.[LICENSE_PLATE1], T.[LICENSE_PLATE2], 
		T.[LICENSE_PLATE3], T.[MIN_SECURITY_LEVEL], T.[CURRENT_HBS_LEVEL], T.[HBS1_RESULT], T.[HBS2_RESULT], 
		T.[HBS3_RESULT], T.[HBS4_RESULT], T.[HBS5_RESULT], T.[CUSTOMS_RESULT], T.[SORT_REASON], T.[DEST1], 
		T.[DEST2], T.[DEST3], T.[RECYLE_COUNT], T.[LAST_LOCATION], T.[ENCODED_TYPE], T.[OOG], T.[EBS], 
		T.[DISCHARGED], T.[DISAPPEARED], T.[SORTED], T.[CREATED_BY] 
	FROM @BAG_INFO T LEFT JOIN BAG_INFO A ON T.GID = A.GID
	WHERE A.GID IS NOT NULL) T WHERE BAG_INFO.GID = T.GID
	
	DELETE FROM BAG_INFO WHERE TIME_STAMP < DATEADD(HH,-12, GETDATE())
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_AIRPORTS]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_AIRPORTS]
	@AIRPORTS AIRPORTS_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON
	DELETE FROM AIRPORTS
	
	INSERT INTO AIRPORTS([CODE_IATA], [CODE_ICAO], [NAME], [COUNTRY], [CITY])
	SELECT T.[CODE_IATA], T.[CODE_ICAO], T.[NAME], T.[COUNTRY], T.[CITY] FROM @AIRPORTS T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_AIRLINES]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_AIRLINES]
	@AIRLINES AIRLINES_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	DELETE FROM AIRLINES
	
	INSERT INTO AIRLINES([CODE_IATA], [CODE_ICAO], [NAME], [TICKETING_CODE], [DESTINATION], [DESTINATION1], 
		[RUSH], [HANDLER])
	SELECT T.[CODE_IATA], T.[CODE_ICAO], T.[NAME], T.[TICKETING_CODE], T.[DESTINATION], T.[DESTINATION1], 
		T.[RUSH], T.[HANDLER] FROM @AIRLINES T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_AIRLINE_CODE_SHORTCUTS]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_AIRLINE_CODE_SHORTCUTS]
	@AIRLINE_CODE_SHORTCUTS AIRLINE_CODE_SHORTCUTS_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON
	DELETE FROM AIRLINE_CODE_SHORTCUTS
	
	INSERT INTO AIRLINE_CODE_SHORTCUTS([ID], [AIRLINE], [DESCRIPTION], [SYS_ACTION])
	SELECT T.[ID], T.[AIRLINE], T.[DESCRIPTION], T.[SYS_ACTION] FROM @AIRLINE_CODE_SHORTCUTS T 
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GETPESSENGERINFO]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 28-Jun-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GETPESSENGERINFO]
	@LicensePlate varchar(10),
	@TTS VARCHAR(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @HBS_MIN_LEVEL VARCHAR(10)
	
	SELECT @HBS_MIN_LEVEL = 
		CASE MIN_SECURITY_LEVEL WHEN '1' THEN 'Level 1'
			WHEN '2' THEN 'Level 2'
			WHEN '3' THEN 'Level 3'
			WHEN '4' THEN 'Level 4'
			WHEN '5' THEN 'Level 5' END
	FROM BAG_INFO WHERE LICENSE_PLATE = @LicensePlate

    	SELECT DISTINCT [Tag No.]= B.LICENSE_PLATE, 
		[Airline] = B.AIRLINE, [Flight No.] = B.FLIGHT_NUMBER, B.SDO, [Travel Class] = B.[TRAVEL_CLASS],
		COALESCE(SURNAME, '') + COALESCE(' ' + GIVEN_NAME, '') + COALESCE(' ' + OTHERS_NAME, '') AS
		[Passenger Name], Destination = ISNULL(C.[DESTINATION], ''), [Flight Destination] = ISNULL(F.FLIGHT_DESTINATION, ''),
		[Destination ID] = ISNULL(C.[TTS_ID], ''), [Sub System] = ISNULL(C.SORTER, ''), @HBS_MIN_LEVEL AS [Minimum Security Level]
	FROM BAG_SORTING B LEFT JOIN FLIGHT_PLAN_ALLOC F ON B.AIRLINE = F.AIRLINE 
		AND B.FLIGHT_NUMBER = F.FLIGHT_NUMBER AND B.SDO = F.SDO AND B.TRAVEL_CLASS = F.TRAVEL_CLASS
		LEFT JOIN CHUTE_MAPPING C ON F.[RESOURCE] = C.DESTINATION
		LEFT JOIN FLIGHT_PLAN_SORTING S ON B.AIRLINE = S.AIRLINE AND B.FLIGHT_NUMBER = S.FLIGHT_NUMBER
		AND B.SDO = S.SDO
	WHERE B.LICENSE_PLATE LIKE '%' + @LicensePlate
	AND (C.SORTER = @TTS OR ISNULL(C.SORTER, '') = '')
	AND (DATEDIFF(N, GETDATE(), DATEADD(N,dbo.SAC_MINUTECONVERTERSIGN(ALLOC_CLOSE_OFFSET), CAST(F.SDO + dbo.RPT_GETFORMATTEDSTO(F.STO) AS DATETIME))) >= 0
	OR ISNULL(B.SDO, '')='' OR F.SDO IS NULL)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_REMOVE_INHOUSE_BSM]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 16-Sep-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_REMOVE_INHOUSE_BSM]
	@INHOUSE_BSM VARCHAR(10),
	@SUBSYSTEM VARCHAR(10),
	@LOCATION VARCHAR(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	INSERT INTO MES_EVENT([TIME_STAMP], [GID], [LICENSE_PLATE], [SUBSYSTEM], 
		[LOCATION], [ACTION], [ACTION_DESC])
	VALUES(GETDATE(), @INHOUSE_BSM, @INHOUSE_BSM, @SUBSYSTEM, @LOCATION, 
		'DELINHOUSE', 'DEL INHOUSE TAG')

    DELETE FROM PSEUDO_BSM WHERE LICENSE_PLATE = @INHOUSE_BSM
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_TTS_MES_PRIORITY]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_TTS_MES_PRIORITY]
	@TTS_MES_PRIORITY TTS_MES_PRIORITY_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	DELETE FROM TTS_MES_PRIORITY
	
	INSERT INTO TTS_MES_PRIORITY([SYS_KEY], [VALUE])
	SELECT T.[SYS_KEY], T.[VALUE] FROM @TTS_MES_PRIORITY T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_SYS_CONFIG]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_SYS_CONFIG]
	@SYS_CONFIG SYS_CONFIG_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	DELETE FROM SYS_CONFIG
	
	INSERT INTO SYS_CONFIG([SYS_KEY], [SYS_VALUE], [DEFAULT_VALUE], [LAST_VALUE], [DESCRIPTION], 
		[VALUE_TOKEN], [SYS_ACTION], [GROUP_NAME], [ORDER_FLAG], [IS_ENABLED])
	SELECT T.[SYS_KEY], T.[SYS_VALUE], T.[DEFAULT_VALUE], T.[LAST_VALUE], T.[DESCRIPTION], 
		T.[VALUE_TOKEN], T.[SYS_ACTION], T.[GROUP_NAME], T.[ORDER_FLAG], T.[IS_ENABLED] 
	FROM @SYS_CONFIG T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_SPECIAL_SECURITY_TAG_DESTINATION_MAPPING]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_SPECIAL_SECURITY_TAG_DESTINATION_MAPPING]
	@SPECIAL_SECURITY_TAG_DESTINATION_MAPPING SPECIAL_SECURITY_TAG_DESTINATION_MAPPING_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	DELETE FROM SPECIAL_SECURITY_TAG_DESTINATION_MAPPING
	
	INSERT INTO SPECIAL_SECURITY_TAG_DESTINATION_MAPPING([ID], [DESTINATION], [DESCRIPTION], [SYS_ACTION])
	SELECT T.[ID], T.[DESTINATION], T.[DESCRIPTION], T.[SYS_ACTION] 
		FROM @SPECIAL_SECURITY_TAG_DESTINATION_MAPPING T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_SORTATION_REASON]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_SORTATION_REASON]
	@SORTATION_REASON SORTATION_REASON_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	DELETE FROM SORTATION_REASON
	
	INSERT INTO SORTATION_REASON([REASON], [DESCRIPTION])
	SELECT T.[REASON], T.[DESCRIPTION] FROM @SORTATION_REASON T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_ROUTING_TABLE]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_ROUTING_TABLE]
	@ROUTING_TABLE ROUTING_TABLE_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	DELETE FROM ROUTING_TABLE
	
	INSERT INTO ROUTING_TABLE([SUBSYSTEM], [LOCATION], [DESCRIPTION], [COST])
	SELECT T.[SUBSYSTEM], T.[LOCATION], T.[DESCRIPTION], T.[COST] FROM @ROUTING_TABLE T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_PSEUDO_BSM]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_PSEUDO_BSM]
	@PSEUDO_BSM PSEUDO_BSM_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON;
	
	INSERT INTO PSEUDO_BSM([TIME_STAMP], [LICENSE_PLATE], [AIRLINE], [FLIGHT_NUMBER], [SDO], [DESCRITION], 
		[TYPE], [CREATED_BY])
	SELECT T.[TIME_STAMP], T.[LICENSE_PLATE], T.[AIRLINE], T.[FLIGHT_NUMBER], T.[SDO], T.[DESCRITION], 
		T.[TYPE], T.[CREATED_BY] 
	FROM @PSEUDO_BSM T LEFT JOIN PSEUDO_BSM A ON 
		T.[LICENSE_PLATE] = A.[LICENSE_PLATE] AND T.[AIRLINE] = A.[AIRLINE] AND 
		T.[FLIGHT_NUMBER] = A.[FLIGHT_NUMBER] AND T.[SDO] = A.[SDO]
	WHERE A.[LICENSE_PLATE] IS NULL
 
	UPDATE PSEUDO_BSM SET [TIME_STAMP]=T.[TIME_STAMP], 
		[DESCRITION]=T.[DESCRITION], [TYPE]=T.[TYPE], [CREATED_BY]=T.[CREATED_BY] 
	FROM (SELECT T.[TIME_STAMP], T.[LICENSE_PLATE], T.[AIRLINE], T.[FLIGHT_NUMBER], T.[SDO], T.[DESCRITION], 
		T.[TYPE], T.[CREATED_BY] 
	FROM @PSEUDO_BSM T LEFT JOIN PSEUDO_BSM A ON 
		T.[LICENSE_PLATE] = A.[LICENSE_PLATE] AND T.[AIRLINE] = A.[AIRLINE] AND 
		T.[FLIGHT_NUMBER] = A.[FLIGHT_NUMBER] AND T.[SDO] = A.[SDO]
	WHERE A.[LICENSE_PLATE] IS NOT NULL) T WHERE 
		PSEUDO_BSM.[LICENSE_PLATE] = T.[LICENSE_PLATE] AND PSEUDO_BSM.[AIRLINE] = T.[AIRLINE] AND 
		PSEUDO_BSM.[FLIGHT_NUMBER] = T.[FLIGHT_NUMBER] AND PSEUDO_BSM.[SDO] = T.[SDO]
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_MES_EVENT]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_MES_EVENT] 
	@TIME_STAMP datetime, 
	@GID varchar(10), 
	@LICENSE_PLATE varchar(10), 
	@SUBSYSTEM varchar(10), 
	@LOCATION varchar(10), 
	@ACTION varchar(10), 
	@ACTION_DESC varchar(25), 
	@MES_STATION varchar(16)
AS
BEGIN
	INSERT INTO MES_EVENT([TIME_STAMP], [GID], [LICENSE_PLATE], [SUBSYSTEM], 
		[LOCATION], [ACTION], [ACTION_DESC], [MES_STATION])
	VALUES(@TIME_STAMP, @GID, @LICENSE_PLATE, @SUBSYSTEM, @LOCATION, 
		@ACTION, @ACTION_DESC, @MES_STATION)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_ITEM_REMOVED]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_ITEM_REMOVED]
	@TIME_STAMP datetime, 
	@GID varchar(10), 
	@LICENSE_PLATE varchar(10), 
	@SUBSYSTEM varchar(10), 
	@LOCATION varchar(20), 
	@MES_STATION varchar(16)
AS
BEGIN
 INSERT INTO ITEM_REMOVED(TIME_STAMP, GID, LICENSE_PLATE, SUBSYSTEM, LOCATION)
 VALUES(@TIME_STAMP, @GID, @LICENSE_PLATE, @SUBSYSTEM, 
		@LOCATION)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_ITEM_READY]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_ITEM_READY]
	@TIME_STAMP datetime, 
	@GID varchar(10), 
	@LICENSE_PLATE varchar(10), 
	@SUBSYSTEM varchar(10), 
	@LOCATION varchar(20),
	@INDEX_NO VARCHAR(10)
AS
BEGIN
	INSERT INTO ITEM_READY(TIME_STAMP, GID, LICENSE_PLATE, SUBSYSTEM, LOCATION, INDEX_NO)
	VALUES(@TIME_STAMP, @GID, @LICENSE_PLATE, @SUBSYSTEM, @LOCATION, @INDEX_NO)
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SAC_GETFUNCALLOCATION]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_SAC_GETFUNCALLOCATION]
	@Type [varchar](4),
	@Exception [varchar](10),
	@NeedException bit,
	@Sorter varchar(10),
	@Result [int] = 0 OUTPUT,
	@IsMES bit OUTPUT
	-- @Result = 0   - Function type is valid. Its allocated destination query result  
	--                 will be returned by this StoredProcedure too;
	-- @Result = -1  - Unknown Function type. No allocated destination query result is 
	--                 returned by this StoredProcedure.
AS 
BEGIN
	DECLARE @Group [varchar](5);

	SELECT @Group=[GROUP] FROM [FUNCTION_TYPES] WHERE [TYPE]=@Type;
	
	IF @Group IS NULL
	BEGIN
		SET @Result = -1;
		RETURN 0;		
	END

	IF @Group = 'GANTT'
	BEGIN
		-- Group 1 function type, its allocation data is in the table [FUNCTION_ALLOC_GANTT]
		-- Allocation of Group 1 function types has close time, hence, only allocated 
		-- destinations of un-closed allocation will be returned.
	IF @NeedException = 1
		BEGIN
			SELECT b.[TTS_ID] AS RESOURCE, b.[SORTER] AS SUBSYSTEM
				FROM [FUNCTION_ALLOC_GANTT] AS a 
					LEFT OUTER JOIN [CHUTE_MAPPING] AS b ON (a.[RESOURCE] = b.[DESTINATION])
				WHERE (a.[FUNCTION_TYPE] = @Type) AND (a.[IS_CLOSED] = 0) AND (a.EXCEPTION = @Exception)
					AND b.[SORTER] = @Sorter;
		END
		ELSE
		BEGIN
			SELECT b.[TTS_ID] AS RESOURCE, b.[SORTER] AS SUBSYSTEM
				FROM [FUNCTION_ALLOC_GANTT] AS a 
					LEFT OUTER JOIN [CHUTE_MAPPING] AS b ON (a.[RESOURCE] = b.[DESTINATION])
				WHERE (a.[FUNCTION_TYPE] = @Type) AND (a.[IS_CLOSED] = 0) AND b.[SORTER] = @Sorter;
		END
		
		SET @Result = 0;
	END
	ELSE
	BEGIN
		-- Group 2 function type, its allocation data is in the table [FUNCTION_ALLOC_LIST]
		-- Allocation of Group 2 function types is permanent setting. Hence, the allocation 
		-- of it will not be closed forever.
		IF @Group = 'LIST'
		BEGIN
			DECLARE @Resource varchar(20)
			
			SELECT @Resource=[RESOURCE] FROM [FUNCTION_ALLOC_LIST]
				WHERE [FUNCTION_TYPE] = @Type;
		
			IF @Resource = 'MES'
			BEGIN
				SET @IsMES = 1;	
						
				IF @Sorter = 'TTS01'
				BEGIN
					SELECT b.[TTS_ID] AS RESOURCE, b.[SORTER] AS SUBSYSTEM
						FROM [FUNCTION_ALLOC_LIST] AS a 
							LEFT OUTER JOIN [CHUTE_MAPPING] AS b ON (a.[RESOURCE] = b.[DESTINATION])
						WHERE  a.[FUNCTION_TYPE] = 'ME01' OR a.[FUNCTION_TYPE] = 'ME02';
				END
				ELSE
				BEGIN			
					SELECT b.[TTS_ID] AS RESOURCE, b.[SORTER] AS SUBSYSTEM
						FROM [FUNCTION_ALLOC_LIST] AS a 
							LEFT OUTER JOIN [CHUTE_MAPPING] AS b ON (a.[RESOURCE] = b.[DESTINATION])
						WHERE  a.[FUNCTION_TYPE] = 'ME03' OR a.[FUNCTION_TYPE] = 'ME04';
				END				
			END
			ELSE IF @Resource = 'CDS' OR @Resource = 'EBS'
			BEGIN
				SET @IsMES = 0;
				
				SELECT [TTS_ID] AS RESOURCE, [SORTER] AS SUBSYSTEM
					FROM [CHUTE_MAPPING]
					WHERE [SORTER] = @Sorter AND [DESTINATION] LIKE @Resource+'%';
			END							
			ELSE
			BEGIN
				SET @IsMES = 0;
							
				SELECT [TTS_ID] AS RESOURCE, [SORTER] AS SUBSYSTEM
					FROM [CHUTE_MAPPING]
					WHERE [SORTER] = @Sorter AND [DESTINATION] = @Resource;
			END				
			SET @Result = 0;
		END
	END
	RETURN 0;	
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SAC_GETFOURDIGITSSECURITYTAGDISCHARGE]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_SAC_GETFOURDIGITSSECURITYTAGDISCHARGE]
	@ID [varchar](2),
	@Subsystem [varchar] (10)
AS 
BEGIN
	SELECT 
		b.TTS_ID AS DESTINATION, b.[SORTER] AS SUBSYSTEM
	FROM 
		[SPECIAL_SECURITY_TAG_DESTINATION_MAPPING] AS a
		LEFT OUTER JOIN [CHUTE_MAPPING] AS b
		ON (a.[DESTINATION] = b.[DESTINATION])
	WHERE a.[ID] = @ID AND b.[SORTER] = @Subsystem
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SAC_GETFOURDIGITSFALLBACKTAGDISCHARGE]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_SAC_GETFOURDIGITSFALLBACKTAGDISCHARGE]
	@ID [varchar](4),
	@Subsystem [varchar] (10)
AS 
BEGIN
	SELECT 
		b.TTS_ID AS DESTINATION, b.[SORTER] AS SUBSYSTEM
	FROM 
		[FOUR_DIGITS_FALLBACK_MAPPING] AS a
		LEFT OUTER JOIN [CHUTE_MAPPING] AS b
		ON (a.[DESTINATION] = b.[DESTINATION])
	WHERE a.[ID] = @ID AND b.[SORTER] = @Subsystem
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SAC_GETFLIGHTALLOCOFLPFROMPSEUDOBSM]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_SAC_GETFLIGHTALLOCOFLPFROMPSEUDOBSM]
	@LicensePlate [varchar](10),
	@Sorter [varchar] (10),
	@Status [int] = 0 OUTPUT
	-- @Status = 1 (No BSM of specific LP# is in the [PSEUDO_BSM] table, it is No BSM (NBSM) item)
	-- @Status = 2 (More than one BSMs of specific LP# are in the [PSEUDO_BSM] table, it is multiple
	--              BSM (MBSM) item)
	-- @Status = 3 (Single BSM of specific LP# is in the [PSEUDO_BSM] table, but the flight included 
	--				in the BSM can not be found in the [FLIGHT_PLAN_SORTING] table, it is Unknown flight.
	--				[AIRLINE],[FLIGHT_NUMBER],[SDO] three fields will be returned caller
	--				via returned recordset.
	-- @Status = 4 (Flight is Slave filght, but its master flight info can not be found in the
	--				[FLIGHT_PLAN_SORTING] table, it is treated as Unknown flight.
	--				[AIRLINE],[FLIGHT_NUMBER],[SDO],[MASTER_AIRLINE],[MASTER_FLIGHT_NUMBER]
	--				five fields will be returned caller via returned recordset.
	-- @Status = 5 (Flight is Master flight and its flight info can be found in the 
	--              [FLIGHT_PLAN_SORTING] table. But it has no any allocation was created 
	--				(no allocation recoreds in the table [FLIGHT_PLAN_ALLOC]). It is treated 
	--              as No Allocation Flight.
	--				[AIRLINE],[FLIGHT_NUMBER],[SDO],[STO] four fields will be returned caller
	--				via returned recordset.
	-- @Status = 6 (Flight is Slave flight, its master flight is valid flight (flight 
	--				info can be found in the [FLIGHT_PLAN_SORTING] table). But it has 
	--				no any allocation was created (no allocation recoreds in the table 
	--				[FLIGHT_PLAN_ALLOC]). It is treated as No Allocation Flight.
	--				[AIRLINE],[FLIGHT_NUMBER],[SDO],[STO], [MASTER_AIRLINE],[MASTER_FLIGHT_NUMBER]
	--				six fields will be returned caller via returned recordset.
	-- @Status = 7 (Flight is Master flight. Its flight info can be found in the 
	--              [FLIGHT_PLAN_SORTING] table. And its allocation has been created 
	--				(has allocation recoreds in the table [FLIGHT_PLAN_ALLOC]). 
	--				[AIRLINE],[FLIGHT_NUMBER],[SDO],[STO],[EDO],[ETO],[IDO],[ITO],
	--              [ADO],[ATO],[ALLOC_OPEN_OFFSET],[ALLOC_OPEN_RELATED],[ERLY_OPEN_OFFSET],
	--              [ALLOC_CLOSE_OFFSET],[ALLOC_CLOSE_RELATED],[RUSH_DURATION],
	--              [IS_MANUAL_CLOSED],[IS_CLOSED],[TRAVEL_CLASS],[RESOURCE],[SUBSYSTEM],
	--				[BAG_TYPE],[PASSENGER_DESTINATION],[TRANSFER]
	--				24 fields will be returned to caller via returned recordset.
	-- @Status = 8 (Flight is Slave flight. its master flight is valid flight 
	--				(flight info can be found in the [FLIGHT_PLAN_SORTING] table). 
	--              And its master flight allocation has been created 
	--				(has allocation recoreds in the table [FLIGHT_PLAN_ALLOC]). 
	--				[AIRLINE],[FLIGHT_NUMBER],[MASTER_AIRLINE],[MASTER_FLIGHT_NUMBER],
	--              [SDO],[STO],[EDO],[ETO],[IDO],[ITO],[ADO],[ATO],
	--              [ERLY_OPEN_OFFSET],[ALLOC_OPEN_OFFSET],[ALLOC_OPEN_RELATED],
	--              [ALLOC_CLOSE_OFFSET],[ALLOC_CLOSE_RELATED],[RUSH_DURATION],
	--              [IS_MANUAL_CLOSED],[IS_CLOSED],[TRAVEL_CLASS],[RESOURCE],[SUBSYSTEM],
	--				[BAG_TYPE],[PASSENGER_DESTINATION],[TRANSFER]
	--				26 fields will be returned to caller via returned recordset.
AS 
BEGIN
	DECLARE	@No int;
	SET @No = (SELECT Count([LICENSE_PLATE]) FROM [PSEUDO_BSM] WHERE [LICENSE_PLATE] = @LicensePlate);

	IF @No = 0 
	BEGIN
		-- No BSM of specific LP# is in the [PSEUDO_BSM] table, it is No BSM (NBSM) item, 
		-- return @Status value 1
		SET @Status = 1;
		RETURN 0;
	END
	ELSE IF @No > 1
	BEGIN
		-- More than one BSMs of specific LP# are in the [PSEUDO_BSM] table, it is multiple
	    -- BSM (MBSM) item, return @Status value 2. 
		SET @Status = 2;
		RETURN 0;
	END
	
	IF @No = 1
	BEGIN
		-- Single flight was found for the LP, it is normal item. 
		DECLARE	@BSM_Airline [varchar](3);
		DECLARE	@BSM_FlightNumber [varchar](5);
		DECLARE	@BSM_SDO [datetime];
		DECLARE	@Airline [varchar](3);
		DECLARE	@FlightNumber [varchar](5);
		DECLARE	@SDO [datetime];
		DECLARE	@STO [varchar](4);
		DECLARE	@MasterAirline [varchar](3);
		DECLARE	@MasterFlightNumber [varchar](5);
		DECLARE	@FLT_SortDest1 [varchar](10);
		DECLARE	@FLT_SortDest2 [varchar](10);

		-- Use single query for following tasks:
		-- 1. Verify whether flight is unknow - If @Airline, @FlightNumber and @SDO values are NULL, it
		--    represents that no flight info is received and stored in the table [FLIGHT_PLAN_SORTING].
		--    Hence, the bag the Unknown Flight Bag.
		-- 2. Verify flight is master or slave flight - If @MasterAirline and @MasterFlightNumber is 
		--    not NULL, it represents the flight is slave flight;
		-- 3. Verify flight is High Risk flight or not;
		-- 4. Return flight exception data, sorting destination given by FIS.
		SELECT  @BSM_Airline = a.[AIRLINE], 
				@BSM_FlightNumber = a.[FLIGHT_NUMBER],
				@BSM_SDO = a.[SDO], 
				@Airline = b.[AIRLINE], --Here must assign with table [LICENSE_PLATE] value, not table [BAG_SORTING]
				@FlightNumber = b.[FLIGHT_NUMBER], --Here must assign with table [LICENSE_PLATE] value, not table [BAG_SORTING]
				@SDO = b.[SDO], --Here must assign with table [LICENSE_PLATE] value, not table [BAG_SORTING]
				@STO = b.[STO], --Here must assign with table [LICENSE_PLATE] value, not table [BAG_SORTING]
				@MasterAirline = b.[MASTER_AIRLINE], 
				@MasterFlightNumber = b.[MASTER_FLIGHT_NUMBER],
				@FLT_SortDest1 = b.[SORTING_DEST1],
				@FLT_SortDest2 = b.[SORTING_DEST2]		
		FROM [PSEUDO_BSM] AS a
			LEFT OUTER JOIN [FLIGHT_PLAN_SORTING] AS b 
				ON (a.[AIRLINE] = b.[AIRLINE]) AND 
					(a.[FLIGHT_NUMBER] = b.[FLIGHT_NUMBER]) AND
					(a.[SDO] = b.[SDO])
		WHERE (a.[LICENSE_PLATE] = @LicensePlate);

		-- 2. Verify whether flight is unknow - If @Airline, @FlightNumber and @SDO values are NULL, it
		--    represents that no flight info is received and stored in the table [FLIGHT_PLAN_SORTING].
		--    Hence, the bag the Unknown Flight Bag.
		IF (@Airline IS NULL) AND (@FlightNumber IS NULL) AND (@SDO IS NULL)
		BEGIN
			-- @Status = 3 (Single BSM of specific LP# is in the [PSEUDO_BSM] table, but the flight included 
			--				in the BSM can not be found in the [FLIGHT_PLAN_SORTING] table, it is Unknown flight.
			--				[AIRLINE],[FLIGHT_NUMBER],[SDO] three fields will be returned caller
			--				via returned recordset.
			SET @Status = 3;
			SELECT @BSM_Airline AS [AIRLINE], @BSM_FlightNumber AS [FLIGHT_NUMBER], @BSM_SDO AS [SDO];
			RETURN 0;
		END
		
		-- Verify flight is master or slave flight. If it is slave flight, then
		-- use its master flight for sortation.
		IF LEN(LTRIM(RTRIM(@MasterAirline)))=0 --Convert "No NULL" and space only string field value to NULL
			SET @MasterAirline=NULL;
		IF LEN(LTRIM(RTRIM(@MasterFlightNumber)))=0
			SET @MasterFlightNumber=NULL;

		IF NOT (@MasterAirline IS NULL) AND NOT (@MasterFlightNumber IS NULL) -- Flight is Slave Flight
		BEGIN
			SET @Airline = NULL;
			SET @FlightNumber = NULL;
			
			SELECT 	@Airline = [AIRLINE], 
					@FlightNumber = [FLIGHT_NUMBER], 
					@STO = [STO],
					@FLT_SortDest1 = [SORTING_DEST1],
					@FLT_SortDest2 = [SORTING_DEST2]		
			FROM [FLIGHT_PLAN_SORTING] 
			WHERE   ([AIRLINE] = @MasterAirline) AND 
					([FLIGHT_NUMBER] = @MasterFlightNumber) AND 
					([SDO] = @SDO);		
		
			IF (@Airline IS NULL) AND (@FlightNumber IS NULL)
			BEGIN
				-- @Status = 4 (Flight is Slave filght, but its master flight can not be found in the
				--				[FLIGHT_PLAN_SORTING] table, it is treated as Unknown flight.
				--				[AIRLINE],[FLIGHT_NUMBER],[SDO],[MASTER_AIRLINE],[MASTER_FLIGHT_NUMBER]
				--				five fields will be returned caller via returned recordset.
				SET @Status = 4;
				SELECT @BSM_Airline AS [AIRLINE], @BSM_FlightNumber AS [FLIGHT_NUMBER], 
						@BSM_SDO AS [SDO],@MasterAirline AS [MASTER_AIRLINE], 
						@MasterFlightNumber AS [MASTER_FLIGHT_NUMBER];
				RETURN 0;
			END
		END

		DECLARE	@No1 int;
		SET @No1 = (SELECT Count(*) FROM [FLIGHT_PLAN_ALLOC] 
						WHERE ([AIRLINE] = @Airline) AND ([FLIGHT_NUMBER] = @FlightNumber) AND
								([SDO] = @SDO));
		IF @No1 = 0 
		BEGIN
			IF (@MasterAirline IS NULL) AND (@MasterFlightNumber IS NULL) -- Flight is Master Flight
			BEGIN
				-- @Status = 5 (Flight is Master flight and its flight info can be found in the 
				--              [FLIGHT_PLAN_SORTING] table. But it has no any allocation was created 
				--				(no allocation recoreds in the table [FLIGHT_PLAN_ALLOC]). It is 
				--              treated as No Allocation Flight.
				--				[AIRLINE],[FLIGHT_NUMBER],[SDO],[STO] four fields will be returned caller
				--				via returned recordset.
				SET @Status = 5;
				SELECT @Airline AS [AIRLINE], @FlightNumber AS [FLIGHT_NUMBER], @SDO AS [SDO], @STO AS [STO];
				RETURN 0;
			END
			ELSE -- Flight is Slave Flight
			BEGIN  
				-- @Status = 6 (Flight is Slave flight, its master flight is valid flight (flight 
				--				info can be found in the [FLIGHT_PLAN_SORTING] table). But it has 
				--				no any allocation was created (no allocation recoreds in the table 
				--				[FLIGHT_PLAN_ALLOC]). It is treated as No Allocation Flight.
				--				[AIRLINE],[FLIGHT_NUMBER],[SDO],[STO], [MASTER_AIRLINE],[MASTER_FLIGHT_NUMBER]
				--				six fields will be returned caller via returned recordset.
				SET @Status = 6;
				SELECT @BSM_Airline AS [AIRLINE], @BSM_FlightNumber AS [FLIGHT_NUMBER], 
						@BSM_SDO AS [SDO], @STO AS [STO], @MasterAirline AS [MASTER_AIRLINE], 
						@MasterFlightNumber AS [MASTER_FLIGHT_NUMBER];
				RETURN 0;
			END			
		END
		ELSE -- @No1 > 0 
		BEGIN
			DECLARE	@EarlyOpenOffset [varchar](5);
			SELECT @EarlyOpenOffset=[SYS_VALUE] FROM [SYS_CONFIG] WHERE ([SYS_KEY] = 'ERLY_OPEN_OFFSET');

			-- If flight has allocations were created, then continue followings.
			IF (@MasterAirline IS NULL) AND (@MasterFlightNumber IS NULL) -- Flight is Master Flight
			BEGIN
				-- @Status = 7 (Flight is Master flight. Its flight info can be found in the 
				--              [FLIGHT_PLAN_SORTING] table. And its allocation has been created 
				--				(has allocation recoreds in the table [FLIGHT_PLAN_ALLOC]). 
				--				[AIRLINE],[FLIGHT_NUMBER],[SDO],[STO],[EDO],[ETO],[IDO],[ITO],
				--              [ADO],[ATO],[ALLOC_OPEN_OFFSET],[ALLOC_OPEN_RELATED],
				--              [ERLY_OPEN_OFFSET],[RUSH_DURATION],
				--              [ALLOC_CLOSE_OFFSET],[ALLOC_CLOSE_RELATED],[RUSH_DURATION],
				--              [IS_MANUAL_CLOSED],[IS_CLOSED],[TRAVEL_CLASS],[RESOURCE],[SUBSYSTEM]
				--				[BAG_TYPE],[PASSENGER_DESTINATION],[TRANSFER]
				--				24 fields will be returned to caller via returned recordset.
				SET @Status = 7;

				SELECT  a.[AIRLINE], a.[FLIGHT_NUMBER], 
						a.[SDO], a.[STO], a.[EDO], a.[ETO], a.[IDO], a.[ITO], a.[ADO], a.[ATO],	
						@EarlyOpenOffset AS [ERLY_OPEN_OFFSET], 				
						a.[ALLOC_OPEN_OFFSET], a.[ALLOC_OPEN_RELATED], 
						a.[ALLOC_CLOSE_OFFSET], a.[ALLOC_CLOSE_RELATED], 
						a.[RUSH_DURATION], a.[IS_MANUAL_CLOSE], a.[IS_CLOSED], a.[TRAVEL_CLASS], 
						b.[TTS_ID] AS [RESOURCE], b.[SORTER] AS [SUBSYSTEM],
						a.[BAG_TYPE], a.[FLIGHT_DESTINATION], a.[TRANSFER]
					FROM [FLIGHT_PLAN_ALLOC] AS a
						LEFT OUTER JOIN [CHUTE_MAPPING] AS b ON (a.[RESOURCE] = b.[DESTINATION])
					WHERE (a.[AIRLINE] = @Airline) AND (a.[FLIGHT_NUMBER] = @FlightNumber) AND 
						(a.[SDO] = @SDO) AND b.[SORTER] = @Sorter ORDER BY TIME_STAMP;
				RETURN 0;
			END
			ELSE
			BEGIN
				-- @Status = 8 (Flight is Slave flight. its master flight is valid flight 
				--				(flight info can be found in the [FLIGHT_PLAN_SORTING] table). 
				--              And its master flight allocation has been created 
				--				(has allocation recoreds in the table [FLIGHT_PLAN_ALLOC]). 
				--				[AIRLINE],[FLIGHT_NUMBER],[MASTER_AIRLINE],[MASTER_FLIGHT_NUMBER],
				--              [SDO],[STO],[EDO],[ETO],[IDO],[ITO],[ADO],[ATO],
				--              [ERLY_OPEN_OFFSET],[ALLOC_OPEN_OFFSET],[ALLOC_OPEN_RELATED],
				--              [ALLOC_CLOSE_OFFSET],[ALLOC_CLOSE_RELATED],[RUSH_DURATION],
				--              [IS_MANUAL_CLOSED],[IS_CLOSED],[TRAVEL_CLASS],[RESOURCE],[SUBSYSTEM]
				--				[BAG_TYPE],[PASSENGER_DESTINATION],[TRANSFER]
				--				26 fields will be returned to caller via returned recordset.
				SET @Status = 8;

				SELECT  @BSM_Airline AS [AIRLINE], @BSM_FlightNumber AS [FLIGHT_NUMBER], 
						@MasterAirline AS [MASTER_AIRLINE], @MasterFlightNumber AS [MASTER_FLIGHT_NUMBER],
						@BSM_SDO AS [SDO], a.[STO], a.[EDO], a.[ETO], a.[IDO], a.[ITO], a.[ADO], a.[ATO],						 
						@EarlyOpenOffset AS [ERLY_OPEN_OFFSET], 
						a.[ALLOC_OPEN_OFFSET], a.[ALLOC_OPEN_RELATED], 
						a.[ALLOC_CLOSE_OFFSET], a.[ALLOC_CLOSE_RELATED], 
						a.[RUSH_DURATION], a.[IS_MANUAL_CLOSE], a.[IS_CLOSED], a.[TRAVEL_CLASS], 
						b.[TTS_ID] AS [RESOURCE], b.[SORTER] AS [SUBSYSTEM],
						a.[BAG_TYPE], a.[FLIGHT_DESTINATION], a.[TRANSFER]
					FROM [FLIGHT_PLAN_ALLOC] AS a
						LEFT OUTER JOIN [CHUTE_MAPPING] AS b ON (a.[RESOURCE] = b.[DESTINATION])
					WHERE (a.[AIRLINE] = @Airline) AND (a.[FLIGHT_NUMBER] = @FlightNumber) AND 
						(a.[SDO] = @SDO) AND b.[SORTER] = @Sorter ORDER BY TIME_STAMP;
					
				RETURN 0;
			END
		END
	END
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SAC_GETFLIGHTALLOCOFLP]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_SAC_GETFLIGHTALLOCOFLP]
	@LicensePlate [varchar](10),	
	@Sorter [varchar] (10),	
	@BSM_TravelClass [varchar](1) OUTPUT,
	@BSM_Exception [varchar](10) OUTPUT,
	@FLT_HighRisk [varchar](1) OUTPUT,
	@FLT_Exception [varchar](10) OUTPUT,
	@Status [int] = 0 OUTPUT
	-- @Status = 1 (No BSM of specific LP# is in the [BAG_SORTING] table, it is No BSM (NBSM) item)
	-- @Status = 2 (More than one BSMs of specific LP# are in the [BAG_SORTING] table, it is multiple
	--              BSM (MBSM) item)
	-- @Status = 3 (Single BSM of specific LP# is in the [BAG_SORTING] table, but the flight included 
	--				in the BSM can not be found in the [FLIGHT_PLAN_SORTING] table, it is Unknown flight.
	--				[AIRLINE],[FLIGHT_NUMBER],[SDO] three fields will be returned caller
	--				via returned recordset.
	-- @Status = 4 (Flight is Slave filght, but its master flight info can not be found in the
	--				[FLIGHT_PLAN_SORTING] table, it is treated as Unknown flight.
	--				[AIRLINE],[FLIGHT_NUMBER],[SDO],[MASTER_AIRLINE],[MASTER_FLIGHT_NUMBER]
	--				five fields will be returned caller via returned recordset.
	-- @Status = 5 (Flight is Master flight and its flight info can be found in the 
	--              [FLIGHT_PLAN_SORTING] table. But it has no any allocation was created 
	--				(no allocation recoreds in the table [FLIGHT_PLAN_ALLOC]). It is treated 
	--              as No Allocation Flight.
	--				[AIRLINE],[FLIGHT_NUMBER],[SDO],[STO] four fields will be returned caller
	--				via returned recordset.
	-- @Status = 6 (Flight is Slave flight, its master flight is valid flight (flight 
	--				info can be found in the [FLIGHT_PLAN_SORTING] table). But it has 
	--				no any allocation was created (no allocation recoreds in the table 
	--				[FLIGHT_PLAN_ALLOC]). It is treated as No Allocation Flight.
	--				[AIRLINE],[FLIGHT_NUMBER],[SDO],[STO], [MASTER_AIRLINE],[MASTER_FLIGHT_NUMBER]
	--				six fields will be returned caller via returned recordset.
	-- @Status = 7 (Flight is Master flight. Its flight info can be found in the 
	--              [FLIGHT_PLAN_SORTING] table. And its allocation has been created 
	--				(has allocation recoreds in the table [FLIGHT_PLAN_ALLOC]). 
	--				[AIRLINE],[FLIGHT_NUMBER],[SDO],[STO],[EDO],[ETO],[IDO],[ITO],
	--              [ADO],[ATO],[ALLOC_OPEN_OFFSET],[ALLOC_OPEN_RELATED],[ERLY_OPEN_OFFSET],
	--              [ALLOC_CLOSE_OFFSET],[ALLOC_CLOSE_RELATED],[RUSH_DURATION],
	--              [IS_MANUAL_CLOSED],[IS_CLOSED],[TRAVEL_CLASS],[RESOURCE],[SUBSYSTEM],
	--				[BAG_TYPE],[PASSENGER_DESTINATION],[TRANSFER]
	--				24 fields will be returned to caller via returned recordset.
	-- @Status = 8 (Flight is Slave flight. its master flight is valid flight 
	--				(flight info can be found in the [FLIGHT_PLAN_SORTING] table). 
	--              And its master flight allocation has been created 
	--				(has allocation recoreds in the table [FLIGHT_PLAN_ALLOC]). 
	--				[AIRLINE],[FLIGHT_NUMBER],[MASTER_AIRLINE],[MASTER_FLIGHT_NUMBER],
	--              [SDO],[STO],[EDO],[ETO],[IDO],[ITO],[ADO],[ATO],
	--              [ERLY_OPEN_OFFSET],[ALLOC_OPEN_OFFSET],[ALLOC_OPEN_RELATED],
	--              [ALLOC_CLOSE_OFFSET],[ALLOC_CLOSE_RELATED],[RUSH_DURATION],
	--              [IS_MANUAL_CLOSED],[IS_CLOSED],[TRAVEL_CLASS],[RESOURCE],[SUBSYSTEM],
	--				[BAG_TYPE],[PASSENGER_DESTINATION],[TRANSFER]
	--				26 fields will be returned to caller via returned recordset.
AS 
BEGIN
	DECLARE	@No int;
	SET @No = (SELECT Count([LICENSE_PLATE]) FROM [BAG_SORTING] WHERE [LICENSE_PLATE] = @LicensePlate);

	IF @No = 0 
	BEGIN
		-- No BSM of specific LP# is in the [BAG_SORTING] table, it is No BSM (NBSM) item, 
		-- return @Status value 1
		SET @Status = 1;
		RETURN 0;
	END
	ELSE IF @No > 1
	BEGIN
		-- More than one BSMs of specific LP# are in the [BAG_SORTING] table, it is multiple
	    -- BSM (MBSM) item, return @Status value 2. 
		SET @Status = 2;
		RETURN 0;
	END
	
	IF @No = 1
	BEGIN
		-- Single flight was found for the LP, it is normal item. 
		DECLARE	@BSM_Airline [varchar](3);
		DECLARE	@BSM_FlightNumber [varchar](5);
		DECLARE	@BSM_SDO [datetime];
		DECLARE	@Airline [varchar](3);
		DECLARE	@FlightNumber [varchar](5);
		DECLARE	@SDO [datetime];
		DECLARE	@STO [varchar](4);
		DECLARE	@MasterAirline [varchar](3);
		DECLARE	@MasterFlightNumber [varchar](5);
		DECLARE	@FLT_SortDest1 [varchar](10);
		DECLARE	@FLT_SortDest2 [varchar](10);

		-- Use single query for following tasks:
		-- 1. Return [TRAVEL_CLASS], [BAG_EXCEPTION] data from [BAG_SORTING] table;
		-- 2. Verify whether flight is unknow - If @Airline, @FlightNumber and @SDO values are NULL, it
		--    represents that no flight info is received and stored in the table [FLIGHT_PLAN_SORTING].
		--    Hence, the bag the Unknown Flight Bag.
		-- 3. Verify flight is master or slave flight - If @MasterAirline and @MasterFlightNumber is 
		--    not NULL, it represents the flight is slave flight;
		-- 4. Verify flight is High Risk flight or not;
		-- 5. Return flight exception data, sorting destination given by FIS.
		SELECT  @BSM_TravelClass = a.[TRAVEL_CLASS],
				@BSM_Exception = a.[BAG_EXCEPTION], 
				@BSM_Airline = a.[AIRLINE], 
				@BSM_FlightNumber = a.[FLIGHT_NUMBER],
				@BSM_SDO = a.[SDO], 
				@Airline = b.[AIRLINE], --Here must assign with table [LICENSE_PLATE] value, not table [BAG_SORTING]
				@FlightNumber = b.[FLIGHT_NUMBER], --Here must assign with table [LICENSE_PLATE] value, not table [BAG_SORTING]
				@SDO = b.[SDO], --Here must assign with table [LICENSE_PLATE] value, not table [BAG_SORTING]
				@STO = b.[STO], --Here must assign with table [LICENSE_PLATE] value, not table [BAG_SORTING]
				@MasterAirline = b.[MASTER_AIRLINE], 
				@MasterFlightNumber = b.[MASTER_FLIGHT_NUMBER],
				@FLT_HighRisk = b.[HIGH_RISK],
				@FLT_Exception = b.[FI_EXCEPTION],
				@FLT_SortDest1 = b.[SORTING_DEST1],
				@FLT_SortDest2 = b.[SORTING_DEST2]		
		FROM [BAG_SORTING] AS a
			LEFT OUTER JOIN [FLIGHT_PLAN_SORTING] AS b 
				ON (a.[AIRLINE] = b.[AIRLINE]) AND 
					(a.[FLIGHT_NUMBER] = b.[FLIGHT_NUMBER]) AND
					(a.[SDO] = b.[SDO])
		WHERE (a.[LICENSE_PLATE] = @LicensePlate);

		-- 2. Verify whether flight is unknow - If @Airline, @FlightNumber and @SDO values are NULL, it
		--    represents that no flight info is received and stored in the table [FLIGHT_PLAN_SORTING].
		--    Hence, the bag the Unknown Flight Bag.
		IF (@Airline IS NULL) AND (@FlightNumber IS NULL) AND (@SDO IS NULL)
		BEGIN
			-- @Status = 3 (Single BSM of specific LP# is in the [BAG_SORTING] table, but the flight included 
			--				in the BSM can not be found in the [FLIGHT_PLAN_SORTING] table, it is Unknown flight.
			--				[AIRLINE],[FLIGHT_NUMBER],[SDO] three fields will be returned caller
			--				via returned recordset.
			SET @Status = 3;
			SELECT @BSM_Airline AS [AIRLINE], @BSM_FlightNumber AS [FLIGHT_NUMBER], @BSM_SDO AS [SDO];
			RETURN 0;
		END
		
		-- Verify flight is master or slave flight. If it is slave flight, then
		-- use its master flight for sortation.
		IF LEN(LTRIM(RTRIM(@MasterAirline)))=0 --Convert "No NULL" and space only string field value to NULL
			SET @MasterAirline=NULL;
		IF LEN(LTRIM(RTRIM(@MasterFlightNumber)))=0
			SET @MasterFlightNumber=NULL;

		IF NOT (@MasterAirline IS NULL) AND NOT (@MasterFlightNumber IS NULL) -- Flight is Slave Flight
		BEGIN
			SET @Airline = NULL;
			SET @FlightNumber = NULL;
			
			SELECT 	@Airline = [AIRLINE], 
					@FlightNumber = [FLIGHT_NUMBER], 
					@STO = [STO],
					@FLT_HighRisk = [HIGH_RISK],
					@FLT_Exception = [FI_EXCEPTION],
					@FLT_SortDest1 = [SORTING_DEST1],
					@FLT_SortDest2 = [SORTING_DEST2]		
			FROM [FLIGHT_PLAN_SORTING] 
			WHERE   ([AIRLINE] = @MasterAirline) AND 
					([FLIGHT_NUMBER] = @MasterFlightNumber) AND 
					([SDO] = @SDO);		
		
			IF (@Airline IS NULL) AND (@FlightNumber IS NULL)
			BEGIN
				-- @Status = 4 (Flight is Slave filght, but its master flight can not be found in the
				--				[FLIGHT_PLAN_SORTING] table, it is treated as Unknown flight.
				--				[AIRLINE],[FLIGHT_NUMBER],[SDO],[MASTER_AIRLINE],[MASTER_FLIGHT_NUMBER]
				--				five fields will be returned caller via returned recordset.
				SET @Status = 4;
				SELECT @BSM_Airline AS [AIRLINE], @BSM_FlightNumber AS [FLIGHT_NUMBER], 
						@BSM_SDO AS [SDO],@MasterAirline AS [MASTER_AIRLINE], 
						@MasterFlightNumber AS [MASTER_FLIGHT_NUMBER];
				RETURN 0;
			END
		END

		DECLARE	@No1 int;
		SET @No1 = (SELECT Count(*) FROM [FLIGHT_PLAN_ALLOC] 
						WHERE ([AIRLINE] = @Airline) AND ([FLIGHT_NUMBER] = @FlightNumber) AND
								([SDO] = @SDO));
		IF @No1 = 0 
		BEGIN
			IF (@MasterAirline IS NULL) AND (@MasterFlightNumber IS NULL) -- Flight is Master Flight
			BEGIN
				-- @Status = 5 (Flight is Master flight and its flight info can be found in the 
				--              [FLIGHT_PLAN_SORTING] table. But it has no any allocation was created 
				--				(no allocation recoreds in the table [FLIGHT_PLAN_ALLOC]). It is 
				--              treated as No Allocation Flight.
				--				[AIRLINE],[FLIGHT_NUMBER],[SDO],[STO] four fields will be returned caller
				--				via returned recordset.
				SET @Status = 5;
				SELECT @Airline AS [AIRLINE], @FlightNumber AS [FLIGHT_NUMBER], @SDO AS [SDO], @STO AS [STO];
				RETURN 0;
			END
			ELSE -- Flight is Slave Flight
			BEGIN  
				-- @Status = 6 (Flight is Slave flight, its master flight is valid flight (flight 
				--				info can be found in the [FLIGHT_PLAN_SORTING] table). But it has 
				--				no any allocation was created (no allocation recoreds in the table 
				--				[FLIGHT_PLAN_ALLOC]). It is treated as No Allocation Flight.
				--				[AIRLINE],[FLIGHT_NUMBER],[SDO],[STO], [MASTER_AIRLINE],[MASTER_FLIGHT_NUMBER]
				--				six fields will be returned caller via returned recordset.
				SET @Status = 6;
				SELECT @BSM_Airline AS [AIRLINE], @BSM_FlightNumber AS [FLIGHT_NUMBER], 
						@BSM_SDO AS [SDO], @STO AS [STO], @MasterAirline AS [MASTER_AIRLINE], 
						@MasterFlightNumber AS [MASTER_FLIGHT_NUMBER];
				RETURN 0;
			END			
		END
		ELSE -- @No1 > 0 
		BEGIN
			DECLARE	@EarlyOpenOffset [varchar](5);
			SELECT @EarlyOpenOffset=[SYS_VALUE] FROM [SYS_CONFIG] WHERE ([SYS_KEY] = 'ERLY_OPEN_OFFSET');

			-- If flight has allocations were created, then continue followings.
			IF (@MasterAirline IS NULL) AND (@MasterFlightNumber IS NULL) -- Flight is Master Flight
			BEGIN
				-- @Status = 7 (Flight is Master flight. Its flight info can be found in the 
				--              [FLIGHT_PLAN_SORTING] table. And its allocation has been created 
				--				(has allocation recoreds in the table [FLIGHT_PLAN_ALLOC]). 
				--				[AIRLINE],[FLIGHT_NUMBER],[SDO],[STO],[EDO],[ETO],[IDO],[ITO],
				--              [ADO],[ATO],[ALLOC_OPEN_OFFSET],[ALLOC_OPEN_RELATED],
				--              [ERLY_OPEN_OFFSET],[RUSH_DURATION],
				--              [ALLOC_CLOSE_OFFSET],[ALLOC_CLOSE_RELATED],[RUSH_DURATION],
				--              [IS_MANUAL_CLOSED],[IS_CLOSED],[TRAVEL_CLASS],[RESOURCE],[SUBSYSTEM],
				--				[BAG_TYPE],[PASSENGER_DESTINATION],[TRANSFER],[IS_MANUAL_CLOSE]
				--				24 fields will be returned to caller via returned recordset.
				SET @Status = 7;

				SELECT  a.[AIRLINE], a.[FLIGHT_NUMBER], 
						a.[SDO], a.[STO], a.[EDO], a.[ETO], a.[IDO], a.[ITO], a.[ADO], a.[ATO],	
						@EarlyOpenOffset AS [ERLY_OPEN_OFFSET], 		
						a.[ALLOC_OPEN_OFFSET], a.[ALLOC_OPEN_RELATED], 
						a.[ALLOC_CLOSE_OFFSET], a.[ALLOC_CLOSE_RELATED], 
						a.[RUSH_DURATION], a.[IS_MANUAL_CLOSE], a.[IS_CLOSED], a.[TRAVEL_CLASS], 
						b.[TTS_ID] AS [RESOURCE], b.[SORTER] AS [SUBSYSTEM],
						a.[BAG_TYPE], a.[FLIGHT_DESTINATION], a.[TRANSFER]
					FROM [FLIGHT_PLAN_ALLOC] AS a
						LEFT OUTER JOIN [CHUTE_MAPPING] AS b ON (a.[RESOURCE] = b.[DESTINATION])
					WHERE (a.[AIRLINE] = @Airline) AND (a.[FLIGHT_NUMBER] = @FlightNumber) AND 
						(a.[SDO] = @SDO) AND b.[SORTER] = @Sorter ORDER BY TIME_STAMP;
				RETURN 0;
			END
			ELSE
			BEGIN
				-- @Status = 8 (Flight is Slave flight. its master flight is valid flight 
				--				(flight info can be found in the [FLIGHT_PLAN_SORTING] table). 
				--              And its master flight allocation has been created 
				--				(has allocation recoreds in the table [FLIGHT_PLAN_ALLOC]). 
				--				[AIRLINE],[FLIGHT_NUMBER],[MASTER_AIRLINE],[MASTER_FLIGHT_NUMBER],
				--              [SDO],[STO],[EDO],[ETO],[IDO],[ITO],[ADO],[ATO],
				--              [ERLY_OPEN_OFFSET],[ALLOC_OPEN_OFFSET],[ALLOC_OPEN_RELATED],
				--              [ALLOC_CLOSE_OFFSET],[ALLOC_CLOSE_RELATED],[RUSH_DURATION],
				--              [IS_MANUAL_CLOSED],[IS_CLOSED],[TRAVEL_CLASS],[RESOURCE],[SUBSYSTEM],
				--				[BAG_TYPE],[PASSENGER_DESTINATION],[TRANSFER]
				--				26 fields will be returned to caller via returned recordset.
				SET @Status = 8;

				SELECT  @BSM_Airline AS [AIRLINE], @BSM_FlightNumber AS [FLIGHT_NUMBER], 
						@MasterAirline AS [MASTER_AIRLINE], @MasterFlightNumber AS [MASTER_FLIGHT_NUMBER],
						@BSM_SDO AS [SDO], a.[STO], a.[EDO], a.[ETO], a.[IDO], a.[ITO], a.[ADO], a.[ATO],						 
						@EarlyOpenOffset AS [ERLY_OPEN_OFFSET], 
						a.[ALLOC_OPEN_OFFSET], a.[ALLOC_OPEN_RELATED], 
						a.[ALLOC_CLOSE_OFFSET], a.[ALLOC_CLOSE_RELATED], 
						a.[RUSH_DURATION], a.[IS_MANUAL_CLOSE], a.[IS_CLOSED], a.[TRAVEL_CLASS], 
						b.[TTS_ID] AS [RESOURCE], b.[SORTER] AS [SUBSYSTEM],
						a.[BAG_TYPE], a.[FLIGHT_DESTINATION], a.[TRANSFER]
					FROM [FLIGHT_PLAN_ALLOC] AS a
						LEFT OUTER JOIN [CHUTE_MAPPING] AS b ON (a.[RESOURCE] = b.[DESTINATION])
					WHERE (a.[AIRLINE] = @Airline) AND (a.[FLIGHT_NUMBER] = @FlightNumber) AND 
						(a.[SDO] = @SDO) AND b.[SORTER] = @Sorter ORDER BY TIME_STAMP;
					
				RETURN 0;
			END
		END
	END
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SAC_GETFALLBACKTAGDISCHARGE]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_SAC_GETFALLBACKTAGDISCHARGE]
	@ID [varchar](2),
	@Subsystem [varchar] (10)
AS 
BEGIN
	SELECT 
		b.TTS_ID AS DESTINATION, b.[SORTER] AS SUBSYSTEM
	FROM 
		[FALLBACK_MAPPING] AS a
		LEFT OUTER JOIN [CHUTE_MAPPING] AS b
		ON (a.[DESTINATION] = b.[DESTINATION])
	WHERE a.[ID] = @ID AND b.[SORTER] = @Subsystem
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SAC_GETBAGINFORMATION]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_SAC_GETBAGINFORMATION]
	@LicensePlate [varchar](10),
	@Wildcard [varchar](3),
	@BagType [varchar](10) OUTPUT,
	@PasssengerDestination [varchar](5) OUTPUT,
	@PassengerTravelClass [varchar](1) OUTPUT,
	@OnwardTransfer [varchar](3) OUTPUT
AS 
BEGIN
	DECLARE @OnwardAirline1 [varchar](3)
	DECLARE @OnwardFlight1 [varchar](5)
	DECLARE @OnwardSDO1 [datetime]
	DECLARE @Yes [varchar] (3) = 'YES'
	DECLARE @No [varchar] (3) = 'NO'

	SELECT @BagType=BAG_EXCEPTION, @PasssengerDestination=DESTINATION, @OnwardAirline1=ONWARD_AIRLINE1, 
		@OnwardFlight1=ONWARD_FLIGHT_NUMBER1, @OnwardSDO1=ONWARD_SDO1, @PassengerTravelClass=TRAVEL_CLASS 
		FROM dbo.BAG_SORTING WHERE LICENSE_PLATE = @LicensePlate

	IF (@OnwardAirline1 IS NOT NULL AND @OnwardFlight1 IS NOT NULL AND @OnwardSDO1 IS NOT NULL) OR
		(@OnwardAirline1 != '' AND @OnwardFlight1 != '' AND @OnwardSDO1 != '')
	BEGIN
		SET @OnwardTransfer = @Yes;
	END
	ELSE
	BEGIN
		SET @OnwardTransfer = @No;
	END

	IF @BagType IS NULL OR LTRIM(@BagType) = ''
	BEGIN
		SET @BagType = @Wildcard;
	END

	IF @PasssengerDestination IS NULL OR LTRIM(@PasssengerDestination) = ''
	BEGIN
		SET @PasssengerDestination = @Wildcard;
	END

	IF @PassengerTravelClass IS NULL OR LTRIM(@PassengerTravelClass) = ''
	BEGIN
		SET @PassengerTravelClass = @Wildcard;
	END

	IF @OnwardTransfer IS NULL OR LTRIM(@OnwardTransfer) = ''
	BEGIN
		SET @OnwardTransfer = @Wildcard;
	END
END	



-- ****** Object:  StoredProcedure [dbo].[stp_SAC_GETAIRLINERUSH]    Script Date: 12/08/2008 13:18:36 ******
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[stp_SAC_GETAIRLINERUSH]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_SAC_GETAIRLINERUSH]
	@AirlineCode [varchar](4),
	@Sorter [varchar](10),
	@IsUseInMES bit
AS 
BEGIN
	IF @IsUseInMES = 0
	BEGIN
		SELECT b.[TTS_ID] AS [DESTINATION], b.[SORTER] AS [SUBSYSTEM] 
			FROM AIRLINES AS a LEFT OUTER JOIN 
			[CHUTE_MAPPING] AS b ON (a.[RUSH] = b.[DESTINATION])
			WHERE a.TICKETING_CODE = @AirlineCode AND b.[SORTER] = @Sorter;		
	END
	ELSE
	BEGIN
		SELECT b.[TTS_ID] AS [DESTINATION], b.[SORTER] AS [SUBSYSTEM] 
			FROM AIRLINES AS a LEFT OUTER JOIN 
			[CHUTE_MAPPING] AS b ON (a.[RUSH] = b.[DESTINATION])
			WHERE a.CODE_IATA = @AirlineCode AND b.[SORTER] = @Sorter;	
	END
END



-- ****** Object:  StoredProcedure [dbo].[stp_SAC_GETSACTTSMESPRIORITY]    Script Date: 10/08/2007 13:18:36 ******
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[stp_SAC_GETAIRLINEALLOCATION]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_SAC_GETAIRLINEALLOCATION]
	@AirlineCode [varchar](4),
	@Sorter [varchar] (10)
AS 
BEGIN
	DECLARE @TEMPTABLE TABLE ([DESTINATION] VARCHAR(10), [SUBSYSTEM] VARCHAR(10), [PRIORITY] INT)
	DECLARE @COUNT INT
	DECLARE @COUNT1 INT
	SET @COUNT = (SELECT COUNT(a.[DESTINATION]) FROM [AIRLINES] AS a
					LEFT OUTER JOIN [DESTINATIONS] AS b ON (a.[DESTINATION] = b.[DESTINATION])
				WHERE a.[TICKETING_CODE] = @AirlineCode)
	SET @COUNT1 = (SELECT COUNT(a.[DESTINATION1]) FROM [AIRLINES] AS a
				LEFT OUTER JOIN [DESTINATIONS] AS b ON (a.[DESTINATION1] = b.[DESTINATION])
			WHERE a.[TICKETING_CODE] = @AirlineCode)
			
	IF @COUNT > 0
	BEGIN
		INSERT INTO @TEMPTABLE
		SELECT a.[DESTINATION], b.[SUBSYSTEM], 1
			FROM [AIRLINES] AS a
				LEFT OUTER JOIN [DESTINATIONS] AS b ON (a.[DESTINATION] = b.[DESTINATION])
			WHERE a.[TICKETING_CODE] = @AirlineCode
	END
	
	IF @COUNT1 > 0
	BEGIN
		INSERT INTO @TEMPTABLE
		SELECT a.[DESTINATION1],b.[SUBSYSTEM], 2
			FROM [AIRLINES] AS a
				LEFT OUTER JOIN [DESTINATIONS] AS b ON (a.[DESTINATION1] = b.[DESTINATION])
			WHERE a.[TICKETING_CODE] = @AirlineCode
	END
	
	SELECT b.[TTS_ID] AS [DESTINATION], b.[SORTER] AS [SUBSYSTEM] 
		FROM @TEMPTABLE AS a LEFT OUTER JOIN [CHUTE_MAPPING] AS b ON (a.[DESTINATION] = b.[DESTINATION])
		WHERE SORTER = @Sorter ORDER BY a.PRIORITY
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SAC_CUSTOMSSECURITYMEETCHECKING]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_SAC_CUSTOMSSECURITYMEETCHECKING] 
	@GID [varchar](10), 
	@Accept varchar(1),
	@IsMeet [bit] OUTPUT
AS
BEGIN
	DECLARE @CustomsResult varchar(1)

	SELECT @CustomsResult=CUSTOMS_RESULT FROM BAG_INFO WHERE GID = @GID;

	IF @CustomsResult = @Accept
	BEGIN
		SET @IsMeet = 1;
	END
	ELSE
	BEGIN
		SET @IsMeet = 0;
	END
END



-- ****** Object:  StoredProcedure [dbo].[stp_SAC_GETFOURDIGITSFALLBACKTAGDISCHARGE]    Script Date: 12/08/2008 13:18:36 ******
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[stp_SAC_CHUTEAVAILABLECHECK]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_SAC_CHUTEAVAILABLECHECK]
	@SubSystem varchar(10),
	@Destination varchar(20),
	@IsAvailable bit OUTPUT
AS
Begin
	--DECLARE @DesIsAvailable BIT
	SET @IsAvailable = (SELECT IS_AVAILABLE FROM dbo.CHUTE_MAPPING WHERE TTS_ID = @Destination AND SORTER = @SubSystem)	
End
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_UPDATE_ITEM_INHOUSE_BSM]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_UPDATE_ITEM_INHOUSE_BSM] 
	@INHOUSEBSM varchar(10), 
	@AIRLINE varchar(5), 
	@FLIGHT_NUMBER varchar(5), 
	@SDO datetime, 
	@DESCRIPTION varchar(20),
	@MES_STATION varchar(16),
	@SUBSYSTEM VARCHAR(10),
	@LOCATION VARCHAR(10)
AS
BEGIN
	DECLARE @NEW_INHOUSEBSM varchar(10)
	DECLARE @AIRLINE_CODE VARCHAR(5)
	
	SELECT @AIRLINE_CODE = TICKETING_CODE FROM AIRLINES WHERE CODE_IATA = @AIRLINE

	IF @AIRLINE_CODE = SUBSTRING(@INHOUSEBSM,2,3)
	BEGIN
		SET @NEW_INHOUSEBSM = @INHOUSEBSM
	END
	ELSE
	BEGIN
		SET @NEW_INHOUSEBSM = SUBSTRING(@INHOUSEBSM,1,1) + @AIRLINE_CODE + SUBSTRING(@INHOUSEBSM,5,LEN(@INHOUSEBSM)-4)
	END
		
	INSERT INTO MES_EVENT([TIME_STAMP], [GID], [LICENSE_PLATE], [SUBSYSTEM], 
		[LOCATION], [ACTION], [ACTION_DESC])
	VALUES(GETDATE(), @NEW_INHOUSEBSM, @NEW_INHOUSEBSM, @SUBSYSTEM, @LOCATION, 
		'UPDINHOUSE', 'UPD INHOUSE TAG')
		
	UPDATE PSEUDO_BSM SET [LICENSE_PLATE] = @NEW_INHOUSEBSM,
		[AIRLINE]=@AIRLINE, [FLIGHT_NUMBER]=@FLIGHT_NUMBER, 
			[SDO]=@SDO, [DESCRITION] =@DESCRIPTION, [CREATED_BY] =@MES_STATION
		WHERE [LICENSE_PLATE] = @INHOUSEBSM
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_UPDATE_BAG_INFO]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 16-Sep-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_UPDATE_BAG_INFO]
	@GID VARCHAR(10),
	@INDEX_NO VARCHAR(10),
	@LICENSE_PLATE VARCHAR(10),
	@CUR_LOCATION VARCHAR(10),
	@SUB_SYSTEM VARCHAR(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @lGID VARCHAR(10)
	DECLARE @lINDEX_NO VARCHAR(10)
	DECLARE @lLICENSE_PLATE VARCHAR(10)
	DECLARE @REASON_ID VARCHAR(2)
	DECLARE @REASON_DESC VARCHAR(50)

	SELECT @lGID = GID , @lINDEX_NO = INDEX_NO, @lLICENSE_PLATE = LICENSE_PLATE, @REASON_ID = SORT_REASON FROM BAG_INFO
	WHERE GID = @GID AND SORTED = 0 AND DISAPPEARED = 0

	IF ISNULL(@lGID, '-') = '-'
	BEGIN
		SELECT @lGID = @GID , @lINDEX_NO = @INDEX_NO, @lLICENSE_PLATE = @LICENSE_PLATE
		
		INSERT INTO BAG_INFO(TIME_STAMP, GID, LICENSE_PLATE, LAST_LOCATION, CREATED_BY, INDEX_NO)
		VALUES(GETDATE(), @GID, @LICENSE_PLATE, @CUR_LOCATION,@SUB_SYSTEM, @lINDEX_NO)
		
	END
	ELSE
	BEGIN
		UPDATE BAG_INFO SET LICENSE_PLATE = @LICENSE_PLATE, LAST_LOCATION = @CUR_LOCATION, CREATED_BY = @SUB_SYSTEM,
			TIME_STAMP = GETDATE(), INDEX_NO = ISNULL(@INDEX_NO, '')
		WHERE GID = @GID
	END

	SELECT @REASON_DESC = [DESCRIPTION] FROM SORTATION_REASON WHERE REASON = @REASON_ID

	SELECT @lGID, @lLICENSE_PLATE, @INDEX_NO, @REASON_ID, @REASON_DESC
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GET_FLIGHT]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 14-Sep-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GET_FLIGHT]
	@FLIGHT VARCHAR(10),
	@TTSID VARCHAR(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT DISTINCT A.FLIGHT, A.STD, A.FLIGHT_DESTINATION, A.SORT_DESTINATION, A.SORT_DESTINATION_DESC, A.SUBSYSTEM FROM
	(
		SELECT A.FLIGHT,A.STD, A.FLIGHT_DESTINATION, A.SORT_DESTINATION, A.SORT_DESTINATION_DESC, A.SUBSYSTEM FROM
		(SELECT RIGHT('   ' + A.[AIRLINE], 3) + RIGHT('    ' + A.[FLIGHT_NUMBER], 4) + COALESCE(' ' + S.[FLIGHT_NUMBER_SUFFIX],'') AS FLIGHT, 
			CASE WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) <> 00 THEN 
				DATEADD(HH,
					CASE WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) <> 00 THEN 
						CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) AS INT) 
					WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) <> 00 THEN
						CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) AS INT) END,
					A.SDO+dbo.RPT_GETFORMATTEDSTO(A.STO)) 
			WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) <> 00 THEN 
				DATEADD(MI,
					CASE WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) <> 00 THEN 
						CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) AS INT) 
					WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) <> 00 THEN
						CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) AS INT) END,
					A.SDO+dbo.RPT_GETFORMATTEDSTO(A.STO)) 
			END
			AS STD,
			COALESCE(S.DEST1 + ', ', '') + 
			COALESCE(S.DEST2 + ', ', '') + COALESCE(S.DEST3 + ', ', '') + COALESCE(S.DEST4 + ', ', '') + COALESCE(S.DEST5 + ', ', '') + 
			COALESCE(S.FINAL_DEST, '') AS [FLIGHT_DESTINATION], 
			ISNULL(C.TTS_ID, '') AS [SORT_DESTINATION],
			ISNULL(C.DESTINATION, '') AS [SORT_DESTINATION_DESC],
			ISNULL(C.SORTER, '') AS [SUBSYSTEM]
		FROM FLIGHT_PLAN_SORTING S JOIN FLIGHT_PLAN_ALLOC A ON 
			S.AIRLINE = A.AIRLINE AND S.FLIGHT_NUMBER = A.FLIGHT_NUMBER AND S.SDO = A.SDO
		LEFT JOIN CHUTE_MAPPING C ON A.[RESOURCE] = C.DESTINATION
		) A
		WHERE REPLACE(A.FLIGHT, ' ', '') LIKE '%' + REPLACE(@FLIGHT, ' ', '') + '%' AND A.SUBSYSTEM = @TTSID
	) A
	ORDER BY A.STD, A.FLIGHT
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GET_DESTINATION]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 14-Sep-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GET_DESTINATION] 
	@DESTINATION VARCHAR(20),
	@TTS VARCHAR(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT TTS_ID, DESTINATION, SORTER FROM CHUTE_MAPPING WHERE DESTINATION LIKE '%' + @DESTINATION + '%'
	AND SORTER = @TTS
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GET_COMBO_DATA]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 05-Jul-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GET_COMBO_DATA]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT CODE_DATA = '' 
	UNION ALL
    SELECT CODE_IATA FROM AIRLINES;

	SELECT FLIGHT_NUMBER = ''
	UNION ALL
	SELECT DISTINCT FLIGHT_NUMBER FROM FLIGHT_PLAN_ALLOC WHERE [TIME_STAMP] BETWEEN DATEADD(HH,-6,GETDATE()) 
			AND DATEADD(HH,24,GETDATE());

	SELECT SDO = ''
	UNION ALL
	SELECT DISTINCT SDO FROM FLIGHT_PLAN_ALLOC WHERE [TIME_STAMP] BETWEEN DATEADD(HH,-6,GETDATE()) 
			AND DATEADD(HH,24,GETDATE());
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GET_BAG_GID]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 30-Jun-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GET_BAG_GID]
	@LICENSE_PLATE VARCHAR(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @BAG_GID VARCHAR(10)
    
    SELECT @BAG_GID = GID FROM BAG_INFO WHERE ((LICENSE_PLATE1 = @LICENSE_PLATE) OR (LICENSE_PLATE2 = @LICENSE_PLATE))
    
    SELECT @BAG_GID
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GET_ALL_SETTING]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 14-Oct-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GET_ALL_SETTING]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	SELECT SYS_KEY, SYS_VALUE FROM SYS_CONFIG WHERE GROUP_NAME = 'MES_Sett' AND SYS_KEY LIKE 'MES_%'    
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GET_AIRLINES]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 14-Sep-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GET_AIRLINES]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT A.CODE_IATA, A.TICKETING_CODE 
	FROM AIRLINES A JOIN AIRLINE_CODE_SHORTCUTS S ON A.CODE_IATA = S.AIRLINE
	ORDER BY A.CODE_IATA
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GET_AIRLINE_CODE]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 25-Nov-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GET_AIRLINE_CODE] 
	@AIRLINE AS VARCHAR(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    SELECT DISTINCT TICKETING_CODE 
	FROM AIRLINES
	WHERE CODE_IATA = @AIRLINE
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GENERATEINHOUSEBSM]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 01-Jul-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GENERATEINHOUSEBSM]
	@FIRST_DIGIT VARCHAR(1),
	@AIRLINE VARCHAR(5),
	@FLIGHT_NUMBER VARCHAR(5),
	@SDO DATETIME,
	@DESCRIPTION VARCHAR(20),
	@MES_STATION VARCHAR(16),
	@NUMBER_RANGE VARCHAR(14),
	@SUBSYSTEM VARCHAR(10),
	@LOCATION VARCHAR(10),
	@TYPE VARCHAR(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @LAST_LICENSE_PLATE VARCHAR(10)
	DECLARE @LAST_NUMBER VARCHAR(6)
	DECLARE @GENERATED_LICENSE_PLATE VARCHAR(10)
	DECLARE @AIRLINE_CODE VARCHAR(5)
	DECLARE @START VARCHAR(6)
	DECLARE @END VARCHAR(6)

	SET @START = SUBSTRING(@NUMBER_RANGE,1, PATINDEX('%,%',@NUMBER_RANGE)-1)
	SET @END = SUBSTRING(@NUMBER_RANGE,PATINDEX('%,%',@NUMBER_RANGE)+1, LEN(@NUMBER_RANGE) - (PATINDEX('%,%',@NUMBER_RANGE)))

	SELECT @AIRLINE_CODE = TICKETING_CODE FROM AIRLINES WHERE CODE_IATA = @AIRLINE

	SELECT TOP 1 @LAST_LICENSE_PLATE = LICENSE_PLATE FROM PSEUDO_BSM WHERE CREATED_BY = @MES_STATION AND [TYPE] = @TYPE
	ORDER BY TIME_STAMP DESC

	IF LTRIM(RTRIM(@LAST_LICENSE_PLATE)) = ''
	BEGIN
		SET @LAST_LICENSE_PLATE = @FIRST_DIGIT + @AIRLINE_CODE + '000000'
	END

	SET @LAST_NUMBER = SUBSTRING(@LAST_LICENSE_PLATE, 5, 6)

	SET @LAST_NUMBER = CASE WHEN ISNULL(@LAST_NUMBER, '-') = '-' THEN @START
		WHEN CAST(@LAST_NUMBER AS INT) = @END THEN @START
		ELSE CAST(CAST(@LAST_NUMBER AS INT) + 1 AS VARCHAR(6)) END

	SET @GENERATED_LICENSE_PLATE = @FIRST_DIGIT + @AIRLINE_CODE + RIGHT('000000' + @LAST_NUMBER, 6)

	INSERT INTO PSEUDO_BSM(TIME_STAMP, LICENSE_PLATE, AIRLINE, FLIGHT_NUMBER, SDO, DESCRITION, [TYPE], CREATED_BY)
	VALUES(GETDATE(), @GENERATED_LICENSE_PLATE, @AIRLINE, @FLIGHT_NUMBER, @SDO, @DESCRIPTION, @TYPE, @MES_STATION)

	SELECT @GENERATED_LICENSE_PLATE
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GENERATE_FALLBACKTAG]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 18-Oct-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GENERATE_FALLBACKTAG]
	@AIRLINE VARCHAR(10),
	@DESTINATION VARCHAR(5)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @AIRPORT_LOCATIONCODE AS VARCHAR(4)
	DECLARE @TICKING_CODE AS VARCHAR(3)
	DECLARE @DESTINATION_CODE VARCHAR(2)

	SELECT @TICKING_CODE = TICKETING_CODE FROM AIRLINES WHERE CODE_IATA = @AIRLINE

	SELECT @AIRPORT_LOCATIONCODE = SYS_VALUE FROM SYS_CONFIG WHERE SYS_KEY = 'AIRPORT_LOCATION_CODE'
	SELECT @DESTINATION_CODE = ID FROM FALLBACK_MAPPING WHERE DESTINATION = @DESTINATION
	SELECT '1' + ISNULL(@TICKING_CODE, '000') + @AIRPORT_LOCATIONCODE + @DESTINATION_CODE AS [FALLBACK_TAG]
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_CLEARLOCALDATA]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_CLEARLOCALDATA]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DELETE FROM SYS_CONFIG
	DELETE FROM FUNCTION_ALLOC_GANTT
	DELETE FROM FUNCTION_ALLOC_LIST
	DELETE FROM FUNCTION_TYPES
	DELETE FROM SORTATION_REASON
	DELETE FROM AIRLINES
	DELETE FROM DESTINATIONS
	DELETE FROM BAG_INFO
	DELETE FROM BAG_SORTING
	DELETE FROM CHUTE_MAPPING
	DELETE FROM FALLBACK_MAPPING
	DELETE FROM FOUR_DIGITS_FALLBACK_MAPPING
	DELETE FROM ROUTING_TABLE
	DELETE FROM SPECIAL_SECURITY_TAG_DESTINATION_MAPPING
	DELETE FROM TTS_MES_PRIORITY
	DELETE FROM FALLBACK_TAG_INFO
	DELETE FROM FLIGHT_PLAN_ALLOC
	DELETE FROM FLIGHT_PLAN_SORTING
	DELETE FROM PSEUDO_BSM

END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_CHECK_BAG_REOCCURENCE]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 15-Oct-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_CHECK_BAG_REOCCURENCE]
	@GID VARCHAR(10),
	@LICENSE_PLATE VARCHAR(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @ITEM_COUNT INT
	DECLARE @BAG_REOCCURENCE_LIMIT INT
	
	SELECT @BAG_REOCCURENCE_LIMIT = CAST(SYS_VALUE AS INT) FROM SYS_CONFIG WHERE SYS_KEY = 'MES_BAG_REOCCURENCE'
	SELECT @ITEM_COUNT = COUNT(*) FROM ITEM_READY WHERE LICENSE_PLATE = @LICENSE_PLATE

	IF @ITEM_COUNT > @BAG_REOCCURENCE_LIMIT
	BEGIN
		UPDATE MDS_BHS_ALARMS SET ALARM_STATUS = 1 WHERE ALARM_TYPE = 'MESREOCCUR'
	END
	
	SELECT @ITEM_COUNT
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GET_RUSH_LOCATION]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 07-Jul-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GET_RUSH_LOCATION]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    SELECT G.[RESOURCE], G.[IS_CLOSED], T.[IS_ENABLED]
	FROM FUNCTION_ALLOC_GANTT G JOIN FUNCTION_TYPES T ON G.FUNCTION_TYPE = T.[TYPE]
	WHERE G.FUNCTION_TYPE = 'RUSH'
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GET_REASON]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 16-Sep-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GET_REASON]
	@REASON_ID varchar(5)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    SELECT [DESCRIPTION] FROM SORTATION_REASON WHERE REASON = @REASON_ID
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GET_PROBLEM_LOCATION]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 07-Jul-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GET_PROBLEM_LOCATION]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    SELECT G.[RESOURCE], G.[IS_CLOSED], T.[IS_ENABLED]
	FROM FUNCTION_ALLOC_GANTT G JOIN FUNCTION_TYPES T ON G.FUNCTION_TYPE = T.[TYPE]
	WHERE G.FUNCTION_TYPE = 'PROB'
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GET_INHOUSE_BSM]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 01-Jul-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GET_INHOUSE_BSM]
	@AIRLINE VARCHAR(5),
	@FLIGHT_NUMBER VARCHAR(5),
	@SDO DATETIME,
	@MES_STATION VARCHAR(16)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF @SDO='01-JAN-1900'
	BEGIN
		SELECT [INHOUSEBSM] = [LICENSE_PLATE], [AIRLINE], [FLIGHT_NUMBER], [SDO], [DESCRITION]
		FROM PSEUDO_BSM WHERE [CREATED_BY] = @MES_STATION AND [AIRLINE] LIKE '%' + @AIRLINE + '%'
		AND [FLIGHT_NUMBER] LIKE '%' + @FLIGHT_NUMBER + '%' AND [TYPE] = 'INHOUSE'
		ORDER BY [INHOUSEBSM]
	END
	ELSE
	BEGIN
		SELECT [INHOUSEBSM] = [LICENSE_PLATE], [AIRLINE], [FLIGHT_NUMBER], [SDO], [DESCRITION]
		FROM PSEUDO_BSM WHERE [CREATED_BY] = @MES_STATION AND [AIRLINE] LIKE '%' + @AIRLINE + '%'
		AND [FLIGHT_NUMBER] LIKE '%' + @FLIGHT_NUMBER + '%' AND SDO = @SDO AND [TYPE] = 'INHOUSE'
		ORDER BY [INHOUSEBSM]
	END
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GET_IATA_TAG_LIST]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 02-Jul-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GET_IATA_TAG_LIST]
	@AIRLINE VARCHAR(5),
	@FLIGHT_NUMBER VARCHAR(5),
	@SDO DATETIME
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF @SDO='01-jAN-1900'
	BEGIN
		SELECT [LICENSE_PLATE], [AIRLINE], [FLIGHT_NUMBER], [SDO] FROM BAG_SORTING
		WHERE [AIRLINE] LIKE '%' + @AIRLINE + '%' AND [FLIGHT_NUMBER] LIKE '%' + @FLIGHT_NUMBER + '%'
		ORDER BY [LICENSE_PLATE]
	END
	ELSE
	BEGIN
		SELECT [LICENSE_PLATE], [AIRLINE], [FLIGHT_NUMBER], [SDO] FROM BAG_SORTING
		WHERE [AIRLINE] LIKE '%' + @AIRLINE + '%' AND [FLIGHT_NUMBER] LIKE '%' + @FLIGHT_NUMBER + '%'
		AND SDO = @SDO
		ORDER BY [LICENSE_PLATE]
	END
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GET_HBS_RESULTS]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 08-Nov-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GET_HBS_RESULTS] 
	@LICENSE_PLATE varchar(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @HBS_RESULT VARCHAR(30)
	DECLARE @CUSTOM_RESULT VARCHAR(1)
	DECLARE @HBS_MIN_LEVEL VARCHAR(10)

	SELECT @CUSTOM_RESULT = RESULT_TYPE
	FROM ITEM_CUSTOMS_SCREENED WHERE LICENSE_PLATE = @LICENSE_PLATE

	SELECT @HBS_RESULT = COALESCE(@HBS_RESULT + ',', '') + SCREEN_LEVEL + RESULT_TYPE
	FROM ITEM_SCREENED WHERE LICENSE_PLATE = @LICENSE_PLATE
	
	SELECT CUSTOM_RESULT=@CUSTOM_RESULT, HBS_RESULT = @HBS_RESULT
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_REMOVELOCALINSERTEDDATA]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 28-Jun-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_REMOVELOCALINSERTEDDATA]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DELETE FROM ITEM_READY;
	DELETE FROM ITEM_REMOVED;
	DELETE FROM ITEM_ENCODED;
	DELETE FROM MES_EVENT;
	DELETE FROM ITEM_INHOUSE_BSM;
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_ITEM_ENCODED]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_ITEM_ENCODED]
	@TIME_STAMP datetime, 
	@GID varchar(10), 
	@LICENSE_PLATE varchar(10), 
	@SUBSYSTEM varchar(10), 
	@LOCATION varchar(20), 
	@DESTINATION varchar(20), 
	@ENCODED_TYPE varchar(2), 
	@MES_STATION varchar(16),
	@SORT_REASON VARCHAR(2),
	@INDEX_NO VARCHAR(10)
AS
BEGIN
	INSERT INTO ITEM_ENCODED(TIME_STAMP, GID, LICENSE_PLATE, SUBSYSTEM, LOCATION, 
		DESTINATION, ENCODED_TYPE, SORT_REASON, INDEX_NO)VALUES(@TIME_STAMP, @GID, 
			@LICENSE_PLATE, @SUBSYSTEM, @LOCATION, @DESTINATION, @ENCODED_TYPE, @SORT_REASON, @INDEX_NO)

	UPDATE BAG_INFO SET ENCODED_TYPE = @ENCODED_TYPE WHERE GID = @GID AND SORTED = 0 AND DISAPPEARED = 0
	
	IF @ENCODED_TYPE = '04'
	BEGIN
		UPDATE MDS_BHS_ALARMS SET ALARM_STATUS = 1 WHERE ALARM_TAG = 'MESPROB' AND EQUIPMENT_ID = @MES_STATION
	END
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GETLOCALINSERTEDDATA]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		aLBERT sUN
-- Create date: 28-jUN-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GETLOCALINSERTEDDATA]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT [TIME_STAMP], [GID], [LICENSE_PLATE], [SUBSYSTEM], [LOCATION], [INDEX_NO] FROM ITEM_READY;
	SELECT [TIME_STAMP], [GID], [LICENSE_PLATE], [SUBSYSTEM], [LOCATION] FROM ITEM_REMOVED;
	SELECT [TIME_STAMP], [GID], [LICENSE_PLATE], [SUBSYSTEM], [LOCATION], [DESTINATION], [ENCODED_TYPE], [SORT_REASON], [INDEX_NO] FROM ITEM_ENCODED;
	SELECT [TIME_STAMP], [GID], [LICENSE_PLATE], [SUBSYSTEM], [LOCATION], [ACTION], [ACTION_DESC], [MES_STATION] FROM MES_EVENT
	SELECT [INHOUSEBSM], [FIRST_DIGIT], [AIRLINE], [FLIGHT_NUMBER], [SDO], [DESCRIPTION], [GENERATED_NUMBER] FROM ITEM_INHOUSE_BSM
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_HBS_POLICY_MANAGEMENT]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_HBS_POLICY_MANAGEMENT]
	@HBS_POLICY_MANAGEMENT HBS_POLICY_MANAGEMENT_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON
	DELETE FROM HBS_POLICY_MANAGEMENT
	
	INSERT INTO HBS_POLICY_MANAGEMENT([ID], [HBS_TAG], [ENABLED], [TYPE])
	SELECT T.[ID], T.[HBS_TAG], T.[ENABLED], T.[TYPE] FROM @HBS_POLICY_MANAGEMENT T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GETLASTENCODING]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 25-Jun-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GETLASTENCODING]
	@MESSTATION varchar(16)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    SELECT TOP 1 E.LICENSE_PLATE AS LastEncoded, '' AS Reason FROM ITEM_ENCODED E 
		WHERE LOCATION = @MESSTATION
		ORDER BY TIME_STAMP DESC
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_GETFLIGHTLIST]    Script Date: 12/09/2010 15:30:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 24-Jun-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_GETFLIGHTLIST]
	@Filter int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	IF @Filter > 0 
	BEGIN
		SELECT A.FLIGHT,A.STD, A.FLIGHT_DESTINATION, A.SORT_DESTINATION FROM
		(SELECT DISTINCT A.[AIRLINE] + ' ' + A.[FLIGHT_NUMBER] AS FLIGHT, 
			CASE WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) <> 00 THEN 
				DATEADD(HH,
					CASE WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) <> 00 THEN 
						CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) AS INT) 
					WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) <> 00 THEN
						CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) AS INT) END,
					A.SDO+dbo.RPT_GETFORMATTEDSTO(A.STO)) 
			WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) <> 00 THEN 
				DATEADD(MI,
					CASE WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) <> 00 THEN 
						CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) AS INT) 
					WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) <> 00 THEN
						CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) AS INT) END,
					A.SDO+dbo.RPT_GETFORMATTEDSTO(A.STO)) 
			END
			 AS STD,
			COALESCE(S.DEST1 + ', ', '') + 
			COALESCE(S.DEST2 + ', ', '') + COALESCE(S.DEST3 + ', ', '') + COALESCE(S.DEST4 + ', ', '') + COALESCE(S.DEST5 + ', ', '') + 
			COALESCE(S.FINAL_DEST, '') AS [FLIGHT_DESTINATION], 
			dbo.MES_GETALLOCATEDDESTINATION(A.AIRLINE, A.FLIGHT_NUMBER, A.SDO, A.STO) AS [SORT_DESTINATION]
		FROM FLIGHT_PLAN_SORTING S JOIN FLIGHT_PLAN_ALLOC A ON 
			S.AIRLINE = A.AIRLINE AND S.FLIGHT_NUMBER = A.FLIGHT_NUMBER AND S.SDO = A.SDO	
		) A
		WHERE A.STD BETWEEN DATEADD(HH,-1, GETDATE()) AND DATEADD(HH, @Filter, GETDATE())
		ORDER BY A.STD, A.FLIGHT
	END
	ELSE
	BEGIN
		SELECT DISTINCT FLIGHT, STD, FLIGHT_DESTINATION, SORT_DESTINATION FROM
		(
		SELECT A.FLIGHT,A.STD, A.FLIGHT_DESTINATION, A.SORT_DESTINATION FROM
		(SELECT DISTINCT A.[AIRLINE] + ' ' + A.[FLIGHT_NUMBER] AS FLIGHT, 
			CASE WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) <> 00 THEN 
				DATEADD(HH,
					CASE WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) <> 00 THEN 
						CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) AS INT) 
					WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) <> 00 THEN
						CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) AS INT) END,
					A.SDO+dbo.RPT_GETFORMATTEDSTO(A.STO)) 
			WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) <> 00 THEN 
				DATEADD(MI,
					CASE WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) <> 00 THEN 
						CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) AS INT) 
					WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) <> 00 THEN
						CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) AS INT) END,
					A.SDO+dbo.RPT_GETFORMATTEDSTO(A.STO)) 
			END
			AS STD,
			COALESCE(S.DEST1 + ', ', '') + 
			COALESCE(S.DEST2 + ', ', '') + COALESCE(S.DEST3 + ', ', '') + COALESCE(S.DEST4 + ', ', '') + COALESCE(S.DEST5 + ', ', '') + 
			COALESCE(S.FINAL_DEST, '') AS [FLIGHT_DESTINATION], 
			dbo.MES_GETALLOCATEDDESTINATION(A.AIRLINE, A.FLIGHT_NUMBER, A.SDO, A.STO) AS [SORT_DESTINATION]
		FROM FLIGHT_PLAN_SORTING S JOIN FLIGHT_PLAN_ALLOC A ON 
			S.AIRLINE = A.AIRLINE AND S.FLIGHT_NUMBER = A.FLIGHT_NUMBER AND S.SDO = A.SDO	
		) A
		WHERE A.STD >= GETDATE()
		UNION ALL
		SELECT A.FLIGHT,A.STD, A.FLIGHT_DESTINATION, A.SORT_DESTINATION FROM
		(SELECT DISTINCT A.[AIRLINE] + ' ' + A.[FLIGHT_NUMBER] AS FLIGHT, 
			CASE WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) <> 00 THEN 
				DATEADD(HH,
					CASE WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) <> 00 THEN 
						CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) AS INT) 
					WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) <> 00 THEN
						CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) AS INT) END,
					A.SDO+dbo.RPT_GETFORMATTEDSTO(A.STO)) 
			WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) <> 00 THEN 
				DATEADD(MI,
					CASE WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) <> 00 THEN 
						CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 1, 2) AS INT) 
					WHEN SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) <> 00 THEN
						CAST(SUBSTRING(ALLOC_CLOSE_OFFSET, 3, 2) AS INT) END,
					A.SDO+dbo.RPT_GETFORMATTEDSTO(A.STO)) 
			END
			AS STD,
			COALESCE(S.DEST1 + ', ', '') + 
			COALESCE(S.DEST2 + ', ', '') + COALESCE(S.DEST3 + ', ', '') + COALESCE(S.DEST4 + ', ', '') + COALESCE(S.DEST5 + ', ', '') + 
			COALESCE(S.FINAL_DEST, '') AS [FLIGHT_DESTINATION], 
			dbo.MES_GETALLOCATEDDESTINATION(A.AIRLINE, A.FLIGHT_NUMBER, A.SDO, A.STO) AS [SORT_DESTINATION]
		FROM FLIGHT_PLAN_SORTING S JOIN FLIGHT_PLAN_ALLOC A ON 
			S.AIRLINE = A.AIRLINE AND S.FLIGHT_NUMBER = A.FLIGHT_NUMBER AND S.SDO = A.SDO	
		WHERE A.IS_MANUAL_CLOSE = 1 AND A.IS_CLOSED = 0
		) A
		) B
		ORDER BY B.STD, B.FLIGHT
	END
END
GO
/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_HBS_SCHEDULE]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_MES_INSERT_HBS_SCHEDULE]
	@HBS_SCHEDULE HBS_SCHEDULE_TABLETYPE READONLY
AS
BEGIN
	SET NOCOUNT ON
	DELETE FROM HBS_SCHEDULE
	
	INSERT INTO HBS_SCHEDULE([ID], [START_TIME], [END_TIME])
	SELECT T.[ID], T.[START_TIME], T.[END_TIME] FROM @HBS_SCHEDULE T
END
GO
/****** Object:  StoredProcedure [dbo].[stp_SAC_GETMINIMUMSECURITYLEVEL]    Script Date: 12/09/2010 15:30:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[stp_SAC_GETMINIMUMSECURITYLEVEL] 
	@LicensePlate [varchar](10), 
	@SecurityLevel varchar(1) OUTPUT
AS
BEGIN
	DECLARE @EnableCountry bit = 0
	DECLARE @EnableAirport bit = 0
	DECLARE @EnableAirline bit = 0
	DECLARE @EnableFlight bit = 0
	DECLARE @EnablePassenger bit = 0
	DECLARE @EnableXBSMElement bit = 0
	DECLARE @PermanentCount int
	DECLARE @ScheduleCount int
	DECLARE @Permanent varchar(10) = 'Permanent'
	DECLARE @Schedule varchar(10) = 'Schedule'
	DECLARE @DefaultHBSLevel varchar(40) = 'DEFAULT_HBS_LEVEL'

	------------------------------------------------------------------------------------------------------------------
	-- Step 1: To get all type enabled or not
	------------------------------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------------------------------
	-- Step 1.1: To get Country enabled or not
	------------------------------------------------------------------------------------------------------------------
	SELECT @PermanentCount=COUNT(*) FROM HBS_POLICY_MANAGEMENT WHERE ENABLED = 1 AND TYPE = @Permanent AND HBS_TAG = 'HBSTAG002';

	SELECT @ScheduleCount=COUNT(*) FROM HBS_SCHEDULE WHERE START_TIME <= GETDATE() AND END_TIME >= GETDATE() AND ID IN 
		(SELECT ID FROM HBS_POLICY_MANAGEMENT WHERE ENABLED = 1 AND TYPE = @Schedule AND HBS_TAG = 'HBSTAG002');

	IF @PermanentCount > 0 OR @ScheduleCount > 0
	BEGIN
		SET @EnableCountry = 1;
	END	



	------------------------------------------------------------------------------------------------------------------
	-- Step 1.2: To get Airport enabled or not
	------------------------------------------------------------------------------------------------------------------
	SELECT @PermanentCount=COUNT(*) FROM HBS_POLICY_MANAGEMENT WHERE ENABLED = 1 AND TYPE = @Permanent AND HBS_TAG = 'HBSTAG003';

	SELECT @ScheduleCount=COUNT(*) FROM HBS_SCHEDULE WHERE START_TIME <= GETDATE() AND END_TIME >= GETDATE() AND ID IN 
		(SELECT ID FROM HBS_POLICY_MANAGEMENT WHERE ENABLED = 1 AND TYPE = @Schedule AND HBS_TAG = 'HBSTAG003');

	IF @PermanentCount > 0 OR @ScheduleCount > 0
	BEGIN
		SET @EnableAirport = 1;
	END	



	------------------------------------------------------------------------------------------------------------------
	-- Step 1.3: To get Airline enabled or not
	------------------------------------------------------------------------------------------------------------------
	SELECT @PermanentCount=COUNT(*) FROM HBS_POLICY_MANAGEMENT WHERE ENABLED = 1 AND TYPE = @Permanent AND HBS_TAG = 'HBSTAG004';

	SELECT @ScheduleCount=COUNT(*) FROM HBS_SCHEDULE WHERE START_TIME <= GETDATE() AND END_TIME >= GETDATE() AND ID IN 
		(SELECT ID FROM HBS_POLICY_MANAGEMENT WHERE ENABLED = 1 AND TYPE = @Schedule AND HBS_TAG = 'HBSTAG004');

	IF @PermanentCount > 0 OR @ScheduleCount > 0
	BEGIN
		SET @EnableAirline = 1;
	END	



	------------------------------------------------------------------------------------------------------------------
	-- Step 1.4: To get Flight enabled or not
	------------------------------------------------------------------------------------------------------------------
	SELECT @PermanentCount=COUNT(*) FROM HBS_POLICY_MANAGEMENT WHERE ENABLED = 1 AND TYPE = @Permanent AND HBS_TAG = 'HBSTAG005';

	SELECT @ScheduleCount=COUNT(*) FROM HBS_SCHEDULE WHERE START_TIME <= GETDATE() AND END_TIME >= GETDATE() AND ID IN 
		(SELECT ID FROM HBS_POLICY_MANAGEMENT WHERE ENABLED = 1 AND TYPE = @Schedule AND HBS_TAG = 'HBSTAG005');

	IF @PermanentCount > 0 OR @ScheduleCount > 0
	BEGIN
		SET @EnableFlight = 1;
	END	



	------------------------------------------------------------------------------------------------------------------
	-- Step 1.5: To get Passenger enabled or not
	------------------------------------------------------------------------------------------------------------------
	SELECT @PermanentCount=COUNT(*) FROM HBS_POLICY_MANAGEMENT WHERE ENABLED = 1 AND TYPE = @Permanent AND HBS_TAG = 'HBSTAG006';

	SELECT @ScheduleCount=COUNT(*) FROM HBS_SCHEDULE WHERE START_TIME <= GETDATE() AND END_TIME >= GETDATE() AND ID IN 
		(SELECT ID FROM HBS_POLICY_MANAGEMENT WHERE ENABLED = 1 AND TYPE = @Schedule AND HBS_TAG = 'HBSTAG006');

	IF @PermanentCount > 0 OR @ScheduleCount > 0
	BEGIN
		SET @EnablePassenger = 1;
	END	



	------------------------------------------------------------------------------------------------------------------
	-- Step 1.6: To get .X BSM Element enabled or not
	------------------------------------------------------------------------------------------------------------------
	SELECT @PermanentCount=COUNT(*) FROM HBS_POLICY_MANAGEMENT WHERE ENABLED = 1 AND TYPE = @Permanent AND HBS_TAG = 'HBSTAG007';

	SELECT @ScheduleCount=COUNT(*) FROM HBS_SCHEDULE WHERE START_TIME <= GETDATE() AND END_TIME >= GETDATE() AND ID IN 
		(SELECT ID FROM HBS_POLICY_MANAGEMENT WHERE ENABLED = 1 AND TYPE = @Schedule AND HBS_TAG = 'HBSTAG007');

	IF @PermanentCount > 0 OR @ScheduleCount > 0
	BEGIN
		SET @EnableXBSMElement = 1;
	END	



	------------------------------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------------------------------
	--  Step 2: Go to each individual Minimum Security Level (Passenger Destination Country, Passenger Destination Aiport, 
	--			Airline, Flight, Passenger Name, and .X BSM Element) if there are enabled and get their security level, 
	--			take then higher security level.
	--			If all individual Minimum Security Level are disabled, the default security level will be used.
	------------------------------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------------------------------
	--  Step 2.1: Country & Airport
	------------------------------------------------------------------------------------------------------------------
	DECLARE @FlightDestination varchar(5)
	DECLARE @OnwardDestination1 varchar(5)
	DECLARE @OnwardDestination2 varchar(5)
	DECLARE @OnwardDestination3 varchar(5)
	DECLARE @OnwardDestination4 varchar(5)
	DECLARE @OnwardDestination5 varchar(5)
	DECLARE @FinalDestination varchar(5)
	DECLARE @Country varchar(50)
	DECLARE @MinimumSecurityLevel int = 0
	DECLARE @Level int 

	IF @EnableCountry = 1 OR @EnableAirport = 1
	BEGIN
		SELECT @FlightDestination=DESTINATION, @OnwardDestination1=ONWARD_AIRPORT_CODE1,  @OnwardDestination2=ONWARD_AIRPORT_CODE2,  
			@OnwardDestination3=ONWARD_AIRPORT_CODE3,  @OnwardDestination4=ONWARD_AIRPORT_CODE4,  @OnwardDestination5=ONWARD_AIRPORT_CODE5 
			FROM dbo.BAG_SORTING WHERE LICENSE_PLATE = @LicensePlate;

		IF @OnwardDestination1 IS NOT NULL OR @OnwardDestination1 != ''
		BEGIN
			IF @OnwardDestination2 IS NOT NULL OR @OnwardDestination2 != ''
			BEGIN
				IF @OnwardDestination3 IS NOT NULL OR @OnwardDestination3 != ''
				BEGIN
					IF @OnwardDestination4 IS NOT NULL OR @OnwardDestination4 != ''
					BEGIN
						IF @OnwardDestination5 IS NOT NULL OR @OnwardDestination5 != ''
						BEGIN
							SET @FinalDestination = @OnwardDestination5;					
						END
						ELSE
						BEGIN
							SET @FinalDestination = @OnwardDestination4;									
						END				
					END	
					ELSE
					BEGIN
						SET @FinalDestination = @OnwardDestination3;									
					END	
				END
				ELSE
				BEGIN
					SET @FinalDestination = @OnwardDestination2;									
				END						
			END	
			ELSE
			BEGIN
				SET @FinalDestination = @OnwardDestination1;									
			END			
		END
		ELSE
		BEGIN
			SET @FinalDestination = @FlightDestination;									
		END	

		
		IF @EnableCountry = 1
		BEGIN
			-- COUNTRY
			SELECT @Country=COUNTRY FROM AIRPORTS WHERE CODE_IATA = @FinalDestination;

			SELECT @Level = CAST(LEVEL AS int) FROM HBS_COUNTRY WHERE ID = @Country;
			
			IF @MinimumSecurityLevel < @Level
			BEGIN
				SET @MinimumSecurityLevel = @Level
			END
		END

		IF @EnableAirport = 1
		BEGIN
			-- AIRPROT
			SELECT @Level = CAST(LEVEL AS int) FROM HBS_AIRPORT WHERE ID = @FinalDestination;
			
			IF @MinimumSecurityLevel < @Level
			BEGIN
				SET @MinimumSecurityLevel = @Level
			END		
		END
	END



	------------------------------------------------------------------------------------------------------------------
	--  Step 2.2: Airline
	------------------------------------------------------------------------------------------------------------------
	IF @EnableAirline = 1
	BEGIN
		DECLARE @Airline varchar(3)

		SELECT  @Airline = AIRLINE FROM dbo.BAG_SORTING WHERE LICENSE_PLATE = @LicensePlate;

		SELECT @Level = CAST(LEVEL AS int) FROM HBS_AIRLINE WHERE ID = @Airline;
		
		IF @MinimumSecurityLevel < @Level
		BEGIN
			SET @MinimumSecurityLevel = @Level
		END		
	END



	------------------------------------------------------------------------------------------------------------------
	--  Step 2.3:  FLIGHT NO
	------------------------------------------------------------------------------------------------------------------
	IF @EnableFlight = 1
	BEGIN
		DECLARE @FlightNo varchar(10)

		SELECT @FlightNo = AIRLINE + FLIGHT_NUMBER FROM dbo.BAG_SORTING WHERE LICENSE_PLATE = @LicensePlate;

		SELECT @Level = CAST(LEVEL AS int) FROM HBS_FLIGHT WHERE ID = @FlightNo;
		
		IF @MinimumSecurityLevel < @Level
		BEGIN
			SET @MinimumSecurityLevel = @Level
		END	
	END



	------------------------------------------------------------------------------------------------------------------
	--  Step 2.4: PASSENGER NAME
	------------------------------------------------------------------------------------------------------------------
	IF @EnablePassenger = 1
	BEGIN
		DECLARE @Surname varchar(30)
		DECLARE @Given varchar(30)
		DECLARE @Others varchar(100)

		SELECT  @Surname=SURNAME, @Given=GIVEN_NAME, @Others=OTHERS_NAME
			FROM dbo.BAG_SORTING WHERE LICENSE_PLATE = @LicensePlate;

		SELECT @Level = CAST(LEVEL AS int) FROM HBS_PASSENGER WHERE SURNAME = @Surname AND GIVEN_NAME = @Given AND ADDITIONAL_GIVEN_NAME = @Others;

		IF @MinimumSecurityLevel < @Level
		BEGIN
			SET @MinimumSecurityLevel = @Level
		END
	END



	------------------------------------------------------------------------------------------------------------------
	--  Step 2.5: .X BSM Element
	------------------------------------------------------------------------------------------------------------------
	IF @EnableXBSMElement = 1
	BEGIN
		DECLARE @ScreeningInstruction varchar(3)
		DECLARE @ScreeningMethod varchar(5)

		SELECT  @ScreeningInstruction=SECURITY_SCREENING_INSTRUCTION, @ScreeningMethod=SECURITY_SCREENING_RESULT_METHOD
			FROM dbo.BAG_SORTING WHERE LICENSE_PLATE = @LicensePlate;
			
		IF @ScreeningInstruction = 'SEL'
		BEGIN
			SELECT @Level = CAST(LEVEL AS int) FROM HBS_X_BSM_ELEMENT WHERE ID = @ScreeningMethod;
		END
		ELSE IF @ScreeningInstruction = 'DEF' 
		BEGIN
			-- GET DEFAULT MINIMM SECURITY LEVEL
			SELECT @Level = CAST(SYS_VALUE AS int) FROM SYS_CONFIG WHERE SYS_KEY = @DefaultHBSLevel;
		END
		ELSE
		BEGIN
			SET @Level = 0;
		END

		IF @MinimumSecurityLevel < @Level
		BEGIN
			SET @MinimumSecurityLevel = @Level
		END
	END



	------------------------------------------------------------------------------------------------------------------
	--  Step 3: Get Default Security Level as all disabled.
	------------------------------------------------------------------------------------------------------------------
	IF @MinimumSecurityLevel = 0
	BEGIN
		SET @SecurityLevel = (SELECT SYS_VALUE FROM SYS_CONFIG WHERE SYS_KEY = @DefaultHBSLevel)
	END
	ELSE
	BEGIN
		SET @SecurityLevel = (CAST(@MinimumSecurityLevel AS varchar(1)))
	END
END
-- ****** Object:  StoredProcedure [dbo].[stp_SAC_MINIMUMHBSSECURITYLEVELMEETCHECKING]    Script Date: 10/08/2007 13:18:36 ******
SET ANSI_NULLS ON
GO

/****** Object:  StoredProcedure [dbo].[stp_MES_INSERT_MAKEUP_FLIGHT_TYPE_MAPPING]    Script Date: 01/19/2011 15:06:29 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[stp_MES_INSERT_MAKEUP_FLIGHT_TYPE_MAPPING]
	@MAKEUP_FLIGHT_TYPE_MAPPING MAKEUP_FLIGHT_TYPE_MAPPING_TABLETYPE READONLY
AS
BEGIN
	
	DELETE FROM MAKEUP_FLIGHT_TYPE_MAPPING
	
	INSERT INTO MAKEUP_FLIGHT_TYPE_MAPPING([ID], [RESOURCE], [FLIGHT_TYPE])
	SELECT T.[ID], T.[RESOURCE], T.[FLIGHT_TYPE] FROM @MAKEUP_FLIGHT_TYPE_MAPPING T 
END
GO

USE [BHS_LOCALMES]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[MES_GETALLOCATEDDESTINATION]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[MES_GETALLOCATEDDESTINATION]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[MES_GETTABLECHANGES]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[MES_GETTABLECHANGES]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RPT_GETFORMATTEDSTO]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[RPT_GETFORMATTEDSTO]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SAC_MINUTECONVERTERSIGN]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[SAC_MINUTECONVERTERSIGN]
GO

USE [BHS_LOCALMES]
GO
/****** Object:  UserDefinedFunction [dbo].[SAC_MINUTECONVERTERSIGN]    Script Date: 12/09/2010 15:43:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[SAC_MINUTECONVERTERSIGN](@OffsetValue varchar(5))
RETURNS int
AS
Begin
	Declare @TMinute int
	IF(LEN(@OffsetValue)=5)
	Begin
		Set @TMinute=(CONVERT(int,SUBSTRING(@OffsetValue,2,2))*60)+CONVERT(int,SUBSTRING(@OffsetValue,4,2))
		Set @TMinute = @TMinute * (-1)
	End
	ELSE
	Begin
		Set @TMinute= (CONVERT(int,SUBSTRING(@OffsetValue,1,2))*60)+CONVERT(int,SUBSTRING(@OffsetValue,3,2))
	End
	Return @TMinute
End
GO
/****** Object:  UserDefinedFunction [dbo].[RPT_GETFORMATTEDSTO]    Script Date: 12/09/2010 15:43:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[RPT_GETFORMATTEDSTO]
(
 @PARAMETER VARCHAR(4)
)
RETURNS VARCHAR(5)
AS
BEGIN
	-- Fill the table variable with the rows for your result set
	DECLARE @HOUR VARCHAR(2)
	DECLARE @SECOND VARCHAR(2)
	DECLARE @RESULT VARCHAR(5)
	
	SET @HOUR= SUBSTRING(@PARAMETER,1,2)
	
	SET @SECOND= SUBSTRING(@PARAMETER,3,2)
	
	SET @RESULT= @HOUR + ':' + @SECOND
	
	RETURN @RESULT
END
GO
/****** Object:  UserDefinedFunction [dbo].[MES_GETTABLECHANGES]    Script Date: 12/09/2010 15:43:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 21-Jun-2010
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[MES_GETTABLECHANGES]
(
	@StationName VARCHAR(20),
	@UpdateStatus int
)
RETURNS VARCHAR(200)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @StateCodes VARCHAR(200)
	SELECT @StateCodes = coalesce(@StateCodes + ',', '') + STATE_CODE 
		FROM CHANGE_MONITORING WHERE SAC_OWS = @StationName AND IS_CHANGED = @UpdateStatus

	-- Return the result of the function
	RETURN @StateCodes

END
GO
/****** Object:  UserDefinedFunction [dbo].[MES_GETALLOCATEDDESTINATION]    Script Date: 12/09/2010 15:43:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 30-Sep-2010
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [dbo].[MES_GETALLOCATEDDESTINATION]
(
	@AIRLINE VARCHAR(5),
	@FLIGHT_NUMBER VARCHAR(10),
	@SDO DATETIME,
	@STO VARCHAR(5)
)
RETURNS VARCHAR(MAX)
AS
BEGIN
	DECLARE @DESTINATION AS VARCHAR(MAX)

	SELECT @DESTINATION = COALESCE(@DESTINATION + ', ', '') + [RESOURCE]
	FROM FLIGHT_PLAN_ALLOC WHERE AIRLINE = @AIRLINE AND FLIGHT_NUMBER = @FLIGHT_NUMBER AND SDO = @SDO
	AND STO = @STO
	
	-- Return the result of the function
	RETURN @DESTINATION

END
GO

/****** Object:  StoredProcedure [dbo].[stp_MES_CHECK_NO_BSM]    Script Date: 12/29/2010 08:49:06 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_CHECK_NO_BSM]') AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Delete existing storeprocedure [stp_MES_CHECK_NO_BSM]...'
	DROP PROCEDURE [dbo].[stp_MES_CHECK_NO_BSM]
END
GO
PRINT 'INFO: Creating storeprocedure [stp_MES_CHECK_NO_BSM]...'
/****** Object:  StoredProcedure [dbo].[stp_MES_CHECK_NO_BSM]    Script Date: 12/29/2010 08:49:06 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 28-Dec-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_CHECK_NO_BSM]
	@GID VARCHAR(10),
	@STATUS VARCHAR(2),
	@TOTAL_LIMIT INT,
	@ALARM_TYPE VARCHAR(20),
	@EQUIPMENT_ID VARCHAR(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @CURRENT_TAG INT
	DECLARE @PREVIOUS_3 INT

	SELECT @CURRENT_TAG = COUNT(*) FROM BAG_INFO WHERE GID = @GID AND SORT_REASON = @STATUS

	SELECT @PREVIOUS_3 = COUNT(*) FROM
	(SELECT TOP 3 SORT_REASON FROM ITEM_ENCODED 
	ORDER BY TIME_STAMP DESC) 
	A WHERE A.SORT_REASON = @STATUS
	GROUP BY A.SORT_REASON

	IF @CURRENT_TAG+@PREVIOUS_3 >= @TOTAL_LIMIT
	BEGIN
		UPDATE MDS_BHS_ALARMS SET ALARM_STATUS = 1 WHERE ALARM_TYPE = @ALARM_TYPE AND EQUIPMENT_ID = @EQUIPMENT_ID
	END

	SELECT ALERT = CASE WHEN @CURRENT_TAG + @PREVIOUS_3 >= @TOTAL_LIMIT THEN 1 ELSE 0 END
END
GO

/****** Object:  StoredProcedure [dbo].[stp_MES_ALERT_ENCODING_DURATION]    Script Date: 12/29/2010 09:42:03 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[stp_MES_ALERT_ENCODING_DURATION]') AND type in (N'P', N'PC'))
BEGIN
	PRINT 'INFO: Delete existing storeprocedure [stp_MES_ALERT_ENCODING_DURATION]...'
	DROP PROCEDURE [dbo].[stp_MES_ALERT_ENCODING_DURATION]
END
GO
PRINT 'INFO: Creating storeprocedure [stp_MES_ALERT_ENCODING_DURATION]...'
/****** Object:  StoredProcedure [dbo].[stp_MES_ALERT_ENCODING_DURATION]    Script Date: 12/29/2010 09:42:03 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Albert Sun
-- Create date: 29-Dec-2010
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[stp_MES_ALERT_ENCODING_DURATION] 
	@ALARM_TYPE VARCHAR(20),
	@EQUIPMENT_ID VARCHAR(10)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    UPDATE MDS_BHS_ALARMS SET ALARM_STATUS = 1 WHERE ALARM_TYPE = @ALARM_TYPE AND EQUIPMENT_ID = @EQUIPMENT_ID
END

GO

PRINT 'INFO: .'
PRINT 'INFO: .'
PRINT 'INFO: .'
PRINT 'INFO: End of STEP 2.2'
GO